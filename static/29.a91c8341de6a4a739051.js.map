{"version":3,"sources":["webpack:///./components/color_input.tsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/index.js"],"names":["hexRegex","ColorInput","React","PureComponent","constructor","props","super","e","this","colorPicker","current","contains","target","setState","isOpened","state","colorInput","focus","newColorData","hex","onChange","handleChange","value","length","split","map","ch","index","join","event","startsWith","test","ensureLongColourValue","toUpperCase","setHex","key","togglePicker","setSelectionRange","createRef","color","componentWillMount","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","render","id","className","ref","type","onBlur","onKeyDown","onFocus","selectValue","onClick","style","backgroundColor","handleColorChange","disableAlpha","ColorChooser","Component","newColor","label","PropTypes","string","isRequired","node","func","messages","defineMessages","sidebarBg","t","defaultMessage","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","theme","newTheme","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","err","stringify","stopPropagation","textarea","refs","preventDefault","$","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","show","setTimeout","hide","componentDidMount","on","onCodeThemeChange","componentWillUnmount","off","Object","assign","image","UserAgent","slideToggle","sidebarElements","centerChannelElements","linkAndButtonElements","Constants","THEME_ELEMENTS","forEach","element","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","push","uiName","popoverContent","popoverStyle","width","alt","src","defaultValue","placement","overlay","group","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","role","display","toggleSidebarStyles","title","toggleCenterChannelStyles","toggleLinkAndButtonStyles","object","PremadeThemeChooser","shouldComponentUpdate","premadeThemes","allowedThemes","hasAllowedThemes","trim","k","THEMES","hasOwnProperty","indexOf","premadeTheme","extend","activeClass","replace","Utils","propTypes","arrayOf","defaultProps","connect","config","getConfig","AllowedThemes","ThemeSetting","async","teamId","applyToAllTeams","currentTeamId","isSaving","actions","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","scrollToTop","updateSection","themeChanged","field","getStateFromProps","serverError","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","section","selected","ReactDOM","findDOMNode","addClass","removeClass","UNSAFE_componentWillReceiveProps","nextProps","resetFields","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","updateType","displayCustom","custom","premade","themeUI","allowCustomThemes","inputs","name","checked","bind","allTeamsCheckbox","submitExtra","submit","submitTheme","disableEnterSubmit","saving","server_error","handleUpdateSection","describe","focused","shape","bool","getThemeCategory","makeGetCategory","getCurrentTeamId","getTheme","Preferences","CATEGORY_THEME","getMyTeamsCount","dispatch","bindActionCreators","UserSettingsTheme","TimezoneSuggestion","Suggestion","item","isSelection","timezone","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","toLowerCase","ManageTimezones","manualTimezoneInput","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","user","updatedUser","toString","updateMe","then","data","error","message","getBrowserTimezone","timezones","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","providers","setSwitchBoxRef","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","array","ManageLanguage","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","remove","ENTER","add","selectedOption","locale","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","options","keys","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","input","classNamePrefix","menuIsOpen","menuPortalTarget","body","styles","clearable","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","aria-labelledby","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","userId","timePreference","user_id","category","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","preferences","savePreferences","updateState","newState","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","handleOnChange","createSection","firstOption","secondOption","thirdOption","description","extraInfo","handleSubmit","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","activeSection","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","userTimezone","currentUserTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","defaultClientLocale","enableThemeSelection","data-dismiss","aria-label","closeModal","aria-hidden","collapseModal","getTimezones","currentUserId","getCurrentUserId","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","getUserCurrentTimezone","get","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","DesktopNotificationSettings","cancel","currentTarget","getAttribute","setParentState","activityRadio","soundSection","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","data-key","data-value","ALL","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","placeholder","localizeMessage","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktop","comments","enableEmail","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","email","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","username","splice","first_name","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","commentsSection","autoResponderSection","handleUpdateFirstNameKey","updateFirstNameKey","values","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","autoFocus","onCustomChange","concat","i","substring","commentsActive","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","activeTab","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","UserSettingsSidebar","closeUnusedDirectMessages","channelSwitcherOption","sidebarPreference","grouping","sorting","unreadsAtTop","favoriteAtTop","settings","close_unused_direct_messages","channel_switcher_section","setting","trackEvent","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","sectionName","showChannelOrganization","contents","updateSetting","renderAutoCloseDMLabel","Fragment","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","renderChannelSwitcherLabel","showUnusedOption","channelOrganizationSection","renderChannelOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getPreference","getSidebarPreferences","ExperimentalChannelOrganization","CloseUnusedDirectMessages","getCurrentUser","UserSettings"],"mappings":"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","file":"29.a91c8341de6a4a739051.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\nconst hexRegex = /^#([\\da-f]{3}|[\\da-f]{6})$/i;\n\ntype Props = {\n    id: string;\n    color: string;\n    onChange?: (hex: string) => void;\n}\n\ntype State = {\n    isOpened: boolean;\n    hex: string;\n}\n\nclass ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n        this.state = {\n            isOpened: false,\n            hex: this.props.color.toUpperCase(),\n        };\n    }\n\n    public componentWillMount() {\n        this.setHex();\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (this.props.color !== prevProps.color && this.ensureLongColourValue(this.state.hex) !== this.props.color) {\n            this.setHex();\n        }\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private setHex() {\n        this.setState({hex: this.props.color.toUpperCase()});\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    private ensureLongColourValue = (value: string) => {\n        if (value.length !== 4) {\n            return value;\n        }\n        return value.split('').map((ch, index) => {\n            if (index === 0) {\n                return ch;\n            }\n            return `${ch}${ch}`;\n        }).join('');\n    }\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let {value} = event.target;\n        if (!value.startsWith('#')) {\n            value = '#' + value;\n        }\n        if (!hexRegex.test(value)) {\n            return;\n        }\n        this.setState({hex: value});\n        const {onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(this.ensureLongColourValue(value));\n        }\n    };\n\n    private onBlur = () => {\n        const {hex} = this.state;\n        if (hex.length === 4) {\n            const value = this.ensureLongColourValue(hex);\n            const {onChange: handleChange} = this.props;\n            if (handleChange && value.length === 7) {\n                handleChange(value);\n                this.setState({hex: value.toUpperCase()});\n            }\n        } else {\n            this.setHex();\n        }\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    private selectValue = (event: React.FocusEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    public render() {\n        const {color, id} = this.props;\n        const {isOpened, hex} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={hex}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onKeyDown={this.onKeyDown}\n                    onFocus={this.selectValue}\n                />\n                <span\n                    id={`${id}-squareColorIcon`}\n                    className='input-group-addon color-pad'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        id={`${id}-squareColorIconValue`}\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color, id} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    id={id}\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.Component {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = $('.copy-theme-success');\n        copySuccess.show();\n\n        setTimeout(() => {\n            copySuccess.hide();\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='margin-top x2'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row margin-top x2'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    shouldComponentUpdate() {\n        return true;\n    }\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    shouldComponentUpdate() {\n        return true;\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nexport default class ManageLanguage extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name}\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='padding-top'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        lockTeammateNameDisplay: PropTypes.bool,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='margin-top x3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='margin-top x3'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the channel grouping and sorting sections options\n         */\n        showChannelOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         * The preferences to display channels in sidebar\n         */\n        sidebarPreference: PropTypes.shape({\n\n            /**\n             * Group channels by type or none\n             */\n            grouping: PropTypes.string.isRequired,\n\n            /**\n             * Sort channels by recency or alphabetical order\n             */\n            sorting: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /**\n         * Option for including unread channels at top\n         */\n        unreadsAtTop: PropTypes.string.isRequired,\n\n        /**\n         * Option for including favorite channels at top\n         */\n        favoriteAtTop: PropTypes.string.isRequired,\n\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary = (setting) => {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary('grouping');\n            this.trackSettingChangeIfNecessary('sorting');\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName) => {\n        const {showChannelOrganization} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(this.getStateFromProps());\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = () => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />\n        );\n\n        let atTopId = null;\n        let atTopDefaultMessage = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage}\n                />\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelOrganizationSection = () => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showChannelOrganization} = this.props;\n\n        const channelOrganizationSection = showChannelOrganization ? this.renderChannelOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div\n                            className='modal-back'\n                            onClick={this.props.collapseModal}\n                        >\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days'\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport DisplayTab from './display';\nimport NotificationsTab from './notifications';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        activeTab: PropTypes.string,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n    }\n\n    render() {\n        if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettings from './user_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n"],"sourceRoot":""}