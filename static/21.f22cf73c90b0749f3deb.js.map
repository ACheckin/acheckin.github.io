{"version":3,"sources":["webpack:///./actions/views/login.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js"],"names":["login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","LoginController","React","Component","constructor","props","super","this","state","sessionExpired","document","title","intl","formatMessage","id","defaultMessage","siteName","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","onClick","window","focus","then","closeNotification","catch","e","preventDefault","onDismissSessionExpired","location","newQuery","search","replace","browserHistory","pathname","hash","loginIdInput","current","value","setState","passwordInput","trim","toLowerCase","t","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","serverError","values","ldapUsername","ldapLoginFieldName","submit","token","loading","actions","push","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","team","addUserToTeamFromInvite","finishSignin","experimentalPrimaryTeam","redirectTo","LocalStorageStore","setWasLoggedIn","match","name","GlobalActions","target","brandImageError","enableCustomBrand","text","customBrandText","formattedText","TextFormatting","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","alt","src","onError","handleBrandImageError","style","messageHtmlToComponent","mentions","imagesMetadata","loginPlaceholders","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableLdap","enableSaml","extraParam","className","to","Constants","GET_TERMS_ERROR","TERMS_REJECTED","SIGNIN_CHANGE","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","samlEnabled","errorClass","key","onSubmit","preSubmit","margin","ref","onChange","handleLoginIdChange","placeholder","createLoginPlaceholder","spellCheck","autoCapitalize","autoFocus","type","handlePasswordChange","enableOpenServer","checkSignUpEnabled","href","getOAuthRoute","getUrl","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","createRef","shouldComponentUpdate","componentDidMount","configureTitle","currentUser","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","render","intlShape","isRequired","PropTypes","object","bool","string","initializing","shape","func","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","customDescriptionText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","LdapLoginFieldName","SamlLoginButtonText","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","bindActionCreators"],"mappings":"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","file":"21.f22cf73c90b0749f3deb.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {intlShape} from 'utils/react_intl';\nimport * as TextFormatting from 'utils/text_formatting';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications';\nimport {t} from 'utils/i18n.jsx';\n\n// import logoImage from 'images/logo.png';\n\n// import SiteNameAndDescription from 'components/common/site_name_and_description';\n// import AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\n// import BackButton from 'components/common/back_button';\n\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\n// import LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n\n        // customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n\n        this.loginIdInput = React.createRef();\n        this.passwordInput = React.createRef();\n    }\n\n    shouldComponentUpdate() {\n        return true;\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.passwordInput.current.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.'\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.loginIdInput.current) {\n            loginId = this.loginIdInput.current.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.passwordInput.current) {\n            password = this.passwordInput.current.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false, imagesMetadata: null})}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref={this.loginIdInput}\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref={this.passwordInput}\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password.'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        return (<LoadingScreen/>);\n\n        // const {\n        //     customDescriptionText,\n        //     siteName,\n        //     initializing,\n        // } = this.props;\n\n        // if (initializing) {\n        //     return (<LoadingScreen/>);\n        // }\n\n        // let content;\n        // let customContent;\n        // let customClass;\n        // let backButton;\n        // if (this.state.showMfa) {\n        //     content = (\n        //         <LoginMfa\n        //             loginId={this.state.loginId}\n        //             password={this.state.password}\n        //             submit={this.submit}\n        //         />\n        //     );\n        //     backButton = (<BackButton onClick={this.hideMfa}/>);\n        // } else {\n        //     content = this.createLoginOptions();\n        //     customContent = this.createCustomLogin();\n        //     if (customContent) {\n        //         customClass = 'branded';\n        //     }\n        // }\n\n        // return (\n        //     <div>\n        //         <AnnouncementBar/>\n        //         {backButton}\n        //         <div\n        //             id='login_section'\n        //             className='col-sm-12'\n        //         >\n        //             <div className={'signup-team__container ' + customClass}>\n        //                 <div className='signup__markdown'>\n        //                     {customContent}\n        //                 </div>\n        //                 <img\n        //                     alt={'signup team logo'}\n        //                     className='signup-team-logo'\n        //                     src={logoImage}\n        //                 />\n        //                 <div className='signup__content'>\n        //                     <SiteNameAndDescription\n        //                         customDescriptionText={customDescriptionText}\n        //                         siteName={siteName}\n        //                     />\n        //                     {content}\n        //                 </div>\n        //             </div>\n        //         </div>\n        //     </div>\n        // );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n"],"sourceRoot":""}