{"version":3,"sources":["webpack:///./actions/views/login.js","webpack:///./images/icon_WS.png","webpack:///./utils/notifications.tsx","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js"],"names":["login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","module","exports","requestedNotificationPermission","LoginController","React","Component","constructor","props","super","this","state","sessionExpired","document","title","intl","formatMessage","id","defaultMessage","siteName","closeSessionExpiredNotification","body","requireInteraction","silent","onClick","icon","icon50","UserAgent","iconWS","window","Error","Notification","requestPermission","permission","Promise","resolve","notification","tag","onclick","onerror","setTimeout","close","Constants","DEFAULT_NOTIFICATION_DURATION","showNotification","Utils","focus","then","closeNotification","catch","e","preventDefault","onDismissSessionExpired","location","newQuery","search","replace","browserHistory","pathname","hash","loginIdInput","current","value","setState","passwordInput","trim","toLowerCase","t","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","serverError","values","ldapUsername","ldapLoginFieldName","submit","token","loading","actions","push","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","team","addUserToTeamFromInvite","finishSignin","experimentalPrimaryTeam","redirectTo","LocalStorageStore","setWasLoggedIn","match","name","GlobalActions","target","brandImageError","enableCustomBrand","text","customBrandText","formattedText","TextFormatting","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","alt","src","onError","handleBrandImageError","style","messageHtmlToComponent","mentions","imagesMetadata","loginPlaceholders","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableLdap","enableSaml","extraParam","className","to","GET_TERMS_ERROR","TERMS_REJECTED","SIGNIN_CHANGE","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","samlEnabled","errorClass","key","onSubmit","preSubmit","margin","ref","onChange","handleLoginIdChange","placeholder","createLoginPlaceholder","spellCheck","autoCapitalize","autoFocus","type","handlePasswordChange","enableOpenServer","checkSignUpEnabled","href","getOAuthRoute","getUrl","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","createRef","shouldComponentUpdate","componentDidMount","configureTitle","currentUser","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","render","intlShape","isRequired","PropTypes","object","bool","string","initializing","shape","func","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","customDescriptionText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","LdapLoginFieldName","SamlLoginButtonText","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","bindActionCreators"],"mappings":"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","file":"16.fc059a231a2a37df54a4.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","module.exports = __webpack_public_path__ + \"files/a9513776bab8fe4b66ff654634be41b6.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserAgent from 'utils/user_agent';\nimport Constants from 'utils/constants';\nimport icon50 from 'images/icon50x50.png';\nimport iconWS from 'images/icon_WS.png';\n\nlet requestedNotificationPermission = false;\n\n// showNotification displays a platform notification with the configured parameters.\n//\n// If successful in showing a notification, it resolves with a callback to manually close the\n// notification. Notifications that do not require interaction will be closed automatically after\n// the Constants.DEFAULT_NOTIFICATION_DURATION. Not all platforms support all features, and may\n// choose different semantics for the notifications.\n\nexport interface ShowNotificationParams {\n    title: string;\n    body: string;\n    requireInteraction: boolean;\n    silent: boolean;\n    onClick?: (this: Notification, e: Event) => any | null;\n}\n\nexport async function showNotification(\n    {\n        title,\n        body,\n        requireInteraction,\n        silent,\n        onClick,\n    }: ShowNotificationParams = {\n        title: '',\n        body: '',\n        requireInteraction: false,\n        silent: false,\n    },\n) {\n    let icon = icon50;\n    if (UserAgent.isEdge()) {\n        icon = iconWS;\n    }\n\n    if (!('Notification' in window)) {\n        throw new Error('Notification not supported');\n    }\n\n    if (typeof Notification.requestPermission !== 'function') {\n        throw new Error('Notification.requestPermission not supported');\n    }\n\n    if (Notification.permission !== 'granted' && requestedNotificationPermission) {\n        throw new Error('Notifications already requested but not granted');\n    }\n\n    requestedNotificationPermission = true;\n\n    let permission = await Notification.requestPermission();\n    if (typeof permission === 'undefined') {\n        // Handle browsers that don't support the promise-based syntax.\n        permission = await new Promise((resolve) => {\n            Notification.requestPermission(resolve);\n        });\n    }\n\n    if (permission !== 'granted') {\n        throw new Error('Notifications not granted');\n    }\n\n    const notification = new Notification(title, {\n        body,\n        tag: body,\n        icon,\n        requireInteraction,\n        silent,\n    });\n\n    if (onClick) {\n        notification.onclick = onClick;\n    }\n\n    notification.onerror = () => {\n        throw new Error('Notification failed to show.');\n    };\n\n    // Mac desktop app notification dismissal is handled by the OS\n    if (!requireInteraction && !UserAgent.isMacApp()) {\n        setTimeout(() => {\n            notification.close();\n        }, Constants.DEFAULT_NOTIFICATION_DURATION);\n    }\n\n    return () => {\n        notification.close();\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {intlShape} from 'utils/react_intl';\nimport * as TextFormatting from 'utils/text_formatting';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications';\nimport {t} from 'utils/i18n.jsx';\n\n// import logoImage from 'images/logo.png';\n\n// import SiteNameAndDescription from 'components/common/site_name_and_description';\n// import AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\n// import BackButton from 'components/common/back_button';\n\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\n// import LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n\n        // customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n\n        this.loginIdInput = React.createRef();\n        this.passwordInput = React.createRef();\n    }\n\n    shouldComponentUpdate() {\n        return true;\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.passwordInput.current.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.'\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.loginIdInput.current) {\n            loginId = this.loginIdInput.current.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.passwordInput.current) {\n            password = this.passwordInput.current.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false, imagesMetadata: null})}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref={this.loginIdInput}\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref={this.passwordInput}\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password.'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        return (<LoadingScreen/>);\n\n        // const {\n        //     customDescriptionText,\n        //     siteName,\n        //     initializing,\n        // } = this.props;\n\n        // if (initializing) {\n        //     return (<LoadingScreen/>);\n        // }\n\n        // let content;\n        // let customContent;\n        // let customClass;\n        // let backButton;\n        // if (this.state.showMfa) {\n        //     content = (\n        //         <LoginMfa\n        //             loginId={this.state.loginId}\n        //             password={this.state.password}\n        //             submit={this.submit}\n        //         />\n        //     );\n        //     backButton = (<BackButton onClick={this.hideMfa}/>);\n        // } else {\n        //     content = this.createLoginOptions();\n        //     customContent = this.createCustomLogin();\n        //     if (customContent) {\n        //         customClass = 'branded';\n        //     }\n        // }\n\n        // return (\n        //     <div>\n        //         <AnnouncementBar/>\n        //         {backButton}\n        //         <div\n        //             id='login_section'\n        //             className='col-sm-12'\n        //         >\n        //             <div className={'signup-team__container ' + customClass}>\n        //                 <div className='signup__markdown'>\n        //                     {customContent}\n        //                 </div>\n        //                 <img\n        //                     alt={'signup team logo'}\n        //                     className='signup-team-logo'\n        //                     src={logoImage}\n        //                 />\n        //                 <div className='signup__content'>\n        //                     <SiteNameAndDescription\n        //                         customDescriptionText={customDescriptionText}\n        //                         siteName={siteName}\n        //                     />\n        //                     {content}\n        //                 </div>\n        //             </div>\n        //         </div>\n        //     </div>\n        // );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n"],"sourceRoot":""}