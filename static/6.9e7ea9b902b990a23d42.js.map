{"version":3,"sources":["webpack:///./components/formatted_markdown_message.jsx","webpack:///./components/overlay_trigger.tsx","webpack:///./utils/react_intl.ts","webpack:///./actions/global_actions.jsx","webpack:///./components/loading_screen.tsx","webpack:///./components/confirm_modal.jsx","webpack:///./actions/views/modals.js","webpack:///./actions/admin_actions.jsx","webpack:///./components/widgets/menu/menu_items/submenu_item.tsx","webpack:///./components/widgets/menu/menu_group.tsx","webpack:///./components/widgets/menu/menu_items/menu_item_action.tsx","webpack:///./components/widgets/menu/menu_items/menu_item_external_link.tsx","webpack:///./components/widgets/menu/menu_items/menu_item_link.tsx","webpack:///./components/widgets/menu/menu_items/menu_item_toggle_modal_redux.tsx","webpack:///./components/widgets/menu/menu.tsx","webpack:///./components/localized_input/localized_input.tsx","webpack:///./components/form_error.tsx","webpack:///./components/widgets/menu/menu_wrapper_animation.tsx","webpack:///./components/widgets/menu/menu_wrapper.tsx","webpack:///./components/widgets/badges/bot_badge.tsx","webpack:///./components/widgets/users/avatar.tsx","webpack:///./components/localized_icon.tsx","webpack:///./components/suggestion/provider.jsx","webpack:///./components/suggestion/suggestion.jsx","webpack:///./actions/views/channel.js","webpack:///./selectors/views/channel.js","webpack:///./actions/channel_actions.jsx","webpack:///./components/widgets/loading/loading_spinner.tsx","webpack:///./components/markdown/markdown.jsx","webpack:///./components/markdown/index.js","webpack:///./components/widgets/badges/guest_badge.tsx","webpack:///./components/save_button.tsx","webpack:///./components/widgets/loading/loading_wrapper.tsx","webpack:///./utils/file_utils.jsx","webpack:///./components/setting_item_max.jsx","webpack:///./components/widgets/icons/fa_warning_icon.tsx","webpack:///./plugins/pluggable/pluggable.jsx","webpack:///./plugins/pluggable/index.js","webpack:///./components/widgets/icons/globe_icon.jsx","webpack:///./components/widgets/icons/lock_icon.jsx","webpack:///./components/widgets/popover/index.tsx","webpack:///./components/profile_picture.tsx","webpack:///./actions/views/search.js","webpack:///./components/permissions_gates/system_permission_gate/system_permission_gate.jsx","webpack:///./components/permissions_gates/system_permission_gate/index.js","webpack:///./components/spinner_button.tsx","webpack:///./components/suggestion/suggestion_box.jsx","webpack:///./components/suggestion/suggestion_list.jsx","webpack:///./components/widgets/icons/archive_icon.jsx","webpack:///./actions/team_actions.jsx","webpack:///./components/widgets/icons/search_icon.jsx","webpack:///./selectors/views/modals.js","webpack:///./utils/license_utils.jsx","webpack:///./components/announcement_bar/announcement_bar.jsx","webpack:///./components/announcement_bar/text_dismissable_bar.jsx","webpack:///./components/announcement_bar/configuration_bar/configuration_bar.jsx","webpack:///./components/announcement_bar/configuration_bar/index.js","webpack:///./components/announcement_bar/version_bar/version_bar.jsx","webpack:///./components/announcement_bar/version_bar/index.js","webpack:///./components/announcement_bar/announcement_bar_controller.jsx","webpack:///./components/announcement_bar/index.js","webpack:///./selectors/views/settings.js","webpack:///./actions/views/settings.js","webpack:///./components/setting_item_min/setting_item_min.jsx","webpack:///./components/setting_item_min/index.js","webpack:///./components/permissions_gates/team_permission_gate/team_permission_gate.jsx","webpack:///./components/permissions_gates/team_permission_gate/index.js","webpack:///./selectors/views/admin.js","webpack:///./components/widgets/team_icon/team_icon.tsx","webpack:///./components/multiselect/multiselect_list.tsx","webpack:///./components/multiselect/multiselect.tsx","webpack:///./actions/views/lhs.js","webpack:///./actions/websocket_actions.jsx","webpack:///./stores/browser_store.jsx","webpack:///./components/widgets/menu/menu_items/menu_item.tsx","webpack:///./components/size_aware_image.jsx","webpack:///./components/widgets/icons/fa_success_icon.jsx","webpack:///./components/widgets/icons/status_away_avatar_icon.jsx","webpack:///./components/widgets/icons/status_away_icon.jsx","webpack:///./components/widgets/icons/status_dnd_avatar_icon.jsx","webpack:///./components/widgets/icons/status_dnd_icon.jsx","webpack:///./components/widgets/icons/status_offline_avatar_icon.jsx","webpack:///./components/widgets/icons/status_offline_icon.jsx","webpack:///./components/widgets/icons/status_online_avatar_icon.jsx","webpack:///./components/widgets/icons/status_online_icon.jsx","webpack:///./components/status_icon.jsx","webpack:///./components/external_image/external_image.jsx","webpack:///./components/external_image/index.js","webpack:///./actions/views/root.js","webpack:///./components/widgets/badges/badge.tsx","webpack:///./components/quick_input.jsx","webpack:///./components/widgets/icons/fa_back_icon.jsx","webpack:///./images/groups-avatar.png","webpack:///./utils/team_utils.jsx","webpack:///./components/toggle_modal_button.jsx","webpack:///./components/audio_video_preview.jsx","webpack:///./components/code_preview.jsx","webpack:///./components/view_image/image_preview.jsx","webpack:///./components/view_image/popover_bar/popover_bar.jsx","webpack:///./components/view_image/popover_bar/index.js","webpack:///./components/view_image/view_image.jsx","webpack:///./components/view_image/index.js","webpack:///./components/latex_block/latex_block.jsx","webpack:///./components/latex_block/index.js","webpack:///./components/markdown_image.jsx","webpack:///./components/post_emoji/post_emoji.tsx","webpack:///./components/post_emoji/index.tsx","webpack:///./utils/message_html_to_component.jsx","webpack:///./components/toggle_modal_button_redux/toggle_modal_button_redux.jsx","webpack:///./components/toggle_modal_button_redux/index.js","webpack:///./components/file_info_preview/file_info_preview.jsx","webpack:///./components/file_info_preview/index.js","webpack:///./components/user_settings/modal/user_settings_modal.jsx","webpack:///./components/user_settings/modal/index.js","webpack:///./components/add_groups_to_channel_modal/add_groups_to_channel_modal.jsx","webpack:///./components/add_groups_to_channel_modal/index.js","webpack:///./selectors/local_storage.js","webpack:///./components/suggestion/generic_user_provider.jsx","webpack:///./components/widgets/settings/setting.tsx","webpack:///./dispatcher/app_dispatcher.jsx","webpack:///./actions/views/notice.js","webpack:///./images/icon50x50.png","webpack:///./components/widgets/icons/mattermost_logo.jsx","webpack:///./images/img_trans.gif","webpack:///./components/widgets/icons/menu_icon.jsx","webpack:///./actions/views/profile_popover.js","webpack:///./components/suggestion/search_channel_with_permissions_provider.jsx","webpack:///./components/add_user_to_channel_modal/add_user_to_channel_modal.jsx","webpack:///./components/add_user_to_channel_modal/index.js","webpack:///./components/profile_popover/profile_popover.jsx","webpack:///./components/profile_popover/index.js","webpack:///./components/system_notice/notices.jsx","webpack:///./components/system_notice/system_notice.jsx","webpack:///./components/system_notice/index.js","webpack:///./components/local_date_time/local_date_time.tsx","webpack:///./components/local_date_time/index.ts","webpack:///./components/add_groups_to_team_modal/add_groups_to_team_modal.jsx","webpack:///./components/add_groups_to_team_modal/index.js","webpack:///./client/web_websocket_client.jsx","webpack:///./client/websocket_client.jsx","webpack:///./selectors/views/websocket.js","webpack:///./components/suggestion/menu_action_provider.jsx","webpack:///./components/suggestion/generic_channel_provider.jsx","webpack:///./components/widgets/settings/text_setting.tsx","webpack:///./components/autocomplete_selector.jsx","webpack:///./utils/position_utils.tsx","webpack:///./components/loading_image_preview.tsx","webpack:///./utils/route.jsx","webpack:///./utils/server_version.tsx","webpack:///./components/autosize_textarea.tsx","webpack:///./components/widgets/icons/fa_edit_icon.jsx","webpack:///./components/widgets/icons/fa_add_icon.jsx","webpack:///./components/widgets/settings/bool_setting.tsx","webpack:///./components/widgets/settings/radio_setting.tsx","webpack:///./components/interactive_dialog/dialog_element/dialog_element.jsx","webpack:///./components/interactive_dialog/dialog_element/index.js","webpack:///./components/interactive_dialog/dialog_introduction_text.jsx","webpack:///./components/interactive_dialog/interactive_dialog.jsx","webpack:///./components/interactive_dialog/index.js","webpack:///./components/user_list_row/user_list_row.jsx","webpack:///./components/user_list_row/index.js","webpack:///./components/user_list.jsx","webpack:///./components/searchable_user_list/searchable_user_list.jsx","webpack:///./components/at_mention/at_mention.jsx","webpack:///./components/at_mention/index.jsx","webpack:///./components/modal_controller/modal_controller.jsx","webpack:///./components/modal_controller/index.js","webpack:///./plugins/registry.js","webpack:///./plugins/index.js","webpack:///./components/root/root.jsx","webpack:///./actions/views/system.js","webpack:///./components/widgets/menu/menu_modals/submenu_modal/submenu_modal.tsx","webpack:///./components/link_tooltip/link_tooltip.tsx","webpack:///./images/icons/brokenimage.png","webpack:///./components/header_footer_template_route.jsx","webpack:///./images/filesOverlay.png","webpack:///./images/logoWhite.png","webpack:///./images/tutorialTip.gif","webpack:///./images/tutorialTipWhite.gif","webpack:///./images/favicon/favicon-16x16.png","webpack:///./images/favicon/favicon-32x32.png","webpack:///./images/favicon/favicon-96x96.png","webpack:///./images/favicon/favicon-reddot-16x16.png","webpack:///./images/favicon/favicon-reddot-32x32.png","webpack:///./images/favicon/favicon-reddot-96x96.png","webpack:///./images/appIcons.png","webpack:///./utils/a11y_controller.js","webpack:///./actions/views/posts.js","webpack:///./components/delete_post_modal/delete_post_modal.jsx","webpack:///./components/delete_post_modal/index.js","webpack:///./components/gif_picker/utils/constants.js","webpack:///./components/widgets/icons/gif_search_icon.jsx","webpack:///./components/widgets/icons/gif_search_clear_icon.jsx","webpack:///./components/gif_picker/components/SearchBar/index.jsx","webpack:///./components/widgets/icons/gif_trending_icon.jsx","webpack:///./components/widgets/icons/gif_reactions_icon.jsx","webpack:///./components/gif_picker/components/Header/index.jsx","webpack:///./components/gif_picker/components/App/index.jsx","webpack:///./components/gif_picker/components/InfiniteScroll/index.js","webpack:///./components/gif_picker/components/Categories/index.jsx","webpack:///./components/gif_picker/components/SearchItem/index.jsx","webpack:///./components/gif_picker/components/SearchGrid/SearchGrid.jsx","webpack:///./components/gif_picker/components/SearchGrid/index.js","webpack:///./components/gif_picker/components/Search/index.jsx","webpack:///./components/gif_picker/components/Trending/index.jsx","webpack:///./components/gif_picker/gif_picker.jsx","webpack:///./components/widgets/icons/emoji_icon.jsx","webpack:///./components/widgets/icons/gfycat_icon.jsx","webpack:///./components/emoji_picker/components/emoji_picker_header.jsx","webpack:///./utils/emoji_utils.jsx","webpack:///./components/emoji_picker/components/emoji_picker_category.jsx","webpack:///./components/emoji_picker/components/emoji_picker_item.jsx","webpack:///./components/emoji_picker/emoji_picker_category_section.jsx","webpack:///./components/emoji_picker/components/emoji_picker_preview.jsx","webpack:///./components/emoji_picker/emoji_picker.jsx","webpack:///./components/emoji_picker/index.js","webpack:///./components/emoji_picker/emoji_picker_tabs.jsx","webpack:///./components/emoji_picker/emoji_picker_overlay.jsx","webpack:///./components/post_view/combined_system_message/last_users.jsx","webpack:///./components/post_view/combined_system_message/combined_system_message.jsx","webpack:///./components/post_view/combined_system_message/index.js","webpack:///./components/post_view/post_add_channel_member/post_add_channel_member.jsx","webpack:///./components/post_view/post_add_channel_member/index.js","webpack:///./components/post_markdown/system_message_helpers.jsx","webpack:///./components/post_markdown/post_markdown.jsx","webpack:///./components/post_markdown/index.js","webpack:///./components/suggestion/at_mention_provider/at_mention_suggestion.jsx","webpack:///./components/suggestion/at_mention_provider/at_mention_provider.jsx","webpack:///./components/suggestion/at_mention_provider/index.js","webpack:///./components/suggestion/channel_mention_provider.jsx","webpack:///./components/suggestion/command_provider.jsx","webpack:///./components/suggestion/emoticon_provider.jsx","webpack:///./components/textbox/textbox.jsx","webpack:///./components/textbox/index.js","webpack:///./components/textbox/textbox_links.jsx","webpack:///./components/edit_post_modal/edit_post_modal.jsx","webpack:///./components/edit_post_modal/index.js","webpack:///./stores/modal_store.jsx","webpack:///./components/get_link_modal.tsx","webpack:///./components/get_post_link_modal/get_post_link_modal.tsx","webpack:///./components/get_post_link_modal/index.ts","webpack:///./components/get_public_link_modal/get_public_link_modal.jsx","webpack:///./components/get_public_link_modal/index.js","webpack:///./components/leave_private_channel_modal/leave_private_channel_modal.tsx","webpack:///./components/leave_private_channel_modal/index.ts","webpack:///./components/reset_status_modal/reset_status_modal.jsx","webpack:///./components/reset_status_modal/index.js","webpack:///./components/shortcuts_modal.jsx","webpack:///./components/file_upload_overlay.tsx","webpack:///./utils/delayed_action.tsx","webpack:///./selectors/views/system.js","webpack:///./actions/command.js","webpack:///./actions/hooks.js","webpack:///./actions/views/create_comment.jsx","webpack:///./utils/paste.tsx","webpack:///./components/widgets/icons/attachment_icon.jsx","webpack:///./components/file_attachment/filename_overlay.jsx","webpack:///./components/widgets/icons/fa_remove_icon.jsx","webpack:///./components/file_preview/file_progress_preview.jsx","webpack:///./components/file_preview/file_preview.jsx","webpack:///./components/file_preview/index.js","webpack:///./actions/file_actions.jsx","webpack:///./components/file_upload/file_upload.jsx","webpack:///./utils/dragster.ts","webpack:///./components/file_upload/index.js","webpack:///./components/msg_typing/msg_typing.tsx","webpack:///./components/msg_typing/index.ts","webpack:///./components/post_deleted_modal.tsx","webpack:///./components/message_submit_error.tsx","webpack:///./components/create_comment/create_comment.jsx","webpack:///./components/create_comment/index.js","webpack:///./components/recent_date.tsx","webpack:///./components/widgets/separator/basic-separator.tsx","webpack:///./components/post_view/date_separator/date_separator.jsx","webpack:///./components/post_view/date_separator/index.js","webpack:///./components/post_view/floating_timestamp/floating_timestamp.jsx","webpack:///./components/post_view/floating_timestamp/index.js","webpack:///./components/permissions_gates/channel_permission_gate/channel_permission_gate.jsx","webpack:///./components/permissions_gates/channel_permission_gate/index.js","webpack:///./components/dot_menu/dot_menu.jsx","webpack:///./components/dot_menu/index.js","webpack:///./components/widgets/icons/download_icon.jsx","webpack:///./components/file_attachment/file_thumbnail/file_thumbnail.jsx","webpack:///./components/file_attachment/file_thumbnail/index.js","webpack:///./components/file_attachment/file_attachment.jsx","webpack:///./components/file_attachment/index.js","webpack:///./components/single_image_view/single_image_view.jsx","webpack:///./components/single_image_view/index.js","webpack:///./components/file_attachment_list/file_attachment_list.jsx","webpack:///./components/file_attachment_list/index.js","webpack:///./components/post_profile_picture/post_profile_picture.jsx","webpack:///./components/post_profile_picture/index.jsx","webpack:///./components/post_view/failed_post_options/failed_post_options.jsx","webpack:///./components/post_view/failed_post_options/index.js","webpack:///./components/widgets/icons/flag_icon.jsx","webpack:///./components/widgets/icons/flag_icon_filled.jsx","webpack:///./components/post_view/post_flag_icon/post_flag_icon.js","webpack:///./components/post_view/post_flag_icon/index.js","webpack:///./components/post_view/post_time/post_time.jsx","webpack:///./components/post_view/post_time/index.js","webpack:///./components/post_view/post_reaction/post_reaction.jsx","webpack:///./components/post_view/post_reaction/index.js","webpack:///./components/post_view/reaction/reaction.jsx","webpack:///./components/post_view/reaction/index.js","webpack:///./components/post_view/reaction_list/reaction_list.jsx","webpack:///./components/post_view/reaction_list/index.js","webpack:///./components/post_view/show_more/show_more.jsx","webpack:///./components/post_view/show_more/index.js","webpack:///./components/post_view/message_attachments/action_button.jsx","webpack:///./components/post_view/post_context.js","webpack:///./components/post_view/message_attachments/action_menu/action_menu.jsx","webpack:///./components/post_view/message_attachments/action_menu/index.js","webpack:///./utils/markdown/link_only_renderer.tsx","webpack:///./components/post_view/message_attachments/message_attachment/message_attachment.jsx","webpack:///./components/post_view/message_attachments/message_attachment/index.js","webpack:///./components/post_view/message_attachments/message_attachment_list.jsx","webpack:///./components/post_view/post_attachment_opengraph/get_nearest_point.js","webpack:///./components/post_view/post_attachment_opengraph/post_attachment_opengraph.jsx","webpack:///./components/post_view/post_attachment_opengraph/index.js","webpack:///./components/post_view/post_image/post_image.jsx","webpack:///./components/post_view/post_image/index.js","webpack:///./utils/youtube.js","webpack:///./components/youtube_video/youtube_video.jsx","webpack:///./components/youtube_video/index.js","webpack:///./components/post_view/post_body_additional_content/post_body_additional_content.jsx","webpack:///./components/post_view/post_body_additional_content/index.js","webpack:///./components/post_view/post_message_view/post_message_view.jsx","webpack:///./components/post_view/post_message_view/index.js","webpack:///./components/message_with_additional_content.jsx","webpack:///./components/widgets/icons/info_small_icon.jsx","webpack:///./components/user_profile/user_profile.jsx","webpack:///./components/user_profile/index.js","webpack:///./components/rhs_comment/rhs_comment.jsx","webpack:///./components/rhs_comment/index.js","webpack:///./components/rhs_header_post/rhs_header_post.jsx","webpack:///./components/rhs_header_post/index.js","webpack:///./components/rhs_root_post/rhs_root_post.jsx","webpack:///./components/rhs_root_post/index.js","webpack:///./components/rhs_thread/rhs_thread.jsx","webpack:///./components/rhs_thread/index.js","webpack:///./components/rhs_card_header/rhs_card_header.jsx","webpack:///./components/rhs_card_header/index.jsx","webpack:///./components/rhs_card/rhs_card.jsx","webpack:///./components/rhs_card/index.js","webpack:///./components/widgets/icons/fa_select_icon.jsx","webpack:///./components/suggestion/search_channel_provider.jsx","webpack:///./components/suggestion/search_suggestion_list.jsx","webpack:///./components/suggestion/suggestion_date.jsx","webpack:///./components/suggestion/search_user_provider.jsx","webpack:///./components/suggestion/search_date_suggestion/search_date_suggestion.jsx","webpack:///./components/suggestion/search_date_suggestion/index.js","webpack:///./components/suggestion/search_date_provider.jsx","webpack:///./components/channel_header/components/header_icon_wrapper.js","webpack:///./components/search_hint/search_hint.tsx","webpack:///./components/widgets/icons/mentions_icon.jsx","webpack:///./components/search_bar/search_bar.jsx","webpack:///./components/search_bar/index.jsx","webpack:///./components/search_results_header/search_results_header.jsx","webpack:///./components/search_results_header/index.jsx","webpack:///./components/widgets/icons/reply_icon.jsx","webpack:///./components/common/comment_icon.tsx","webpack:///./components/search_results_item/search_results_item.jsx","webpack:///./components/search_results_item/index.js","webpack:///./components/search_hint/data_retention_hint.jsx","webpack:///./components/search_hint/flag_post_search_hint.jsx","webpack:///./components/search_hint/no_result_search_hint.jsx","webpack:///./components/search_hint/pin_post_search_hint.jsx","webpack:///./components/search_results/search_results.jsx","webpack:///./components/search_results/index.jsx","webpack:///./plugins/rhs_plugin/rhs_plugin.jsx","webpack:///./plugins/rhs_plugin/index.js","webpack:///./components/sidebar_right/sidebar_right.jsx","webpack:///./components/sidebar_right/index.js","webpack:///./components/tutorial/tutorial_tip/tutorial_tip.tsx","webpack:///./components/tutorial/tutorial_tip/index.js","webpack:///./components/tutorial/menu_tutorial_tip.jsx","webpack:///./components/searchable_user_list/searchable_user_list_container.jsx","webpack:///./components/widgets/icons/fa_dropdown_icon.jsx","webpack:///./components/team_members_dropdown/team_members_dropdown.jsx","webpack:///./components/team_members_dropdown/index.js","webpack:///./components/member_list_team/member_list_team.jsx","webpack:///./components/member_list_team/index.js","webpack:///./components/team_members_modal/team_members_modal.jsx","webpack:///./components/team_members_modal/index.js","webpack:///./components/setting_picture.jsx","webpack:///./components/team_general_tab/team_general_tab.jsx","webpack:///./components/team_general_tab/index.js","webpack:///./components/setting_upload.jsx","webpack:///./components/team_import_tab.jsx","webpack:///./components/team_settings/team_settings.jsx","webpack:///./components/team_settings/index.js","webpack:///./components/team_settings_modal/team_settings_modal.jsx","webpack:///./components/team_settings_modal/index.js","webpack:///./selectors/views/marketplace.js","webpack:///./actions/marketplace.js","webpack:///./components/widgets/icons/close_icon.jsx","webpack:///./components/widgets/icons/back_icon.jsx","webpack:///./components/widgets/modals/full_screen_modal.tsx","webpack:///./components/root_portal.jsx","webpack:///./components/widgets/icons/plugin_icon.jsx","webpack:///./components/plugin_marketplace/marketplace_item/marketplace_item.js","webpack:///./components/plugin_marketplace/marketplace_item/index.js","webpack:///./components/plugin_marketplace/marketplace_modal.js","webpack:///./components/plugin_marketplace/index.js","webpack:///./components/list_modal.jsx","webpack:///./components/team_groups_manage_modal/team_groups_manage_modal.jsx","webpack:///./components/team_groups_manage_modal/index.js","webpack:///./components/main_menu/main_menu.jsx","webpack:///./components/main_menu/index.jsx","webpack:///./components/sidebar_right_menu/sidebar_right_menu.jsx","webpack:///./components/sidebar_right_menu/index.js","webpack:///./components/user_settings/import_theme_modal.jsx","webpack:///./selectors/lhs.jsx","webpack:///./components/copy_url_context_menu/copy_url_context_menu.jsx","webpack:///./components/copy_url_context_menu/index.js","webpack:///./components/team_sidebar/components/team_button.jsx","webpack:///./components/team_sidebar/team_sidebar_controller.jsx","webpack:///./components/team_sidebar/index.js","webpack:///./components/searchable_channel_list.jsx","webpack:///./components/more_channels/more_channels.jsx","webpack:///./components/more_channels/index.js","webpack:///./components/widgets/icons/fa_add_user_icon.jsx","webpack:///./components/more_direct_channels/group_message_option.jsx","webpack:///./components/more_direct_channels/more_direct_channels.jsx","webpack:///./components/more_direct_channels/index.js","webpack:///./components/widgets/icons/draft_icon.jsx","webpack:///./components/suggestion/switch_channel_provider.jsx","webpack:///./components/suggestion/switch_team_provider.jsx","webpack:///./components/quick_switch_modal/quick_switch_modal.jsx","webpack:///./components/quick_switch_modal/index.js","webpack:///./components/new_channel_modal/new_channel_modal.jsx","webpack:///./components/new_channel_modal/index.js","webpack:///./components/change_url_modal/change_url_modal.jsx","webpack:///./components/change_url_modal/index.js","webpack:///./components/new_channel_flow/new_channel_flow.jsx","webpack:///./components/new_channel_flow/index.js","webpack:///./components/widgets/icons/unread_below_icon.jsx","webpack:///./components/unread_channel_indicator.tsx","webpack:///./components/status_dropdown/status_dropdown.jsx","webpack:///./components/status_dropdown/index.jsx","webpack:///./components/sidebar/header/sidebar_header_dropdown_button.jsx","webpack:///./components/sidebar/header/dropdown/sidebar_header_dropdown.jsx","webpack:///./components/sidebar/header/dropdown/index.js","webpack:///./components/sidebar/header/sidebar_header.jsx","webpack:///./components/sidebar/header/index.js","webpack:///./components/widgets/icons/bot_icon.jsx","webpack:///./components/sidebar/sidebar_channel_button_or_link/sidebar_channel_button_or_link_icon.jsx","webpack:///./components/sidebar/sidebar_channel_button_or_link/sidebar_channel_button_or_link_close_button.jsx","webpack:///./components/sidebar/sidebar_channel_button_or_link/sidebar_channel_button_or_link.jsx","webpack:///./components/sidebar/sidebar_tutorial_tip.jsx","webpack:///./components/sidebar/sidebar_channel/sidebar_channel.jsx","webpack:///./components/sidebar/sidebar_channel/index.js","webpack:///./components/sidebar/channel_create.jsx","webpack:///./components/sidebar/channel_more.jsx","webpack:///./components/sidebar/channel_name.jsx","webpack:///./components/sidebar/more_public_direct_channels.jsx","webpack:///./components/sidebar/sidebar.jsx","webpack:///./components/sidebar/index.js","webpack:///./components/permalink_view/actions.js","webpack:///./components/edit_channel_header_modal/edit_channel_header_modal.jsx","webpack:///./components/edit_channel_header_modal/index.js","webpack:///./components/channel_invite_modal/channel_invite_modal.jsx","webpack:///./components/channel_invite_modal/index.js","webpack:///./components/channel_members_dropdown/channel_members_dropdown.jsx","webpack:///./components/channel_members_dropdown/index.js","webpack:///./components/member_list_channel/member_list_channel.jsx","webpack:///./components/member_list_channel/index.js","webpack:///./components/channel_members_modal/channel_members_modal.jsx","webpack:///./components/channel_members_modal/index.js","webpack:///./components/widgets/icons/member_icon.jsx","webpack:///./components/widgets/icons/message_icon.jsx","webpack:///./components/popover_list_members/popover_list_members_item.jsx","webpack:///./components/popover_list_members/popover_list_members.jsx","webpack:///./components/popover_list_members/index.js","webpack:///./components/widgets/icons/video_icon.jsx","webpack:///./components/widgets/icons/pin_icon.jsx","webpack:///./components/channel_header_dropdown/channel_header_dropdown.js","webpack:///./plugins/mobile_channel_header_plug/mobile_channel_header_plug.jsx","webpack:///./plugins/mobile_channel_header_plug/index.js","webpack:///./components/channel_notifications_modal/components/describe.jsx","webpack:///./components/channel_notifications_modal/components/section_title.jsx","webpack:///./components/channel_notifications_modal/components/collapse_view.jsx","webpack:///./components/channel_notifications_modal/components/extra_info.jsx","webpack:///./components/channel_notifications_modal/components/expand_view.jsx","webpack:///./components/channel_notifications_modal/components/notification_section.jsx","webpack:///./components/channel_notifications_modal/channel_notifications_modal.jsx","webpack:///./components/channel_notifications_modal/index.js","webpack:///./components/channel_info_modal/channel_info_modal.jsx","webpack:///./components/channel_info_modal/index.js","webpack:///./components/update_channel_avatar_modal/update_channel_avatar_modal.jsx","webpack:///./components/update_channel_avatar_modal/index.js","webpack:///./components/rename_channel_modal/rename_channel_modal.jsx","webpack:///./components/rename_channel_modal/index.js","webpack:///./components/convert_channel_modal/convert_channel_modal.jsx","webpack:///./components/convert_channel_modal/index.js","webpack:///./components/delete_channel_modal/delete_channel_modal.jsx","webpack:///./components/delete_channel_modal/index.js","webpack:///./components/channel_groups_manage_modal/channel_groups_manage_modal.jsx","webpack:///./components/channel_groups_manage_modal/index.js","webpack:///./components/channel_header_dropdown/menu_items/leave_channel/leave_channel.js","webpack:///./components/channel_header_dropdown/menu_items/leave_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/close_channel/close_channel.js","webpack:///./components/channel_header_dropdown/menu_items/close_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_mute_channel/toggle_mute_channel.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_mute_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_favorite_channel/toggle_favorite_channel.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_favorite_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/view_pinned_posts/view_pinned_posts.js","webpack:///./components/channel_header_dropdown/menu_items/view_pinned_posts/index.js","webpack:///./components/channel_header_dropdown/channel_header_dropdown_items.js","webpack:///./components/channel_header_dropdown/mobile_channel_header_dropdown_animation.jsx","webpack:///./components/channel_header_dropdown/mobile_channel_header_dropdown.js","webpack:///./components/channel_header_dropdown/index.js","webpack:///./components/widgets/icons/plugin_channel_header_icon.jsx","webpack:///./plugins/channel_header_plug/channel_header_plug.jsx","webpack:///./plugins/channel_header_plug/index.js","webpack:///./components/channel_header/channel_header.js","webpack:///./components/channel_header/index.js","webpack:///./components/post_view/commented_on_files_message/commented_on_files_message.jsx","webpack:///./components/post_view/commented_on_files_message/index.js","webpack:///./components/post_view/commented_on/commented_on.jsx","webpack:///./components/post_view/commented_on/index.js","webpack:///./components/post_view/post_body/post_body.jsx","webpack:///./components/post_view/post_body/index.js","webpack:///./components/post_view/post_info/post_info.jsx","webpack:///./components/post_view/post_info/index.js","webpack:///./components/post_view/post_header/post_header.jsx","webpack:///./components/post_view/post_header/index.js","webpack:///./components/post_view/post/post.jsx","webpack:///./components/post_view/post/index.js","webpack:///./components/post_view/combined_user_activity_post/index.js","webpack:///./components/widgets/separator/notification-separator.tsx","webpack:///./components/post_view/new_message_separator/new_message_separator.jsx","webpack:///./actions/invite_actions.jsx","webpack:///./components/widgets/icons/invite_icon.jsx","webpack:///./components/widgets/icons/arrow_right_icon.jsx","webpack:///./components/invitation_modal/invitation_modal_initial_step.jsx","webpack:///./components/widgets/icons/invite_members_icon.jsx","webpack:///./components/widgets/icons/mail_icon.jsx","webpack:///./components/widgets/icons/mail_plus_icon.jsx","webpack:///./components/widgets/icons/close_circle_solid_icon.jsx","webpack:///./components/widgets/inputs/users_emails_input.jsx","webpack:///./components/widgets/icons/link_icon.jsx","webpack:///./components/invitation_modal/invitation_modal_members_step.jsx","webpack:///./components/widgets/icons/close_circle_icon.jsx","webpack:///./components/widgets/inputs/channels_input.jsx","webpack:///./components/invitation_modal/invitation_modal_guests_step.jsx","webpack:///./components/widgets/icons/alert_icon.jsx","webpack:///./components/invitation_modal/invitation_modal_confirm_step_row.jsx","webpack:///./components/invitation_modal/invitation_modal_confirm_step_table.jsx","webpack:///./components/invitation_modal/invitation_modal_confirm_step.jsx","webpack:///./components/invitation_modal/invitation_modal.jsx","webpack:///./components/invitation_modal/index.js","webpack:///./components/post_view/channel_intro_message/channel_intro_message.jsx","webpack:///./components/post_view/channel_intro_message/index.js","webpack:///./components/post_view/post_list_row/post_list_row.jsx","webpack:///./components/post_view/post_list_row/index.js","webpack:///./components/widgets/icons/scroll_to_bottom_icon.jsx","webpack:///./components/post_view/scroll_to_bottom_arrows.jsx","webpack:///./components/toast/toast.jsx","webpack:///./components/toast_wrapper/toast_wrapper.jsx","webpack:///./components/toast_wrapper/index.jsx","webpack:///./components/post_view/post_list_virtualized/post_list_virtualized.jsx","webpack:///./components/post_view/post_list/post_list.jsx","webpack:///./components/post_view/post_list/index.js","webpack:///./components/post_view/post_view.jsx","webpack:///./components/post_view/index.js","webpack:///./components/permalink_view/permalink_view.jsx","webpack:///./components/permalink_view/index.js","webpack:///./components/notify_counts/notify_counts.jsx","webpack:///./components/notify_counts/index.js","webpack:///./components/channel_header_mobile/collapse_lhs_button/collapse_lhs_button.js","webpack:///./components/channel_header_mobile/collapse_lhs_button/index.js","webpack:///./components/widgets/icons/more_icon.jsx","webpack:///./components/channel_header_mobile/collapse_rhs_button/collapse_rhs_button.js","webpack:///./components/channel_header_mobile/collapse_rhs_button/index.js","webpack:///./components/widgets/icons/info_icon.jsx","webpack:///./components/channel_header_mobile/channel_info_button/channel_info_button.js","webpack:///./components/channel_header_mobile/channel_info_button/index.js","webpack:///./components/channel_header_mobile/show_search_button/show_search_button.js","webpack:///./components/channel_header_mobile/show_search_button/index.js","webpack:///./components/channel_header_mobile/unmute_channel_button/unmute_channel_button.js","webpack:///./components/channel_header_mobile/unmute_channel_button/index.js","webpack:///./components/channel_header_mobile/channel_header_mobile.js","webpack:///./components/channel_header_mobile/index.js","webpack:///./components/channel_layout/channel_identifier_router/actions.js","webpack:///./components/edit_channel_purpose_modal/edit_channel_purpose_modal.jsx","webpack:///./components/edit_channel_purpose_modal/index.js","webpack:///./components/widgets/icons/send_icon.jsx","webpack:///./components/create_post/create_post.jsx","webpack:///./components/create_post/index.js","webpack:///./components/tutorial/tutorial_intro_screens/tutorial_intro_screens.jsx","webpack:///./components/tutorial/tutorial_intro_screens/index.jsx","webpack:///./components/tutorial/tutorial_view.jsx","webpack:///./components/tutorial/index.jsx","webpack:///./components/channel_view/channel_view.jsx","webpack:///./components/deferComponentRender.jsx","webpack:///./components/channel_view/index.js","webpack:///./components/channel_layout/channel_identifier_router/channel_identifier_router.jsx","webpack:///./components/channel_layout/channel_identifier_router/index.js","webpack:///./components/channel_layout/center_channel/center_channel.jsx","webpack:///./components/channel_layout/center_channel/index.js","webpack:///./components/channel_layout/channel_controller.jsx","webpack:///./components/needs_team/needs_team.jsx","webpack:///./components/needs_team/index.js","webpack:///./components/permalink_redirector/actions.js","webpack:///./components/permalink_redirector/permalink_redirector.jsx","webpack:///./components/permalink_redirector/index.js","webpack:///./components/removed_from_channel_modal/removed_from_channel_modal.jsx","webpack:///./components/removed_from_channel_modal/index.js","webpack:///./components/intl_provider/intl_provider.jsx","webpack:///./components/intl_provider/index.jsx","webpack:///./plugins/interactive_dialog.js","webpack:///./plugins/export.js","webpack:///./components/root/index.js"],"names":["CustomRenderer","marked","Renderer","constructor","disableLinks","super","this","link","href","title","text","substring","length","paragraph","FormattedMarkdownMessage","React","PureComponent","intl","intlShape","isRequired","id","PropTypes","string","defaultMessage","values","object","bool","render","origMsg","props","formatMessage","markedUpMessage","breaks","sanitize","renderer","dangerouslySetInnerHTML","__html","injectIntl","OverlayTrigger","forwardRef","ref","overlay","otherProps","OverlayWrapper","overlayProps","Provider","value","cloneElement","Consumer","defaultProps","defaultOverlayShown","trigger","displayName","intlConfigPropTypes","locale","timeZone","formats","messages","textComponent","any","defaultLocale","defaultFormats","onError","func","intlFormatPropTypes","formatDate","formatTime","formatRelativeTime","formatNumber","formatPlural","formatHTMLMessage","shape","formatters","dispatch","store","getState","emitChannelClickEvent","channel","switchToChannel","chan","window","postMessage","type","message","location","origin","state","userId","getCurrentUserId","teamId","$","chat_team_id","process","CHAT_TEAM_ID","isRHSOpened","getIsRhsOpen","isPinnedPostsShowing","getRhsState","RHSStates","PIN","member","getMyChannelMember","getChannelStats","delete_at","penultimate","LocalStorageStore","getPreviousChannelName","name","setPenultimateChannelName","setPreviousChannelName","updateRhsState","loadProfilesForSidebar","batchActions","ChannelTypes","SELECT_CHANNEL","data","ActionTypes","SELECT_CHANNEL_WITH_MEMBER","fake","async","success","fail","currentUserId","otherUserId","Utils","receivedChannel","createDirectChannel","userVisitedFakeChannel","browserHistory","push","currentTeam","updateNewMessagesAtInChannel","channelId","last_viewed_at","Date","now","UPDATE_CHANNEL_LAST_VIEWED_AT","channel_id","emitCloseRightHandSide","closeRightHandSide","toggleShortcutsModal","AppDispatcher","handleViewAction","TOGGLE_SHORTCUTS_MODAL","showChannelNameUpdateModal","TOGGLE_CHANNEL_NAME_UPDATE_MODAL","showGetPostLinkModal","post","TOGGLE_GET_POST_LINK_MODAL","showGetPublicLinkModal","fileId","TOGGLE_GET_PUBLIC_LINK_MODAL","showLeavePrivateChannelModal","TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL","showMobileSubMenuModal","elements","submenuModalData","ModalId","ModalIdentifiers","MOBILE_SUBMENU","dialogType","SubMenuModal","dialogProps","openModal","sendEphemeralPost","parentId","timestamp","user_id","getCurrentChannelId","PostTypes","EPHEMERAL","create_at","update_at","root_id","parent_id","handleNewPost","sendAddToChannelEphemeralPost","user","addedUsername","addedUserId","postRootId","EPHEMERAL_ADD_TO_CHANNEL","username","lastTimeTypingSent","emitLocalUserTypingEvent","parentPostId","actionDispatch","actionGetState","config","getConfig","t","stats","getCurrentChannelStats","membersInChannel","member_count","TimeBetweenUserTypingUpdatesMilliseconds","MaxNotificationsPerChannel","EnableUserTypingMessages","WebSocketClient","userTyping","emitUserLoggedOutEvent","redirectTo","shouldSignalLogout","userAction","setWasLoggedIn","logout","then","BrowserStore","signalLogout","clear","stopPeriodicStatusUpdates","WebsocketActions","clearUserCookie","catch","emitBrowserFocus","focus","BROWSER_CHANGE_FOCUS","redirectUserToDefaultTeam","getCurrentUser","getTeamMemberships","loadMe","getTeamAction","team","getTeam","myMember","getMyTeamMember","Object","keys","teamChannels","getChannelsNameMapInTeam","fetchMyChannelsAndMembers","channelName","channelMember","getChannelByNameAndTeamName","getRedirectChannelNameForTeam","getTeamRedirectChannelIfIsAccesible","selectChannel","LoadingScreen","Component","className","style","position","ConfirmModal","e","key","show","cancelButton","document","getElementById","activeElement","handleCancel","handleConfirm","setState","checked","target","onConfirm","onCancel","componentDidMount","addEventListener","handleKeypress","componentWillUnmount","removeEventListener","shouldComponentUpdate","nextProps","componentDidUpdate","prevProps","checkbox","cancelText","showCheckbox","onChange","handleCheckboxChange","checkboxText","cancelButtonText","hideCancel","onClick","modalClass","dialogClassName","onHide","onExited","role","aria-labelledby","Header","closeButton","Title","componentClass","Body","Footer","autoFocus","confirmButtonClass","confirmButtonText","node","modalData","MODAL_OPEN","modalId","closeModal","MODAL_CLOSE","reloadConfig","error","err","AdminActions","server_error_id","adminResetMfa","UserActions","getClusterStatus","ldapTest","invalidateAllCaches","recycleDatabaseConnection","adminResetEmail","getOAuthAppInfo","clientId","bindClientFunc","clientFunc","Client4","params","allowOAuth2","responseType","redirectUri","scope","authorizeOAuthApp","emailToLdap","loginId","password","token","ldapId","ldapPassword","emailToOAuth","newType","oauthToEmail","currentService","email","follow_link","uploadBrandImage","brandImage","deleteBrandImage","uploadPublicSamlCertificate","file","uploadPrivateSamlCertificate","uploadIdpSamlCertificate","removePublicSamlCertificate","removePrivateSamlCertificate","removeIdpSamlCertificate","getStandardAnalytics","getAdvancedAnalytics","getBotPostsPerDayAnalytics","getPostsPerDayAnalytics","getUsersPerDayAnalytics","elasticsearchTest","testS3Connection","elasticsearchPurgeIndexes","setNavigationBlocked","blocked","SET_NAVIGATION_BLOCKED","deferNavigation","onNavigationConfirmed","DEFER_NAVIGATION","cancelNavigation","CANCEL_NAVIGATION","confirmNavigation","thunkDispatch","thunkGetState","callback","getOnNavigationConfirmed","CONFIRM_NAVIGATION","invalidateAllEmailInvites","TeamActions","testSmtp","registerAdminConsolePlugin","pluginId","reducer","storeDispatch","RECEIVED_ADMIN_CONSOLE_REDUCER","unregisterAdminConsolePlugin","REMOVED_ADMIN_CONSOLE_REDUCER","testSiteURL","siteURL","registerAdminConsoleCustomSetting","component","showTitle","RECEIVED_ADMIN_CONSOLE_CUSTOM_COMPONENT","options","getSamlMetadataFromIdp","samlMetadataURL","setSamlIdpCertificateFromMetadata","certData","SubMenuItem","event","postId","subMenu","action","root","isMobile","pathPair","entries","nativeEvent","find","path","stopPropagation","slice","composedPath","createRef","icon","filter","xOffset","ariaLabel","textProp","Fragment","hasSubmenu","parentWidth","current","getBoundingClientRect","width","childOffset","isValidElement","offset","subMenuStyle","visibility","right","parseInt","String","subMenuContent","map","s","aria-label","onMouseEnter","onMouseLeave","hide","toLowerCase","MenuGroup","preventDefault","children","divider","handleDividerClick","MenuItemActionImpl","extraText","buttonClass","isDangerous","testid","data-testid","MenuItemAction","menuItem","MenuItemExternalLinkImpl","url","rel","MenuItemExternalLink","MenuItemLinkImpl","to","MenuItemLink","MenuItemToggleModalReduxImpl","accessibilityLabel","MenuItemToggleModalRedux","Menu","observer","disconnect","prevWasDivider","isAtBeginning","child","classList","contains","display","reverse","observe","attributes","childList","subtree","MutationObserver","hideUnneededDividers","rect","openUp","openLeft","customStyles","styles","left","bottom","top","handleMenuClick","LocalizedInput","placeholder","localizedPlaceholder","FormError","errors","iconClassName","margin","textClassName","MenuWrapperAnimation","isAppearing","nodeStyler","styler","chain","update","complete","tween","from","opacity","duration","start","set","CSSTransition","in","classNames","enter","exit","mountOnEnter","unmountOnExit","onEntering","onExiting","timeout","MenuWrapper","Constants","KeyCodes","ESCAPE","close","TAB","closeOnBlur","open","onToggle","newState","Array","isArray","Error","keyboardClose","Animation","animationComponent","toggle","BotBadge","Avatar","size","alt","src","LocalizedIcon","localizedTitle","latestPrefix","latestComplete","disableDispatches","requestStarted","handlePretextChanged","pretext","resetRequest","startNewRequest","prefix","shouldCancelDispatch","allowDividers","presentationType","Suggestion","term","matchedPretext","onMouseMove","item","oneOfType","isSelection","tabIndex","checkAndSetMobileView","UPDATE_MOBILE_VIEW","goToLastViewedChannel","currentChannel","getCurrentChannel","channelsInTeam","getChannelsNameMapInCurrentTeam","channelToSwitchTo","getChannelByName","getLastViewedChannelName","getCurrentTeamId","switchToChannelById","getChannel","teamUrl","getCurrentRelativeTeamUrl","display_name","getUserByUsername","openDirectChannelToUserId","GM_CHANNEL","gmChannel","joinChannelById","currentTeamId","joinChannel","leaveChannel","myPreferences","getMyPreferences","getCurrentTeam","isFavoriteChannel","unfavoriteChannel","removePreviousChannelName","leaveChannelRedux","prevChannelName","prevChannel","getMyChannelMemberships","getMyChannels","c","OPEN_CHANNEL","PRIVATE_CHANNEL","selectTeam","TeamTypes","LEAVE_TEAM","autocompleteUsersInChannel","autocompleteUsers","loadUnreads","time","PostActions","atLatestMessage","atOldestmessage","INCREASE_POST_VISIBILITY","amount","order","next_post_id","RECEIVED_POSTS_FOR_CHANNEL_AT_TIME","prev_post_id","loadPostsAround","focusedPostId","Posts","POST_CHUNK_SIZE","loadLatestPosts","loadPosts","POST_INCREASE_AMOUNT","LOADING_POSTS","result","PostRequestTypes","BEFORE_ID","actions","moreToLoad","syncPostsInChannel","since","socketStatus","getSocketStatus","sinceTimeToGetPosts","lastPostsApiCallForChannel","views","lastGetPosts","getLastPostsApiTimeForChannel","lastDisconnectAt","scrollPostListToBottom","EventEmitter","emit","EventTypes","POST_LIST_SCROLL_TO_BOTTOM","markChannelAsReadOnFocus","isManuallyUnread","markChannelAsRead","getDirectChannelName","ChannelActions","trackEvent","prefDirect","category","Preferences","CATEGORY_DIRECT_CHANNEL_SHOW","prefOpenTime","CATEGORY_CHANNEL_OPEN_TIME","toString","PreferenceTypes","RECEIVED_PREFERENCES","savePreferences","openGroupChannelToUserIds","userIds","getCurrentTeamUrl","loadChannelsForCurrentUser","unreads","getUnreadChannelIds","DM_CHANNEL","loadNewDMIfNeeded","loadNewGMIfNeeded","searchMoreChannels","showArchivedChannels","myMembers","autocompleteChannels","autocompleteChannelsForSearch","addUsersToChannel","requests","uId","Promise","all","LoadingSpinner","Markdown","enableFormatting","assign","autolinkedUrlSchemes","mentionKeys","atMentions","channelNamesMap","proxyImages","hasImageProxy","minimumHashtagLength","htmlFormattedText","TextFormatting","messageHtmlToComponent","isRHS","imageProps","imagesMetadata","hasPluginTooltips","postType","mentionHighlight","array","arrayOf","number","connect","getChannelNamesMap","createSelector","channelMentions","ownProps","getAutolinkedUrlSchemes","getBool","CATEGORY_ADVANCED_SETTINGS","getCurrentUserMentionKeys","getSiteURL","HasImageProxy","MinimumHashtagLength","GuestBadge","SaveButton","saving","disabled","savingMessage","btnClass","extraClasses","loading","LoadingWrapper","canUploadFiles","enableFileAttachments","EnableFileAttachments","enableMobileFileUpload","EnableMobileFileUpload","UserAgent","canDownloadFiles","EnableMobileFileDownload","trimFilename","filename","trimmedFilename","MAX_FILENAME_LENGTH","Math","min","getFileTypeFromMime","mimetype","mimeTypeSplitBySlash","split","mimeTypePrefix","mimeTypeSuffix","includes","getExifOrientation","view","DataView","getUint16","byteLength","marker","getUint32","little","tags","i","getOrientationStyles","orientation","transform","transformOrigin","exif2css","SettingItemMax","shiftEnter","keyCode","ENTER","shiftKey","disableEnterSubmit","isKeyPressed","submit","tagName","parentElement","settingList","handleSubmit","setting","updateSection","section","focusableElements","querySelectorAll","onKeyDown","clientError","serverError","extraInfo","hintClass","infoPosition","saveButtonText","inputs","widthClass","listContent","containerStyle","submitExtra","handleUpdateSection","element","WarningIcon","additionalClassName","Pluggable","pluggableName","Children","only","components","childrenProps","componentName","getComponentName","Reflect","deleteProperty","hasOwnProperty","pluginComponents","pluggableId","content","p","PluginComponent","theme","plugins","getTheme","GlobeIcon","LockIcon","SizeMap","xs","sm","md","lg","Popover","placement","popoverSize","popoverStyle","onMouseOut","onMouseOver","bsStyle","bsClass","bsSize","ProfilePicture","profileSrc","profileIconClass","isEmoji","rootClose","isBusy","hideProfilePopover","hasMention","wrapperClass","status","setModalSearchTerm","SearchTypes","SET_MODAL_SEARCH","setSystemUsersSearch","SET_SYSTEM_USERS_SEARCH","SystemPermissionGate","hasPermission","invert","permissions","permission","haveISystemPermission","SpinnerButton","spinning","spinningText","SuggestionBox","mentionKey","insertText","test","addTextAtCaret","inputRef","input","getInput","getDOMNode","recalculateSize","delay","setTimeout","preventSuggestionListCloseFlag","container","relatedTarget","handleEmitClearSuggestions","focused","onBlur","openOnFocus","openWhenEmpty","textbox","getTextbox","selectionEnd","requiredCharacters","onFocus","composing","onComposition","selectionStart","caret","keepPretext","endsWith","termWithoutMatched","overlap","findOverlap","suffix","newValue","requestAnimationFrame","replaceAllInputOnSelect","replaceText","onItemSelected","items","terms","provider","providers","handleCompleteWord","setSelectionByDelta","delta","selectionIndex","indexOf","selection","cleared","some","hasSuggestions","UP","selectPrevious","DOWN","selectNext","completeOnTab","clearTimeout","timeoutId","nonDebouncedPretextChanged","suggestions","newComponents","newPretext","handleReceivedSuggestions","handled","handleReceivedSuggestionsAndComplete","SEARCH_TIMEOUT_MILLISECONDS","debouncedPretextChanged","blur","handleFocusIn","handleFocusOut","suggestionReadOut","listenForMentionKeyClick","addListener","handleMentionKeyClick","removeListener","contextId","listComponent","dateComponent","listStyle","renderNoResults","renderDividers","SuggestionListComponent","SuggestionDateComponent","setContainerRef","containerClass","aria-live","autoComplete","onInput","handleChange","onCompositionStart","handleCompositionStart","onCompositionUpdate","handleCompositionUpdate","onCompositionEnd","handleCompositionEnd","handleKeyDown","ariaLiveRef","onCompleteWord","preventClose","preventSuggestionListClose","onItemHover","setSelection","wrapperHeight","a","b","aLower","bLower","SuggestionList","contentRef","getContent","visibleContentHeight","clientHeight","scrollHeight","contentTop","scrollTop","contentTopPadding","css","contentBottomPadding","ReactDOM","findDOMNode","itemRefs","get","itemTop","offsetTop","itemBottomMargin","itemBottom","height","Map","currentLabel","currentItem","scrollToItem","isEmptyObject","generateLabel","removeLabel","announceLabel","innerHTML","first_name","last_name","nickname","renderDivider","textTransform","fontWeight","fontSize","lastType","mainClass","contentClass","maxHeight","SUGGESTION_LIST_MAXHEIGHT","windowHeight","contentStyle","onMouseDown","ArchiveIcon","removeUserFromTeamAndGetStats","response","getUser","addUserToTeamFromInvite","inviteId","team_id","RECEIVED_MY_TEAM_MEMBER","msg_count","mention_count","addUserToTeam","addUsersToTeam","switchTeam","currentChannelId","viewChannel","SearchIcon","isModalOpen","modals","modalState","isLicensePastGracePeriod","license","getLicense","IsLicensed","ExpiresAt","AnnouncementBar","handleClose","announcementBarCount","body","getAttribute","add","setAttribute","remove","barClass","barStyle","linkStyle","color","textColor","backgroundColor","AnnouncementBarTypes","DEVELOPER","CRITICAL","SUCCESS","showCloseButton","announcementTooltip","Tooltip","delayShow","OVERLAY_TIME_DELAY","TextDismissableBar","allowDismissal","localStorage","setItem","dismissed","onDismissal","getItem","extraProps","handleDismiss","singleline","ConfigurationAnnouncementBar","dismissNotice","AnnouncementBarMessages","LICENSE_EXPIRING","canViewSystemErrors","renewalLink","RENEWAL_LINK","totalUsers","LICENSE_EXPIRED","isLicenseExpired","isLicenseExpiring","dismissedExpiringLicense","dismissExpiringLicense","ANNOUNCEMENT","date","LICENSE_PAST_GRACE","SendEmailNotifications","EnablePreviewModeBanner","emailMessage","PREVIEW_MODE","SiteURL","EnableSignUpWithGitLab","siteURLMessage","Boolean","notice","hasBeenDismissed","bindActionCreators","ConfigurationBar","VersionBar","reload","serverVersionOnAppLoad","serverVersion","equalServerVersions","reloadPage","entities","general","AnnouncementBarController","adminConfiguredAnnouncementBar","EnableBanner","BannerText","trim","BannerColor","BannerTextColor","AllowBannerDismissal","errorBar","latestError","dismissError","email_verified","Permissions","MANAGE_SYSTEM","getDisplayableErrors","admin","analytics","TOTAL_USERS","dismissFirstError","bind","getPreviousActiveSection","settings","previousActiveSection","updateActiveSection","newActiveSection","UPDATE_ACTIVE_SECTION","SettingItemMin","edit","editButton","describeSection","disableOpen","getEdit","describe","TeamPermissionGate","haveITeamPermission","getNavigationBlocked","navigationBlock","showNavigationPrompt","TeamIcon","withHover","hoverCss","teamIconUrl","imageURLForTeam","backgroundImage","replace","MultiSelectList","selected","cmdOrCtrlPressed","max","onSelect","option","isSelected","onAdd","rowSelected","label","setSelected","handleArrowPress","_","prevState","listRef","selectedRef","elemTop","elemBottom","listTop","scrollIntoView","renderOutput","aria-hidden","optionRenderer","defaultOptionRenderer","optionControls","o","selectedOption","ariaLabelRenderer","aria-atomic","onPageChange","page","perPage","onAction","MultiSelect","a11yActive","handlePageChange","maxValues","handleAdd","reactSelectRef","select","handleInputChange","currentTarget","submitImmediatelyOn","change","handleInput","removedValue","splice","handleDelete","handleEnterPress","A11yCustomEventTypes","ACTIVATE","handleA11yActivateEvent","DEACTIVATE","handleA11yDeactivateEvent","totalCount","users","numRemainingText","buttonSubmitText","num","nextButton","previousButton","noteTextContainer","optionsToDisplay","noteText","valueMap","pageStart","pageEnd","nextPage","prevPage","memberCount","memberOptions","isMulti","nullComponent","IndicatorsContainer","MultiValueLabel","paddedComponent","valueRenderer","isClearable","openMenuOnFocus","menuIsOpen","onInputChange","onInputKeyDown","placeholderText","inputValue","getOptionValue","getOptionLabel","handleOnClick","buttonSubmitLoadingText","deleteAt","scheme_id","WrappedComponent","paddingRight","paddingLeft","borderRight","verticalAlign","control","base","borderRadius","borderColor","minHeight","boxShadow","multiValue","whiteSpace","border","multiValueRemove","TOGGLE_LHS","OPEN_LHS","CLOSE_LHS","pluginEventHandlers","initialize","WebSocket","console","log","connUrl","WebsocketURL","URL","protocol","host","WebsocketSecurePort","WebsocketPort","getUrlVersion","chat_token","CHAT_TOKEN","setEventCallback","handleEvent","setFirstConnectCallback","handleFirstConnect","setReconnectCallback","reconnect","setMissedEventCallback","setCloseCallback","pluginReconnectHandlers","registerPluginReconnectHandler","handler","unregisterPluginReconnectHandler","includeWebSocket","GeneralTypes","WEBSOCKET_SUCCESS","loadPluginsIfNecessary","forEach","teams","mostRecentId","getMostRecentPostIdInChannel","mostRecentPost","getPost","getPosts","StatusActions","websocket","checkForModifiedUsers","resetWsErrorCount","clearErrors","intervalId","startPeriodicSync","clearInterval","setInterval","stopPeriodicSync","registerPluginWebSocketEvent","unregisterPluginWebSocketEvent","events","unregisterAllPluginWebSocketEvents","failCount","logError","WEBSOCKET_PORT_ERROR","WEBSOCKET_FAILURE","incrementWsErrorCount","msg","SocketEvents","POSTED","EPHEMERAL_MESSAGE","handleNewPostEventDebounced","POST_EDITED","JSON","parse","receivedPost","getProfilesAndStatusesForPosts","broadcast","isActive","handlePostEditEvent","POST_DELETED","postDeleted","handlePostDeleteEvent","POST_UNREAD","POST_UNREAD_SUCCESS","lastViewedAt","msgCount","mentionCount","handlePostUnreadEvent","UserTypes","RECEIVED_PROFILE_NOT_IN_TEAM","REMOVE_MEMBER_FROM_TEAM","channelsPerTeam","getChannelsInTeam","channels","REMOVE_MEMBER_FROM_CHANNEL","global","pathname","startsWith","handleLeaveTeamEvent","UPDATE_TEAM","UPDATED_TEAM","handleUpdateTeamEvent","DELETE_TEAM","deletedTeam","teamMembers","teamMember","m","newTeamId","myTeams","getMyTeams","memberTeamId","RECEIVED_TEAM_DELETED","SELECT_TEAM","globalState","redirectChannel","handleDeleteTeamEvent","ADDED_TO_TEAM","handleTeamAddedEvent","USER_ADDED","RECEIVED_PROFILE_IN_CHANNEL","getChannelAndMyMember","handleUserAddedEvent","USER_REMOVED","rhsChannelId","getSelectedChannelId","remover_id","loadUser","REMOVED_FROM_CHANNEL","RemovedFromChannelModal","removerId","LEAVE_CHANNEL","RECEIVED_PROFILE_NOT_IN_CHANNEL","VIEW_MEMBERS","handleUserRemovedEvent","USER_UPDATED","currentUser","isGuest","members","getMembersInCurrentChannel","getChannelMember","getMe","RECEIVED_PROFILE","handleUserUpdatedEvent","ROLE_ADDED","RoleTypes","RECEIVED_ROLE","handleRoleAddedEvent","ROLE_REMOVED","ROLE_DELETED","handleRoleRemovedEvent","MEMBERROLE_UPDATED","memberData","newRoles","roles","loadRolesIfNeeded","handleUpdateMemberRoleEvent","ROLE_UPDATED","handleRoleUpdatedEvent","CHANNEL_CREATED","handleChannelCreatedEvent","CHANNEL_DELETED","viewArchivedChannels","ExperimentalViewArchivedChannels","RECEIVED_CHANNEL_DELETED","handleChannelDeletedEvent","CHANNEL_CONVERTED","RECEIVED_CHANNEL","General","handleChannelConvertedEvent","CHANNEL_UPDATED","doDispatch","doGetState","handleChannelUpdatedEvent","CHANNEL_MEMBER_UPDATED","RECEIVED_MY_CHANNEL_MEMBER","handleChannelMemberUpdatedEvent","DIRECT_ADDED","handleDirectAddedEvent","PREFERENCE_CHANGED","preference","addedNewDmUser","handlePreferenceChangedEvent","PREFERENCES_CHANGED","preferences","findIndex","handlePreferencesChangedEvent","PREFERENCES_DELETED","DELETED_PREFERENCES","handlePreferencesDeletedEvent","TYPING","WebsocketEvents","STOP_TYPING","getMissingProfilesByIds","getStatusForUserId","ONLINE","getStatusesByIds","handleUserTypingEvent","STATUS_CHANGED","RECEIVED_STATUSES","handleStatusChangedEvent","HELLO","setServerVersion","server_version","handleHelloEvent","REACTION_ADDED","reaction","getCustomEmojiForReaction","emoji_name","RECEIVED_REACTION","handleReactionAddedEvent","REACTION_REMOVED","REACTION_DELETED","handleReactionRemovedEvent","EMOJI_ADDED","emoji","EmojiTypes","RECEIVED_CUSTOM_EMOJI","handleAddEmoji","CHANNEL_VIEWED","handleChannelViewedEvent","PLUGIN_ENABLED","manifest","loadPlugin","handlePluginEnabled","PLUGIN_DISABLED","removePlugin","handlePluginDisabled","USER_ROLE_UPDATED","profiles","demoted","PERMISSIONS_SYSTEM_ADMIN","handleUserRoleUpdated","CONFIG_CHANGED","CLIENT_CONFIG_RECEIVED","handleConfigChanged","LICENSE_CHANGED","CLIENT_LICENSE_RECEIVED","handleLicenseChanged","PLUGIN_STATUSES_CHANGED","AdminTypes","RECEIVED_PLUGIN_STATUSES","plugin_statuses","handlePluginStatusesChangedEvent","OPEN_DIALOG","dialog","IntegrationTypes","RECEIVED_DIALOG","currentTriggerId","integrations","dialogTriggerId","trigger_id","INTERACTIVE_DIALOG","InteractiveDialog","handleOpenDialogEvent","pluginEvents","wait","queue","count","triggered","myDispatch","myGetState","posts","receivedNewPost","getThreadsForPosts","handleNewPostEvents","fromAutoResponder","getIsManualStatusForUserId","UserStatuses","handleNewPostEvent","debouncePostEvent","Actions","defaultValue","Selectors","removeItem","setGlobalItem","getGlobalItem","removeGlobalItem","isLocalStorageSupported","logoutId","StoragePrefixes","sessionStorage","LOGOUT","isSignallingLogout","signalLogin","LOGIN","isSignallingLogin","hasCheckedLocalStorage","localStorageSupported","ErrorPageTypes","LOCAL_STORAGE","hasSeenLandingPage","LANDING_PAGE_SEEN","setLandingPageSeen","landingPageSeen","getLandingPreference","siteUrl","LANDING_PREFERENCE","setLandingPreferenceToMattermostApp","LandingPreferenceTypes","MATTERMOSTAPP","setLandingPreferenceToBrowser","BROWSER","clearLandingPreference","MenuItem","SizeAwareImage","dimensions","mounted","image","isSmallImage","naturalWidth","naturalHeight","loaded","imageWidth","onImageLoaded","onImageLoadFail","showLoader","fileInfo","ariaLabelImage","localizeMessage","onEnterKeyDown","handleSmallImageContainer","handleError","onLoad","handleLoad","placeHolder","dimensionsAvailable","maxWidth","renderImageLoaderIfNeeded","xmlns","viewBox","shouldShowImg","renderImageWithContainerIfNeeded","heightTimeout","renderImageOrPlaceholder","SuccessIcon","StatusAwayAvatarIcon","StatusAwayIcon","d","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","StatusDndAvatarIcon","StatusDndIcon","StatusOfflineIcon","StatusOnlineAvatarIcon","StatusOnlineIcon","StatusIcon","button","IconComponent","StatusOfflineAvatarIcon","ExternalImage","imageMetadata","format","enableSVGs","isSVGImage","getImageSrc","shouldRenderImage","EnableSVGs","loadMeAndConfig","promises","getClientConfig","resolvedPromises","pluginTranslationSources","registerPluginTranslationsSource","sourceFunction","getCurrentLocale","immutableTranslations","getTranslations","translations","RECEIVED_TRANSLATIONS","unregisterPluginTranslationsSource","loadTranslations","en","pluginFunc","serverTranslations","Badge","QuickInput","delayInputUpdate","updateInputFromProps","inputComponent","createElement","setInput","elementType","BackIcon","module","exports","filterAndSortTeamsByDisplayName","sort","localeCompare","numeric","compareTeamsByDisplayName","ModalToggleButton","clickHandler","propTypes","AudioVideoPreview","video","refs","canPlayType","mime_type","canPlay","pause","currentTime","handleFileInfoChanged","source","one","handleLoadError","fileUrl","WEB_VIDEO_WIDTH","WEB_VIDEO_HEIGHT","MOBILE_VIDEO_WIDTH","MOBILE_VIDEO_HEIGHT","data-setup","controls","CodePreview","usedLanguage","SyntaxHighlighting","extension","CODE_PREVIEW_MAX_FILE_SIZE","code","lang","ajax","dataType","handleReceivedError","handleReceivedCode","nodeName","XMLSerializer","serializeToString","updateStateFromProps","UNSAFE_componentWillReceiveProps","lines","match","strlines","language","highlighted","ImagePreview","isExternalFile","previewUrl","getFileDownloadUrl","has_preview_image","getFilePreviewUrl","download","PopoverBar","downloadFile","publicLink","enablePublicLink","showPublicLink","data-title","onGetPublicLink","downloadLinks","downloadLinkText","downloadLinkProps","fileURL","fileIndex","total","totalFiles","PDFPreview","lazy","ViewImageModal","imageIndex","fileInfos","showImage","RIGHT","handleNext","LEFT","handlePrev","handleKeyPress","startIndex","stop","imageHeight","innerHeight","loadImage","index","FileTypes","IMAGE","has_image_preview","getFileUrl","handleImageLoaded","completedPercentage","handleImageProgress","progress","onModalDismissed","GlobalActions","showCloseBtn","onModalShown","onModalHidden","fileName","fileDownloadUrl","fileType","SVG","VIDEO","AUDIO","PDF","Suspense","fallback","supports","floor","preview","pluginFilePreviewComponents","override","leftArrow","rightArrow","closeButtonClass","Modal","onMouseEnterImage","onMouseLeaveImage","handleGetPublicLink","EnablePublicLink","FilePreview","ViewImage","LatexBlock","katex","enableLatex","html","renderToString","throwOnError","displayMode","EnableLatex","MarkdownImage","imageIsLink","showModal","loadFailed","HEADER_CHANGE","prevSrc","onUpdated","isHeaderChangeMessage","brokenImageIcon","safeSrc","lastIndexOf","getFileExtensionFromUrl","loadingClass","handleLoadFail","hideModal","PostEmoji","emojiText","imageUrl","getEmojiMap","getEmojiImageUrl","parser","Parser","processNodeDefinitions","ProcessNodeDefinitions","processingInstructions","replaceChildren","shouldProcessNode","attribs","processNode","hrefAttrib","mentions","mentionAttrib","mentionName","disableHighlight","emojiAttrib","emojiName","images","class","parentNode","latex","processDefaultNode","parseWithInstructions","ModalToggleButtonRedux","dialogName","data-toggle","FileInfoPreview","infoParts","toUpperCase","infoString","join","UserSettings","SettingsSidebar","holders","defineMessages","security","notifications","sidebar","advanced","checkEmail","confirmTitle","confirmMsg","confirmBtns","UserSettingsModal","resendStatus","sendVerificationEmail","A","handleHide","requireConfirm","showConfirmModal","active_tab","active_section","modalBodyRef","closest","removeClass","enforceFocus","customConfirmAction","afterConfirm","collapseModal","handleCollapse","tab","skipConfirm","updateTab","tabs","uiName","iconTitle","handleHidden","activeTab","activeSection","setEnforceFocus","setRequireConfirm","handleCancelConfirmation","isRequred","closeUnusedDirectMessages","CloseUnusedDirectMessages","experimentalChannelOrganization","ExperimentalChannelOrganization","sendEmailNotifications","requireEmailVerification","RequireEmailVerification","AddGroupsToChannelModal","addError","groupIDs","v","skipCommit","onAddCallback","linkGroupSyncable","groupID","Groups","SYNCABLE_TYPE_CHANNEL","auto_add","handleResponse","loadingState","loadingGroups","setGroupsLoadingState","getGroupsNotAssociatedToChannel","searchTerm","GROUPS_PER_PAGE","searchTimeoutId","search","getAllGroupsAssociatedToChannel","renderOption","groupsAvatar","renderValue","groupsToShow","groups","excludeGroups","hasGroup","og","g","includeGroups","group","handleExit","currentChannelName","addValue","modalSearch","selectGroupsNotAssociatedToChannel","regex","RegExp","localStorageStore","getPenultimateViewedChannelName","getPenultimateChannelName","getLastViewedChannelNameByTeamName","teamName","getTeamByName","UserSuggestion","description","handleClick","handleMouseMove","baseProps","getUsersRoute","last_picture_update","is_bot","UserProvider","searchUsersFunc","resultsCallback","normalizedPretext","Setting","inputId","labelClassName","inputClassName","footer","helpText","htmlFor","PayloadSources","Flux","handleServerAction","warn","payload","SERVER_ACTION","VIEW_ACTION","DISMISS_NOTICE","MattermostLogo","version","stroke","stroke-width","fill","fill-rule","MenuIcon","strokeWidth","getMembershipForCurrentEntities","selectedPost","getSelectedPost","exists","getTeamMember","SearchChannelWithPermissionsSuggestion","channelIsArchived","channelSearchSorter","wrappedA","wrappedB","aIsArchived","bIsArchived","getCurrentUserLocale","aDisplayName","bDisplayName","aStartsWith","bStartsWith","sortChannelsByTypeAndDisplayName","SearchChannelWithPermissionsProvider","channelSearchFunc","makeChannelSearchFilter","channelPrefix","channelPrefixLower","searchString","haveIChannelPermission","MANAGE_PUBLIC_CHANNEL_MEMBERS","MANAGE_PRIVATE_CHANNEL_MEMBERS","getChannelsInCurrentTeam","formatChannelsAndDispatch","fetchChannels","channelsAsync","channelsFromServer","concat","allChannels","completedChannels","channelFilter","newChannel","wrappedChannel","deactivated","AddUserToChannelModal","suggestionProviders","channelSearchBox","placeCaretAtEnd","selectedChannelId","focusTextbox","submitError","checkingForMembership","isUserMemberOfChannel","addChannelMember","handleSubmitError","memberships","channelMembers","enableChannelProvider","targetUserIsMemberOfSelectedChannel","errorMsg","getFullName","help","setSearchBoxRef","didSelectChannel","maxLength","shouldDisableAddButton","onSubmit","getChannelMembersInChannels","ProfilePopover","loadingDMChannel","USER_SETTINGS","popoverProps","hideStatus","enableTimezone","isTeamAdmin","isChannelAdmin","canManageAnyChannelMembersInCurrentTeam","dataContent","fullname","bot_description","MAX_POSITION_LENGTH","timezone","userTimezone","handleEditAccountSettings","handleShowDirectChannel","isInCurrentTeam","addToChannelMessage","ADD_USER_TO_CHANNEL","roleTitle","OFFLINE","scheme_admin","areTimezonesEnabledAndSupported","adminOnly","mattermostIcon","allowForget","InstallationDate","getTime","IssuedAt","Cluster","ServerVersion","SystemNotice","notices","dismissedNotices","isSystemAdmin","remind","getCurrentNotice","CATEGORY_SYSTEM_NOTICE","visibleMessage","hideAndRemind","hideAndForget","getCategory","makeGetCategory","getPreferenceNameMap","nameMap","Notices","LocalDateTime","eventTime","useMilitaryTime","momentDate","moment","titleString","tz","hour12","formattedTime","dateTime","toISOString","getUserTimezone","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","getUserCurrentTimezone","AddGroupsToTeamModal","SYNCABLE_TYPE_TEAM","getGroupsNotAssociatedToTeam","getAllGroupsAssociatedToTeam","currentTeamName","selectGroupsNotAssociatedToTeam","WebClient","conn","connectionUrl","sequence","eventSequence","connectFailCount","eventCallback","responseCallbacks","firstConnectCallback","reconnectCallback","missedEventCallback","errorCallback","closeCallback","onopen","sendMessage","onclose","retryTime","onerror","evt","onmessage","seq_reply","seq","setErrorCallback","readyState","OPEN","responseCallback","send","stringify","CLOSED","userUpdateActiveStatus","userIsActive","manual","user_is_active","getStatuses","user_ids","MenuActionSuggestion","MenuActionProvider","displayAllOptions","filterOptions","filteredOptions","ChannelSuggestion","purpose","ChannelProvider","TextSetting","resizable","resize","rows","AutocompleteSelector","onSelected","suggestionRef","toggleFocus","labelContent","helpTextContent","setSuggestionRef","handleSelected","popOverOverlayPosition","targetBounds","spaceRequiredAbove","spaceRequiredBelow","LoadingImagePreview","progressView","PAGE_NOT_FOUND","mfaPaths","mfaAuthServices","checkIfMFARequired","MFA","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","GuestAccountsEnforceMultifactorAuthentication","mfa_active","auth_service","isServerVersionGreaterThanOrEqualTo","currentVersion","compareVersion","currentVersionNumber","x","exec","compareVersionNumber","AutosizeTextarea","reference","textarea","getComputedStyle","borderWidth","borderTopWidth","borderBottomWidth","onHeightChange","heightProps","textareaPlaceholder","placeholderAriaLabel","overflow","textOverflow","pointerEvents","background","EditIcon","AddIcon","BoolSetting","RadioSetting","DialogElement","dataSource","defaultText","GenericUserProvider","GenericChannelProvider","defaultOption","subtype","errorText","optional","displayNameContent","validTypes","DialogIntroductionText","formattedMessage","gfm","elem","checkDialogElementForError","callbackId","callback_id","submission","submitting","submitInteractiveDialog","hasErrors","checkIfErrorsMatchElements","submitted","notifyOnCancel","cancelled","default","introductionText","iconUrl","submitLabel","submitText","backdrop","borderBottom","help_text","minLength","min_length","max_length","data_source","introduction_text","icon_url","submit_label","notify_on_cancel","UserListRow","buttons","Action","actionProps","actionUserProps","emailStyle","userCountID","userCountEmail","userCount","avatar","UserList","RowComponentType","rowComponentType","TEST_ID_COUNT","SearchableUserList","nextDisabled","nextTimeoutId","channelListScroll","previousPage","focusOnMount","onTermChange","isSearch","startCount","endCount","usersPerPage","renderCount","focusSearchBar","userList","scrollToTop","usersToDisplay","filterRow","renderFilterRow","showTeamToggle","AtMention","overlayRef","getUserFromMentionName","usersByUsername","Overlay","hideOverlay","displayUsername","teammateNameDisplay","getTeammateNameDisplaySetting","getUsersByUsername","ModalController","modalOutput","modal","modalComponent","dispatchPluginComponentAction","generateId","RECEIVED_PLUGIN_COMPONENT","resolveReactElement","PluginRegistry","registerRootComponent","registerPopoverUserAttributesComponent","registerPopoverUserActionsComponent","registerLeftSidebarHeaderComponent","registerBottomTeamSidebarComponent","registerPostMessageAttachmentComponent","registerLinkTooltipComponent","registerChannelHeaderButtonAction","dropdownText","tooltipText","registerPostTypeComponent","RECEIVED_PLUGIN_POST_COMPONENT","registerPostCardTypeComponent","RECEIVED_PLUGIN_POST_CARD_COMPONENT","registerPostWillRenderEmbedComponent","toggleable","registerMainMenuAction","mobileIcon","registerChannelHeaderMenuAction","registerPostDropdownMenuAction","registerPostDropdownSubMenuAction","rootRegisterMenuItem","registerMenuItem","parentMenuId","innerText","innerAction","innerFilter","f","registerPostDropdownMenuComponent","registerFileUploadMethod","registerFilesWillUploadHook","hook","unregisterComponent","componentId","REMOVED_PLUGIN_COMPONENT","unregisterPostTypeComponent","REMOVED_PLUGIN_POST_COMPONENT","registerReducer","reducerRegistry","register","registerWebSocketEventHandler","unregisterWebSocketEventHandler","registerReconnectHandler","unregisterReconnectHandler","registerMessageWillBePostedHook","registerSlashCommandWillBePostedHook","registerMessageWillFormatHook","registerFilePreviewComponent","registerTranslations","getTranslationsForLocale","registerRightHandSidebarComponent","showRHSPlugin","hideRHSPlugin","toggleRHSPlugin","initializePlugins","PluginsEnabled","getPlugins","loadErr","getWebappPlugins","RECEIVED_WEBAPP_PLUGINS","regeneratorRuntime","registerPlugin","plugin","loadedPlugins","resolve","reject","oldManifest","webapp","bundle_path","REMOVED_WEBAPP_PLUGIN","bundlePath","script","onload","registry","initializePlugin","getElementsByTagName","appendChild","uninitialize","deinitialize","removeChild","oldManifests","newManifests","newManifest","LazyErrorPage","LazyLoginController","LazyAdminConsole","LazyLoggedIn","LazyPasswordResetSendLink","LazyPasswordResetForm","LazySignupController","LazySignupEmail","LazyTermsOfService","LazyShouldVerifyEmail","LazyDoVerifyEmail","LazyClaimController","LazyHelpController","LazyLinkingLandingPage","LazySelectTeam","LazyAuthorize","LazyCreateTeam","LazyMfa","CreateTeam","makeAsyncComponent","ErrorPage","TermsOfService","LoginController","AdminConsole","LoggedIn","PasswordResetSendLink","PasswordResetForm","SignupController","SignupEmail","ShouldVerifyEmail","DoVerifyEmail","ClaimController","HelpController","LinkingLandingPage","SelectTeam","Authorize","Mfa","LoggedInRoute","rest","Root","isDevMode","enableDevModeFeatures","segmentKey","DIAGNOSTICS_SEGMENT_KEY","diagnosticId","diagnosticsEnabled","invoked","methods","factory","args","prototype","call","unshift","load","n","insertBefore","SNIPPET_VERSION","identify","context","ip","referrer","anonymousId","noAccounts","history","configLoaded","loadRecentlyUsedCustomEmojis","iosDownloadLink","IosAppDownloadLink","androidDownloadLink","AndroidAppDownloadLink","toResetPasswordScreen","mobileLanding","currentCategoryFocus","currentSidebarFocus","serverUrl","chatToken","server_url","SERVER_URL","setUrl","setStoreFromLocalData","setToken","setSystemEmojis","EmojiIndicesByAlias","originalEvent","storageArea","FastClick","attach","a11yController","A11yController","showTermsOfService","onConfigLoaded","trackLoadTime","unbind","PermalinkRedirector","NeedsTeam","INCREMENT_WS_ERROR_COUNT","RESET_WS_ERROR_COUNT","SubMenuItems","ItemSubMenu","tooltipContainerStyles","flexDirection","alignItems","zIndex","LinkTooltip","hideTimeout","$tooltipContainer","tooltipContainerRef","tooltipContainer","showTimeout","on","hideTooltip","popper","Popper","modifiers","preventOverflow","enabled","OVERLAY_TIME_DELAY_SMALL","createPortal","showTooltip","HeaderFooterTemplate","HFTRoute","LoggedInHFTRoute","listenerOptions","capture","modifierKeys","ctrlKey","altKey","lastInputEventIsKeyboard","isMac","tabKeyIsPressed","TILDE","regions","tildeKeyIsPressed","previousRegion","nextRegion","F6","isDesktopApp","f6KeyIsPressed","navigationInProgress","sections","upArrowKeyIsPressed","shouldReverseSections","nextSection","previousSection","downArrowKeyIsPressed","enterKeyIsPressed","SPACE","click","L","lKeyIsPressed","resetInterractionStates","mouseIsPressed","windowIsFocused","nextElement","updateActiveRegion","focusedElement","activeRegion","udpateCurrentFocus","updateActiveElement","regionHTMLCollection","getAllRegions","sectionHTMLCollection","modalHTMLCollection","getAllModals","popupHTMLCollection","getAllPopups","resetNavigation","KEY_DOWN","KEY_UP","handleKeyUp","CLICK","handleMouseClick","MOUSE_DOWN","handleMouseDown","MOUSE_UP","handleMouseUp","FOCUS","handleFocus","BLUR","handleWindowBlur","destroy","clearActiveRegion","clearCurrentFocus","isElementValid","modalIsOpen","popupIsOpen","domElements","sortElementsByAttributeOrder","elementIsVisible","getOrderReverseAttribute","newRegion","activeRegionIndex","setActiveRegion","setCurrentFocus","shouldLoopNavigation","getLoopNavigationAttribute","activeSectionIndex","newSection","setActiveSection","elementPath","region","pathElement","A11yClassNames","REGION","SECTION","setActiveElement","canFocusChild","UPDATE","handleActiveRegionUpdate","dispatchEvent","Event","getAllSectionsForRegion","getFocusChildAttribute","clearActiveSection","handleActiveSectionUpdate","clearActiveElement","handleActiveElementUpdate","ACTIVE","forceUpdate","a11yKeyIsPressed","FOCUSED","blurActiveElement","getElementsByClassName","elementA","elementB","elementAOrder","A11yAttributeNames","SORT_ORDER","elementBOrder","isNaN","offsetParent","MODAL","POPUP","attributeValue","LOOP_NAVIGATION","ORDER_REVERSE","FOCUS_CHILD","invalidElements","editPost","selectAttachmentMenuAction","actionId","cookie","SELECT_ATTACHMENT_MENU_ACTION","DeletePostModal","deleteAndRemovePost","deletePostBtn","commentWarning","commentCount","postTerm","onEntered","handleEntered","OPEN_EMBED_PAGE","SHARE","TRENDING","REACTIONS","mattermost","GifSearchIcon","GifSearchClearIcon","enableBackground","mapDispatchToProps","saveSearchBarText","saveSearchScrollPosition","searchTextUpdate","getStyle","makeStyleFromTheme","centerChannelBg","changeOpacity","centerChannelColor","inputBackground","SearchBar","searchText","searchInput","triggerSearch","onSearch","parseSearchText","searchTimeout","onCategories","isFilteredTags","inputFocused","removeExtraSpaces","tagsList","substr","filteredTags","tag","onTrending","updateSearchInputValue","searchBarText","nextState","clearSearchButton","clearSearchHandle","method","noValidate","autoCapitalize","focusInput","blurInput","gifs","categories","appProps","app","GifTrendingIcon","GifReactionsIcon","header","borderBottomColor","iconActive","iconHover","hovering","renderTabs","constants","renderTab","Icon","cursor","paddingTop","saveAppProps","App","appClassName","authenticateSdk","InfiniteScroll","el","scrollComponent","scrollEl","useWindow","pageYOffset","documentElement","isReverse","calculateTopPosition","offsetHeight","Number","threshold","detachScrollListener","loadMore","pageLoaded","attachScrollListener","setScrollPosition","hasMore","initialLoad","loader","scrollPosition","containerHeight","elementProps","defaultLoader","scrollTo","scrollListener","setDefaultLoader","requestCategoriesList","requestCategoriesListIfNeeded","Categories","gfycats","gfyId","sendImpressions","filterTagsList","gfyItem","max1mbGif","avgColor","PostUtils","cache","SearchItem","itemWidth","itemClickHandler","paddingBottom","SearchGrid","matchMedia","matches","numberOfColumns","keyword","handleItemClick","gfyid","columnsHeights","containerWidth","offsetWidth","setNumberOfColumns","scrollY","padding","resizeHandler","scrollHandler","containerClassName","resultsByTerm","moreRemaining","isEmpty","columnWidth","leftPosition","searchItems","colIndex","minHeightColumnIndex","itemHeight","maxColumnHeight","emptySearch","searchGfycat","searchIfNeededInitial","Search","searchCategory","Trending","appName","basePath","itemTapType","shareEvent","appId","enableHistory","displayText","GifPicker","gif","onGifClick","max5mbGif","PureRenderMixin","handleTrending","handleSearch","handleCategories","EmojiIcon","GfycatIcon","EmojiPickerHeader","handleEmojiPickerClose","defaultRule","aName","bName","emojiA","emojiB","thumbsDownRule","otherName","thumbsUpRule","customRules","thumbsdown","thumbsup","getEmojiName","searchedName","aliases","alias","compareEmojis","aPrefix","EmojiPickerCategory","onCategoryClick","enable","EmojiPickerItem","emojiItem","onItemOver","categoryIndex","emojiIndex","debounce","handleMouseOver","leading","trailing","onItemClick","topOfTheEmojiItem","bottomOfTheEmojiItem","containerRef","containerTop","containerBottom","itemClassName","spriteClassName","batch","handleMouseOverThrottle","imgTrans","emojiItemRef","EmojiPickerCategorySection","div","updateOffsetFrame","updateCategoryOffset","categoryName","cancelAnimationFrame","divRef","EmojiPickerPreview","previewImage","recentEmojiCategory","recent","peopleEmojiCategory","people","CATEGORIES","nature","foods","activity","places","objects","symbols","flags","custom","getEmojiFilename","EmojiPicker","allEmojis","emojiMap","customEmojiMap","customEmojis","categoryEmojis","recentEmojis","has","Emoji","emojiIds","currentEmoji","visible","updatedState","categoryKeys","getEmojis","renderAllCategories","customEmojisEnabled","loadingMoreEmojis","getCustomEmojis","customEmojiPage","missingPages","incrementEmojiPickerPage","lastVisibleEmoji","emojiPickerContainer","updateEmojisToShow","searchCustomEmojis","onEmojiClick","selectNextEmoji","selectPrevEmoji","getCurrentEmojiByCursor","emojis","currentEmojiLoadedCount","emojisToShow","numEmojisLoaded","lastVisibleEmojiRef","handleItemOver","onItemUnmount","divTopOffset","divHeight","handleScrollThrottle","throttle","handleScroll","loadMoreCustomEmojis","renderAllCategoriesFrame","rootComponent","difference","numToLoad","ceil","newCursor","newCategory","getCategoryByIndex","lastVisibleEmojiInNewCategory","getCategoriesByKey","getEmojisByCategory","sortEmojis","recentEmojisProps","emojisMinusRecent","emojiArray","sortEmojisHelper","emojiId","getCurrentEmojiName","getCurrentEmojiCategoryName","currentCategoryName","emojiCategories","emojiPickerCategories","handleCategoryClick","handleCategoryKeyDown","emojiSearch","emojiSearchInput","handleFilterChange","emojiCurrentResults","categoryComponents","emojiCurrentResultsItems","emojiPickerContainerRef","onScroll","overflowY","listHeight","onEmojiClose","EnableCustomEmoji","emojiPickerCustomPage","getRecentEmojis","EmojiPickerTabs","emojiTabVisible","pickerStyle","rightOffset","topOffset","pickerClass","enableGifPicker","Tabs","defaultActiveKey","justified","Tab","eventKey","onEnter","handleEnterEmojiTab","onExit","handleExitEmojiTab","oneOf","EmojiPickerOverlay","emojiTrigger","DEFAULT_EMOJI_PICKER_RIGHT_OFFSET","innerWidth","DEFAULT_EMOJI_PICKER_LEFT_OFFSET","getPlacement","emojiPickerPosition","animation","CENTER_SPACE_REQUIRED_ABOVE","CENTER_SPACE_REQUIRED_BELOW","typeMessage","POST_TYPES","ADD_TO_CHANNEL","JOIN_CHANNEL","REMOVE_FROM_CHANNEL","ADD_TO_TEAM","JOIN_TEAM","REMOVE_FROM_TEAM","LastUsers","expand","formatOptions","actor","expandedLocale","usernames","firstUser","lastIndex","lastUser","renderMessage","firstUserMessage","otherUsersMessage","numOthers","actorMessage","postTypeMessage","one_you","two","many_expanded","CombinedSystemMessage","allUserIds","allUsernames","getMissingProfilesByUsernames","currentUsername","userProfiles","reduce","acc","currentUserDisplayName","getAllUsernames","someone","loadUserProfiles","renderFormattedMessage","actorId","getUsernamesByIds","secondUser","localeHolder","messageData","removedUserIds","showJoinLeave","uniqueRemovedUserIds","arr","getProfilesByIdsAndUsernames","makeGetProfilesByIdsAndUsernames","ADVANCED_FILTER_JOIN_LEAVE","PostAddChannelMember","createAt","removePost","generateAtMentions","andSeparator","commaSeparator","idx","channelType","noGroupsUsernames","linkId","linkText","outOfChannelMessageID","outOfChannelMessageText","outOfChannelAtMentions","outOfGroupsMessageID","outOfGroupsMessageText","outOfGroupsAtMentions","outOfChannelMessage","outOfGroupsMessage","handleAddChannelMember","renderUsername","renderFormattedText","markdown","renderAddToChannelMessage","systemMessageRenderers","GUEST_JOIN_CHANNEL","ADD_GUEST_TO_CHANNEL","removedUsername","headerOptions","channel_mentions","oldHeader","old_header","newHeader","new_header","old","new","DISPLAYNAME_CHANGE","old_displayname","new_displayname","oldDisplayName","newDisplayName","CONVERT_CHANNEL","PURPOSE_CHANGE","oldPurpose","old_purpose","newPurpose","new_purpose","ME","PostMarkdown","renderedSystemMessage","add_channel_member","isUserCanManageMembers","canManageMembers","isEphemeral","addMemberProps","post_id","not_in_channel_user_ids","not_in_groups_usernames","not_in_channel_usernames","COMBINED_USER_ACTIVITY","user_activity","renderSystemMessage","message_source","pluginHooks","mentionHighlightDisabled","metadata","MessageWillFormat","AtMentionSuggestion","youElement","isCurrentUser","AtMentionProvider","setProps","profilesInChannel","profilesNotInChannel","specialMentions","MENTION_SPECIAL","getProfileSuggestions","profile","profileSuggestions","usernameSuggestions","getSuggestionsSplitByMultiple","AUTOCOMPLETE_SPLIT_CHARACTERS","property","getSuggestionsSplitBy","filterProfile","prefixLower","suggestion","localMembers","createFromProfile","MENTION_MEMBERS","remoteMembers","remoteNonMembers","out_of_channel","MENTION_NONMEMBERS","localUserIds","orderUsers","localAndRemoteMembers","updateMatches","resultCallback","captured","XRegExp","showLoadingIndicator","MENTION_MORE_MEMBERS","ChannelMentionSuggestion","ChannelMentionProvider","lastPrefixTrimmed","lastPrefixWithNoResults","lastCompletedWord","words","wrappedChannelIds","wrappedChannels","nameWords","matched","j","wordMatched","MENTION_CHANNELS","MENTION_MORE_CHANNELS","handleChannels","withError","wrappedMoreChannels","wrapped","CommandSuggestion","hint","CommandProvider","command","getCommandsList","cmd","auto_complete","auto_complete_hint","auto_complete_desc","EMOJI_CATEGORY_SUGGESTION_BLACKLIST","EmoticonSuggestion","EmoticonProvider","partialName","emoticon","Emoticons","autocompleteCustomEmojis","findAndSuggestEmojis","formatEmojis","recentMatched","hasSystemEmoji","Textbox","handlePostError","characterLimit","errorMessage","limit","onMouseUp","onKeyUp","checkMessageLength","supportsCommands","wrapper","updateSuggestions","textboxClassName","textWrapperClass","emojiEnabled","badConnection","getInputBox","onKeyPress","handleBlur","spellCheck","createMessage","handleHeightChange","suggestionListStyle","getProfilesInChannel","makeGetProfilesInChannel","getProfilesNotInChannel","makeGetProfilesNotInChannel","withRef","PreReleaseFeatures","PRE_RELEASE_FEATURES","TextboxLinks","updatePreview","showPreview","hasText","editHeader","helpTextClass","previewMessageLink","previewLink","MARKDOWN_PREVIEW","togglePreview","EditPostModal","editModalBody","showEmojiPicker","editbox","emojiAlias","editText","firstPiece","lastPiece","splitMessageBasedOnCaretPosition","caretPosition","newMessage","newCaretPosition","editPostEmoji","postError","isSaveDisabled","editingPost","updatedPost","errorClass","ANIMATION_TIMEOUT","hasAttachment","file_ids","addMessageIntoHistory","deletePostModalData","DELETE_POST","ctrlSend","codeBlockOnCtrlEnter","allowSending","ignoreKeyPress","postMessageOnKeyPress","lastChannelSwitchAt","handleEdit","doRefocus","refocusId","hideEditPostModal","prevShowState","getWrappedInstance","canEditPost","canDeletePost","errorBoxClass","postErrorClass","emojiPicker","emojiButtonAriaLabel","EnableEmojiPicker","getContainer","getEditPostControls","hideEmojiPicker","handleEmojiClick","handleGifClick","EnableGifPicker","toggleEmojiPicker","handleExited","keyboard","handleEditKeyPress","handleMouseUpKeyUp","setEditboxRef","maxPostSize","setTextboxLinksRef","getEditingPost","EDIT_POST","DELETE_OTHERS_POSTS","EDIT_OTHERS_POSTS","MaxPostSize","DEFAULT_CHARACTER_LIMIT","ModalStoreClass","TOGGLE_IMPORT_THEME_MODAL","TOGGLE_DELETE_POST_MODAL","TOGGLE_GET_TEAM_INVITE_LINK_MODAL","TOGGLE_QUICK_SWITCH_MODAL","TOGGLE_CHANNEL_PURPOSE_UPDATE_MODAL","dispatchToken","handleEventPayload","ModalStore","GetLinkModal","copiedLink","textAreaRef","setSelectionRange","execCommand","copyLink","queryCommandSupported","data-copy-btn","readOnly","copyLinkConfirm","GetPostLinkModal","addModalListener","handleToggle","removeModalListener","currentTeamUrl","postUrl","GetPublicLinkModal","getFilePublicLink","LeavePrivateChannelModal","ResetStatusModal","newStatus","currentUserStatus","setStatus","pref","CATEGORY_AUTO_RESET_MANUAL_STATUS","OUT_OF_OFFICE","toTitleCase","autoResetStatus","statusIsManual","autoResetPrefNotSet","autoResetPref","userStatus","userStatusId","manualStatusTitle","manualStatusMessage","renderModalMessage","manualStatusButton","manualStatusId","manualStatusCancel","manualStatusCheckbox","allShortcuts","mainHeader","mac","navHeader","navPrev","navNext","navUnreadPrev","navUnreadNext","navSwitcher","navDMMenu","navSettings","navMentions","navFocusCenter","msgHeader","msgInputHeader","msgEdit","msgReply","msgReprintPrev","msgReprintNext","msgCompHeader","msgCompUsername","msgCompChannel","msgCompEmoji","filesHeader","filesUpload","browserHeader","browserChannelPrev","browserChannelNext","browserFontIncrease","browserFontDecrease","browserInputHeader","browserHighlightPrev","browserHighlightNext","browserNewline","info","ShortcutsModal","getShortcuts","shortcuts","renderShortcut","shortcut","FileUploadOverlay","overlayClass","overlayType","fileOverlayImage","overlayLogoImage","DelayedAction","timer","fire","fireAfter","cancel","connectionErrorCount","system","websocketConnectionErrorCount","executeCommand","cmdLength","getUserIdFromChannelName","CATEGORY_GROUP_CHANNEL_SHOW","hasGotoLocation","goto_location","isUrlSafe","RECEIVED_DIALOG_TRIGGER_ID","runMessageWillBePostedHooks","originalPost","hooks","MessageWillBePosted","runSlashCommandWillBePostedHooks","originalMessage","originalArgs","SlashCommandWillBePosted","clearCommentDraftUploads","actionOnGlobalItemsWithPrefix","COMMENT_DRAFT","uploadsInProgress","updateCommentDraft","rootId","draft","makeOnMoveHistoryIndex","direction","getMessageInHistory","makeGetMessageInHistoryItem","MESSAGE_TYPES","COMMENT","getPostDraft","moveHistoryIndexBack","moveHistoryIndexForward","nextMessageInHistory","submitPost","pending_post_id","hookResult","makeOnSubmit","latestPostId","isReaction","getCustomEmojisByName","EmojiMap","removeReaction","ignoreSlash","submitCommand","makeOnEditLatestPost","getCurrentUsersLatestPost","getPostIdsInChannel","postIds","getPostById","lastPost","from_webhook","SYSTEM_MESSAGE_PREFIX","isPostPendingOrFailed","makeGetCurrentUsersLatestPost","getCommentCount","makeGetCommentCountForPost","getTable","clipboardData","types","getData","table","querySelector","parseTable","getPlainText","isGitHubCodeBlock","tableClassName","columnText","column","textContent","formatMarkdownTableMessage","headerRow","shift","headers","row","spacers","formattedTable","AttachmentIcon","FilenameOverlay","canDownload","compactDisplay","handleImageClick","iconClass","filenameOverlay","RemoveIcon","FileProgressPreview","handleRemove","fileNameComponent","progressBar","percent","percentTxt","toFixed","ProgressBar","active","data-client-id","onRemove","previews","imageClassName","THUMBNAIL_WIDTH","THUMBNAIL_HEIGHT","thumbnailUrl","getFileThumbnailUrl","backgroundSize","uploadsProgressPercent","uploadFile","UPLOAD_FILES_REQUEST","request","getFilesRoute","getOptions","field","accept","handleFileUploadEnd","res","forceLogoutIfNecessary","failure","UPLOAD_FILES_FAILURE","clientIds","getLogErrorAction","file_infos","client_ids","RECEIVED_UPLOAD_FILES","UPLOAD_FILES_SUCCESS","limited","filesAbove","fileAbove","zeroBytesFiles","zeroBytesFile","pasted","FileUpload","currentRootId","onFileUpload","onUploadError","files","uploadFiles","sortedFiles","willUploadHooks","pluginFilesWillUploadHooks","h","pluginUploadFiles","uploadsRemaining","MAX_UPLOAD_FILES","fileCount","numUploads","tooLargeFiles","zeroFiles","maxFileSize","progressEvent","onUploadProgress","end","fileUploadFail","fileUploadSuccess","onUploadStart","tooLargeFilenames","filenames","zeroFilenames","checkPluginHooksAndUploadFiles","clearFileInput","onFileUploadChange","dataTransfer","droppedFiles","webkitGetAsEntry","isDirectory","isUriDrop","containerSelector","overlaySelector","self","dragTimeout","dragsterActions","detail","isFileTransfer","leave","over","drop","handleDrop","unbindDragsterEvents","query","noop","defaults","first","second","dragenter","enterEvent","CustomEvent","dragleave","leaveEvent","dragover","overEvent","dropEvent","dragster","targetElement","eventTarget","getTarget","containsEventTarget","kind","getAsFile","hour","getHours","minute","getMinutes","ext","getFullYear","getMonth","getDate","newFile","Blob","U","postTextbox","commentTextbox","fileInput","abort","menuOpen","handleMaxUploadReached","registerDragEvents","pasteUpload","keyUpload","isMobileApp","multiple","isIosChrome","bodyAction","onTouchEnd","simulateInputClick","pluginFileUploadMethods","handleLocalFileUploaded","wrappedComponent","MaxFileSize","FileUploadMethod","FilesWillUploadHook","MsgTyping","numUsers","typingUsers","last","pop","getTypingText","getUsersTypingByChannelAndPost","makeGetUsersTypingByChannelAndPost","PostDeletedModal","MessageSubmitError","submittedMessage","errorContent","isErrorInvalidSlashCommand","renderSlashCommandError","CreateComment","createPostErrorId","messageInHistory","rootChanged","messageInHistoryChanged","showPostDeletedModal","rhsExpanded","shouldFocusMainTextbox","updatedDraft","onUpdateCommentDraft","hideNotifyAllModal","doSubmit","modifiedDraft","draftsForPost","membersCount","channelMembersCount","enableConfirmNotificationsToChannel","NOTIFY_ALL_MEMBERS","containsAtChannel","isTimezoneEnabled","getChannelTimezones","channelTimezoneCount","showNotifyAllModal","shouldEnableAddButton","rootDeleted","forceFocus","lastBlurAt","withClosedCodeBlock","persist","emitTypingEvent","$el","parent","scrollToBottom","metaKey","commentMsgKeyPress","canEditNow","onEditLatestPost","onMoveHistoryIndexBack","onMoveHistoryIndexForward","newFileInfos","sortFileInfos","updateCommentDraftWithRootId","handleUploadError","fileUpload","cancelUpload","handleFileUploadChange","createCommentControls","enableAddButton","keepFocus","resetCreatePostRequest","renderScrollbar","doInitialScrollToBottom","onResetHistoryIndex","pasteHandler","focusTextboxIfNecessary","selectedPostFocussedAt","readOnlyChannel","ariaLabelReplyInput","notifyAllTitle","notifyAllConfirm","notifyAllMessage","totalMembers","timezones","removePreview","uploadsInProgressText","addButtonClass","getFileCount","getFileUploadTarget","handleUploadStart","handleFileUploadComplete","handleUploadProgress","enableEmojiPicker","getCreateCommentControls","scrollbarClass","textboxRef","SUGGESTION_LIST_SPACE_RHS","data-a11y-sort-order","initialText","popoverMentionKeyClick","hidePostDeletedModal","handleNotifyAllConfirmation","getMessageInHistoryItem","createPost","getAllChannelStats","EnableConfirmNotificationsToChannel","ExperimentalTimezone","isCurrentUserSystemAdmin","ExperimentalTownSquareIsReadOnly","DEFAULT_CHANNEL","getIsRhsExpanded","getSelectedPostFocussedAt","resetHistoryIndex","makeOnUpdateCommentDraft","RecentDate","isSameDay","isToday","yesterday","setDate","isYesterday","weekday","month","day","year","formattedDate","BasicSeparator","DateSeparator","timezoneProps","instanceOf","FloatingTimestamp","dateString","isScrolling","isRhsPost","stylesOverride","PostListUtils","combinedIds","ChannelPermissionGate","DotMenu","canEdit","isFlagged","unflagPost","flagPost","handleAddReactionClick","is_pinned","unpinPost","pinPost","markPostAsUnread","Locations","RHS_ROOT","RHS_COMMENT","setEditingPost","CENTER","menuRef","buttonRect","buttonRef","y","totalSpace","spaceOnTop","CHANNEL_HEADER_HEIGHT","spaceOnBottom","POST_AREA_HEIGHT","editDisableAction","handleEditDisable","disableCanEditPostByTime","isLicensed","postEditTimeLimit","UNSET_POST_EDIT_TIME_LIMIT","milliseconds","timeLeft","canDelete","isReadOnly","isSystemMessage","pluginItems","pluginMenuItems","ItemAction","handleDropdownOpened","tooltip","aria-expanded","refCallback","handleCommentClick","ADD_REACTION","handleAddReactionMenuItemActivated","SEARCH","handleUnreadMenuItemActivated","handlePermalinkMenuItemActivated","handleFlagMenuItemActivated","handlePinMenuItemActivated","handleEditMenuItemActivated","handleDeleteMenuItemActivated","isArchivedChannel","PostEditTimeLimit","PostDropdownMenu","DownloadIcon","FileThumbnail","getFileType","thumbnail","isGIFImage","getIconClassName","FileAttachment","loadFiles","fileThumbnail","fileDetail","onAttachmentClick","fileSizeToString","SingleImageView","showPreviewModal","toggleEmbedVisibility","hasPreviewImage","previewURL","previewHeight","previewWidth","minPreviewClass","data-expanded","isEmbedVisible","imageNameClass","fileHeader","viewImageModal","fadeInClass","styleIfSvgWithDimensions","imageContainerStyle","svgClass","imageLoaded","isRhsOpen","FileAttachmentList","indexClicked","startImgIndex","minHeightPlaceholder","sortedFileInfos","postFiles","hidePreviewModal","selectFilesForPost","makeGetFilesForPost","PostProfilePicture","fromWebhook","defaultURL","enablePostIconOverride","postProps","postIconOverrideURL","useUserIcon","override_icon_url","use_user_icon","DEFAULT_WEBHOOK_LOGO","isBot","getProfilePictureURL","getPostIconURL","overrideIconEmoji","override_icon_emoji","getStatus","EnablePostIconOverride","FailedPostOptions","retryPost","cancelPost","FlagIcon","FlagIconFilled","PostFlagIcon","flagVisible","flagIcon","handlePress","PostTime","isMobileView","localDateTime","isPermalink","PostReaction","addReaction","RHS_SPACE_REQUIRED_ABOVE","RHS_SPACE_REQUIRED_BELOW","getDotMenuRef","Reaction","ids","reactions","getDisplayName","currentUserReacted","accumulator","u","emojiImageUrl","getSortedUsers","otherUsersCount","names","reactionVerb","otherUsers","clickTooltip","emojiNameWithSpaces","ariaLabelEmoji","canRemoveReaction","handleRemoveReaction","canAddReaction","handleAddReaction","shouldUpdatePosition","loadMissingProfiles","reactionCount","checkReactionAction","getProfilesForReactions","makeGetProfilesForReactions","me","REMOVE_REACTION","ReactionList","addReactionButton","reactionsByName","emojiNames","addReactionTooltip","addReactionClassName","getReactionsForPost","makeGetReactionsForPost","ShowMore","isCollapsed","overflowRef","textContainer","isOverflow","checkTextOverflow","isAttachmentText","handleResize","isRHSExpanded","isRHSOpen","checkOverflow","collapsedMaxHeightStyle","collapseGradientClass","collapseShowMoreClass","attachmentTextOverflow","showIcon","showText","toggleCollapse","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","MESSAGE_DISPLAY_COMPACT","ActionButton","handleAction","data-action-id","data-action-cookie","PostContext","createContext","handlePopupOpened","ActionMenu","default_option","menuActions","LinkOnlyRenderer","RemoveMarkdown","outHref","getScheme","output","MessageAttachment","attachment","thumb_url","handleHeightReceived","image_url","actionCookie","doPostActionWithCookie","fields","fieldTables","headerCols","bodyCols","rowPos","lastWasLong","nrTables","short","preText","preTextClass","attachmentText","thumb","author","author_name","author_icon","author_link","title_link","handleHeightReceivedForImageUrl","footerIcon","footer_icon","footerIconMetadata","footerIconUrl","truncate","MAX_ATTACHMENT_FOOTER_LENGTH","omission","thumbMetadata","thumbUrl","handleHeightReceivedForThumbUrl","getFieldsTable","renderPostActions","useBorderStyle","borderLeftColor","handleFormattedTextClick","MessageAttachmentList","attachments","getDistanceBW2Points","point1","point2","xAttr","yAttr","sqrt","pow","DIMENSIONS_NEAREST_POINT_IMAGE","PostAttachmentOpenGraph","REMOVE_LINK_PREVIEW","patchedPost","renderImageToggle","renderLargeImage","safeImageUrl","renderSmallImage","truncateText","hasPreviewBeenRemoved","previewEnabled","enableLinkPreviews","openGraphData","secure_url","bestImage","pivotPoint","points","nearestPoint","point","getNearestPoint","getBestImageUrl","getImageMetadata","hasLargeImage","isLargeImage","removePreviewButton","handleRemovePreview","site_name","useSafeUrl","getOpenGraphMetadataForUrl","PostImage","safeLink","ytRegex","YoutubeVideo","playing","videoId","getVideoId","hours","minutes","seconds","startSeconds","handleYoutubeTime","frameBorder","allowFullScreen","safeUrl","play","googleDeveloperKey","GoogleDeveloperKey","PostBodyAdditionalContent","embeds","embed","postWillRenderEmbedComponents","pluginPostWillRenderEmbedComponents","isYoutubeLink","prependToggle","getEmbed","isEmbedToggleable","renderToggle","renderEmbed","PostWillRenderEmbedComponent","PostMessageView","collapse","hasOverflow","renderDeletedPost","renderEditedIndicator","pluginPostTypes","aria-readonly","postTypes","MessageWithAdditionalContent","previewCollapsed","hasPlugin","messageWrapper","InfoSmallIcon","UserProfile","bgColor","random","selectedColor","disablePopover","overwriteName","profileImg","imageURLForUser","setOverlaynRef","overwriteImage","makeGetDisplayName","RhsComment","dropdownOpened","isConsecutivePost","isOpened","dotMenu","hover","currentAriaLabel","postRef","handleAlt","isPostDeleted","isPostEphemeral","botIndicator","profilePicture","failedPostOptions","userProfile","override_username","enablePostUsernameOverride","SYSTEM_MESSAGE_PROFILE_IMAGE","postClass","failed","postReaction","pinnedBadge","fileAttachment","createRemovePostButton","postTime","renderPostTime","postInfoIcon","card","handleCardClick","getClassName","handlePostClick","setHover","unsetHover","handlePostFocus","a11yIndex","previousPost","previousPostId","consecutivePost","postFromWebhook","prevPostFromWebhook","POST_COLLAPSE_TIMEOUT","EnablePostUsernameOverride","isChannelReadOnlyById","CATEGORY_FLAGGED_POST","RhsHeaderPost","previousRhsState","showSearchResults","MENTION","showMentions","FLAG","showFlaggedPosts","showPinnedPosts","back","closeSidebarTooltip","backToResultsTooltip","expandSidebarTooltip","shrinkSidebarTooltip","handleBack","toggleRhsExpanded","RhsRootPost","FAKE_PARENT_DELETED","ReduxPostUtils","testStateObj","channelDisplayName","dotMenuContainer","postFlagIcon","renderView","renderThumbHorizontal","renderThumbVertical","RhsThread","openTime","windowWidth","selectPostCard","postsArray","cpost","childNodes","rhspostlist","viewPort","topRhsPostId","updateFloatingTimestamp","scrollStopAction","SCROLL_DELAY","handleScrollStop","reply_count","getPostThread","prevPostsArray","curPostsArray","socketConnectionStatus","filterPosts","rootPostDay","previousPostDay","commentsLists","postsLength","createComment","comPost","currentPostDay","toDateString","keyPrefix","handleCardClickPost","isFakeDeletedPost","teammate","autoHide","autoHideTimeout","autoHideDuration","data-a11y-focus-child","data-a11y-order-reversed","getPostsForThread","makeGetPostsForThread","COLLAPSE_DISPLAY","COLLAPSE_DISPLAY_DEFAULT","connected","LINK_PREVIEW_DISPLAY","LINK_PREVIEW_DISPLAY_DEFAULT","RhsCardHeader","RshCardHeader","RhsCard","topRhsPostCreateAt","pluginPostCardTypes","getSelectedPostCard","postCardTypes","SelectIcon","itemToTerm","SearchChannelSuggestion","itemToName","getDirectTeammate","SearchChannelProvider","channelNames","SearchSuggestionList","popoverRef","renderChannelDivider","SuggestionDate","itemComponent","SearchUserSuggestion","SearchUserProvider","userSearchFunc","autocompleteUsersInTeam","doAutocomplete","usernamePrefix","SearchDateSuggestion","dayString","currentDate","today","onDayClick","handleDayClick","showOutsideDays","useAutomaticTimezone","getCurrentDateForTimezone","automaticTimezone","manualTimezone","SearchDateProvider","datePrefix","dates","HeaderIconWrapper","iconComponent","buttonId","tooltipKey","toolTips","flaggedPosts","messageID","pinnedPosts","recentMentions","videoCall","ariaLabelText","getTooltip","SearchHint","withTitle","MentionsIcon","updateSearchTerms","handleSearchOnSuccess","searchTerms","isMentionSearch","isFlaggedPosts","renderHintPopover","helpClass","isSideBarRight","mentionBtn","flagBtn","showMentionFlagBtns","mentionBtnClass","searchMentions","flagBtnClass","getFlagged","showClear","isSearchingTerm","searchFormClass","searchClearTooltip","searchForm","getSearch","aria-describedby","handleUserFocus","handleUserBlur","isFocus","handleClear","rhsState","getIsSearchingTerm","getSearchTerms","SearchResultsHeader","ReplyIcon","CommentIcon","commentCountSpan","iconStyle","searchStyle","extraClass","SearchResultsItem","selectPost","setRhsExpanded","getChannelName","createAriaLabel","overrideUsername","disableProfilePopover","profilePic","profilePicContainer","flagContent","rhsControls","commentCountForPost","handleFocusRHSClick","handleJumpClick","searchMatches","handleSearchItemFocus","createAriaLabelForPost","makeCreateAriaLabelForPost","getCommentCountForPost","isPostFlagged","selectPostFromRightHandSideSearch","selectPostCardFromRightHandSideSearch","DataRetentionHint","days","dataRetentionMessageRetentionDays","FlagPostSearchHint","dataRetentionEnableMessageDeletion","PinPostSearchHint","SearchResults","scrollbars","isPinnedPosts","isSearchGettingMore","getScrollHeight","getScrollTop","getClientHeight","loadMorePosts","getMorePostsForSearch","results","nextResults","shouldRenderFromPropsAndState","noResults","ctls","loadingMorePostsComponent","isSearchingFlaggedPost","isSearchingPinnedPost","sortedResults","postA","postB","isSearchAtEnd","formattedTitle","isCard","data-a11y-loop-navigation","regionTitle","DataRetentionEnableMessageDeletion","DataRetentionMessageRetentionDays","newResults","getSearchResults","currentSearch","getCurrentSearchForCurrentTeam","getSearchMatches","getSearchResultsTerms","getIsSearchingFlaggedPost","getIsSearchingPinnedPost","getIsSearchGettingMore","isEnd","PreferenceSelectors","RhsPlugin","rhsPlugins","RightHandSidebarComponent","getPluginId","RHSPlugin","SidebarRight","transitionInfo","sidebarRight","getPropertyValue","hasTransition","isOpen","onFinishTransition","propertyName","determineTransition","wasOpen","searchVisible","postRightVisible","postCardVisible","isPluginView","expandedClass","isExpanded","toggleSize","shrink","onShrink","getSelectedPostId","getSelectedPostCardId","PLUGIN","getPreviousRhsState","TutorialSteps","TutorialTip","currentScreen","screens","diagnosticsTag","closeRhsMenu","TUTORIAL_STEP","step","FINISHED","screen","targetRef","buttonText","dots","data-screen","handleCircleClick","tutorialGifImage","tutorialGif","tutorialGifWhite","skipTutorial","getInt","MenuTutorialTip","toggleFunc","onBottom","arrow","SearchableUserListContainer","handleTermChange","DropdownIcon","TeamMembersDropdown","handleDemote","updateTeamMemberSchemeRoles","getMyTeamMembers","getMyTeamUnreads","newRole","showDemoteModal","currentRoles","showMakeMember","showMakeAdmin","canRemoveFromTeam","group_constrained","makeDemoteModal","vallues","confirmButton","handleDemoteSubmit","handleDemoteCancel","handleRemoveFromTeam","handleMakeAdmin","handleMakeMember","getTeamStats","updateUserActive","MemberListTeam","loadProfilesAndTeamMembers","PROFILE_CHUNK_SIZE","getTeamMembers","loadComplete","loadStatusesForProfilesList","loadTeamMembersForProfilesList","searchProfiles","membersLoaded","teamMembersDropdown","canManageTeamMembers","totalTeamMembers","MANAGE_TEAM_ROLES","searchProfilesInCurrentTeam","getProfilesInCurrentTeam","getCurrentTeamStats","active_member_count","getMembersInCurrentTeam","TeamMembersModal","teamDisplayName","TEAM_MEMBERS","SettingPicture","removeSrc","setDefaultSrc","onSetDefault","focusFirstElement","onFileChange","selectInput","previewBlob","createObjectURL","reader","FileReader","FileUtils","orientationStyles","readAsArrayBuffer","imageContext","imageStyles","defaultImageSrc","imageElement","handleRemoveSrc","handleSetDefaultSrc","handleFileSelected","setPicture","revokeObjectURL","img","renderImg","imgRender","disableSaveButtonFocus","submitActive","handleFileChange","loadingPicture","handleInputFile","handleSave","ACCEPTED_TEAM_IMAGE_TYPES","GeneralTab","setupInitialState","openInvite","allow_open_invite","allowed_domains","patchTeam","valid","MIN_TEAMNAME_LENGTH","MAX_TEAMNAME_LENGTH","regenerateTeamInviteId","teamIconFile","loadingIcon","setTeamIcon","removeTeamIcon","invite_id","shouldFetchTeam","fetchTeam","off","openInviteSection","inviteSection","nameSection","descriptionSection","teamIconSection","allowedDomainsSection","defaultChecked","handleOpenInviteRadio","handleOpenInviteSubmit","canInviteTeamMembers","getTeamInviteLink","handleInviteIdSubmit","teamNameLabel","updateName","nameExtraInfo","handleNameSubmit","teamDescriptionLabel","MAX_TEAMDESCRIPTION_LENGTH","updateDescription","descriptionExtraInfo","handleDescriptionSubmit","describemsg","updateTeamIcon","handleTeamIconSubmit","handleTeamIconRemove","minMessage","last_team_icon_update","updateAllowedDomains","allowedDomainsInfo","handleAllowedDomainsSubmit","data-dismiss","INVITE_USER","TeamGeneralTab","SettingsUpload","val","uploadinput","inputnode","fileNameText","submitButtonClass","fileTypesAccepted","doFileSelect","openFileSelect","importSlack","TeamImportTab","encodeURIComponent","atob","utils","onImportSuccess","onImportFailure","uploadDocsLink","uploadExportInstructions","uploadExporterLink","importCliLink","uploadHelpText","exportInstructions","slackAdvancedExporterLink","cliLink","uploadSection","doImportSlack","messageSection","TeamSettings","TeamSettingsModal","TEAM_SETTINGS","marketplace","getInstalledPlugins","installed_version","fetchPlugins","localOnly","getFilter","getMarketplacePlugins","RECEIVED_MARKETPLACE_PLUGINS","installPlugin","INSTALLING_MARKETPLACE_PLUGIN","getPlugin","installMarketplacePlugin","INSTALLING_MARKETPLACE_PLUGIN_FAILED","INSTALLING_MARKETPLACE_PLUGIN_SUCCEEDED","filterPlugins","FILTER_MARKETPLACE_PLUGINS","CloseIcon","FullScreenModal","currentActiveElement","onClose","resetFocus","appear","aria-modal","ariaLabelledBy","onGoBack","RootPortal","PluginIcon","UpdateVersion","releaseNotesUrl","Label","UpdateDetails","installedVersion","isInstalling","onUpdate","isUpdate","semver","gt","UpdateConfirmationModal","sameMajorVersion","major","MarketplaceItem","eventName","allowDetail","isDefaultMarketplace","plugin_id","showUpdateConfirmationModal","hideUpdateConfirmationModal","closeMarketplaceModal","getItemButton","actionButton","onInstall","installing","onConfigure","pluginIcon","labels","versionLabel","iconData","pluginDetailsInner","error_text","pluginDetails","homepageUrl","item_error","downloadUrl","getInstalling","getError","IsDefaultMarketplace","PLUGIN_MARKETPLACE","MarketplaceTabs","Plugins","download_url","homepage_url","release_notes_url","icon_data","AllPlugins","InstalledPlugins","installedPlugins","changeTab","MarketplaceModal","tabKey","debouncedSearch","doSearch","pluginStatuses","handleClearSearch","errorBanner","activeKey","ListModal","loadItems","numPerPage","renderRows","renderRow","paginationRange","titleText","titleBarButtonText","titleBarButtonOnClick","searchPlaceholderText","onSearchInput","onPrev","onNext","TeamGroupsManageModal","listModal","pageNumber","getGroupsAssociatedToTeam","totalGroupCount","unlinkGroupSyncable","MANAGE_TEAM_GROUPS","ADD_GROUPS_TO_TEAM","patchGroupSyncable","setTeamMemberStatus","onClickRemoveGroup","titleButtonOnClick","handleDeleteConfirmed","handleDeleteCanceled","teamID","MainMenu","teamIsGroupConstrained","isLicensedForLDAPGroups","mobile","Group","ItemToggleModalRedux","MANAGE_TEAM","REMOVE_USER_FROM_TEAM","MANAGE_SLASH_COMMANDS","MANAGE_OAUTH","MANAGE_INCOMING_WEBHOOKS","MANAGE_OUTGOING_WEBHOOKS","ItemLink","enableIncomingWebhooks","enableOutgoingWebhooks","enableCommands","enableOAuthServiceProvider","enablePluginMarketplace","enableCustomEmoji","canCreateOrDeleteCustomEmoji","teamType","siteName","appDownloadLink","enableUserCreation","enableEmailInvitations","experimentalPrimaryTeam","helpLink","reportAProblemLink","moreTeamsToJoin","AppDownloadLink","EnableCommands","SiteName","EnableIncomingWebhooks","EnableOAuthServiceProvider","EnableOutgoingWebhooks","EnableUserCreation","EnableEmailInvitations","EnableMarketplace","ExperimentalPrimaryTeam","HelpLink","ReportAProblemLink","CREATE_EMOJIS","DELETE_EMOJIS","joinableTeams","getJoinableTeamIds","LDAPGroups","SidebarRightMenu","tutorialTip","showTutorialTip","openRhsMenu","enableTutorial","EnableTutorial","tutorialStep","getIsRhsMenuOpen","MENU_POPOVER","ImportThemeModal","isInputValid","inputError","colors","sidebarBg","sidebarText","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","sidebarHeaderBg","sidebarHeaderTextColor","onlineIndicator","mentionBg","setThemeDefaults","updateShow","charAt","handleOnHide","getIsLhsOpen","lhs","CopyUrlContextMenu","copyToClipboard","contextMenu","menuId","copy","contextMenuTrigger","holdToDisplay","TeamButton","mark","unread","teamClass","handleDisabled","handleSwitch","badge","toolTip","tip","btn","teamButton","TeamSidebar","getTeams","myTeamMembers","CREATE_TEAM","withRouter","SearchableChannelList","archiveIcon","shouldShowArchivedChannels","handleJoin","joiningChannel","toggleArchivedChannels","marginTop","noResultsText","channelsPerPage","channelsToDisplay","createChannelRow","channelDropdown","createChannelButton","canShowArchivedChannels","toggleArchivedChannelsOff","toggleArchivedChannelsOn","MoreChannels","bodyOnly","force","searchedChannels","getChannels","done","getRelativeChannelURL","searching","setSearchResults","morePublicChannelsModalType","CHANNELS_CHUNK_SIZE","getArchivedChannels","archivedChannels","channelsRequestStarted","serverErrorState","activeChannels","createNewChannelButton","CREATE_PUBLIC_CHANNEL","handleNewChannel","createChannelHelpText","CREATE_PRIVATE_CHANNEL","getNotArchivedOtherChannels","getOtherChannels","getArchivedOtherChannels","RequestStatus","STARTED","GroupMessageOption","MAX_SELECTABLE_VALUES","MAX_USERS_IN_GM","MoreDirectChannels","statuses","missingStatusByIds","loadingUsers","exitToChannel","addUsers","existingUserIds","pageNum","restrictDirectMessage","getProfiles","USERS_PER_PAGE","setUsersLoadingState","getProfilesInTeam","getUserProfiles","multiselect","resetPaging","displayEntireNameForUser","modalName","displayname","currentChannelMembers","getTotalUsersStats","loadProfilesMissingStatus","updateFromProps","profilesData","groupChannelsData","searchGroupChannels","loadProfilesForGroupChannels","note","isExistingChannel","inactive","myDirectChannels","groupChannels","renderAriaLabel","handleSubmitImmediatelyOn","filterGroupChannels","memoizeResult","filterProfilesMatchingTerm","filterDirectChannels","getProfilesInCurrentChannel","RestrictDirectMessage","searchProfilesSelector","selectProfiles","filteredGroupChannels","getChannelsWithUserProfiles","getAllChannels","getTotalUsersStatsSelector","total_users_count","sortByUsername","DraftIcon","SwitchChannelSuggestion","hasDraft","notify_props","ConnectedSwitchChannelSuggestion","DRAFT","quickSwitchSorter","SwitchChannelProvider","getDirectAndGroupChannels","fetchUsersAndChannels","formatUnreadChannelsAndDispatch","usersAsync","usersFromServer","RECEIVED_PROFILES_LIST","userWrappedChannel","skipNotInChannel","curState","usersInChannels","getUserIdsInChannels","userSearchStrings","usersInChannel","Set","userString","ARCHIVED_CHANNEL","isGroupChannelVisible","getLastPostPerChannel","isUnreadChannel","isDirectChannelVisible","isDMVisible","makeGetChannel","unreadChannelIds","getSortedUnreadChannelIds","MENTION_UNREAD_CHANNELS","SwitchTeamSuggestion","SwitchTeamProvider","teamPrefix","teamNames","QuickSwitchModal","switchBox","focusPostTextbox","switchMode","mode","selectedChannel","channelProviders","teamProviders","showTeamSwitcher","enableTeamProvider","channelShortcut","defaultChannelShortcut","teamShortcut","defaultTeamShortcut","channelsActiveClass","teamsActiveClass","data-mode","restoreFocus","setSwitchBoxRef","NewChannelModal","displayNameError","enterPressed","displayNameInput","MIN_CHANNELNAME_LENGTH","onSubmitChannel","newData","channelHeaderInput","channelPurposeInput","onDataChanged","onChangeURLPressed","onTypeSwitched","addClass","canCreatePublicChannel","canCreatePrivateChannel","enableTypeSelection","displayNameClass","publicChannelDesc","privateChannelDesc","typeOptions","handlePublicTypeSelect","handlePrivateTypeSelect","getShortenedURL","onModalExited","MAX_CHANNELNAME_LENGTH","channelData","ChangeURLModal","currentURL","userEdit","formattedError","urlinput","cleanUpUrlable","urlError","getURLError","onModalSubmit","urlClass","fullURL","currentTeamURL","shortURL","urlTooltip","onURLChanged","submitButtonText","getChannelTypeFromProps","NewChannelFlow","flowState","channelPurpose","channelHeader","nameModified","createChannel","onCreateChannelError","newURL","showChannelModal","showChangeURLModal","changeURLTitle","changeURLSubmitButtonText","typeSwitched","urlChangeRequested","channelDataChanged","urlChangeSubmitted","urlChangeDismissed","UnreadBelowIcon","UnreadChannelIndicator","classes","StatusDropdown","AWAY","DND","resetStatusModalData","RESET_STATUS","needsConfirm","isUserOutOfOffice","renderProfilePicture","dropdownIcon","renderDropdownIcon","setOnline","showStatusChangeConfirmation","setDnd","setAway","setOffline","SidebarHeaderDropdownButton","mainMenuToolTip","teamNameWithToolTip","data-teamid","teamDescription","SidebarHeaderDropdown","SidebarHeader","BotIcon","SidebarChannelButtonOrLinkIcon","svgErrorUrl","botIconUrl","channelAvatar","teammateId","teammateDeletedAt","teammateIsBot","onSvgLoad","onSvgLoadError","channelStatus","SidebarChannelButtonOrLinkCloseButton","removeTooltip","SidebarChannelButtonOrLink","displayNameRef","scrollWidth","trackChannelSelectedEvent","gmItemRef","removeAttribute","unreadMentions","unreadMsgs","showUnreadForMsgs","rowClass","displayNameToolTip","channelTooltip","removeTooltipLink","enableToolTipIfNeeded","SidebarTutorialTip","townSquareDisplayName","DEFAULT_CHANNEL_UI_NAME","offTopicDisplayName","OFFTOPIC_CHANNEL_UI_NAME","townsquare","offtopic","openLhs","SidebarChannel","isLeaving","channelTeammateId","closeHandler","showChannelAsUnread","shouldHideChannel","handleLeaveDirectChannel","EnableXToLeaveChannelsFromLHS","handleLeavePublicChannel","handleLeavePrivateChannel","linkClass","channelMuted","channelFake","channelStringified","channelTeammateUsername","channelTeammateDeletedAt","channelTeammateIsBot","channelsByName","memberIds","total_msg_count","mark_unread","NotificationLevels","botLastIconUpdate","botUser","teammate_id","bot_last_icon_update","getBotRoute","shouldHideDefaultChannel","isChannelMuted","CHANNEL_POPOVER","OFFTOPIC_CHANNEL","ChannelCreate","ariaLabelPublic","createPublicChannel","ariaLabelPrivate","createPrivateChannel","ariaLabelDM","createDirectMessage","renderPublic","renderPrivate","createPublicDirectChannel","sectionType","renderDirect","renderCombined","ChannelMore","moreChannels","moreDirectMessages","browsePublicDirectChannels","JOIN_PUBLIC_CHANNELS","moreChannelsPublic","moreChannelsPrivate","clickableChannelHeader","ChannelName","tooltipTriggers","formattedMessageId","sectionTypeFormatMessageId","createPublicDirectChannelTooltip","MorePublicDirectChannels","handleSelect","Sidebar","link16x16","link32x32","link96x96","redDotFavicon16x16","redDotFavicon32x32","redDotFavicon96x96","favicon16x16","favicon32x32","favicon96x96","showDirectChannelsModal","hideMoreDirectChannelsModal","showMoreDirectChannelsModal","currentTeammate","currentSiteName","mentionTitle","unreadTitle","messageCount","updateUnreadIndicators","spring","scrollbar","getCurrentValue","scrollToChannel","firstUnreadChannel","lastUnreadChannel","scrollingToUnread","showTopUnread","scrollEnd","displayedChannels","getDisplayedChannels","orderedChannelIds","MathUtil","mapValueInRange","scrollToPosition","showBottomUnread","scrollAnimation","setCurrentValue","setAtRest","setEndValue","firstUnreadElement","firstUnreadPosition","lastUnreadElement","lastUnreadPosition","isSwitchingChannel","allChannelIds","curChannelId","curIndex","nextIndex","nextChannelId","K","handleOpenMoreDirectChannelsModal","ChannelUtils","showMorePublicChannelsModal","hideMorePublicDirectChannelsModal","showNewChannelModal","showMoreChannelsModal","newChannelModalType","QUICK_SWITCH","sectionsToHide","SidebarChannelGroups","UNREADS","FAVORITE","sec","createSidebarChannel","sectionId","showMorePublicDirectChannelsModal","showNewPublicChannelModal","showNewPrivateChannelModal","badgesActive","closedDirectChannel","animate","SpringSystem","createSpring","setOvershootClampingEnabled","onSpringUpdate","handleScrollAnimationUpdate","navigateChannelShortcut","navigateUnreadChannelShortcut","channelIdIsDisplayedForProps","updateTitle","setBadgesActiveAndFavicon","setFirstAndLastUnreadChannels","deregisterSpring","removeAllListeners","lastBadgesActive","updateFavicon","channelSwitcherOption","above","below","moreDirectChannelsModal","moreChannelsModal","hideMoreChannelsModal","morePublicDirectChannelsModal","quickSwitchText","quickSwitchTextShortcutId","quickSwitchTextShortcutDefault","quickSwitchTextShortcut","openQuickSwitcher","onHandleNewChannel","hideNewChannelModal","scrollToFirstUnreadChannel","scrollToLastUnreadChannel","renderOrderedChannels","sidebarPrefs","getSidebarPreferences","keepChannelIdAsUnread","getOrderedChannelIds","grouping","sorting","unreads_at_top","favorite_at_top","getBoolPreference","CATEGORY_SIDEBAR_SETTINGS","getUnreads","focusPost","returnTo","PERMALINK_NOT_FOUND","RECEIVED_FOCUSED_POST","EditChannelHeaderModal","patchChannel","EDIT_CHANNEL_HEADER","editChannelHeaderTextbox","blurTextbox","headerTitle","handleModalKeyDown","handleEntering","renderError","ChannelInviteModal","inviteError","handleInviteError","not_in_channel_id","profilesNotInCurrentChannel","profilesNotInCurrentTeam","getProfilesNotInCurrentChannel","getProfilesNotInCurrentTeam","ChannelMembersDropdown","removing","removeChannelMember","updateChannelMemberSchemeRoles","renderRole","canChangeMemberRoles","canRemoveMember","isMember","isDefaultChannel","currentRole","canMakeUserChannelMember","canMakeUserChannelAdmin","canRemoveUserFromChannel","handleMakeChannelMember","handleMakeChannelAdmin","handleRemoveFromChannel","MANAGE_CHANNEL_ROLES","MemberListChannel","loadProfilesAndTeamMembersAndChannelMembers","in_channel_id","loadTeamMembersAndChannelMembersForProfilesList","totalChannelMembers","getUsersAndActionsToDisplay","searchProfilesInCurrentChannel","ChannelMembersModal","CHANNEL_INVITE","canManageChannelMembers","onAddNewMembersButton","MemberIcon","MessageIcon","PopoverListMembersItem","messageIcon","showMessageIcon","botClass","PopoverListMembers","closePopover","showPopover","showChannelMembersModal","showChannelInviteModal","showTeamMembersModal","popoverTarget","loadProfilesAndStatusesInChannel","undefined","membersList","sortedUsers","sortUsers","isDirectChannel","popoverButton","membersName","manageMembers","showMembersModal","countText","channelMembersModal","teamMembersModal","channelInviteModal","hideChannelMembersModal","showInviteModal","hideTeamMembersModal","hideChannelInviteModal","channelMembersTooltip","handleGetProfilesInChannel","getTargetPopover","doGetProfilesInChannel","getUserStatuses","VideoIcon","PinIcon","ChannelHeaderDropdown","ChannelHeaderDropdownItems","MobileChannelHeaderPlug","plug","fireAction","isDropdown","createList","plugs","createButton","getMyCurrentChannelMembership","MobileChannelHeaderButton","Describe","memberNotifyLevel","globalNotifyLevel","ignoreChannelMentions","DEFAULT","levelsFormattedMessageId","notifyLevel","NotificationSections","MARK_UNREAD","IGNORE_CHANNEL_MENTIONS","IgnoreChannelMentions","ON","OFF","DESKTOP","PUSH","ALL","SectionTitle","CollapseView","onExpandSection","ExtraInfo","ExpandView","onCollapseSection","NONE","server_error","NotificationSection","onUpdateSection","globalNotificationLevel","memberNotificationLevel","handleOnChange","handleCollapseSection","handleExpandSection","ChannelNotificationsModal","channelNotifyProps","resetStateFromNotifyProps","updateChannelNotifyProps","desktopNotifyLevel","desktop","handleUpdateChannelNotifyProps","markUnreadNotifyLevel","pushNotifyLevel","ignore_channel_mentions","getStateFromNotifyProps","prevChannelNotifyProps","channelMemberNotifyProps","currentUserNotifyProps","ignoreChannelMentionsDefault","sendPushNotifications","serverErrorTag","handleUpdateMarkUnreadLevel","handleSubmitMarkUnreadLevel","handleUpdateIgnoreChannelMentions","handleSubmitIgnoreChannelMentions","handleUpdateDesktopNotifyLevel","handleSubmitDesktopNotifyLevel","handleUpdatePushNotificationLevel","handleSubmitPushNotificationLevel","SendPushNotifications","headerMarkdownOptions","ChannelInfoModal","getHeaderMarkdownOptions","channelIcon","notFound","channelPurposeElement","UpdateChannelAvatarModal","upload","required","lowercase","defaultError","displayNameHolder","handleHolder","RenameChannelModal","nameError","invalid","oldName","onSaveSuccess","setError","unsetError","onDisplayNameChange","mapStateToProps","teamInfo","ConvertChannelModal","CHANNEL_ID_LENGTH","convertChannelToPrivate","handleConvert","currentTeamDetails","DeleteChannelModal","canViewArchivedChannels","penultimateViewedChannelName","deleteChannel","ChannelGroupsManageModal","getGroupsAssociatedToChannel","MANAGE_CHANNEL_GROUPS","setChannelMemberStatus","channelID","LeaveChannel","isDefault","isGuestUser","handleLeave","CloseChannel","isArchived","MenuItemToggleMuteChannel","isMuted","ToggleFavoriteChannel","isFavorite","favoriteChannel","toggleFavoriteChannel","ViewPinnedPosts","hasPinnedPosts","isReadonly","isPrivate","isGroupConstrained","channelMembersPermission","channelPropertiesPermission","MANAGE_PRIVATE_CHANNEL_PROPERTIES","MANAGE_PUBLIC_CHANNEL_PROPERTIES","channelDeletePermission","DELETE_PRIVATE_CHANNEL","DELETE_PUBLIC_CHANNEL","CHANNEL_INFO","CHANNEL_NOTIFICATIONS","CREATE_DM_CHANNEL","CHANNEL_MEMBERS","ADD_GROUPS_TO_CHANNEL","EDIT_CHANNEL_PURPOSE","RENAME_CHANNEL","DELETE_CHANNEL","MobileChannelHeaderDropdownAnimation","MobileChannelHeaderDropdown","getDisplayNameByUserId","teammateStatus","dmHeaderIconStatus","getChannelTitle","getTeammateId","getTeammateStatus","userStatuses","Desktop","isCurrentChannelDefault","isCurrentChannelFavorite","isCurrentChannelMuted","isCurrentChannelReadOnly","isCurrentChannelArchived","ChannelHeader","Items","Mobile","PluginChannelHeaderIcon","CustomMenu","rootCloseEvent","onRootClose","handleRootClose","CustomToggle","activeClass","dropdownOpen","ChannelHeaderPlug","toggleDropdown","fireActionAndClose","Dropdown","bsRole","createDropdown","ChannelHeaderButton","popoverMarkdownOptions","showSearchBar","getShowSearchBar","channel_name","openRHSSearch","M","headerOverlay","toggleQuickSwitchModal","isQuickSwitcherOpen","toggleFavoriteRef","getPopoverMarkdownOptions","getCustomEmojisInText","handleShortcut","handleQuickSwitchKeyPress","rhsOpen","gmMembers","dmUser","hasGuests","ariaLabelChannelHeader","hasGuestsText","channelTitle","archivedIcon","isDirect","isGroup","isPublic","membersMap","userDisplayName","popoverListMembers","dmHeaderTextStatus","headerTextContainer","headerText","popoverContent","handleOnMouseOver","handleOnMouseOut","editMessage","showEditChannelHeaderModal","toggleFavoriteTooltip","toggleFavorite","channelMutedTooltip","muteTrigger","unmute","pinnedIconClass","mentionsIconClass","flaggedIconClass","videoCallIconClass","aria-level","data-channelid","searchButtonClick","getVideoCall","dmUserId","guest_count","CommentedOnFilesMessage","plusMore","selectFileInfosForPost","CommentedOn","makeUsername","webhookMessage","makeCommentedOnMessage","onCommentClick","stripMarkdown","getDisplayNameByUser","PostBody","sendingAction","sending","parentPost","comment","failedOptions","isFirstReply","fileAttachmentHolder","messageWithAdditionalContent","mentionHighlightClass","isCommentMention","ephemeralPostClass","parentPostUser","PostInfo","showDotMenu","commentIconExtraClass","commentIcon","replyCount","getDotMenu","handleDotMenuOpened","isCardOpen","buildOptions","showTimeWithoutHover","selectedCard","mobileView","PostHeader","indicator","colon","Post","opened","togglePostMenu","previousPostIsComment","consecutivePostByUser","isMeMessage","fromBot","shouldHighlight","rootUser","hasSameRoot","currentUserCss","sameUserClass","ariaHidden","checkIsMeMessage","from_bot","hideProfilePicture","centerClass","center","removeFocus","onTouchStart","getReplyCount","postsInThread","allPosts","isPostCommentMention","makeIsPostCommentMention","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","CHANNEL_DISPLAY_MODE_CENTERED","generateCombinedPost","makeGenerateCombinedPost","combinedId","NotificationSeparator","NewMessageSeparator","separatorId","sendMembersInvites","emails","sent","notSent","usersToAdd","reason","userToAdd","memberWithError","invitesWithErrors","inviteWithError","sendGuestsInvites","memberOfAll","memberOfAny","sendGuestInviteForUser","InviteIcon","ArrowRightIcon","InvitationModalInitialStep","which","goToMembers","goToGuests","onMembersKeyDown","aria-labeledby","onGuestsKeyDown","InviteMembersIcon","MailIcon","MailPlusIcon","CloseCircleSolidIcon","UsersEmailsInput","parts","getLongDisplayNameParts","fullName","loadingMessageId","loadingMessageDefault","guestBadge","isEmail","getCreateLabel","renderUserName","validAddressMessageId","validAddressMessageDefault","selectProps","noMatchMessageId","noMatchMessageDefault","NoOptionsMessage","innerProps","MultiValueRemove","emailInvitationsEnabled","customCallback","usersLoader","selectRef","loadOptions","optionsLoader","isValidNewOption","showAddEmail","empty","classNamePrefix","formatOptionLabel","defaultOptions","defaultMenuIsOpen","openMenuOnClick","loadingMessage","tabSelectsValue","LinkIcon","InvitationModalMembersStep","inviteLinkRef","textField","termWithoutResults","debouncedSearchProfiles","usersAndEmails","onEdit","usersInputValue","userOrEmail","inviteUrl","onUsersInputChange","CloseCircleIcon","ChannelsInput","channelsLoader","noOptionsMessageId","noOptionsMessageDefault","noOptionsMessage","InvitationModalGuestsStep","customMessage","channelsInputValue","searchChannels","debouncedSearchChannels","myInvitableChannels","customMessageOpen","textareaRef","defaultChannels","inputPlaceholder","onUsersEmailsChange","onChannelsChange","onChannelsInputChange","openCustomMessage","closeCustomMessage","onMessageChange","sendInvites","AlertIcon","InvitationModalConfirmStepRow","invitation","getLongDisplayName","InvitationModalConfirmStepTable","invites","InvitationModalConfirmStep","invitesSentCount","invitesNotSentCount","sentCount","notSentCount","invitesType","invitesSent","invitesNotSent","onDone","InviteTypes","INVITE_MEMBER","INVITE_GUEST","getInvitesCountsMessage","InvitationModal","hasChanges","confirmBack","lastInviteChannels","lastInviteMesssage","prevStep","goToPrevStep","canInviteGuests","canAddUsers","goToInitialStep","confirmModal","extraUserText","extraChannelText","lastInviteMessage","getBackFunction","confirmClose","cancelClose","cancelBack","onMembersSubmit","invitableChannels","onGuestsSubmit","reduxSearchProfiles","reduxSearchChannels","guestAccountsEnabled","EnableGuestAccounts","ADD_USER_TO_TEAM","INVITATION","ChannelIntroMessage","fullWidth","channelProfiles","centeredIntro","teammateName","createSetHeaderButton","createDMIntroMessage","pictures","createGMIntroMessage","teamInviteLink","setHeaderButton","createDefaultIntroMessage","channelInviteButton","createInviteChannelButton","createOffTopicIntroMessage","memberMessage","creatorName","creator_id","getMonthLong","creator","purposeMessage","createStandardIntroMessage","CHANNEL_DISPLAY_MODE_FULL_SCREEN","PostListRow","listId","previousListId","PostListRowListIds","CHANNEL_INTRO_MESSAGE","LOAD_OLDER_MESSAGES_TRIGGER","LOAD_NEWER_MESSAGES_TRIGGER","loadOlderPosts","loadNewerPosts","OLDER_MESSAGES_LOADER","NEWER_MESSAGES_LOADER","ScrollToBottomIcon","ScrollToBottomArrows","atBottom","Toast","onDismiss","toastClass","toastActionClass","showActions","closeTooltip","MOBILE_SCREEN_WIDTH","onClickMessage","jumpSection","ToastWrapper","showUnreadToast","hideUnreadToast","showNewMessagesToast","hideNewMessagesToast","updateLastViewedBottomAt","scrollToNewMessage","scrollToLatestMessages","unreadCountInChannel","unreadCount","atLatestPost","countNewMessages","postListIds","channelMarkedAsUnread","newRecentMessagesCount","lastViewedBottom","latestPostTimeStamp","prevPostsCount","presentPostsCount","postsAddedAtBottom","notBottomWithLatestPosts","toastProps","countUnread","newMessagesToastText","getNewMessageIndex","isIdNotPost","countUnreadsBelow","getAllPosts","preparePostIdsForPostList","makePreparePostIdsForPostList","lastChannelViewTime","countCurrentChannelUnreadMessages","OVERSCAN_COUNT_BACKWARD","OVERSCAN_COUNT_FORWARD","HEIGHT_TRIGGER_FOR_MORE_POSTS","MAXIMUM_POSTS_FOR_SLICING","postListStyle","virtListStyles","PostList","START_OF_NEW_MESSAGES","dynamicListStyle","postMenuOpened","willChange","itemId","previousItemId","nextItemId","isDateLine","isStartOfNewMessages","basePaddingClass","getPreviousPostId","changeUnreadChunkTimeStamp","scrollDirection","scrollOffset","scrollUpdateWasRequested","didUserScrollForwards","offsetFromBottom","atOldestPost","checkBottom","_getRangeToRender","canLoadMorePosts","AFTER_ID","updateAtBottom","isAtBottom","visibleTopItem","topPostId","getLatestPostId","visibleStartIndex","newMessagesSeparatorIndex","channelIntroMessage","postListRef","initRangeToRender","postIndex","getNewMessagesSeparatorIndex","maxPostsForSlicing","handleWindowResize","getSnapshotBeforeUpdate","postsAddedAtTop","channelHeaderAdded","postListNode","previousScrollTop","previousScrollHeight","snapshot","postlistScrollHeight","scrollValue","newPostListIds","autoRetryEnable","latestAriaLabelFunc","renderToasts","itemCount","itemData","itemKey","overscanCountForward","overscanCountBackward","initScrollToIndex","skipResizeClass","innerRef","innerListStyle","loaderId","correctScrollToBottom","onItemsRendered","scrollToFailed","isFirstLoad","markChannelAsReadAndViewed","loadingOlderPosts","loadingNewerPosts","autoRetriesCount","callLoadPosts","prevChannelId","markChannelAsViewed","getOldestPostId","extraPagesLoaded","getLatestVisiblePostId","getPostsAfter","oldestPostId","getOldestVisiblePostId","getPostsBefore","loadingMorePosts","actionsForPostList","postsOnLoad","formattedPostIds","postsInChannel","memoizedGetLatestPostId","getPostsChunkAroundPost","makeGetPostsChunkAroundPost","chunk","postid","unreadChunkTimeStamp","getUnreadPostsChunk","getRecentPostsChunkInChannel","oldest","indicateNewMessages","latestPost","PostView","loaderForChangeOfPostsChunk","channelLoading","last_post_at","teamMemberships","identifier","isChannelLoading","PermalinkView","permalink","doPermalinkEvent","onShortcutKeyDown","isStateValid","NotifyCounts","getUnreadsInCurrentTeam","CollapseLhsButton","toggleLhs","data-target","MoreIcon","CollapseRhsButton","toggleRhsMenu","InfoIcon","NavbarInfoButton","addOne","clickHere","popover","ChannelInfoButton","ShowSearchButton","UnmuteChannelButton","ChannelHeaderMobile","closeRhs","closeLhs","hideSidebars","membership","USER_ID_PAIR_REGEXP","onChannelByIdentifierEnter","teamObj","moreChannelsByName","isDirectChannelIdentifier","getPathFromIdentifier","joinError","data2","getChannelError","handleChannelJoinError","goToDirectChannelByUserIds","doChannelChange","goToChannelByChannelName","goToDirectChannelByUserId","goToChannelByChannelId","groupId","markGroupChannelOpen","goToGroupChannelByGroupId","selectUserByUsername","goToDirectChannelByUsername","selectUserByEmail","getUserByEmail","goToDirectChannelByEmail","selectUser","defaultChannel","EditChannelPurposeModal","channelPurposeModal","getPurpose","trimRight","str","CreatePost","onOrientationChange","abs","lastOrientation","handleEmojiClose","sendReaction","saveDraftFrame","setDraft","draftsForChannel","tokens","updateChannel","userIsOutOfOffice","currentMembersCount","currentChannelMembersCount","getStatusFromSlashCommand","isStatusSlashCommand","editChannelHeaderModalData","isDirectOrGroup","editChannelPurposeModalData","onSubmitPost","itemIndex","FORWARD_SLASH","createPostControls","ctrlOrMetaKeyPressed","messageIsEmpty","draftMessageIsEmpty","ctrlEnterKeyCombo","upKeyOnly","shiftUpKeyCombo","ctrlKeyCombo","postMsgKeyPress","editLastPost","replyToLastPost","loadPrevMessage","loadNextMessage","currentUsersLatestPost","POST","latestReplyablePostId","replyBox","selectPostFromRightHandSideSearchByPostId","fillMessageFromHistory","clearDraftUploads","documentKeyHandler","setOrientationListeners","removeOrientationListeners","lastMessage","messageInHistoryItem","createTutorialTip","shouldEnableSendButton","fullWidthTextBox","ariaLabelMessageInput","postFooterClassName","sendButtonClass","attachmentsDisabled","getCreatePostControls","getChannelView","recentPostIdInChannel","getLatestReplyablePostId","PreferencesRedux","POST_POPOVER","TutorialIntroScreens","createScreenOne","createScreenTwo","createScreenThree","circles","createCircles","appDownloadImage","AppIcons","inviteModalLink","inviteText","restrictTeamInvite","supportInfo","supportEmail","createScreen","TutorialView","isRoot","townSquare","SupportEmail","ChannelView","deferredPostView","createDeferredPostView","channelView","dur1","measure","dur2","clearMarks","round","showTutorial","deactivatedChannel","onClickCloseChannel","DeferredPostView","PreRenderComponent","DeferredRenderWrapper","shouldRender","hoistStatics","deferComponentRender","getDeactivatedChannel","INTRO_SCREENS","ChannelIdentifierRouter","CenterChannel","lastReturnTo","lastChannelPath","lhsOpen","rhsMenuOpen","ChannelController","pathName","fetchingChannels","platform","navigator","LazyBackstageController","BackstageController","wakeUpInterval","lastTime","blurTime","loadProfilesForDirect","initTeam","setPreviousTeamId","finishedFetchingChannels","loadStatusesForChannelAndSidebar","teamsList","replyTextbox","mfaRequired","updateCurrentTeam","prevTeam","joinTeam","startPeriodicStatusUpdates","iNoBounce","disable","renderProps","redirect","sanitizedUrl","getPreviousTeamId","TEAM_NOT_FOUND","remover","IntlProvider","setAcceptLanguage","loadTranslationsIfNecessary","localeInfo","I18n","setLocalizeFunction","handleLocaleChange","previousTriggerId","subscribe","require","Redux","ReactRedux","ReactBootstrap","formatText","PDFJS","openInteractiveDialog","shouldShowTermsOfService","DiagnosticsEnabled","NoAccounts","DiagnosticId"],"mappings":"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","file":"6.9e7ea9b902b990a23d42.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport marked from 'marked';\n\nimport {intlShape} from 'utils/react_intl';\n\nconst TARGET_BLANK_URL_PREFIX = '!';\n\nexport class CustomRenderer extends marked.Renderer {\n    constructor(disableLinks = false) {\n        super();\n        this.disableLinks = disableLinks;\n    }\n\n    link(href, title, text) {\n        if (this.disableLinks) {\n            return text;\n        }\n        if (href[0] === TARGET_BLANK_URL_PREFIX) {\n            return `<a href=\"${href.substring(1, href.length)}\" rel=\"noreferrer\" target=\"_blank\">${text}</a>`;\n        }\n        return `<a href=\"${href}\">${text}</a>`;\n    }\n\n    paragraph(text) {\n        return text;\n    }\n}\n\n/*\n* Translations component with the same API as react-intl's <FormattedMessage> component except the message string\n* accepts markdown. It supports the following non-block-level markdown:\n* - *italic*\n* - **bold**\n* - `inline code`\n* - ~~strikethrough~~\n* - [link](http://example.com/)\n* - [link in new tab](!http://example.com/)\n* - line\\nbreaks\n*\n* Note: Line breaks (\\n) in a defaultMessage parameter string must be surrounded by curly brackets {} in JSX. Example:\n* <FormattedMarkdownMessage id='my.example' defaultMessage={'first line\\nsecond line'} />\n*/\nclass FormattedMarkdownMessage extends React.PureComponent {\n    static defaultProps = {\n        disableLinks: false\n    };\n\n    static get propTypes() {\n        return {\n            intl: intlShape.isRequired,\n            id: PropTypes.string.isRequired,\n            defaultMessage: PropTypes.string.isRequired,\n            values: PropTypes.object,\n            disableLinks: PropTypes.bool,\n        };\n    }\n\n    render() {\n        const origMsg = this.props.intl.formatMessage({\n            id: this.props.id,\n            defaultMessage: this.props.defaultMessage,\n        }, this.props.values);\n\n        const markedUpMessage = marked(origMsg, {\n            breaks: true,\n            sanitize: true,\n            renderer: new CustomRenderer(this.props.disableLinks),\n        });\n\n        return (<span dangerouslySetInnerHTML={{__html: markedUpMessage}}/>);\n    }\n}\n\nexport default injectIntl(FormattedMarkdownMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {OverlayTrigger as BaseOverlayTrigger, OverlayTriggerProps} from 'react-bootstrap';\nimport {IntlContext, IntlShape} from 'react-intl';\n\nexport {BaseOverlayTrigger};\n\ntype Props = OverlayTriggerProps;\n\nconst OverlayTrigger = React.forwardRef((props: Props, ref?: React.Ref<BaseOverlayTrigger>) => {\n    const {overlay, ...otherProps} = props;\n\n    // The overlay is rendered outside of the regular React context, and our version react-bootstrap can't forward\n    // that context itself, so we have to manually forward the react-intl context to this component's child.\n    const OverlayWrapper = ({intl, ...overlayProps}: {intl: IntlShape}) => (\n        <IntlContext.Provider value={intl}>\n            {React.cloneElement(overlay, overlayProps)}\n        </IntlContext.Provider>\n    );\n\n    return (\n        <IntlContext.Consumer>\n            {(intl): React.ReactNode => (\n                <BaseOverlayTrigger\n                    {...otherProps}\n                    ref={ref}\n                    overlay={\n                        <OverlayWrapper\n                            {...overlay.props}\n                            intl={intl}\n                        />\n                    }\n                />\n            )}\n        </IntlContext.Consumer>\n    );\n});\n\nOverlayTrigger.defaultProps = {\n    defaultOverlayShown: false,\n    trigger: ['hover', 'focus']\n};\nOverlayTrigger.displayName = 'OverlayTrigger';\n\nexport default OverlayTrigger;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\n\n// Prop types copied from the old version of\n\nexport const intlConfigPropTypes = {\n    locale: PropTypes.string,\n    timeZone: PropTypes.string,\n    formats: PropTypes.object,\n    messages: PropTypes.object,\n    textComponent: PropTypes.any,\n\n    defaultLocale: PropTypes.string,\n    defaultFormats: PropTypes.object,\n\n    onError: PropTypes.func,\n};\n\nexport const intlFormatPropTypes = {\n    formatDate: PropTypes.func.isRequired,\n    formatTime: PropTypes.func.isRequired,\n    formatRelativeTime: PropTypes.func.isRequired,\n    formatNumber: PropTypes.func.isRequired,\n    formatPlural: PropTypes.func.isRequired,\n    formatMessage: PropTypes.func.isRequired,\n    formatHTMLMessage: PropTypes.func.isRequired,\n};\n\nexport const intlShape = PropTypes.shape({\n    ...intlConfigPropTypes,\n    ...intlFormatPropTypes,\n    formatters: PropTypes.object,\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\n\nimport {\n    createDirectChannel,\n    fetchMyChannelsAndMembers,\n    getChannelByNameAndTeamName,\n    getChannelStats,\n    selectChannel,\n} from 'mattermost-redux/actions/channels';\nimport {logout, loadMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTeam, getMyTeamMember, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\nimport {getTeam as getTeamAction} from 'mattermost-redux/actions/teams';\nimport {getCurrentUser, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentChannelStats, getCurrentChannelId, getMyChannelMember, getRedirectChannelNameForTeam, getChannelsNameMapInTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {ChannelTypes} from 'mattermost-redux/action_types';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {handleNewPost} from 'actions/post_actions.jsx';\nimport {stopPeriodicStatusUpdates} from 'actions/status_actions.jsx';\nimport {loadProfilesForSidebar} from 'actions/user_actions.jsx';\nimport {closeRightHandSide, closeMenu as closeRhsMenu, updateRhsState} from 'actions/views/rhs';\nimport {clearUserCookie} from 'actions/views/cookie';\nimport {close as closeLhs} from 'actions/views/lhs';\nimport * as WebsocketActions from 'actions/websocket_actions.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\n\n// import {getCurrentLocale} from 'selectors/i18n';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport store from 'stores/redux_store.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\nimport WebSocketClient from 'client/web_websocket_client.jsx';\n\nimport {ActionTypes, Constants, PostTypes, RHSStates, ModalIdentifiers} from 'utils/constants';\n\n//import {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SubMenuModal from '../components/widgets/menu/menu_modals/submenu_modal/submenu_modal';\n\nimport {openModal} from './views/modals';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nexport function emitChannelClickEvent(channel) {\n    async function userVisitedFakeChannel(chan, success, fail) {\n        const state = getState();\n        const currentUserId = getCurrentUserId(state);\n        const otherUserId = Utils.getUserIdFromChannelName(chan);\n        const {data: receivedChannel} = await createDirectChannel(currentUserId, otherUserId)(dispatch, getState);\n        if (receivedChannel) {\n            success(receivedChannel);\n        } else {\n            fail();\n        }\n    }\n    function switchToChannel(chan) {\n        window.postMessage(\n            {\n                type: 'switch-to-channel',\n                message: {\n                    channel: chan\n                }\n            },\n            window.location.origin\n        );\n        const state = getState();\n        const userId = getCurrentUserId(state);\n        const teamId = $.chat_team_id ? $.chat_team_id : process.env.CHAT_TEAM_ID; //eslint-disable-line no-process-env\n        const isRHSOpened = getIsRhsOpen(state);\n        const isPinnedPostsShowing = getRhsState(state) === RHSStates.PIN;\n        const member = getMyChannelMember(state, chan.id);\n\n        dispatch(getChannelStats(chan.id));\n\n        if (chan.delete_at === 0) {\n            const penultimate = LocalStorageStore.getPreviousChannelName(userId, teamId);\n            if (penultimate !== chan.name) {\n                LocalStorageStore.setPenultimateChannelName(userId, teamId, penultimate);\n                LocalStorageStore.setPreviousChannelName(userId, teamId, chan.name);\n            }\n        }\n\n        // When switching to a different channel if the pinned posts is showing\n        // Update the RHS state to reflect the pinned post of the selected channel\n        if (isRHSOpened && isPinnedPostsShowing) {\n            dispatch(updateRhsState(RHSStates.PIN, chan.id));\n        }\n\n        loadProfilesForSidebar();\n\n        dispatch(batchActions([{\n            type: ChannelTypes.SELECT_CHANNEL,\n            data: chan.id,\n        }, {\n            type: ActionTypes.SELECT_CHANNEL_WITH_MEMBER,\n            data: chan.id,\n            channel: chan,\n            member: member || {},\n        }]));\n    }\n\n    if (channel.fake) {\n        userVisitedFakeChannel(\n            channel,\n            (data) => {\n                switchToChannel(data);\n            },\n            () => {\n                browserHistory.push('/' + this.state.currentTeam.name);\n            }\n        );\n    } else {\n        switchToChannel(channel);\n    }\n}\n\nexport function updateNewMessagesAtInChannel(channelId, last_viewed_at = Date.now()) {\n    return {\n        type: ActionTypes.UPDATE_CHANNEL_LAST_VIEWED_AT,\n        channel_id: channelId,\n        last_viewed_at,\n    };\n}\n\nexport function emitCloseRightHandSide() {\n    dispatch(closeRightHandSide());\n}\n\nexport function toggleShortcutsModal() {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_SHORTCUTS_MODAL,\n        value: true,\n    });\n}\n\nexport function showChannelPurposeUpdateModal(channel) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_CHANNEL_PURPOSE_UPDATE_MODAL,\n        value: true,\n        channel,\n    });\n}\n\nexport function showChannelNameUpdateModal(channel) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_CHANNEL_NAME_UPDATE_MODAL,\n        value: true,\n        channel,\n    });\n}\n\nexport function showGetPostLinkModal(post) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_GET_POST_LINK_MODAL,\n        value: true,\n        post,\n    });\n}\n\nexport function showGetPublicLinkModal(fileId) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL,\n        value: true,\n        fileId,\n    });\n}\n\nexport function showGetTeamInviteLinkModal() {\n    AppDispatcher.handleViewAction({\n        type: Constants.ActionTypes.TOGGLE_GET_TEAM_INVITE_LINK_MODAL,\n        value: true,\n    });\n}\n\nexport function showLeavePrivateChannelModal(channel) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL,\n        value: channel,\n    });\n}\n\nexport function showMobileSubMenuModal(elements) {\n    const submenuModalData = {\n        ModalId: ModalIdentifiers.MOBILE_SUBMENU,\n        dialogType: SubMenuModal,\n        dialogProps: {\n            elements,\n        },\n    };\n\n    dispatch(openModal(submenuModalData));\n}\n\nexport function sendEphemeralPost(message, channelId, parentId) {\n    const timestamp = Utils.getTimestamp();\n    const post = {\n        id: Utils.generateId(),\n        user_id: '0',\n        channel_id: channelId || getCurrentChannelId(getState()),\n        message,\n        type: PostTypes.EPHEMERAL,\n        create_at: timestamp,\n        update_at: timestamp,\n        root_id: parentId,\n        parent_id: parentId,\n        props: {},\n    };\n\n    dispatch(handleNewPost(post));\n}\n\nexport function sendAddToChannelEphemeralPost(user, addedUsername, addedUserId, channelId, postRootId = '', timestamp) {\n    const post = {\n        id: Utils.generateId(),\n        user_id: user.id,\n        channel_id: channelId || getCurrentChannelId(getState()),\n        message: '',\n        type: PostTypes.EPHEMERAL_ADD_TO_CHANNEL,\n        create_at: timestamp,\n        update_at: timestamp,\n        root_id: postRootId,\n        parent_id: postRootId,\n        props: {\n            username: user.username,\n            addedUsername,\n            addedUserId,\n        },\n    };\n\n    dispatch(handleNewPost(post));\n}\n\nlet lastTimeTypingSent = 0;\nexport function emitLocalUserTypingEvent(channelId, parentPostId) {\n    const userTyping = async (actionDispatch, actionGetState) => {\n        const state = actionGetState();\n        const config = getConfig(state);\n        const t = Date.now();\n        const stats = getCurrentChannelStats(state);\n        const membersInChannel = stats ? stats.member_count : 0;\n\n        if (((t - lastTimeTypingSent) > config.TimeBetweenUserTypingUpdatesMilliseconds) &&\n            (membersInChannel < config.MaxNotificationsPerChannel) && (config.EnableUserTypingMessages === 'true')) {\n            WebSocketClient.userTyping(channelId, parentPostId);\n            lastTimeTypingSent = t;\n        }\n\n        return {data: true};\n    };\n\n    return dispatch(userTyping);\n}\n\nexport function emitUserLoggedOutEvent(redirectTo = '/', shouldSignalLogout = true, userAction = true) {\n    // If the logout was intentional, discard knowledge about having previously been logged in.\n    // This bit is otherwise used to detect session expirations on the login page.\n    if (userAction) {\n        LocalStorageStore.setWasLoggedIn(false);\n    }\n\n    dispatch(logout()).then(() => {\n        if (shouldSignalLogout) {\n            BrowserStore.signalLogout();\n        }\n\n        BrowserStore.clear();\n        stopPeriodicStatusUpdates();\n        WebsocketActions.close();\n\n        clearUserCookie();\n\n        browserHistory.push(redirectTo);\n    }).catch(() => {\n        browserHistory.push(redirectTo);\n    });\n}\n\nexport function toggleSideBarRightMenuAction() {\n    return (doDispatch) => {\n        doDispatch(closeRightHandSide());\n        doDispatch(closeLhs());\n        doDispatch(closeRhsMenu());\n    };\n}\n\nexport function emitBrowserFocus(focus) {\n    dispatch({\n        type: ActionTypes.BROWSER_CHANGE_FOCUS,\n        focus,\n    });\n}\n\nasync function getTeamRedirectChannelIfIsAccesible(user, team) {\n    let state = getState();\n    let channel = null;\n\n    const myMember = getMyTeamMember(state, team.id);\n    if (!myMember || Object.keys(myMember).length === 0) {\n        return null;\n    }\n\n    let teamChannels = getChannelsNameMapInTeam(state, team.id);\n    if (!teamChannels || Object.keys(teamChannels).length === 0) {\n        // This should be executed in pretty limited scenarios (empty teams)\n        await dispatch(fetchMyChannelsAndMembers(team.id)); // eslint-disable-line no-await-in-loop\n        state = getState();\n        teamChannels = getChannelsNameMapInTeam(state, team.id);\n    }\n\n    let channelName = LocalStorageStore.getPreviousChannelName(user.id, team.id);\n    channel = teamChannels[channelName];\n    let channelMember = getMyChannelMember(state, channel && channel.id);\n\n    if (!channel || !channelMember) {\n        // This should be executed in pretty limited scenarios (when the last visited channel in the team has been removed)\n        await dispatch(getChannelByNameAndTeamName(team.name, channelName)); // eslint-disable-line no-await-in-loop\n        state = getState();\n        teamChannels = getChannelsNameMapInTeam(state, team.id);\n        channel = teamChannels[channelName];\n        channelMember = getMyChannelMember(state, channel && channel.id);\n    }\n\n    if (!channel || !channelMember) {\n        channelName = getRedirectChannelNameForTeam(state, team.id);\n        channel = teamChannels[channelName];\n        channelMember = getMyChannelMember(state, channel && channel.id);\n    }\n\n    if (channel && channelMember) {\n        return channel;\n    }\n    return null;\n}\n\nexport async function redirectUserToDefaultTeam() {\n    let state = getState();\n\n    // Assume we need to load the user if they don't have any team memberships loaded or the user loaded\n    let user = getCurrentUser(state);\n    const shouldLoadUser = Utils.isEmptyObject(getTeamMemberships(state)) || !user;\n\n    if (shouldLoadUser) {\n        await dispatch(loadMe());\n        state = getState();\n        user = getCurrentUser(state);\n    }\n\n    if (!user) {\n        return;\n    }\n\n    //const locale = getCurrentLocale(state);\n    //const teamId = LocalStorageStore.getPreviousTeamId(user.id);\n    let teamId = '';\n    if ($.chat_team_id) {\n        teamId = $.chat_team_id;\n    }\n\n    if (process.env.CHAT_TEAM_ID) { //eslint-disable-line no-process-env\n        teamId = process.env.CHAT_TEAM_ID; //eslint-disable-line no-process-env\n    }\n\n    //let myTeams = getMyTeams(state);\n    //if (myTeams.length === 0) {\n    //    browserHistory.push('/select_team');\n    //    return;\n    //}\n\n    await dispatch(getTeamAction(teamId));\n    state = getState();\n\n    const team = getTeam(state, teamId);\n\n    if (team) {\n        const channel = await getTeamRedirectChannelIfIsAccesible(user, team);\n        if (channel) {\n            dispatch(selectChannel(channel.id));\n            browserHistory.push(`/${team.name}/channels/${channel.name}`);\n        }\n    }\n\n    // myTeams = filterAndSortTeamsByDisplayName(myTeams, locale);\n\n    // for (const myTeam of myTeams) {\n    //     // This should execute async behavior in a pretty limited set of situations, so shouldn't be a problem\n    //     const channel = await getTeamRedirectChannelIfIsAccesible(user, myTeam); // eslint-disable-line no-await-in-loop\n    //     if (channel) {\n    //         dispatch(selectChannel(channel.id));\n    //         browserHistory.push(`/${myTeam.name}/channels/${channel.name}`);\n    //         return;\n    //     }\n    // }\n\n    // browserHistory.push('/select_team');\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    position: 'absolute' | 'fixed' | 'relative' | 'static' | 'inherit';\n    style?: object;\n    message?: ReactNode;\n}\n\nexport default class LoadingScreen extends React.Component<Props> {\n    public static defaultProps: Partial<Props> = {\n        position: 'relative',\n        style: {},\n    }\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {};\n    }\n\n    public render(): JSX.Element {\n        let message: ReactNode = (\n            <FormattedMessage\n                id='loading_screen.loading'\n                defaultMessage='Loading'\n            />\n        );\n\n        if (this.props.message) {\n            message = this.props.message;\n        }\n\n        return (\n            <div\n                className='loading-screen'\n                style={{position: this.props.position, ...this.props.style}}\n            >\n                <div className='loading__content'>\n                    <h3>\n                        {message}\n                    </h3>\n                    <div className='round round-1'/>\n                    <div className='round round-2'/>\n                    <div className='round round-3'/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ConfirmModal extends React.Component {\n    static propTypes = {\n\n        /*\n         * Set to show modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Title to use for the modal\n         */\n        title: PropTypes.node,\n\n        /*\n         * Message to display in the body of the modal\n         */\n        message: PropTypes.node,\n\n        /*\n         * The CSS class to apply to the confirm button\n         */\n        confirmButtonClass: PropTypes.string,\n\n        /*\n         * The CSS class to apply to the modal\n         */\n        modalClass: PropTypes.string,\n\n        /*\n         * Text/jsx element on the confirm button\n         */\n        confirmButtonText: PropTypes.node,\n\n        /*\n         * Text/jsx element on the cancel button\n         */\n        cancelButtonText: PropTypes.node,\n\n        /*\n         * Set to show checkbox\n         */\n        showCheckbox: PropTypes.bool,\n\n        /*\n         * Text/jsx element to display with the checkbox\n         */\n        checkboxText: PropTypes.node,\n\n        /*\n         * Function called when the confirm button or ENTER is pressed. Passes `true` if the checkbox is checked\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the cancel button is pressed or the modal is hidden. Passes `true` if the checkbox is checked\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onExited: PropTypes.func,\n\n        /*\n         * Set to hide the cancel button\n         */\n        hideCancel: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        title: '',\n        message: '',\n        confirmButtonClass: 'btn btn-primary',\n        confirmButtonText: '',\n        modalClass: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checked: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.show) {\n            document.addEventListener('keydown', this.handleKeypress);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeypress);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.show !== this.props.show;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.show && !this.props.show) {\n            document.removeEventListener('keydown', this.handleKeypress);\n        } else if (!prevProps.show && this.props.show) {\n            document.addEventListener('keydown', this.handleKeypress);\n        }\n    }\n\n    handleKeypress = (e) => {\n        if (e.key === 'Enter' && this.props.show) {\n            const cancelButton = document.getElementById('cancelModalButton');\n            if (cancelButton && cancelButton === document.activeElement) {\n                this.handleCancel();\n            } else {\n                this.handleConfirm();\n            }\n        }\n    }\n\n    handleCheckboxChange = (e) => {\n        this.setState({checked: e.target.checked});\n    }\n\n    handleConfirm = () => {\n        this.props.onConfirm(this.state.checked);\n    }\n\n    handleCancel = () => {\n        this.props.onCancel(this.state.checked);\n    }\n\n    render() {\n        let checkbox;\n        if (this.props.showCheckbox) {\n            checkbox = (\n                <div className='checkbox text-left margin-bottom--none'>\n                    <label>\n                        <input\n                            type='checkbox'\n                            onChange={this.handleCheckboxChange}\n                            value={this.state.checked}\n                        />\n                        {this.props.checkboxText}\n                    </label>\n                </div>\n            );\n        }\n\n        let cancelText;\n        if (this.props.cancelButtonText) {\n            cancelText = this.props.cancelButtonText;\n        } else {\n            cancelText = (\n                <FormattedMessage\n                    id='confirm_modal.cancel'\n                    defaultMessage='Cancel'\n                />\n            );\n        }\n\n        let cancelButton;\n        if (!this.props.hideCancel) {\n            cancelButton = (\n                <button\n                    type='button'\n                    className='btn btn-link btn-cancel'\n                    onClick={this.handleCancel}\n                    id='cancelModalButton'\n                >\n                    {cancelText}\n                </button>\n            );\n        }\n\n        return (\n            <Modal\n                className={'modal-confirm ' + this.props.modalClass}\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.props.onCancel}\n                onExited={this.props.onExited}\n                id='confirmModal'\n                role='dialog'\n                aria-labelledby='confirmModalLabel'\n            >\n                <Modal.Header closeButton={false}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='confirmModalLabel'\n                    >\n                        {this.props.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.props.message}\n                    {checkbox}\n                </Modal.Body>\n                <Modal.Footer>\n                    {cancelButton}\n                    <button\n                        autoFocus={true}\n                        type='button'\n                        className={this.props.confirmButtonClass}\n                        onClick={this.handleConfirm}\n                        id='confirmModalButton'\n                    >\n                        {this.props.confirmButtonText}\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport function openModal(modalData) {\n    return (dispatch) => {\n        const action = {\n            type: ActionTypes.MODAL_OPEN,\n            modalId: modalData.modalId,\n            dialogProps: modalData.dialogProps,\n            dialogType: modalData.dialogType,\n        };\n\n        dispatch(action);\n    };\n}\n\nexport function closeModal(modalId) {\n    return (dispatch) => {\n        const action = {\n            type: ActionTypes.MODAL_CLOSE,\n            modalId,\n        };\n\n        dispatch(action);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as AdminActions from 'mattermost-redux/actions/admin';\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport * as TeamActions from 'mattermost-redux/actions/teams';\nimport {Client4} from 'mattermost-redux/client';\nimport {bindClientFunc} from 'mattermost-redux/actions/helpers';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport {getOnNavigationConfirmed} from 'selectors/views/admin';\nimport store from 'stores/redux_store.jsx';\nimport {ActionTypes} from 'utils/constants';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nexport async function reloadConfig(success, error) {\n    const {data, error: err} = await dispatch(AdminActions.reloadConfig());\n    if (data && success) {\n        dispatch(AdminActions.getConfig());\n        dispatch(AdminActions.getEnvironmentConfig());\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function adminResetMfa(userId, success, error) {\n    const {data, error: err} = await UserActions.updateUserMfa(userId, false)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function getClusterStatus(success, error) {\n    const {data, error: err} = await AdminActions.getClusterStatus()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function ldapTest(success, error) {\n    const {data, error: err} = await AdminActions.testLdap()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function invalidateAllCaches(success, error) {\n    const {data, error: err} = await AdminActions.invalidateCaches()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function recycleDatabaseConnection(success, error) {\n    const {data, error: err} = await AdminActions.recycleDatabase()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function adminResetEmail(user, success, error) {\n    const {data, error: err} = await UserActions.patchUser(user)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function samlCertificateStatus(success, error) {\n    const {data, error: err} = await AdminActions.getSamlCertificateStatus()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport function getOAuthAppInfo(clientId) {\n    return bindClientFunc({\n        clientFunc: Client4.getOAuthAppInfo,\n        params: [clientId],\n    });\n}\n\nexport function allowOAuth2({responseType, clientId, redirectUri, state, scope}) {\n    return bindClientFunc({\n        clientFunc: Client4.authorizeOAuthApp,\n        params: [responseType, clientId, redirectUri, state, scope],\n    });\n}\n\nexport async function emailToLdap(loginId, password, token, ldapId, ldapPassword, success, error) {\n    const {data, error: err} = await UserActions.switchEmailToLdap(loginId, password, ldapId, ldapPassword, token)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function emailToOAuth(loginId, password, token, newType, success, error) {\n    const {data, error: err} = await UserActions.switchEmailToOAuth(newType, loginId, password, token)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function oauthToEmail(currentService, email, password, success, error) {\n    const {data, error: err} = await UserActions.switchOAuthToEmail(currentService, email, password)(dispatch, getState);\n    if (data) {\n        if (data.follow_link) {\n            emitUserLoggedOutEvent(data.follow_link);\n        }\n        if (success) {\n            success(data);\n        }\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function uploadBrandImage(brandImage, success, error) {\n    const {data, error: err} = await AdminActions.uploadBrandImage(brandImage)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function deleteBrandImage(success, error) {\n    const {data, error: err} = await AdminActions.deleteBrandImage()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function uploadPublicSamlCertificate(file, success, error) {\n    const {data, error: err} = await AdminActions.uploadPublicSamlCertificate(file)(dispatch, getState);\n    if (data && success) {\n        success('saml-public.crt');\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function uploadPrivateSamlCertificate(file, success, error) {\n    const {data, error: err} = await AdminActions.uploadPrivateSamlCertificate(file)(dispatch, getState);\n    if (data && success) {\n        success('saml-private.key');\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function uploadIdpSamlCertificate(file, success, error) {\n    const {data, error: err} = await AdminActions.uploadIdpSamlCertificate(file)(dispatch, getState);\n    if (data && success) {\n        success('saml-idp.crt');\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function removePublicSamlCertificate(success, error) {\n    const {data, error: err} = await AdminActions.removePublicSamlCertificate()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function removePrivateSamlCertificate(success, error) {\n    const {data, error: err} = await AdminActions.removePrivateSamlCertificate()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function removeIdpSamlCertificate(success, error) {\n    const {data, error: err} = await AdminActions.removeIdpSamlCertificate()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function getStandardAnalytics(teamId) {\n    await AdminActions.getStandardAnalytics(teamId)(dispatch, getState);\n}\n\nexport async function getAdvancedAnalytics(teamId) {\n    await AdminActions.getAdvancedAnalytics(teamId)(dispatch, getState);\n}\n\nexport async function getBotPostsPerDayAnalytics(teamId) {\n    await AdminActions.getBotPostsPerDayAnalytics(teamId)(dispatch, getState);\n}\n\nexport async function getPostsPerDayAnalytics(teamId) {\n    await AdminActions.getPostsPerDayAnalytics(teamId)(dispatch, getState);\n}\n\nexport async function getUsersPerDayAnalytics(teamId) {\n    await AdminActions.getUsersPerDayAnalytics(teamId)(dispatch, getState);\n}\n\nexport async function elasticsearchTest(config, success, error) {\n    const {data, error: err} = await AdminActions.testElasticsearch(config)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function testS3Connection(success, error) {\n    const {data, error: err} = await AdminActions.testS3Connection()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function elasticsearchPurgeIndexes(success, error) {\n    const {data, error: err} = await AdminActions.purgeElasticsearchIndexes()(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport function setNavigationBlocked(blocked) {\n    return {\n        type: ActionTypes.SET_NAVIGATION_BLOCKED,\n        blocked,\n    };\n}\n\nexport function deferNavigation(onNavigationConfirmed) {\n    return {\n        type: ActionTypes.DEFER_NAVIGATION,\n        onNavigationConfirmed,\n    };\n}\n\nexport function cancelNavigation() {\n    return {\n        type: ActionTypes.CANCEL_NAVIGATION,\n    };\n}\n\nexport function confirmNavigation() {\n    // have to rename these because of lint no-shadow\n    return (thunkDispatch, thunkGetState) => {\n        const callback = getOnNavigationConfirmed(thunkGetState());\n\n        if (callback) {\n            callback();\n        }\n\n        thunkDispatch({\n            type: ActionTypes.CONFIRM_NAVIGATION,\n        });\n    };\n}\n\nexport async function invalidateAllEmailInvites(success, error) {\n    const {data, error: err} = await dispatch(TeamActions.invalidateAllEmailInvites());\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function testSmtp(success, error) {\n    const {data, error: err} = await dispatch(AdminActions.testEmail());\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport function registerAdminConsolePlugin(pluginId, reducer) {\n    return (storeDispatch) => {\n        storeDispatch({\n            type: ActionTypes.RECEIVED_ADMIN_CONSOLE_REDUCER,\n            data: {\n                pluginId,\n                reducer,\n            },\n        });\n    };\n}\n\nexport function unregisterAdminConsolePlugin(pluginId) {\n    return (storeDispatch) => {\n        storeDispatch({\n            type: ActionTypes.REMOVED_ADMIN_CONSOLE_REDUCER,\n            data: {\n                pluginId,\n            },\n        });\n    };\n}\n\nexport async function testSiteURL(success, error, siteURL) {\n    const {data, error: err} = await dispatch(AdminActions.testSiteURL(siteURL));\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport function registerAdminConsoleCustomSetting(pluginId, key, component, {showTitle}) {\n    return (storeDispatch) => {\n        storeDispatch({\n            type: ActionTypes.RECEIVED_ADMIN_CONSOLE_CUSTOM_COMPONENT,\n            data: {\n                pluginId,\n                key,\n                component,\n                options: {showTitle},\n            },\n        });\n    };\n}\n\nexport async function getSamlMetadataFromIdp(success, error, samlMetadataURL) {\n    const {data, error: err} = await dispatch(AdminActions.getSamlMetadataFromIdp(samlMetadataURL));\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function setSamlIdpCertificateFromMetadata(success, error, certData) {\n    const {data, error: err} = await AdminActions.setSamlIdpCertificateFromMetadata(certData)(dispatch, getState);\n    if (data && success) {\n        success('saml-idp.crt');\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {showMobileSubMenuModal} from 'actions/global_actions';\n\nimport './menu_item.scss';\n\n// Requires an object conforming to a submenu structure passed to registerPostDropdownSubMenuAction\n// of the form:\n// {\n//     \"id\": \"A\",\n//     \"parentMenuId\": null,\n//     \"text\": \"A text\",\n//     \"subMenu\": [\n//         {\n//             \"id\": \"B\",\n//             \"parentMenuId\": \"A\",\n//             \"text\": \"B text\"\n//             \"subMenu\": [],\n//             \"action\": () => {},\n//             \"filter\": () => {},\n//         }\n//     ],\n//     \"action\": () => {},\n//     \"filter\": () => {},\n// }\n// Submenus can contain Submenus as well\n\ntype Props = {\n    id?: string;\n    postId?: string;\n    text: React.ReactNode;\n    subMenu?: Props[];\n    icon?: React.ReactNode;\n    action?: (id?: string) => {};\n    filter?: (id?: string) => {};\n    xOffset?: number;\n    ariaLabel?: string;\n    root?: boolean;\n    show?: boolean;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class SubMenuItem extends React.PureComponent<Props, State> {\n    private node: React.RefObject<any>;\n\n    public static defaultProps = {\n        show: true,\n    };\n\n    public constructor(props: Props) {\n        super(props);\n        this.node = React.createRef();\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    private show = () => {\n        this.setState({show: true});\n    }\n\n    private hide = () => {\n        this.setState({show: false});\n    }\n\n    private onClick = (event: React.MouseEvent<HTMLElement>) => {\n        const {id, postId, subMenu, action, root} = this.props;\n        const isMobile = Utils.isMobile();\n        const pathPair = Object.entries(event.nativeEvent).find(([key, value]) => key === 'path');\n        let path: HTMLElement[] | undefined;\n        if (pathPair) {\n            path = pathPair[1];\n        }\n        if (isMobile) {\n            if (subMenu && subMenu.length) { // if contains a submenu, call openModal with it\n                if (!root) { //required to close only the original menu\n                    event.stopPropagation();\n                }\n                showMobileSubMenuModal(subMenu);\n            } else if (action) { // leaf node in the tree handles action only\n                action(postId);\n            }\n        } else if (path && // the first 2 elements in path match original event id\n            path.slice(0, 2).find((e) => e.id === id) &&\n            action) {\n            action(postId);\n        } else if (!path && !event.nativeEvent.composedPath && action) { //for tests only that don't contain `path` or `composedPath`\n            action(postId);\n        } else if (!path && (event.nativeEvent.composedPath() as HTMLElement[]).slice(0, 2).find((e) => e.id === id) && action) {\n            action(postId);\n        }\n    }\n\n    public render() {\n        const {id, postId, text, subMenu, root, icon, filter, xOffset, ariaLabel} = this.props;\n        const isMobile = Utils.isMobile();\n\n        if (filter && !filter(id)) {\n            return ('');\n        }\n\n        let textProp = text;\n        if (icon) {\n            textProp = (\n                <React.Fragment>\n                    <span className='icon'>{icon}</span>\n                    {text}\n                </React.Fragment>\n            );\n        }\n\n        const hasSubmenu = subMenu && subMenu.length;\n        const parentWidth = this.node && this.node.current ? this.node.current.getBoundingClientRect().width : 0;\n        const childOffset = (React.isValidElement(text)) ? 20 : 0;\n        const offset = (root ? 2 : childOffset);\n        const subMenuStyle = {\n            visibility: (this.state.show && hasSubmenu && !isMobile ? 'visible' : 'hidden') as 'visible' | 'hidden',\n            right: (parseInt(String(xOffset), 10) - offset) + 'px',\n        };\n\n        let subMenuContent: React.ReactNode = '';\n\n        if (!isMobile) {\n            subMenuContent = (\n                <ul\n                    className={'a11y__popup Menu dropdown-menu SubMenu'}\n                    style={subMenuStyle}\n                >\n                    {hasSubmenu ? subMenu!.map((s) => {\n                        return (\n                            <SubMenuItem\n                                key={s.id}\n                                id={s.id}\n                                postId={postId}\n                                text={s.text}\n                                subMenu={s.subMenu}\n                                action={s.action}\n                                filter={s.filter}\n                                xOffset={parentWidth}\n                                ariaLabel={ariaLabel}\n                                root={false}\n                            />\n                        );\n                    }) : ''}\n                </ul>\n            );\n        }\n\n        return (\n            <li\n                className={'SubMenuItem MenuItem'}\n                role='menuitem'\n                id={id + '_menuitem'}\n                ref={this.node}\n            >\n                <div\n                    id={id}\n                    aria-label={ariaLabel}\n                    onMouseEnter={this.show}\n                    onMouseLeave={this.hide}\n                    onClick={this.onClick}\n                >\n                    <span\n                        id={'channelHeaderDropdownIconLeft_' + id}\n                        className={'fa fa-angle-left SubMenu__icon-left' + (hasSubmenu && !isMobile ? '' : '-empty' + (isMobile ? ' mobile' : ''))}\n                        aria-label={Utils.localizeMessage('post_info.submenu.icon', 'submenu icon').toLowerCase()}\n                    />\n                    {textProp}\n                    <span\n                        id={'channelHeaderDropdownIconRight_' + id}\n                        className={'fa fa-angle-right SubMenu__icon-right' + (hasSubmenu && isMobile ? '' : '-empty')}\n                        aria-label={Utils.localizeMessage('post_info.submenu.icon', 'submenu icon').toLowerCase()}\n                    />\n                    {subMenuContent}\n                </div>\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport './menu_group.scss';\n\ntype Props = {\n    divider?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\nexport default class MenuGroup extends React.PureComponent<Props> {\n    handleDividerClick = (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    public render() {\n        const {children} = this.props;\n\n        const divider = this.props.divider || (\n            <li\n                className='MenuGroup menu-divider'\n                onClick={this.handleDividerClick}\n            />\n        );\n\n        return (\n            <React.Fragment>\n                {divider}\n                {children}\n            </React.Fragment>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport menuItem from './menu_item';\n\ntype Props = {\n    onClick: (e: React.MouseEvent) => void;\n    ariaLabel?: string;\n    text: React.ReactNode;\n    extraText?: string;\n    id?: string;\n    buttonClass?: string;\n    isDangerous?: boolean;\n    testid?: string;\n}\nexport const MenuItemActionImpl = ({onClick, ariaLabel, text, extraText, id, buttonClass, isDangerous, testid}: Props) => (\n    <button\n        data-testid={testid}\n        id={id}\n        aria-label={ariaLabel}\n        className={'style--none' + (extraText ? ' MenuItem__with-help' : '') + (buttonClass ? ' ' + buttonClass : '') + (isDangerous ? ' MenuItem__dangerous' : '')}\n        onClick={onClick}\n    >\n        {text && <span className='MenuItem__primary-text'>{text}</span>}\n        {extraText && <span className='MenuItem__help-text'>{extraText}</span>}\n    </button>\n);\n\nconst MenuItemAction = menuItem(MenuItemActionImpl);\nMenuItemAction.displayName = 'MenuItemAction';\n\nexport default MenuItemAction;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport menuItem from './menu_item';\n\ntype Props = {\n    url: string;\n    text: React.ReactNode;\n}\nexport const MenuItemExternalLinkImpl: React.FC<Props> = ({url, text}: Props) => (\n    <a\n        target='_blank'\n        rel='noopener noreferrer'\n        href={url}\n    >\n        {text}\n    </a>\n);\n\nconst MenuItemExternalLink = menuItem(MenuItemExternalLinkImpl);\nMenuItemExternalLink.displayName = 'MenuItemExternalLink';\nexport default MenuItemExternalLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport menuItem from './menu_item';\n\ntype Props = {\n    to: string;\n    text: React.ReactNode;\n}\n\nexport const MenuItemLinkImpl: React.FC<Props> = ({to, text}: Props) => <Link to={to}><span className='MenuItem__primary-text'>{text}</span></Link>;\n\nconst MenuItemLink = menuItem(MenuItemLinkImpl);\nMenuItemLink.displayName = 'MenuItemLink';\n\nexport default MenuItemLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ToggleModalButtonRedux from 'components/toggle_modal_button_redux';\n\nimport menuItem from './menu_item';\n\ntype Props = {\n    modalId: string;\n    dialogType: React.ComponentType<any>;\n    dialogProps?: object;\n    extraText?: string;\n    text: string;\n}\n\nexport const MenuItemToggleModalReduxImpl: React.FC<Props> = ({modalId, dialogType, dialogProps, text, extraText}: Props) => (\n    <ToggleModalButtonRedux\n        accessibilityLabel={text}\n        modalId={modalId}\n        dialogType={dialogType}\n        dialogProps={dialogProps}\n        className={extraText && 'MenuItem__with-help'}\n    >\n        {text && <span className='MenuItem__primary-text'>{text}</span>}\n        {extraText && <span className='MenuItem__help-text'>{extraText}</span>}\n    </ToggleModalButtonRedux>\n);\n\nconst MenuItemToggleModalRedux = menuItem(MenuItemToggleModalReduxImpl);\nMenuItemToggleModalRedux.displayName = 'MenuItemToggleModalRedux';\n\nexport default MenuItemToggleModalRedux;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {isMobile} from 'utils/utils';\n\nimport SubMenuItem from './menu_items/submenu_item';\n\nimport MenuGroup from './menu_group';\nimport MenuItemAction from './menu_items/menu_item_action';\nimport MenuItemExternalLink from './menu_items/menu_item_external_link';\nimport MenuItemLink from './menu_items/menu_item_link';\nimport MenuItemToggleModalRedux from './menu_items/menu_item_toggle_modal_redux';\n\nimport './menu.scss';\n\ntype Props = {\n    children?: React.ReactNode;\n    openLeft?: boolean;\n    openUp?: boolean;\n    id?: string;\n    ariaLabel: string;\n    customStyles?: object;\n}\n\nexport default class Menu extends React.PureComponent<Props> {\n    public static Group = MenuGroup\n    public static ItemAction = MenuItemAction\n    public static ItemExternalLink = MenuItemExternalLink\n    public static ItemLink = MenuItemLink\n    public static ItemToggleModalRedux = MenuItemToggleModalRedux\n    public static ItemSubMenu = SubMenuItem\n\n    public node: React.RefObject<HTMLUListElement>; //Public because it is used by tests\n    private observer: MutationObserver;\n\n    public constructor(props: Props) {\n        super(props);\n        this.node = React.createRef();\n        this.observer = new MutationObserver(this.hideUnneededDividers);\n    }\n\n    public hideUnneededDividers = () => { //Public because it is used by tests\n        if (this.node.current === null) {\n            return;\n        }\n\n        this.observer.disconnect();\n        const children = Object.values(this.node.current.children).slice(0, this.node.current.children.length) as HTMLElement[];\n\n        // Hiding dividers at beginning and duplicated ones\n        let prevWasDivider = false;\n        let isAtBeginning = true;\n        for (const child of children) {\n            if (child.classList.contains('menu-divider') || child.classList.contains('mobile-menu-divider')) {\n                child.style.display = 'block';\n                if (isAtBeginning || prevWasDivider) {\n                    child.style.display = 'none';\n                }\n                prevWasDivider = true;\n            } else {\n                isAtBeginning = false;\n                prevWasDivider = false;\n            }\n        }\n\n        // Hiding trailing dividers\n        for (const child of children.reverse()) {\n            if (child.classList.contains('menu-divider') || child.classList.contains('mobile-menu-divider')) {\n                child.style.display = 'none';\n            } else {\n                break;\n            }\n        }\n        this.observer.observe(this.node.current, {attributes: true, childList: true, subtree: true});\n    }\n\n    public componentDidMount() {\n        this.hideUnneededDividers();\n    }\n\n    public componentDidUpdate() {\n        this.hideUnneededDividers();\n    }\n\n    public componentWillUnmount() {\n        this.observer.disconnect();\n    }\n\n    // Used from DotMenu component to know in which direction show the menu\n    public rect() {\n        if (this.node && this.node.current) {\n            return this.node.current.getBoundingClientRect();\n        }\n        return null;\n    }\n\n    handleMenuClick = (e: React.MouseEvent) => {\n        if (e.target === this.node.current) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n\n    public render() {\n        const {children, openUp, openLeft, id, ariaLabel, customStyles} = this.props;\n        let styles: React.CSSProperties = {};\n        if (customStyles) {\n            styles = customStyles;\n        } else {\n            if (openLeft && !isMobile()) {\n                styles.left = 'inherit';\n                styles.right = 0;\n            }\n            if (openUp && !isMobile()) {\n                styles.bottom = '100%';\n                styles.top = 'auto';\n            }\n        }\n\n        return (\n            <div\n                aria-label={ariaLabel}\n                className='a11y__popup Menu'\n                id={id}\n                role='menu'\n            >\n                <ul\n                    ref={this.node}\n                    style={styles}\n                    className='Menu__content dropdown-menu'\n                    onClick={this.handleMenuClick}\n                >\n                    {children}\n                </ul>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    placeholder: {\n        id: string;\n        defaultMessage: string;\n        values?: {string: any};\n    };\n    value?: string;\n};\n\nconst LocalizedInput = React.forwardRef((props: Props, ref?: React.Ref<HTMLInputElement>) => {\n    const {placeholder, ...otherProps} = props;\n\n    return (\n        <FormattedMessage\n            id={placeholder.id}\n            defaultMessage={placeholder.defaultMessage}\n            values={placeholder.values}\n        >\n            {(localizedPlaceholder: (string | JSX.Element)) => (\n                <input\n                    {...otherProps}\n                    ref={ref}\n                    placeholder={localizedPlaceholder as string}\n                />\n            )}\n        </FormattedMessage>\n    );\n});\nLocalizedInput.displayName = 'LocalizedInput';\n\nexport default LocalizedInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\n// accepts either a single error or an array of errors\ntype Props = {\n    type?: React.ReactNode;\n    error?: React.ReactNode;\n    textClassName?: string;\n    iconClassName?: string;\n    margin?: boolean;\n    errors?: React.ReactNode[];\n}\n\nexport default class FormError extends React.Component<Props> {\n    public static defaultProps = {\n        error: null,\n        errors: [],\n    }\n    public render() {\n        const {error = null, errors = [], iconClassName, margin, textClassName, type} = this.props;\n\n        if (!error && errors.length === 0) {\n            return null;\n        }\n\n        // look for the first truthy error to display\n        let message = error;\n\n        if (!message) {\n            for (const err of errors) {\n                if (err) {\n                    message = err;\n                }\n            }\n        }\n\n        if (!message) {\n            return null;\n        }\n\n        if (type === 'modal') {\n            return (\n                <div className='form-group'>\n                    <label className='col-sm-12 has-error'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        if (type === 'backstage') {\n            return (\n                <div className='pull-left has-error'>\n                    <label className='control-label'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        if (margin) {\n            return (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <div className={`col-sm-12 ${textClassName || 'has-error'}`}>\n                <label className='control-label'>\n                    <i className={`fa ${iconClassName || 'fa-exclamation-circle'}`}/> {message}\n                </label>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {chain, tween, styler, action} from 'popmotion';\nimport {CSSTransition} from 'react-transition-group';\n\nimport {isMobile} from 'utils/utils.jsx';\n\nconst ANIMATION_DURATION = 80;\n\ntype Props = {\n    children?: React.ReactNode;\n    show: boolean;\n}\n\nexport default class MenuWrapperAnimation extends React.PureComponent<Props> {\n    private onEntering = (node: HTMLElement, isAppearing: boolean) => {\n        const nodeStyler = styler(node);\n        chain(\n            action(({update, complete}) => {\n                update({display: 'block'});\n                complete();\n            }),\n            tween({from: {opacity: 0}, to: {opacity: 1}, duration: ANIMATION_DURATION}),\n        ).start(nodeStyler.set);\n    }\n\n    private onExiting = (node: HTMLElement) => {\n        const nodeStyler = styler(node);\n        chain(\n            tween({from: {opacity: 1}, to: {opacity: 0}, duration: ANIMATION_DURATION}),\n            action(({update, complete}) => {\n                update({display: 'none'});\n                complete();\n            }),\n        ).start(nodeStyler.set);\n    }\n\n    public render() {\n        return (\n            <CSSTransition\n                in={this.props.show}\n                classNames='MenuWrapperAnimation'\n                enter={true}\n                exit={true}\n                mountOnEnter={true}\n                unmountOnExit={true}\n                {...(isMobile() ? {} : {\n                    onEntering: this.onEntering,\n                    onExiting: this.onExiting,\n                })}\n                timeout={{\n                    enter: ANIMATION_DURATION,\n                    exit: ANIMATION_DURATION,\n                }}\n            >\n                {this.props.children}\n            </CSSTransition>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Constants from 'utils/constants';\n\nimport MenuWrapperAnimation from './menu_wrapper_animation';\n\nimport './menu_wrapper.scss';\n\ntype Props = {\n    children?: React.ReactNode;\n    className: string;\n    onToggle?: (open: boolean) => void;\n    animationComponent: any;\n    id?: string;\n}\n\ntype State = {\n    open: boolean;\n}\n\nexport default class MenuWrapper extends React.PureComponent<Props, State> {\n    private node: React.RefObject<HTMLDivElement>;\n\n    public static defaultProps = {\n        className: '',\n        animationComponent: MenuWrapperAnimation,\n    };\n\n    public constructor(props: Props) {\n        super(props);\n        if (!Array.isArray(props.children) || props.children.length !== 2) {\n            throw new Error('MenuWrapper needs exactly 2 children');\n        }\n        this.state = {\n            open: false,\n        };\n        this.node = React.createRef();\n    }\n\n    public componentDidMount() {\n        document.addEventListener('click', this.closeOnBlur, true);\n        document.addEventListener('keyup', this.keyboardClose, true);\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.closeOnBlur, true);\n        document.removeEventListener('keyup', this.keyboardClose, true);\n    }\n\n    private keyboardClose = (e: KeyboardEvent) => {\n        if (e.key === Constants.KeyCodes.ESCAPE[0]) {\n            this.close();\n        }\n\n        if (e.key === Constants.KeyCodes.TAB[0]) {\n            this.closeOnBlur(e);\n        }\n    }\n\n    private closeOnBlur = (e: Event) => {\n        if (this.node && this.node.current && e.target && this.node.current.contains(e.target as Node)) {\n            return;\n        }\n\n        this.close();\n    }\n\n    private close = () => {\n        if (this.state.open) {\n            this.setState({open: false});\n            if (this.props.onToggle) {\n                this.props.onToggle(false);\n            }\n        }\n    }\n\n    private toggle = () => {\n        const newState = !this.state.open;\n        this.setState({open: newState});\n        if (this.props.onToggle) {\n            this.props.onToggle(newState);\n        }\n    }\n\n    public render() {\n        const {children} = this.props;\n\n        const Animation = this.props.animationComponent;\n\n        return (\n            <div\n                id={this.props.id}\n                className={'MenuWrapper ' + this.props.className}\n                onClick={this.toggle}\n                ref={this.node}\n            >\n                {children ? Object.values(children)[0] : {}}\n                <Animation show={this.state.open}>\n                    {children ? Object.values(children)[1] : {}}\n                </Animation>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Badge from './badge';\n\ntype Props = {\n    className?: string;\n    show?: boolean;\n}\n\nconst BotBadge: React.FC<Props> = (props: Props) => (\n    <Badge\n        className={'BotBadge ' + props.className}\n        show={props.show}\n    >\n        <FormattedMessage\n            id='post_info.bot'\n            defaultMessage='BOT'\n        />\n    </Badge>\n);\n\nBotBadge.defaultProps = {\n    show: true,\n    className: '',\n};\n\nexport default BotBadge;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport './avatar.scss';\n\ntype Props = {\n    url: string;\n    username?: string;\n    size?: string;\n};\n\nconst Avatar: React.FunctionComponent<Props> = ({url, username, size = 'md'}: Props) => (\n    <img\n        className={`Avatar Avatar-${size}`}\n        alt={`${username || 'user'} profile image`}\n        src={url}\n    />\n);\n\nAvatar.defaultProps = {\n    size: 'md',\n};\n\nexport default Avatar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    className?: string;\n    component?: string;\n    title: {\n        id: string;\n        defaultMessage: string;\n        values?: {string: any};\n    };\n}\n\nconst LocalizedIcon = React.forwardRef((props: Props, ref?: React.Ref<HTMLElement>) => {\n    const {\n        component,\n        title,\n        ...otherProps\n    } = props;\n\n    if (component !== 'i' && component !== 'span') {\n        return null;\n    }\n\n    const Component = component!; // Use an uppercase name since React thinks anything lowercase is an HTML tag\n\n    return (\n        <FormattedMessage\n            id={title.id}\n            defaultMessage={title.defaultMessage}\n            values={title.values}\n        >\n            {(localizedTitle: (string | JSX.Element)) => (\n                <Component\n                    {...otherProps}\n                    ref={ref}\n                    title={localizedTitle as string}\n                />\n            )}\n        </FormattedMessage>\n    );\n});\nLocalizedIcon.defaultProps = {\n    component: 'i',\n};\nLocalizedIcon.displayName = 'LocalizedIcon';\n\nexport default LocalizedIcon;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport default class Provider {\n    constructor() {\n        this.latestPrefix = '';\n        this.latestComplete = true;\n        this.disableDispatches = false;\n        this.requestStarted = false;\n    }\n\n    handlePretextChanged(pretext) { // eslint-disable-line no-unused-vars\n        // NO-OP for inherited classes to override\n    }\n\n    resetRequest() {\n        this.requestStarted = false;\n    }\n\n    startNewRequest(prefix) {\n        this.latestPrefix = prefix;\n        this.latestComplete = false;\n        this.requestStarted = true;\n    }\n\n    shouldCancelDispatch(prefix) {\n        if (this.disableDispatches) {\n            return true;\n        }\n\n        if (!this.requestStarted) {\n            return true;\n        }\n\n        if (prefix === this.latestPrefix) {\n            this.latestComplete = true;\n        } else if (this.latestComplete) {\n            return true;\n        }\n\n        return false;\n    }\n\n    allowDividers() {\n        return true;\n    }\n\n    presentationType() {\n        return 'text';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class Suggestion extends React.Component {\n    static get propTypes() {\n        return {\n            item: PropTypes.oneOfType([\n                PropTypes.object,\n                PropTypes.string,\n            ]).isRequired,\n            term: PropTypes.string.isRequired,\n            matchedPretext: PropTypes.string.isRequired,\n            isSelection: PropTypes.bool,\n            onClick: PropTypes.func,\n            onMouseMove: PropTypes.func,\n        };\n    }\n\n    static baseProps = {\n        role: 'button',\n        tabIndex: -1,\n    };\n\n    handleClick = (e) => {\n        e.preventDefault();\n\n        this.props.onClick(this.props.term, this.props.matchedPretext);\n    }\n\n    handleMouseMove = (e) => {\n        e.preventDefault();\n\n        this.props.onMouseMove(this.props.term);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\n\nimport {\n    leaveChannel as leaveChannelRedux,\n    joinChannel,\n    markChannelAsRead,\n    unfavoriteChannel,\n} from 'mattermost-redux/actions/channels';\nimport * as PostActions from 'mattermost-redux/actions/posts';\nimport {TeamTypes} from 'mattermost-redux/action_types';\nimport {autocompleteUsers} from 'mattermost-redux/actions/users';\nimport {selectTeam} from 'mattermost-redux/actions/teams';\nimport {Posts} from 'mattermost-redux/constants';\nimport {\n    getChannel,\n    getChannelsNameMapInCurrentTeam,\n    getCurrentChannel,\n    getRedirectChannelNameForTeam,\n    getMyChannels,\n    getMyChannelMemberships,\n    isManuallyUnread,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentRelativeTeamUrl, getCurrentTeam, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, getUserByUsername} from 'mattermost-redux/selectors/entities/users';\nimport {getMyPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getChannelByName, isFavoriteChannel} from 'mattermost-redux/utils/channel_utils';\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions.jsx';\nimport {getLastViewedChannelName} from 'selectors/local_storage';\nimport {getLastPostsApiTimeForChannel} from 'selectors/views/channel';\nimport {getSocketStatus} from 'selectors/views/websocket';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants, ActionTypes, EventTypes, PostRequestTypes} from 'utils/constants';\nimport {isMobile} from 'utils/utils.jsx';\nimport LocalStorageStore from 'stores/local_storage_store.jsx';\n\nexport function checkAndSetMobileView() {\n    return (dispatch) => {\n        dispatch({\n            type: ActionTypes.UPDATE_MOBILE_VIEW,\n            data: isMobile(),\n        });\n    };\n}\n\nexport function goToLastViewedChannel() {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentChannel = getCurrentChannel(state);\n        const channelsInTeam = getChannelsNameMapInCurrentTeam(state);\n\n        let channelToSwitchTo = getChannelByName(channelsInTeam, getLastViewedChannelName(state));\n\n        if (currentChannel.id === channelToSwitchTo.id) {\n            channelToSwitchTo = getChannelByName(channelsInTeam, getRedirectChannelNameForTeam(state, getCurrentTeamId(state)));\n        }\n\n        return dispatch(switchToChannel(channelToSwitchTo));\n    };\n}\n\nexport function switchToChannelById(channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const channel = getChannel(state, channelId);\n        return dispatch(switchToChannel(channel));\n    };\n}\n\nexport function switchToChannel(channel) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const teamUrl = getCurrentRelativeTeamUrl(state);\n\n        if (channel.fake || channel.userId) {\n            const username = channel.userId ? channel.name : channel.display_name;\n            const user = getUserByUsername(state, username);\n            if (!user) {\n                return {error: true};\n            }\n\n            const direct = await dispatch(openDirectChannelToUserId(user.id));\n            if (direct.error) {\n                return {error: true};\n            }\n            browserHistory.push(`${teamUrl}/messages/@${channel.name}`);\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            const gmChannel = getChannel(state, channel.id);\n            browserHistory.push(`${teamUrl}/channels/${gmChannel.name}`);\n        } else {\n            browserHistory.push(`${teamUrl}/channels/${channel.name}`);\n        }\n\n        return {data: true};\n    };\n}\n\nexport function joinChannelById(channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentUserId = getCurrentUserId(state);\n        const currentTeamId = getCurrentTeamId(state);\n\n        return dispatch(joinChannel(currentUserId, currentTeamId, channelId));\n    };\n}\n\nexport function leaveChannel(channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const myPreferences = getMyPreferences(state);\n        const currentUserId = getCurrentUserId(state);\n        const currentTeam = getCurrentTeam(state);\n\n        if (isFavoriteChannel(myPreferences, channelId)) {\n            dispatch(unfavoriteChannel(channelId));\n        }\n\n        const teamUrl = getCurrentRelativeTeamUrl(state);\n        LocalStorageStore.removePreviousChannelName(currentUserId, currentTeam.id);\n        const {error} = await dispatch(leaveChannelRedux(channelId));\n        if (error) {\n            return {error};\n        }\n        const prevChannelName = LocalStorageStore.getPreviousChannelName(currentUserId, currentTeam.id);\n        const channelsInTeam = getChannelsNameMapInCurrentTeam(state);\n        const prevChannel = getChannelByName(channelsInTeam, prevChannelName);\n        if (!prevChannel || !getMyChannelMemberships(getState())[prevChannel.id]) {\n            LocalStorageStore.removePreviousChannelName(currentUserId, currentTeam.id);\n        }\n        if (getMyChannels(getState()).filter((c) => c.type === Constants.OPEN_CHANNEL || c.type === Constants.PRIVATE_CHANNEL).length === 0) {\n            LocalStorageStore.removePreviousChannelName(currentUserId, currentTeam.id);\n            dispatch(selectTeam(''));\n            dispatch({type: TeamTypes.LEAVE_TEAM, data: currentTeam});\n            browserHistory.push('/');\n        } else {\n            browserHistory.push(teamUrl);\n        }\n\n        return {\n            data: true,\n        };\n    };\n}\n\nexport function autocompleteUsersInChannel(prefix, channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentTeamId = getCurrentTeamId(state);\n\n        return dispatch(autocompleteUsers(prefix, currentTeamId, channelId));\n    };\n}\n\nexport function loadUnreads(channelId) {\n    return async (dispatch) => {\n        const time = Date.now();\n        const {data, error} = await dispatch(PostActions.getPostsUnread(channelId));\n        if (error) {\n            return {\n                error,\n                atLatestMessage: false,\n                atOldestmessage: false,\n            };\n        }\n\n        dispatch({\n            type: ActionTypes.INCREASE_POST_VISIBILITY,\n            data: channelId,\n            amount: data.order.length,\n        });\n\n        if (data.next_post_id === '') {\n            dispatch({\n                type: ActionTypes.RECEIVED_POSTS_FOR_CHANNEL_AT_TIME,\n                channelId,\n                time,\n            });\n        }\n\n        return {\n            atLatestMessage: data.next_post_id === '',\n            atOldestmessage: data.prev_post_id === '',\n        };\n    };\n}\n\nexport function loadPostsAround(channelId, focusedPostId) {\n    return async (dispatch) => {\n        const {data, error} = await dispatch(PostActions.getPostsAround(channelId, focusedPostId, Posts.POST_CHUNK_SIZE / 2));\n        if (error) {\n            return {\n                error,\n                atLatestMessage: false,\n                atOldestmessage: false,\n            };\n        }\n\n        dispatch({\n            type: ActionTypes.INCREASE_POST_VISIBILITY,\n            data: channelId,\n            amount: data.order.length,\n        });\n        return {\n            atLatestMessage: data.next_post_id === '',\n            atOldestmessage: data.prev_post_id === '',\n        };\n    };\n}\n\nexport function loadLatestPosts(channelId) {\n    return async (dispatch) => {\n        const time = Date.now();\n        const {data, error} = await dispatch(PostActions.getPosts(channelId, 0, Posts.POST_CHUNK_SIZE / 2));\n\n        if (error) {\n            return {\n                error,\n                atLatestMessage: false,\n                atOldestmessage: false,\n            };\n        }\n\n        dispatch({\n            type: ActionTypes.RECEIVED_POSTS_FOR_CHANNEL_AT_TIME,\n            channelId,\n            time,\n        });\n\n        return {\n            data,\n            atLatestMessage: data.next_post_id === '',\n            atOldestmessage: data.prev_post_id === '',\n        };\n    };\n}\n\nexport function loadPosts({channelId, postId, type}) {\n    //type here can be BEFORE_ID or AFTER_ID\n    return async (dispatch) => {\n        const POST_INCREASE_AMOUNT = Constants.POST_CHUNK_SIZE / 2;\n\n        dispatch({\n            type: ActionTypes.LOADING_POSTS,\n            data: true,\n            channelId,\n        });\n\n        const page = 0;\n        let result;\n        if (type === PostRequestTypes.BEFORE_ID) {\n            result = await dispatch(PostActions.getPostsBefore(channelId, postId, page, POST_INCREASE_AMOUNT));\n        } else {\n            result = await dispatch(PostActions.getPostsAfter(channelId, postId, page, POST_INCREASE_AMOUNT));\n        }\n\n        const {data} = result;\n\n        const actions = [{\n            type: ActionTypes.LOADING_POSTS,\n            data: false,\n            channelId,\n        }];\n\n        if (result.error) {\n            return {\n                error: result.error,\n                moreToLoad: true,\n            };\n        }\n        actions.push({\n            type: ActionTypes.INCREASE_POST_VISIBILITY,\n            data: channelId,\n            amount: data.order.length,\n        });\n\n        dispatch(batchActions(actions));\n\n        return {\n            moreToLoad: type === PostRequestTypes.BEFORE_ID ? data.prev_post_id !== '' : data.next_post_id !== '',\n        };\n    };\n}\n\nexport function syncPostsInChannel(channelId, since) {\n    return async (dispatch, getState) => {\n        const time = Date.now();\n        const state = getState();\n        const socketStatus = getSocketStatus(state);\n        let sinceTimeToGetPosts = since;\n        const lastPostsApiCallForChannel = getLastPostsApiTimeForChannel(state, channelId);\n\n        if (lastPostsApiCallForChannel && lastPostsApiCallForChannel < socketStatus.lastDisconnectAt) {\n            sinceTimeToGetPosts = lastPostsApiCallForChannel;\n        }\n\n        const {data, error} = await dispatch(PostActions.getPostsSince(channelId, sinceTimeToGetPosts));\n        if (data) {\n            dispatch({\n                type: ActionTypes.RECEIVED_POSTS_FOR_CHANNEL_AT_TIME,\n                channelId,\n                time,\n            });\n        }\n        return {data, error};\n    };\n}\n\nexport function scrollPostListToBottom() {\n    return () => {\n        EventEmitter.emit(EventTypes.POST_LIST_SCROLL_TO_BOTTOM);\n    };\n}\n\nexport function markChannelAsReadOnFocus(channelId) {\n    return (dispatch, getState) => {\n        if (isManuallyUnread(getState(), channelId)) {\n            return;\n        }\n\n        dispatch(markChannelAsRead(channelId));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport const getLastPostsApiTimeForChannel = (state, channelId) => state.views.channel.lastGetPosts[channelId];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\n\nimport {PreferenceTypes} from 'mattermost-redux/action_types';\nimport * as ChannelActions from 'mattermost-redux/actions/channels';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getChannelByName, getUnreadChannelIds, getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamUrl, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {loadNewDMIfNeeded, loadNewGMIfNeeded, loadProfilesForSidebar} from 'actions/user_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants, Preferences} from 'utils/constants';\nimport {getDirectChannelName} from 'utils/utils';\n\nexport function openDirectChannelToUserId(userId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentUserId = getCurrentUserId(state);\n        const channelName = getDirectChannelName(currentUserId, userId);\n        const channel = getChannelByName(state, channelName);\n\n        if (!channel) {\n            return dispatch(ChannelActions.createDirectChannel(currentUserId, userId));\n        }\n\n        trackEvent('api', 'api_channels_join_direct');\n        const now = Date.now();\n        const prefDirect = {\n            category: Preferences.CATEGORY_DIRECT_CHANNEL_SHOW,\n            name: userId,\n            value: 'true',\n        };\n        const prefOpenTime = {\n            category: Preferences.CATEGORY_CHANNEL_OPEN_TIME,\n            name: channel.id,\n            value: now.toString(),\n        };\n        const actions = [{\n            type: PreferenceTypes.RECEIVED_PREFERENCES,\n            data: [prefDirect],\n        }, {\n            type: PreferenceTypes.RECEIVED_PREFERENCES,\n            data: [prefOpenTime],\n        }];\n        dispatch(batchActions(actions));\n\n        dispatch(savePreferences(currentUserId, [\n            {user_id: currentUserId, ...prefDirect},\n            {user_id: currentUserId, ...prefOpenTime},\n        ]));\n\n        return {data: channel};\n    };\n}\n\nexport function openGroupChannelToUserIds(userIds) {\n    return async (dispatch, getState) => {\n        const result = await dispatch(ChannelActions.createGroupChannel(userIds));\n\n        if (result.error) {\n            browserHistory.push(getCurrentTeamUrl(getState()));\n        }\n\n        return result;\n    };\n}\n\nexport function loadChannelsForCurrentUser() {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const unreads = getUnreadChannelIds(state);\n\n        await dispatch(ChannelActions.fetchMyChannelsAndMembers(getCurrentTeamId(state)));\n        for (const id of unreads) {\n            const channel = getChannel(state, id);\n            if (channel && channel.type === Constants.DM_CHANNEL) {\n                loadNewDMIfNeeded(channel.id);\n            } else if (channel && channel.type === Constants.GM_CHANNEL) {\n                loadNewGMIfNeeded(channel.id);\n            }\n        }\n\n        loadProfilesForSidebar();\n    };\n}\n\nexport function searchMoreChannels(term, showArchivedChannels) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const teamId = getCurrentTeamId(state);\n\n        if (!teamId) {\n            throw new Error('No team id');\n        }\n\n        const {data, error} = await dispatch(ChannelActions.searchChannels(teamId, term, showArchivedChannels));\n        if (data) {\n            const myMembers = getMyChannelMemberships(state);\n\n            // When searching public channels, only get channels user is not a member of\n            const channels = showArchivedChannels ? data : data.filter((c) => !myMembers[c.id]);\n            return {data: channels};\n        }\n\n        return {error};\n    };\n}\n\nexport function autocompleteChannels(term, success, error) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const teamId = getCurrentTeamId(state);\n        if (!teamId) {\n            return;\n        }\n\n        const {data, error: err} = await dispatch(ChannelActions.autocompleteChannels(teamId, term));\n        if (data && success) {\n            success(data);\n        } else if (err && error) {\n            error({id: err.server_error_id, ...err});\n        }\n    };\n}\n\nexport function autocompleteChannelsForSearch(term, success, error) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const teamId = getCurrentTeamId(state);\n\n        if (!teamId) {\n            return;\n        }\n\n        const {data, error: err} = await dispatch(ChannelActions.autocompleteChannelsForSearch(teamId, term));\n        if (data && success) {\n            success(data);\n        } else if (err && error) {\n            error({id: err.server_error_id, ...err});\n        }\n    };\n}\n\nexport function addUsersToChannel(channelId, userIds) {\n    return async (dispatch) => {\n        try {\n            const requests = userIds.map((uId) => dispatch(ChannelActions.addChannelMember(channelId, uId)));\n\n            return await Promise.all(requests);\n        } catch (error) {\n            return {error};\n        }\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    text: React.ReactNode;\n}\n\nexport default class LoadingSpinner extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        text: null,\n    }\n\n    public render() {\n        return (\n            <span\n                id='loadingSpinner'\n                className={'LoadingSpinner' + (this.props.text ? ' with-text' : '')}\n            >\n                <LocalizedIcon\n                    className='fa fa-spinner fa-fw fa-pulse spinner'\n                    component='span'\n                    title={{id: t('generic_icons.loading'), defaultMessage: 'Loading Icon'}}\n                />\n                {this.props.text}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport * as TextFormatting from 'utils/text_formatting';\n\nexport default class Markdown extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * An object mapping channel names to channels for the current team\n         */\n        channelNamesMap: PropTypes.object.isRequired,\n\n        /*\n         * An array of URL schemes that should be turned into links. Anything that looks\n         * like a link will be turned into a link if this is not provided.\n         */\n        autolinkedUrlSchemes: PropTypes.array,\n\n        /*\n         * Whether or not to do Markdown rendering\n         */\n        enableFormatting: PropTypes.bool.isRequired,\n\n        /*\n         * Whether or not this text is part of the RHS\n         */\n        isRHS: PropTypes.bool,\n\n        /*\n         * An array of words that can be used to mention a user\n         */\n        mentionKeys: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * The text to be rendered\n         */\n        message: PropTypes.string.isRequired,\n\n        /*\n         * Any additional text formatting options to be used\n         */\n        options: PropTypes.object,\n\n        /*\n         * The root Site URL for the page\n         */\n        siteURL: PropTypes.string.isRequired,\n\n        /*\n         * The current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * If an image proxy is enabled.\n         */\n        hasImageProxy: PropTypes.bool.isRequired,\n\n        /**\n         * Minimum number of characters in a hashtag.\n         */\n        minimumHashtagLength: PropTypes.number,\n\n        /**\n         * Whether or not to proxy image URLs\n         */\n        proxyImages: PropTypes.bool,\n\n        /**\n         * Any extra props that should be passed into the image component\n         */\n        imageProps: PropTypes.object,\n\n        /**\n         * prop for passed down to image component for dimensions\n         */\n        imagesMetadata: PropTypes.object,\n\n        /**\n         * Whether or not to place the LinkTooltip component inside links\n         */\n        hasPluginTooltips: PropTypes.bool,\n\n        /**\n         * Post id prop passed down to markdown image\n         */\n        postId: PropTypes.string,\n\n        /**\n         * Post id prop passed down to markdown image\n         */\n        postType: PropTypes.string,\n    };\n\n    static defaultProps = {\n        options: {},\n        isRHS: false,\n        proxyImages: true,\n        imagesMetadata: {},\n        postId: '', // Needed to avoid proptypes console errors for cases like channel header, which doesn't have a proper value\n    };\n\n    render() {\n        if (!this.props.enableFormatting) {\n            return <span>{this.props.message}</span>;\n        }\n\n        const options = Object.assign({\n            autolinkedUrlSchemes: this.props.autolinkedUrlSchemes,\n            siteURL: this.props.siteURL,\n            mentionKeys: this.props.mentionKeys,\n            atMentions: true,\n            channelNamesMap: this.props.channelNamesMap,\n            proxyImages: this.props.hasImageProxy && this.props.proxyImages,\n            team: this.props.team,\n            minimumHashtagLength: this.props.minimumHashtagLength,\n        }, this.props.options);\n\n        const htmlFormattedText = TextFormatting.formatText(this.props.message, options);\n        return messageHtmlToComponent(htmlFormattedText, this.props.isRHS, {\n            imageProps: this.props.imageProps,\n            imagesMetadata: this.props.imagesMetadata,\n            hasPluginTooltips: this.props.hasPluginTooltips,\n            postId: this.props.postId,\n            postType: this.props.postType,\n            mentionHighlight: this.props.options.mentionHighlight,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getChannelsNameMapInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getAutolinkedUrlSchemes, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserMentionKeys} from 'mattermost-redux/selectors/entities/users';\n\nimport {getSiteURL} from 'utils/url';\n\nimport Markdown from './markdown';\n\nfunction makeGetChannelNamesMap() {\n    return createSelector(\n        getChannelsNameMapInCurrentTeam,\n        (state, props) => props && props.channelNamesMap,\n        (channelNamesMap, channelMentions) => {\n            if (channelMentions) {\n                return Object.assign({}, channelMentions, channelNamesMap);\n            }\n\n            return channelNamesMap;\n        }\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getChannelNamesMap = makeGetChannelNamesMap();\n\n    return function mapStateToProps(state, ownProps) {\n        const config = getConfig(state);\n\n        return {\n            autolinkedUrlSchemes: getAutolinkedUrlSchemes(state),\n            channelNamesMap: getChannelNamesMap(state, ownProps),\n            enableFormatting: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', true),\n            mentionKeys: getCurrentUserMentionKeys(state),\n            siteURL: getSiteURL(),\n            team: getCurrentTeam(state),\n            hasImageProxy: config.HasImageProxy === 'true',\n            minimumHashtagLength: parseInt(config.MinimumHashtagLength, 10),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(Markdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Badge from './badge';\n\ntype Props = {\n    className?: string;\n    show?: boolean;\n};\n\nconst GuestBadge: React.FC<Props> = (props: Props) => (\n    <Badge\n        className={'GuestBadge ' + props.className}\n        show={props.show}\n    >\n        <FormattedMessage\n            id='post_info.guest'\n            defaultMessage='GUEST'\n        />\n    </Badge>\n);\n\nGuestBadge.defaultProps = {\n    show: true,\n    className: '',\n};\n\nexport default GuestBadge;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\ntype Props = {\n    saving: boolean;\n    disabled?: boolean;\n    id?: string;\n    onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    savingMessage?: React.ReactNode;\n    defaultMessage?: React.ReactNode;\n    btnClass?: string;\n    extraClasses?: string;\n}\n\nexport default class SaveButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        btnClass: 'btn-primary',\n        defaultMessage: (\n            <FormattedMessage\n                id='save_button.save'\n                defaultMessage='Save'\n            />\n        ),\n        disabled: false,\n        extraClasses: '',\n        savingMessage: (\n            <FormattedMessage\n                id='save_button.saving'\n                defaultMessage='Saving'\n            />\n        ),\n    }\n\n    public render() {\n        const {\n            saving,\n            disabled,\n            savingMessage,\n            defaultMessage,\n            btnClass,\n            extraClasses,\n            ...props\n        } = this.props;\n\n        let className = 'save-button btn';\n        if (!disabled || saving) {\n            className += ' ' + btnClass;\n        }\n\n        if (extraClasses) {\n            className += ' ' + extraClasses;\n        }\n\n        return (\n            <button\n                type='submit'\n                id='saveSetting'\n                className={className}\n                disabled={disabled}\n                {...props}\n            >\n                <LoadingWrapper\n                    loading={saving}\n                    text={savingMessage}\n                >\n                    <span>{defaultMessage}</span>\n                </LoadingWrapper>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LoadingSpinner from './loading_spinner';\n\ntype Props = {\n    loading: boolean;\n    text: React.ReactNode;\n    children: React.ReactNode;\n}\n\nexport default class LoadingWrapper extends React.Component<Props> {\n    public static defaultProps: Props = {\n        loading: true,\n        text: null,\n        children: null,\n    }\n\n    public render() {\n        const {text, loading, children} = this.props;\n        if (!loading) {\n            return children;\n        }\n\n        return <LoadingSpinner text={text}/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport exif2css from 'exif2css';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nexport function canUploadFiles(config) {\n    const enableFileAttachments = config.EnableFileAttachments === 'true';\n    const enableMobileFileUpload = config.EnableMobileFileUpload === 'true';\n\n    if (!enableFileAttachments) {\n        return false;\n    }\n\n    if (UserAgent.isMobileApp()) {\n        return enableMobileFileUpload;\n    }\n\n    return true;\n}\n\nexport function canDownloadFiles(config) {\n    if (UserAgent.isMobileApp()) {\n        return config.EnableMobileFileDownload === 'true';\n    }\n\n    return true;\n}\n\nexport function trimFilename(filename) {\n    let trimmedFilename = filename;\n    if (filename.length > Constants.MAX_FILENAME_LENGTH) {\n        trimmedFilename = filename.substring(0, Math.min(Constants.MAX_FILENAME_LENGTH, filename.length)) + '...';\n    }\n\n    return trimmedFilename;\n}\n\nexport function getFileTypeFromMime(mimetype) {\n    const mimeTypeSplitBySlash = mimetype.split('/');\n    const mimeTypePrefix = mimeTypeSplitBySlash[0];\n    const mimeTypeSuffix = mimeTypeSplitBySlash[1];\n\n    if (mimeTypePrefix === 'video') {\n        return 'video';\n    } else if (mimeTypePrefix === 'audio') {\n        return 'audio';\n    } else if (mimeTypePrefix === 'image') {\n        return 'image';\n    }\n\n    if (mimeTypeSuffix) {\n        if (mimeTypeSuffix === 'pdf') {\n            return 'pdf';\n        } else if (mimeTypeSuffix.includes('vnd.ms-excel') || mimeTypeSuffix.includes('spreadsheetml') || mimeTypeSuffix.includes('vnd.sun.xml.calc') || mimeTypeSuffix.includes('opendocument.spreadsheet')) {\n            return 'spreadsheet';\n        } else if (mimeTypeSuffix.includes('vnd.ms-powerpoint') || mimeTypeSuffix.includes('presentationml') || mimeTypeSuffix.includes('vnd.sun.xml.impress') || mimeTypeSuffix.includes('opendocument.presentation')) {\n            return 'presentation';\n        } else if ((mimeTypeSuffix === 'msword') || mimeTypeSuffix.includes('vnd.ms-word') || mimeTypeSuffix.includes('officedocument.wordprocessingml') || mimeTypeSuffix.includes('application/x-mswrite')) {\n            return 'word';\n        }\n    }\n\n    return 'other';\n}\n\n// based on https://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side/32490603#32490603\nexport function getExifOrientation(data) {\n    var view = new DataView(data);\n\n    if (view.getUint16(0, false) !== 0xFFD8) {\n        return -2;\n    }\n\n    var length = view.byteLength;\n    var offset = 2;\n\n    while (offset < length) {\n        var marker = view.getUint16(offset, false);\n        offset += 2;\n\n        if (marker === 0xFFE1) {\n            if (view.getUint32(offset += 2, false) !== 0x45786966) {\n                return -1;\n            }\n\n            var little = view.getUint16(offset += 6, false) === 0x4949;\n            offset += view.getUint32(offset + 4, little);\n            var tags = view.getUint16(offset, little);\n            offset += 2;\n\n            for (var i = 0; i < tags; i++) {\n                if (view.getUint16(offset + (i * 12), little) === 0x0112) {\n                    return view.getUint16(offset + (i * 12) + 8, little);\n                }\n            }\n        } else if ((marker & 0xFF00) === 0xFF00) {\n            offset += view.getUint16(offset, false);\n        } else {\n            break;\n        }\n    }\n    return -1;\n}\n\nexport function getOrientationStyles(orientation) {\n    const {\n        transform,\n        'transform-origin': transformOrigin,\n    } = exif2css(orientation);\n    return {transform, transformOrigin};\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SaveButton from 'components/save_button';\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/utils.jsx';\n\nexport default class SettingItemMax extends React.PureComponent {\n    static defaultProps = {\n        infoPosition: 'bottom',\n        saving: false,\n        section: '',\n        containerStyle: '',\n    };\n\n    static propTypes = {\n\n        /**\n         * Array of inputs selection\n         */\n        inputs: PropTypes.node,\n\n        /**\n         * Styles for main component\n         */\n        containerStyle: PropTypes.string,\n\n        /**\n         * Client error\n         */\n        clientError: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n\n        /**\n         * Server error\n         */\n        serverError: PropTypes.string,\n\n        /**\n         * Settings extra information\n         */\n        extraInfo: PropTypes.element,\n\n        /**\n         * Info position\n         */\n        infoPosition: PropTypes.string,\n\n        /**\n         * Settings or tab section\n         */\n        section: PropTypes.string,\n\n        /**\n         * Function to update section\n         */\n        updateSection: PropTypes.func,\n\n        /**\n         * setting to submit\n         */\n        setting: PropTypes.string,\n\n        /**\n         * Function to submit setting\n         */\n        submit: PropTypes.func,\n\n        /**\n         * Disable submit by enter key\n         */\n        disableEnterSubmit: PropTypes.bool,\n\n        /**\n         * Extra information on submit\n         */\n        submitExtra: PropTypes.node,\n\n        /**\n         * Indicates whether setting is on saving\n         */\n        saving: PropTypes.bool,\n\n        /**\n         * Settings title\n         */\n        title: PropTypes.node,\n\n        /**\n         * Settings width\n         */\n        width: PropTypes.string,\n\n        /**\n         * Text of cancel button\n         */\n        cancelButtonText: PropTypes.node,\n\n        /**\n         * Avoid submitting when using SHIFT + ENTER\n         */\n        shiftEnter: PropTypes.bool,\n\n        /**\n         * Text of save button\n         */\n        saveButtonText: PropTypes.string,\n    }\n\n    constructor(props) {\n        super(props);\n        this.settingList = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.settingList.current) {\n            const focusableElements = this.settingList.current.querySelectorAll('.btn:not(.save-button):not(.btn-cancel), input.form-control, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n            if (focusableElements.length > 0) {\n                focusableElements[0].focus();\n            } else {\n                this.settingList.current.focus();\n            }\n        }\n\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e) => {\n        if (this.props.shiftEnter && e.keyCode === Constants.KeyCodes.ENTER && e.shiftKey) {\n            return;\n        }\n        if (this.props.disableEnterSubmit !== true && isKeyPressed(e, Constants.KeyCodes.ENTER) && this.props.submit && e.target.tagName !== 'SELECT' && e.target.parentElement && e.target.parentElement.className !== 'react-select__input' && !e.target.classList.contains('btn-cancel') && this.settingList.current && this.settingList.current.contains(e.target)) {\n            this.handleSubmit(e);\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.props.setting) {\n            this.props.submit(this.props.setting);\n        } else {\n            this.props.submit();\n        }\n    }\n\n    handleUpdateSection = (e) => {\n        this.props.updateSection(this.props.section);\n        e.preventDefault();\n    }\n\n    render() {\n        let clientError = null;\n        if (this.props.clientError) {\n            clientError = (\n                <div className='form-group'>\n                    <label\n                        id='clientError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.clientError}\n                    </label>\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.props.serverError) {\n            serverError = (\n                <div className='form-group'>\n                    <label\n                        id='serverError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.serverError}\n                    </label>\n                </div>\n            );\n        }\n\n        let extraInfo = null;\n        let hintClass = 'setting-list__hint';\n        if (this.props.infoPosition === 'top') {\n            hintClass = 'padding-bottom x2';\n        }\n\n        if (this.props.extraInfo) {\n            extraInfo = (\n                <div\n                    id='extraInfo'\n                    className={hintClass}\n                >\n                    {this.props.extraInfo}\n                </div>\n            );\n        }\n\n        let submit = '';\n        if (this.props.submit) {\n            submit = (\n                <SaveButton\n                    defaultMessage={this.props.saveButtonText}\n                    saving={this.props.saving}\n                    disabled={this.props.saving}\n                    onClick={this.handleSubmit}\n                />\n            );\n        }\n\n        const inputs = this.props.inputs;\n        let widthClass;\n        if (this.props.width === 'full') {\n            widthClass = 'col-sm-12';\n        } else if (this.props.width === 'medium') {\n            widthClass = 'col-sm-10 col-sm-offset-2';\n        } else {\n            widthClass = 'col-sm-9 col-sm-offset-3';\n        }\n\n        let title;\n        if (this.props.title) {\n            title = (\n                <h4\n                    id='settingTitle'\n                    className='col-sm-12 section-title'\n                >\n                    {this.props.title}\n                </h4>\n            );\n        }\n\n        let listContent = (\n            <div className='setting-list-item'>\n                {inputs}\n                {extraInfo}\n            </div>\n        );\n\n        if (this.props.infoPosition === 'top') {\n            listContent = (\n                <div>\n                    {extraInfo}\n                    {inputs}\n                </div>\n            );\n        }\n\n        let cancelButtonText;\n        if (this.props.cancelButtonText) {\n            cancelButtonText = this.props.cancelButtonText;\n        } else {\n            cancelButtonText = (\n                <FormattedMessage\n                    id='setting_item_max.cancel'\n                    defaultMessage='Cancel'\n                />\n            );\n        }\n\n        return (\n            <section\n                className={`section-max form-horizontal ${this.props.containerStyle}`}\n            >\n                {title}\n                <div className={widthClass}>\n                    <div\n                        tabIndex='-1'\n                        ref={this.settingList}\n                        className='setting-list'\n                    >\n                        {listContent}\n                        <div className='setting-list-item'>\n                            <hr/>\n                            {this.props.submitExtra}\n                            {serverError}\n                            {clientError}\n                            {submit}\n                            <button\n                                id={'cancelSetting'}\n                                className='btn btn-sm btn-cancel cursor--pointer style--none'\n                                onClick={this.handleUpdateSection}\n                            >\n                                {cancelButtonText}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class Pluggable extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Should be a single overridable React component. One of this or pluggableName is required\n         */\n        children: PropTypes.element,\n\n        /*\n         * Override the component to be plugged. One of this or children is required\n         */\n        pluggableName: PropTypes.string,\n\n        /*\n         * Components for overriding provided by plugins\n         */\n        components: PropTypes.object.isRequired,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n\n        /*\n         * Id of the specific component to be plugged.\n         */\n        pluggableId: PropTypes.string,\n    }\n\n    render() {\n        const pluggableName = this.props.pluggableName;\n\n        let child;\n        if (this.props.children) {\n            child = React.Children.only(this.props.children).type;\n        } else if (!pluggableName) {\n            return null;\n        }\n\n        const components = this.props.components;\n        const childrenProps = child ? this.props.children.props : {};\n        const componentName = pluggableName || child.getComponentName();\n\n        // Include any props passed to this component or to the child component\n        let props = {...this.props};\n        Reflect.deleteProperty(props, 'children');\n        Reflect.deleteProperty(props, 'components');\n        Reflect.deleteProperty(props, 'pluggableName');\n        props = {...props, ...childrenProps};\n\n        // Override the default component with any registered plugin's component\n        // Select a specific component by pluginId if available\n        if (components.hasOwnProperty(componentName)) {\n            let pluginComponents = components[componentName];\n\n            if (this.props.pluggableId) {\n                pluginComponents = pluginComponents.filter(\n                    (element) => element.id === this.props.pluggableId);\n            }\n\n            const content = pluginComponents.map((p) => {\n                const PluginComponent = p.component;\n                return (\n                    <PluginComponent\n                        {...props}\n                        theme={this.props.theme}\n                        key={componentName + p.id}\n                    />\n                );\n            });\n\n            return (\n                <React.Fragment>\n                    {content}\n                </React.Fragment>\n            );\n        }\n\n        if (child == null) {\n            return null;\n        }\n\n        return React.cloneElement(this.props.children, {...props});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport Pluggable from './pluggable.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        components: state.plugins.components,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(Pluggable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class GlobeIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.channel.public'\n                    defaultMessage='Public Channel Icon'\n                >\n                    {(title) => (\n                        <i className=\"far fa-globe\" title={title}/>\n                        // <svg\n                        //     width='13px'\n                        //     height='13px'\n                        //     viewBox='0 0 14 14'\n                        //     role='presentation'\n                        //     aria-label={ariaLabel}\n                        // >\n                        //     <g\n                        //         stroke='none'\n                        //         strokeWidth='1'\n                        //         fill='inherit'\n                        //         fillRule='evenodd'\n                        //     >\n                        //         <g\n                        //             transform='translate(-115.000000, -147.000000)'\n                        //             fillRule='nonzero'\n                        //             fill='inherit'\n                        //         >\n                        //             <g transform='translate(95.000000, 0.000000)'>\n                        //                 <g transform='translate(20.000000, 113.000000)'>\n                        //                     <g transform='translate(0.000000, 34.000000)'>\n                        //                         <path d='M10.409,0.893375 C9.40275,0.329875 8.24075,0.00875 7,0 C3.13075,0 0,3.140375 0,7 C0,10.521875 2.594375,13.42775 5.97625,13.93 C6.314875,13.974625 6.6535,14 7,14 C8.24075,14 9.40275,13.678875 10.409,13.1145 C12.551875,11.918375 14,9.6285 14,7 C13.99125,4.3715 12.551875,2.090375 10.409,0.893375 Z M11.554375,4.375 L9.431625,4.375 C9.302125,3.5 9.10875,2.736125 8.86725,2.085125 C10.003875,2.519125 10.9515,3.5 11.554375,4.375 Z M6.941375,1.73775 C6.960625,1.736875 6.979875,1.73425 7,1.73425 C7.020125,1.73425 7.039375,1.736875 7.058625,1.73775 C7.340375,2.172625 7.697375,3.5 7.92225,4.375 L6.07775,4.375 C6.302625,3.5 6.659625,2.172625 6.941375,1.73775 Z M1.81475,7.875 C1.7675,7.875 1.73425,7.29925 1.73425,7 C1.73425,6.70075 1.764875,6.125 1.813,6.125 L4.396875,6.125 C4.384625,6.125 4.375,6.7025 4.375,7 C4.375,7.2975 4.384625,7.875 4.396875,7.875 L1.81475,7.875 Z M4.354875,11.54475 C4.346125,11.54475 4.337375,11.54475 4.337375,11.536 C3.548125,11.07575 2.893625,10.5 2.436875,9.625 L4.568375,9.625 C4.697875,10.5 4.890375,11.262125 5.131875,11.91225 C4.8615,11.81075 4.599875,11.692625 4.354875,11.54475 Z M4.568375,4.375 L2.443875,4.375 C3.045875,3.5 3.994375,2.517375 5.131875,2.083375 C4.89125,2.734375 4.697875,3.5 4.568375,4.375 Z M7.0595,12.26225 C7.039375,12.26225 7.020125,12.26575 7,12.26575 C6.979875,12.26575 6.960625,12.26225 6.9405,12.26225 C6.65875,11.8265 6.302625,11.375 6.07775,9.625 L7.921375,9.625 C7.697375,11.375 7.34125,11.8265 7.0595,12.26225 Z M8.11125,7.875 L5.88875,7.875 C5.873875,7.875 5.8625,7.30625 5.8625,7 C5.8625,6.69375 5.873875,6.125 5.88875,6.125 L8.11125,6.125 C8.126125,6.125 8.1375,6.69375 8.1375,7 C8.1375,7.30625 8.126125,7.875 8.11125,7.875 Z M10.409,11.0075 C10.13075,11.242 9.828,11.45025 9.506875,11.631375 C9.30125,11.74075 9.086875,11.839625 8.8655,11.923625 C9.107,11.270875 9.30125,10.5 9.431625,9.625 L11.557875,9.625 C11.25425,10.5 10.8675,10.618125 10.409,11.0075 Z M9.603125,7.875 C9.615375,7.875 9.625,7.2975 9.625,7 C9.625,6.7025 9.615375,6.125 9.603125,6.125 L12.186125,6.125 C12.235125,6.125 12.26575,6.70075 12.26575,7 C12.26575,7.29925 12.233375,7.875 12.18525,7.875 L9.603125,7.875 Z'/>\n                        //                     </g>\n                        //                 </g>\n                        //             </g>\n                        //         </g>\n                        //     </g>\n                        // </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LockIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.channel.private'\n                    defaultMessage='Private Channel Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-lock-alt'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Popover as BSPopover, Sizes as BSSizes} from 'react-bootstrap';\n\nconst SizeMap = {xs: 'xsmall', sm: 'small', md: 'medium', lg: 'large'};\nexport type Sizes = 'xs' | 'sm' | 'md' | 'lg';\n\ninterface Props {\n    id?: string;\n    children?: React.ReactNode;\n    popoverStyle?: 'info';\n    popoverSize?: Sizes;\n    title?: React.ReactNode;\n    placement?: 'bottom' | 'top' | 'right' | 'left';\n    className?: string;\n    style?: React.CSSProperties;\n    onMouseOut?: React.MouseEventHandler<BSPopover>; // didn't find a better way to satisfy typing, so for now we have a slight 'bootstrap leakage'\n    onMouseOver?: React.MouseEventHandler<BSPopover>;\n}\n\nexport default class Popover extends React.PureComponent<Props> {\n    static defaultProps = {\n        placement: 'right',\n        popoverStyle: 'info',\n        popoverSize: 'sm'\n\n    }\n    render() {\n        const {placement, popoverSize, children, popoverStyle, title, id, onMouseOut, onMouseOver, className, style} = this.props;\n        return (\n            <BSPopover\n                id={id}\n                style={style}\n                className={className}\n                bsStyle={popoverStyle}\n                placement={placement}\n                bsClass='popover'\n                title={title}\n                bsSize={popoverSize && SizeMap[popoverSize] as BSSizes} // map our sizes to bootstrap\n                onMouseOut={onMouseOut!}\n                onMouseOver={onMouseOver}\n            >\n                {children}\n            </BSPopover>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport OverlayTrigger, {BaseOverlayTrigger} from 'components/overlay_trigger';\nimport ProfilePopover from 'components/profile_popover';\nimport StatusIcon from 'components/status_icon';\nimport Avatar from 'components/widgets/users/avatar';\n\ninterface MMOverlayTrigger extends BaseOverlayTrigger {\n    hide: () => void;\n}\n\ntype Props = {\n    hasMention?: boolean;\n    isBusy?: boolean;\n    isEmoji?: boolean;\n    isRHS?: boolean;\n    profileSrc?: string;\n    size: string;\n    src: string;\n    status?: string;\n    userId?: string;\n    username?: string;\n    wrapperClass?: string;\n}\n\nexport default class ProfilePicture extends React.PureComponent<Props> {\n    public static defaultProps = {\n        size: 'lg',\n        isRHS: false,\n        isEmoji: false,\n        hasMention: false,\n        wrapperClass: '',\n    };\n\n    overlay = React.createRef<MMOverlayTrigger>();\n\n    public hideProfilePopover = () => {\n        if (this.overlay.current) {\n            this.overlay.current.hide();\n        }\n    }\n\n    public render() {\n        // profileSrc will, if possible, be the original user profile picture even if the icon\n        // for the post is overriden, so that the popup shows the user identity\n        const profileSrc = (typeof this.props.profileSrc === 'string' && this.props.profileSrc !== '') ?\n            this.props.profileSrc :\n            this.props.src;\n\n        const profileIconClass = `profile-icon ${this.props.isEmoji ? 'emoji' : ''}`;\n\n        if (this.props.userId) {\n            return (\n                <OverlayTrigger\n                    ref={this.overlay}\n                    trigger='click'\n                    placement='right'\n                    rootClose={true}\n                    overlay={\n                        <ProfilePopover\n                            className='user-profile-popover'\n                            userId={this.props.userId}\n                            src={profileSrc}\n                            isBusy={this.props.isBusy}\n                            hide={this.hideProfilePopover}\n                            isRHS={this.props.isRHS}\n                            hasMention={this.props.hasMention}\n                        />\n                    }\n                >\n                    <button\n                        className={`status-wrapper style--none ${this.props.wrapperClass}`}\n                        tabIndex={-1}\n                    >\n                        <span className={profileIconClass}>\n                            <Avatar\n                                username={this.props.username}\n                                size={this.props.size}\n                                url={this.props.src}\n                            />\n                        </span>\n                        <StatusIcon status={this.props.status}/>\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n        return (\n            <span className='status-wrapper'>\n                <span className={profileIconClass}>\n                    <Avatar\n                        size={this.props.size}\n                        url={this.props.src}\n                    />\n                </span>\n                <StatusIcon status={this.props.status}/>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {SearchTypes} from 'utils/constants';\n\nexport function setModalSearchTerm(term) {\n    return async (dispatch) => {\n        dispatch({\n            type: SearchTypes.SET_MODAL_SEARCH,\n            data: term,\n        });\n        return {data: true};\n    };\n}\n\nexport function setSystemUsersSearch(term, team, filter = '') {\n    return async (dispatch) => {\n        dispatch({\n            type: SearchTypes.SET_SYSTEM_USERS_SEARCH,\n            data: {term, team, filter},\n        });\n        return {data: true};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SystemPermissionGate extends React.Component {\n    static defaultProps = {\n        invert: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Permissions enough to pass the gate (binary OR)\n         */\n        permissions: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Has permission\n         */\n        hasPermission: PropTypes.bool.isRequired,\n\n        /**\n         * Invert the permission (used for else)\n         */\n        invert: PropTypes.bool.isRequired,\n\n        /**\n         * Content protected by the permissions gate\n         */\n        children: PropTypes.node.isRequired,\n    };\n\n    render() {\n        if (this.props.hasPermission && !this.props.invert) {\n            return this.props.children;\n        }\n        if (!this.props.hasPermission && this.props.invert) {\n            return this.props.children;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport SystemPermissionGate from './system_permission_gate.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    for (const permission of ownProps.permissions) {\n        if (haveISystemPermission(state, {permission})) {\n            return {hasPermission: true};\n        }\n    }\n\n    return {hasPermission: false};\n}\n\nexport default connect(mapStateToProps)(SystemPermissionGate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent, ReactNode} from 'react';\n\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\ntype Props = {\n    children?: ReactNode;\n    spinning: boolean;\n    spinningText: ReactNode;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport default class SpinnerButton extends PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        spinning: false,\n    }\n\n    public render(): JSX.Element {\n        const {spinning, spinningText, children, ...props} = this.props; // eslint-disable-line no-use-before-define\n\n        return (\n            <button\n                className='btn btn-primary'\n                disabled={spinning}\n                {...props}\n            >\n                <LoadingWrapper\n                    loading={spinning}\n                    text={spinningText}\n                >\n                    {children}\n                </LoadingWrapper>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport QuickInput from 'components/quick_input.jsx';\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class SuggestionBox extends React.Component {\n    static propTypes = {\n\n        /**\n         * The list component to render, usually SuggestionList\n         */\n        listComponent: PropTypes.func.isRequired,\n\n        /**\n         * The date component to render\n         */\n        dateComponent: PropTypes.func,\n\n        /**\n         * The value of in the input\n         */\n        value: PropTypes.string.isRequired,\n\n        /**\n         * Array of suggestion providers\n         */\n        providers: PropTypes.arrayOf(PropTypes.object),\n\n        /**\n         * Where the list will be displayed relative to the input box, defaults to 'top'\n         */\n        listStyle: PropTypes.string,\n\n        /**\n         * CSS class for the div parent of the input box\n         */\n        containerClass: PropTypes.string,\n\n        /**\n         * Set to true to draw dividers between types of list items, defaults to false\n         */\n        renderDividers: PropTypes.bool,\n\n        /**\n         * Set to true to render a message when there were no results found, defaults to false\n         */\n        renderNoResults: PropTypes.bool,\n\n        /**\n         * Set to allow TAB to select an item in the list, defaults to true\n         */\n        completeOnTab: PropTypes.bool,\n\n        /**\n         * Function called when input box gains focus\n         */\n        onFocus: PropTypes.func,\n\n        /**\n         * Function called when input box loses focus\n         */\n        onBlur: PropTypes.func,\n\n        /**\n         * Function called when input box value changes\n         */\n        onChange: PropTypes.func,\n\n        /**\n         * Function called when a key is pressed and the input box is in focus\n         */\n        onKeyDown: PropTypes.func,\n        onComposition: PropTypes.func,\n\n        /**\n         * Function called when an item is selected\n         */\n        onItemSelected: PropTypes.func,\n\n        /**\n         * Flags if the suggestion_box is for the RHS (Reply).\n         */\n        isRHS: PropTypes.bool,\n\n        /**\n         * The number of characters required to show the suggestion list, defaults to 1\n         */\n        requiredCharacters: PropTypes.number,\n\n        /**\n         * If true, the suggestion box is opened on focus, default to false\n         */\n        openOnFocus: PropTypes.bool,\n\n        /**\n         * If true, the suggestion box is disabled\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * If true, it displays allow to display a default list when empty\n         */\n        openWhenEmpty: PropTypes.bool,\n\n        /**\n         * If true, replace all input in the suggestion box with the selected option after a select, defaults to false\n         */\n        replaceAllInputOnSelect: PropTypes.bool,\n\n        /**\n         * An optional, opaque identifier that distinguishes the context in which the suggestion\n         * box is rendered. This allows the reused component to otherwise respond to changes.\n         */\n        contextId: PropTypes.string,\n\n        /**\n         * If true, listen for clicks on a mention and populate the input with said mention, defaults to false\n         */\n        listenForMentionKeyClick: PropTypes.bool,\n\n        /**\n         * Passes the wrapper reference for height calculation\n         */\n        wrapperHeight: PropTypes.number,\n    }\n\n    static defaultProps = {\n        listStyle: 'top',\n        containerClass: '',\n        renderDividers: false,\n        renderNoResults: false,\n        completeOnTab: true,\n        isRHS: false,\n        requiredCharacters: 1,\n        openOnFocus: false,\n        openWhenEmpty: false,\n        replaceAllInputOnSelect: false,\n        listenForMentionKeyClick: false,\n    }\n\n    constructor(props) {\n        super(props);\n        this.suggestionReadOut = React.createRef();\n\n        // Keep track of whether we're composing a CJK character so we can make suggestions for partial characters\n        this.composing = false;\n\n        this.pretext = '';\n\n        // Used for debouncing pretext changes\n        this.timeoutId = '';\n\n        // Used for preventing suggestion list to close when scrollbar is clicked\n        this.preventSuggestionListCloseFlag = false;\n\n        // pretext: the text before the cursor\n        // matchedPretext: a list of the text before the cursor that will be replaced if the corresponding autocomplete term is selected\n        // terms: a list of strings which the previously typed text may be replaced by\n        // items: a list of objects backing the terms which may be used in rendering\n        // components: a list of react components that can be used to render their corresponding item\n        // selection: the term currently selected by the keyboard\n        this.state = {\n            focused: false,\n            cleared: true,\n            matchedPretext: [],\n            items: [],\n            terms: [],\n            components: [],\n            selection: '',\n            allowDividers: true,\n            presentationType: 'text',\n        };\n\n        this.inputRef = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.props.listenForMentionKeyClick) {\n            EventEmitter.addListener('mention_key_click', this.handleMentionKeyClick);\n        }\n    }\n\n    componentWillUnmount() {\n        EventEmitter.removeListener('mention_key_click', this.handleMentionKeyClick);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {value} = this.props;\n\n        // Post was just submitted, update pretext property.\n        if (value === '' && this.pretext !== value) {\n            this.handlePretextChanged(value);\n            return;\n        }\n\n        if (prevProps.contextId !== this.props.contextId) {\n            const textbox = this.getTextbox();\n            const pretext = textbox.value.substring(0, textbox.selectionEnd).toLowerCase();\n\n            this.handlePretextChanged(pretext);\n        }\n    }\n\n    handleMentionKeyClick = (mentionKey, isRHS) => {\n        if (this.props.isRHS !== isRHS) {\n            return;\n        }\n\n        let insertText = '@' + mentionKey;\n\n        // if the current text does not end with a whitespace, then insert a space\n        if (this.props.value && (/[^\\s]$/).test(this.props.value)) {\n            insertText = ' ' + insertText;\n        }\n\n        this.addTextAtCaret(insertText, '');\n    }\n\n    getTextbox = () => {\n        if (!this.inputRef.current) {\n            return null;\n        }\n\n        const input = this.inputRef.current.getInput();\n\n        if (input.getDOMNode) {\n            return input.getDOMNode();\n        }\n\n        return input;\n    }\n\n    recalculateSize = () => {\n        // Pretty hacky way to force an AutosizeTextarea to recalculate its height if that's what\n        // we're rendering as the input\n        const input = this.inputRef.current.getInput();\n\n        if (input.recalculateSize) {\n            input.recalculateSize();\n        }\n    }\n\n    handleEmitClearSuggestions = (delay = 0) => {\n        setTimeout(() => {\n            this.clear();\n        }, delay);\n    }\n\n    preventSuggestionListClose = () => {\n        this.preventSuggestionListCloseFlag = true;\n    }\n\n    handleFocusOut = (e) => {\n        if (this.preventSuggestionListCloseFlag) {\n            this.preventSuggestionListCloseFlag = false;\n            return;\n        }\n\n        // Focus is switching TO e.relatedTarget, so only treat this as a blur event if we're not switching\n        // between children (like from the textbox to the suggestion list)\n        if (this.container.contains(e.relatedTarget)) {\n            return;\n        }\n\n        if (UserAgent.isIos() && !e.relatedTarget) {\n            // On Safari and iOS classic app, the autocomplete stays open\n            // when you tap outside of the post textbox or search box.\n            return;\n        }\n\n        this.handleEmitClearSuggestions();\n\n        this.setState({focused: false});\n\n        if (this.props.onBlur) {\n            this.props.onBlur();\n        }\n    };\n\n    handleFocusIn = (e) => {\n        // Focus is switching FROM e.relatedTarget, so only treat this as a focus event if we're not switching\n        // between children (like from the textbox to the suggestion list). PreventSuggestionListCloseFlag is\n        // checked because if true, it means that the focusIn comes from a click in the suggestion box, an\n        // option choice, so we don't want the focus event to be triggered\n        if (this.container.contains(e.relatedTarget) || this.preventSuggestionListCloseFlag) {\n            return;\n        }\n\n        this.setState({focused: true});\n\n        if (this.props.openOnFocus || this.props.openWhenEmpty) {\n            setTimeout(() => {\n                const textbox = this.getTextbox();\n                if (textbox) {\n                    const pretext = textbox.value.substring(0, textbox.selectionEnd);\n                    if (this.props.openWhenEmpty || pretext.length >= this.props.requiredCharacters) {\n                        this.handlePretextChanged(pretext);\n                    }\n                }\n            });\n        }\n\n        if (this.props.onFocus) {\n            this.props.onFocus();\n        }\n    };\n\n    handleChange = (e) => {\n        const textbox = this.getTextbox();\n        const pretext = textbox.value.substring(0, textbox.selectionEnd).toLowerCase();\n\n        if (!this.composing && this.pretext !== pretext) {\n            this.handlePretextChanged(pretext);\n        }\n\n        if (this.props.onChange) {\n            this.props.onChange(e);\n        }\n    }\n\n    handleCompositionStart = () => {\n        this.composing = true;\n        if (this.props.onComposition) {\n            this.props.onComposition();\n        }\n    }\n\n    handleCompositionUpdate = (e) => {\n        if (!e.data) {\n            return;\n        }\n\n        // The caret appears before the CJK character currently being composed, so re-add it to the pretext\n        const textbox = this.getTextbox();\n        const pretext = textbox.value.substring(0, textbox.selectionStart) + e.data;\n\n        this.handlePretextChanged(pretext);\n        if (this.props.onComposition) {\n            this.props.onComposition();\n        }\n    }\n\n    handleCompositionEnd = () => {\n        this.composing = false;\n        if (this.props.onComposition) {\n            this.props.onComposition();\n        }\n    }\n\n    addTextAtCaret = (term, matchedPretext) => {\n        const textbox = this.getTextbox();\n        const caret = textbox.selectionEnd;\n        const text = this.props.value;\n        const pretext = textbox.value.substring(0, textbox.selectionEnd);\n\n        let prefix;\n        let keepPretext = false;\n        if (pretext.toLowerCase().endsWith(matchedPretext.toLowerCase())) {\n            prefix = pretext.substring(0, pretext.length - matchedPretext.length);\n        } else {\n            // the pretext has changed since we got a term to complete so see if the term still fits the pretext\n            const termWithoutMatched = term.substring(matchedPretext.length);\n            const overlap = SuggestionBox.findOverlap(pretext, termWithoutMatched);\n\n            keepPretext = overlap.length === 0;\n            prefix = pretext.substring(0, pretext.length - overlap.length - matchedPretext.length);\n        }\n\n        const suffix = text.substring(caret);\n\n        let newValue;\n        if (keepPretext) {\n            newValue = pretext;\n        } else {\n            newValue = prefix + term + ' ' + suffix;\n        }\n\n        textbox.value = newValue;\n\n        if (this.props.onChange) {\n            // fake an input event to send back to parent components\n            const e = {\n                target: textbox,\n            };\n\n            // don't call handleChange or we'll get into an event loop\n            this.props.onChange(e);\n        }\n\n        // set the caret position after the next rendering\n        window.requestAnimationFrame(() => {\n            if (textbox.value === newValue) {\n                Utils.setCaretPosition(textbox, prefix.length + term.length + 1);\n            }\n        });\n    }\n\n    replaceText = (term) => {\n        const textbox = this.getTextbox();\n        textbox.value = term;\n\n        if (this.props.onChange) {\n            // fake an input event to send back to parent components\n            const e = {\n                target: textbox,\n            };\n\n            // don't call handleChange or we'll get into an event loop\n            this.props.onChange(e);\n        }\n    }\n\n    handleCompleteWord = (term, matchedPretext) => {\n        if (this.props.replaceAllInputOnSelect) {\n            this.replaceText(term);\n        } else {\n            this.addTextAtCaret(term, matchedPretext);\n        }\n\n        if (this.props.onItemSelected) {\n            const items = this.state.items;\n            const terms = this.state.terms;\n            for (let i = 0; i < terms.length; i++) {\n                if (terms[i] === term) {\n                    this.props.onItemSelected(items[i]);\n                    break;\n                }\n            }\n        }\n\n        this.clear();\n\n        this.inputRef.current.focus();\n\n        for (const provider of this.props.providers) {\n            if (provider.handleCompleteWord) {\n                provider.handleCompleteWord(term, matchedPretext);\n            }\n        }\n    }\n\n    selectNext = () => {\n        this.setSelectionByDelta(1);\n    }\n\n    selectPrevious = () => {\n        this.setSelectionByDelta(-1);\n    }\n\n    setSelectionByDelta = (delta) => {\n        let selectionIndex = this.state.terms.indexOf(this.state.selection);\n\n        if (selectionIndex === -1) {\n            this.setState({\n                selection: '',\n            });\n            return;\n        }\n\n        selectionIndex += delta;\n\n        if (selectionIndex < 0) {\n            selectionIndex = 0;\n        } else if (selectionIndex > this.state.terms.length - 1) {\n            selectionIndex = this.state.terms.length - 1;\n        }\n\n        this.setState({\n            selection: this.state.terms[selectionIndex],\n        });\n    }\n\n    setSelection = (term) => {\n        this.setState({\n            selection: term,\n        });\n    }\n\n    clear = () => {\n        if (!this.state.cleared) {\n            this.setState({\n                cleared: true,\n                matchedPretext: [],\n                terms: [],\n                items: [],\n                components: [],\n                selection: '',\n            });\n        }\n    }\n\n    hasSuggestions = () => {\n        return this.state.items.some((item) => !item.loading);\n    }\n\n    handleKeyDown = (e) => {\n        if ((this.props.openWhenEmpty || this.props.value) && this.hasSuggestions()) {\n            if (Utils.isKeyPressed(e, KeyCodes.UP)) {\n                this.selectPrevious();\n                e.preventDefault();\n            } else if (Utils.isKeyPressed(e, KeyCodes.DOWN)) {\n                this.selectNext();\n                e.preventDefault();\n            } else if (Utils.isKeyPressed(e, KeyCodes.ENTER) || (this.props.completeOnTab && Utils.isKeyPressed(e, KeyCodes.TAB))) {\n                let matchedPretext = '';\n                for (let i = 0; i < this.state.terms.length; i++) {\n                    if (this.state.terms[i] === this.state.selection) {\n                        matchedPretext = this.state.matchedPretext[i];\n                    }\n                }\n\n                // If these don't match, the user typed quickly and pressed enter before we could\n                // update the pretext, so update the pretext before completing\n                if (this.pretext.endsWith(matchedPretext)) {\n                    this.handleCompleteWord(this.state.selection, matchedPretext);\n                } else {\n                    clearTimeout(this.timeoutId);\n                    this.nonDebouncedPretextChanged(this.pretext, true);\n                }\n\n                if (this.props.onKeyDown) {\n                    this.props.onKeyDown(e);\n                }\n                e.preventDefault();\n            } else if (Utils.isKeyPressed(e, KeyCodes.ESCAPE)) {\n                this.clear();\n                this.setState({presentationType: 'text'});\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (this.props.onKeyDown) {\n                this.props.onKeyDown(e);\n            }\n        } else if (this.props.onKeyDown) {\n            this.props.onKeyDown(e);\n        }\n    }\n\n    handleReceivedSuggestions = (suggestions) => {\n        const newComponents = [];\n        const newPretext = [];\n        for (let i = 0; i < suggestions.terms.length; i++) {\n            newComponents.push(suggestions.component);\n            newPretext.push(suggestions.matchedPretext);\n        }\n        const terms = suggestions.terms;\n        const items = suggestions.items;\n        let selection = this.state.selection;\n        if (terms.length > 0) {\n            // if the current selection is no longer in the map, select the first term in the list\n            if (!this.state.selection || terms.indexOf(this.state.selection) === -1) {\n                selection = terms[0];\n            }\n        } else if (this.state.selection) {\n            selection = '';\n        }\n\n        this.setState({\n            cleared: false,\n            selection,\n            terms,\n            items,\n            components: newComponents,\n            matchedPretext: newPretext,\n        });\n\n        return {selection, matchedPretext: suggestions.matchedPretext};\n    }\n\n    handleReceivedSuggestionsAndComplete = (suggestions) => {\n        const {selection, matchedPretext} = this.handleReceivedSuggestions(suggestions);\n        if (selection) {\n            this.handleCompleteWord(selection, matchedPretext);\n        }\n    }\n\n    nonDebouncedPretextChanged = (pretext, complete = false) => {\n        this.pretext = pretext;\n        let handled = false;\n        let callback = this.handleReceivedSuggestions;\n        if (complete) {\n            callback = this.handleReceivedSuggestionsAndComplete;\n        }\n        for (const provider of this.props.providers) {\n            handled = provider.handlePretextChanged(pretext, callback) || handled;\n\n            if (handled) {\n                this.setState({\n                    presentationType: provider.presentationType(),\n                    allowDividers: provider.allowDividers(),\n                });\n\n                break;\n            }\n        }\n        if (!handled) {\n            this.clear();\n        }\n    }\n\n    debouncedPretextChanged = (pretext) => {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(() => this.nonDebouncedPretextChanged(pretext), Constants.SEARCH_TIMEOUT_MILLISECONDS);\n    };\n\n    handlePretextChanged = (pretext) => {\n        this.pretext = pretext;\n        this.debouncedPretextChanged(pretext);\n    }\n\n    blur = () => {\n        this.inputRef.current.blur();\n    }\n\n    setContainerRef = (container) => {\n        // Attach/detach event listeners that aren't supported by React\n        if (this.container) {\n            this.container.removeEventListener('focusin', this.handleFocusIn);\n            this.container.removeEventListener('focusout', this.handleFocusOut);\n        }\n\n        if (container) {\n            container.addEventListener('focusin', this.handleFocusIn);\n            container.addEventListener('focusout', this.handleFocusOut);\n        }\n\n        // Save ref\n        this.container = container;\n    };\n\n    render() {\n        const {\n            listComponent,\n            dateComponent,\n            listStyle,\n            renderNoResults,\n            ...props\n        } = this.props;\n\n        const renderDividers = this.props.renderDividers && this.state.allowDividers;\n\n        // Don't pass props used by SuggestionBox\n        Reflect.deleteProperty(props, 'providers');\n        Reflect.deleteProperty(props, 'onChange'); // We use onInput instead of onChange on the actual input\n        Reflect.deleteProperty(props, 'onComposition');\n        Reflect.deleteProperty(props, 'onItemSelected');\n        Reflect.deleteProperty(props, 'completeOnTab');\n        Reflect.deleteProperty(props, 'isRHS');\n        Reflect.deleteProperty(props, 'requiredCharacters');\n        Reflect.deleteProperty(props, 'openOnFocus');\n        Reflect.deleteProperty(props, 'openWhenEmpty');\n        Reflect.deleteProperty(props, 'onFocus');\n        Reflect.deleteProperty(props, 'onBlur');\n        Reflect.deleteProperty(props, 'containerClass');\n        Reflect.deleteProperty(props, 'replaceAllInputOnSelect');\n        Reflect.deleteProperty(props, 'renderDividers');\n        Reflect.deleteProperty(props, 'contextId');\n        Reflect.deleteProperty(props, 'listenForMentionKeyClick');\n        Reflect.deleteProperty(props, 'wrapperHeight');\n\n        // This needs to be upper case so React doesn't think it's an html tag\n        const SuggestionListComponent = listComponent;\n        const SuggestionDateComponent = dateComponent;\n\n        return (\n            <div\n                ref={this.setContainerRef}\n                className={this.props.containerClass}\n            >\n                <div\n                    ref={this.suggestionReadOut}\n                    aria-live='polite'\n                    role='alert'\n                    className='sr-only'\n                />\n                <QuickInput\n                    ref={this.inputRef}\n                    autoComplete='off'\n                    {...props}\n                    onInput={this.handleChange}\n                    onCompositionStart={this.handleCompositionStart}\n                    onCompositionUpdate={this.handleCompositionUpdate}\n                    onCompositionEnd={this.handleCompositionEnd}\n                    onKeyDown={this.handleKeyDown}\n                />\n                {(this.props.openWhenEmpty || this.props.value.length >= this.props.requiredCharacters) && this.state.presentationType === 'text' &&\n                    <SuggestionListComponent\n                        ariaLiveRef={this.suggestionReadOut}\n                        open={this.state.focused}\n                        pretext={this.pretext}\n                        location={listStyle}\n                        renderDividers={renderDividers}\n                        renderNoResults={renderNoResults}\n                        onCompleteWord={this.handleCompleteWord}\n                        preventClose={this.preventSuggestionListClose}\n                        onItemHover={this.setSelection}\n                        cleared={this.state.cleared}\n                        matchedPretext={this.state.matchedPretext}\n                        items={this.state.items}\n                        terms={this.state.terms}\n                        selection={this.state.selection}\n                        components={this.state.components}\n                        wrapperHeight={this.props.wrapperHeight}\n                    />\n                }\n                {(this.props.openWhenEmpty || this.props.value.length >= this.props.requiredCharacters) && this.state.presentationType === 'date' &&\n                    <SuggestionDateComponent\n                        items={this.state.items}\n                        terms={this.state.terms}\n                        components={this.state.components}\n                        matchedPretext={this.state.matchedPretext}\n                        onCompleteWord={this.handleCompleteWord}\n                    />\n                }\n            </div>\n        );\n    }\n\n    // Finds the longest substring that's at both the end of b and the start of a. For example,\n    // if a = \"firepit\" and b = \"pitbull\", findOverlap would return \"pit\".\n    static findOverlap(a, b) {\n        const aLower = a.toLowerCase();\n        const bLower = b.toLowerCase();\n\n        for (let i = bLower.length; i > 0; i--) {\n            const substring = bLower.substring(0, i);\n\n            if (aLower.endsWith(substring)) {\n                return substring;\n            }\n        }\n\n        return '';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isEmptyObject, windowHeight} from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nexport default class SuggestionList extends React.PureComponent {\n    static propTypes = {\n        ariaLiveRef: PropTypes.object,\n        open: PropTypes.bool.isRequired,\n        location: PropTypes.string,\n        renderDividers: PropTypes.bool,\n        renderNoResults: PropTypes.bool,\n        onCompleteWord: PropTypes.func.isRequired,\n        preventClose: PropTypes.func,\n        onItemHover: PropTypes.func.isRequired,\n        pretext: PropTypes.string.isRequired,\n        cleared: PropTypes.bool.isRequired,\n        matchedPretext: PropTypes.array.isRequired,\n        items: PropTypes.array.isRequired,\n        terms: PropTypes.array.isRequired,\n        selection: PropTypes.string.isRequired,\n        components: PropTypes.array.isRequired,\n        wrapperHeight: PropTypes.number,\n    };\n\n    static defaultProps = {\n        renderDividers: false,\n        renderNoResults: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.contentRef = React.createRef();\n        this.itemRefs = new Map();\n        this.suggestionReadOut = React.createRef();\n        this.currentLabel = '';\n        this.currentItem = {};\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selection !== prevProps.selection && this.props.selection) {\n            this.scrollToItem(this.props.selection);\n        }\n\n        if (!isEmptyObject(this.currentItem)) {\n            this.generateLabel(this.currentItem);\n        }\n    }\n\n    componentWillUnmount() {\n        this.removeLabel();\n    }\n\n    announceLabel() {\n        const suggestionReadOut = this.props.ariaLiveRef.current;\n        if (suggestionReadOut) {\n            suggestionReadOut.innerHTML = this.currentLabel;\n        }\n    }\n\n    removeLabel() {\n        const suggestionReadOut = this.props.ariaLiveRef.current;\n        if (suggestionReadOut) {\n            suggestionReadOut.innerHTML = '';\n        }\n    }\n\n    generateLabel(item) {\n        if (item.username) {\n            this.currentLabel = item.username;\n            if ((item.first_name || item.last_name) && item.nickname) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name} ${item.nickname}`;\n            } else if (item.nickname) {\n                this.currentLabel += ` ${item.nickname}`;\n            } else if (item.first_name || item.last_name) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name}`;\n            }\n        } else if (item.type === 'mention.channels') {\n            this.currentLabel = item.channel.display_name;\n        }\n\n        if (this.currentLabel) {\n            this.currentLabel = this.currentLabel.toLowerCase();\n        }\n        this.announceLabel();\n    }\n\n    getContent = () => {\n        return $(this.contentRef.current);\n    }\n\n    scrollToItem = (term) => {\n        const content = this.getContent();\n        if (!content || content.length === 0) {\n            return;\n        }\n\n        const visibleContentHeight = content[0].clientHeight;\n        const actualContentHeight = content[0].scrollHeight;\n\n        if (visibleContentHeight < actualContentHeight) {\n            const contentTop = content.scrollTop();\n            const contentTopPadding = parseInt(content.css('padding-top'), 10);\n            const contentBottomPadding = parseInt(content.css('padding-top'), 10);\n\n            const item = $(ReactDOM.findDOMNode(this.itemRefs.get(term)));\n            if (item.length === 0) {\n                return;\n            }\n\n            const itemTop = item[0].offsetTop - parseInt(item.css('margin-top'), 10);\n            const itemBottomMargin = parseInt(item.css('margin-bottom'), 10) + parseInt(item.css('padding-bottom'), 10);\n            const itemBottom = item[0].offsetTop + item.height() + itemBottomMargin;\n\n            if (itemTop - contentTopPadding < contentTop) {\n                // the item is off the top of the visible space\n                content.scrollTop(itemTop - contentTopPadding);\n            } else if (itemBottom + contentTopPadding + contentBottomPadding > contentTop + visibleContentHeight) {\n                // the item has gone off the bottom of the visible space\n                content.scrollTop((itemBottom - visibleContentHeight) + contentTopPadding + contentBottomPadding);\n            }\n        }\n    }\n\n    renderDivider(type) {\n        return (\n            <div\n                key={type + '-divider'}\n                className='suggestion-list__divider'\n                style={{textTransform: 'uppercase', fontWeight: 'bold', fontSize: '11px'}}\n            >\n                <span>\n                    <FormattedMessage id={'suggestion.' + type}/>\n                </span>\n            </div>\n        );\n    }\n\n    renderNoResults() {\n        return (\n            <div\n                key='list-no-results'\n                className='suggestion-list__no-results'\n                ref={this.contentRef}\n            >\n                <FormattedMarkdownMessage\n                    id='suggestion_list.no_matches'\n                    defaultMessage='No items match __{value}__'\n                    values={{\n                        value: this.props.pretext || '\"\"',\n                    }}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        if (!this.props.open || this.props.cleared) {\n            return null;\n        }\n\n        const items = [];\n        if (this.props.items.length === 0) {\n            if (!this.props.renderNoResults) {\n                return null;\n            }\n            items.push(this.renderNoResults());\n        }\n\n        let lastType;\n        for (let i = 0; i < this.props.items.length; i++) {\n            const item = this.props.items[i];\n            const term = this.props.terms[i];\n            const isSelection = term === this.props.selection;\n\n            // ReactComponent names need to be upper case when used in JSX\n            const Component = this.props.components[i];\n\n            if (this.props.renderDividers && item.type !== lastType) {\n                items.push(this.renderDivider(item.type));\n                lastType = item.type;\n            }\n\n            if (item.loading) {\n                items.push(<LoadingSpinner key={item.type}/>);\n                continue;\n            }\n\n            if (isSelection) {\n                this.currentItem = item;\n            }\n\n            items.push(\n                <Component\n                    key={term}\n                    ref={(ref) => this.itemRefs.set(term, ref)}\n                    item={this.props.items[i]}\n                    term={term}\n                    matchedPretext={this.props.matchedPretext[i]}\n                    isSelection={isSelection}\n                    onClick={this.props.onCompleteWord}\n                    onMouseMove={this.props.onItemHover}\n                />\n            );\n        }\n        const mainClass = 'suggestion-list suggestion-list--' + this.props.location;\n        const contentClass = 'suggestion-list__content suggestion-list__content--' + this.props.location;\n        let maxHeight = Constants.SUGGESTION_LIST_MAXHEIGHT;\n        if (this.props.wrapperHeight) {\n            maxHeight = Math.min(\n                windowHeight() - (this.props.wrapperHeight + Constants.SUGGESTION_LIST_MAXHEIGHT),\n                Constants.SUGGESTION_LIST_MAXHEIGHT\n            );\n        }\n\n        const contentStyle = {maxHeight};\n\n        return (\n            <div className={mainClass}>\n                <div\n                    id='suggestionList'\n                    ref={this.contentRef}\n                    style={{...contentStyle}}\n                    className={contentClass}\n                    onMouseDown={this.props.preventClose}\n                >\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ArchiveIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.archive'\n                    defaultMessage='Archive Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-archive'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {TeamTypes} from 'mattermost-redux/action_types';\nimport {viewChannel, getChannelStats} from 'mattermost-redux/actions/channels';\nimport * as TeamActions from 'mattermost-redux/actions/teams';\nimport {getCurrentChannelId, isManuallyUnread} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/actions/users';\n\nimport {browserHistory} from 'utils/browser_history';\n\nexport function removeUserFromTeamAndGetStats(teamId, userId) {\n    return async (dispatch, getState) => {\n        const response = await dispatch(TeamActions.removeUserFromTeam(teamId, userId));\n        dispatch(getUser(userId));\n        dispatch(TeamActions.getTeamStats(teamId));\n        dispatch(getChannelStats(getCurrentChannelId(getState())));\n        return response;\n    };\n}\n\nexport function addUserToTeamFromInvite(token, inviteId) {\n    return async (dispatch) => {\n        const {data: member, error} = await dispatch(TeamActions.addUserToTeamFromInvite(token, inviteId));\n        if (member) {\n            const {data} = await dispatch(TeamActions.getTeam(member.team_id));\n\n            dispatch({\n                type: TeamTypes.RECEIVED_MY_TEAM_MEMBER,\n                data: {\n                    ...member,\n                    delete_at: 0,\n                    msg_count: 0,\n                    mention_count: 0,\n                },\n            });\n\n            return {data};\n        }\n        return {error};\n    };\n}\n\nexport function addUserToTeam(teamId, userId) {\n    return async (dispatch) => {\n        const {data: member, error} = await dispatch(TeamActions.addUserToTeam(teamId, userId));\n        if (member) {\n            const {data} = await dispatch(TeamActions.getTeam(member.team_id));\n\n            dispatch({\n                type: TeamTypes.RECEIVED_MY_TEAM_MEMBER,\n                data: {\n                    ...member,\n                    delete_at: 0,\n                    msg_count: 0,\n                    mention_count: 0,\n                },\n            });\n\n            return {data};\n        }\n        return {error};\n    };\n}\n\nexport function addUsersToTeam(teamId, userIds) {\n    return async (dispatch, getState) => {\n        const {data, error} = await dispatch(TeamActions.addUsersToTeamGracefully(teamId, userIds));\n\n        if (error) {\n            return {error};\n        }\n\n        dispatch(getChannelStats(getCurrentChannelId(getState())));\n\n        return {data};\n    };\n}\n\nexport function switchTeam(url) {\n    return (dispatch, getState) => {\n        const state = getState();\n        const currentChannelId = getCurrentChannelId(state);\n        if (!isManuallyUnread(state, currentChannelId)) {\n            dispatch(viewChannel(currentChannelId));\n        }\n\n        browserHistory.push(url);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SearchIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.search'\n                    defaultMessage='Search Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-search'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function isModalOpen(state, modalId) {\n    return state.views.modals.modalState[modalId] && state.views.modals.modalState[modalId].open;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport store from 'stores/redux_store.jsx';\n\nconst LICENSE_EXPIRY_NOTIFICATION = 1000 * 60 * 60 * 24 * 60; // 60 days\nconst LICENSE_GRACE_PERIOD = 1000 * 60 * 60 * 24 * 15; // 15 days\n\nexport function isLicenseExpiring() {\n    const license = getLicense(store.getState());\n    if (license.IsLicensed !== 'true') {\n        return false;\n    }\n\n    const timeDiff = parseInt(license.ExpiresAt, 10) - Date.now();\n    return timeDiff <= LICENSE_EXPIRY_NOTIFICATION;\n}\n\nexport function isLicenseExpired() {\n    const license = getLicense(store.getState());\n    if (license.IsLicensed !== 'true') {\n        return false;\n    }\n\n    const timeDiff = parseInt(license.ExpiresAt, 10) - Date.now();\n    return timeDiff < 0;\n}\n\nexport function isLicensePastGracePeriod() {\n    const license = getLicense(store.getState());\n    if (license.IsLicensed !== 'true') {\n        return false;\n    }\n\n    const timeDiff = Date.now() - parseInt(license.ExpiresAt, 10);\n    return timeDiff > LICENSE_GRACE_PERIOD;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Constants, AnnouncementBarTypes} from 'utils/constants';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport OverlayTrigger from 'components/overlay_trigger';\n\nexport default class AnnouncementBar extends React.PureComponent {\n    static propTypes = {\n        showCloseButton: PropTypes.bool,\n        color: PropTypes.string,\n        textColor: PropTypes.string,\n        type: PropTypes.string,\n        message: PropTypes.node.isRequired,\n        handleClose: PropTypes.func,\n    }\n    static defaultProps = {\n        showCloseButton: false,\n        color: '',\n        textColor: '',\n        type: AnnouncementBarTypes.CRITICAL,\n        handleClose: null,\n    }\n\n    componentDidMount() {\n        let announcementBarCount = document.body.getAttribute('announcementBarCount') || 0;\n        announcementBarCount++;\n        document.body.classList.add('announcement-bar--fixed');\n\n        // keeping a track of mounted AnnouncementBars so that on the last AnnouncementBars unmount we can remove the class on body\n        document.body.setAttribute('announcementBarCount', announcementBarCount);\n    }\n\n    componentWillUnmount() {\n        let announcementBarCount = document.body.getAttribute('announcementBarCount');\n        announcementBarCount--;\n        document.body.setAttribute('announcementBarCount', announcementBarCount);\n\n        // remove the class on body as it is the last announcementBar\n        if (announcementBarCount === 0) {\n            document.body.classList.remove('announcement-bar--fixed');\n        }\n    }\n\n    handleClose = (e) => {\n        e.preventDefault();\n        if (this.props.handleClose) {\n            this.props.handleClose();\n        }\n    }\n\n    render() {\n        if (!this.props.message) {\n            return null;\n        }\n\n        let barClass = 'announcement-bar';\n        const barStyle = {};\n        const linkStyle = {};\n        if (this.props.color && this.props.textColor) {\n            barStyle.backgroundColor = this.props.color;\n            barStyle.color = this.props.textColor;\n            linkStyle.color = this.props.textColor;\n        } else if (this.props.type === AnnouncementBarTypes.DEVELOPER) {\n            barClass = 'announcement-bar announcement-bar-developer';\n        } else if (this.props.type === AnnouncementBarTypes.CRITICAL) {\n            barClass = 'announcement-bar announcement-bar-critical';\n        } else if (this.props.type === AnnouncementBarTypes.SUCCESS) {\n            barClass = 'announcement-bar announcement-bar-success';\n        }\n\n        let closeButton;\n        if (this.props.showCloseButton) {\n            closeButton = (\n                <a\n                    href='#'\n                    className='announcement-bar__close'\n                    style={linkStyle}\n                    onClick={this.handleClose}\n                >\n                    {'×'}\n                </a>\n            );\n        }\n\n        let message = this.props.message;\n        if (typeof message == 'string') {\n            message = (\n                <FormattedMarkdownMessage id={this.props.message}/>\n            );\n        }\n\n        const announcementTooltip = (\n            <Tooltip id='announcement-bar__tooltip'>\n                {message}\n            </Tooltip>\n        );\n\n        return (\n            <div\n                className={barClass}\n                style={barStyle}\n            >\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={announcementTooltip}\n                >\n                    <span>\n                        {message}\n                    </span>\n                </OverlayTrigger>\n                {closeButton}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as TextFormatting from 'utils/text_formatting';\n\nimport AnnouncementBar from './announcement_bar.jsx';\n\nconst localStoragePrefix = '__announcement__';\n\nexport default class TextDismissableBar extends React.PureComponent {\n    static propTypes = {\n        allowDismissal: PropTypes.bool.isRequired,\n        text: PropTypes.string.isRequired,\n        siteURL: PropTypes.string,\n        onDismissal: PropTypes.func,\n\n        // Any props that AnnouncementBar supports\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dismissed: true,\n        };\n    }\n\n    static getDerivedStateFromProps(props) {\n        const dismissed = localStorage.getItem(localStoragePrefix + props.text);\n        return {\n            dismissed,\n        };\n    }\n\n    handleDismiss = () => {\n        if (!this.props.allowDismissal) {\n            return;\n        }\n        localStorage.setItem(localStoragePrefix + this.props.text, true);\n        this.setState({\n            dismissed: true,\n        });\n        if (this.props.onDismissal) {\n            this.props.onDismissal();\n        }\n    }\n\n    render() {\n        if (this.state.dismissed) {\n            return null;\n        }\n        const {allowDismissal, text, siteURL, ...extraProps} = this.props;\n        return (\n            <AnnouncementBar\n                {...extraProps}\n                showCloseButton={allowDismissal}\n                handleClose={this.handleDismiss}\n                message={\n                    <span\n                        dangerouslySetInnerHTML={{__html: TextFormatting.formatText(text, {singleline: true, mentionHighlight: false, siteURL})}}\n                    />\n                }\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {FormattedMessage, injectIntl} from 'react-intl';\n\nimport {isLicenseExpired, isLicenseExpiring, isLicensePastGracePeriod} from 'utils/license_utils.jsx';\nimport {AnnouncementBarTypes, AnnouncementBarMessages} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\n\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport AnnouncementBar from '../announcement_bar.jsx';\nimport TextDismissableBar from '../text_dismissable_bar';\n\nconst RENEWAL_LINK = 'https://licensing.mattermost.com/renew';\n\nclass ConfigurationAnnouncementBar extends React.PureComponent {\n    static propTypes = {\n        config: PropTypes.object,\n        intl: intlShape.isRequired,\n        license: PropTypes.object,\n        user: PropTypes.object,\n        canViewSystemErrors: PropTypes.bool.isRequired,\n        totalUsers: PropTypes.number,\n        dismissedExpiringLicense: PropTypes.bool,\n        siteURL: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            dismissNotice: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    dismissExpiringLicense = () => {\n        this.props.actions.dismissNotice(AnnouncementBarMessages.LICENSE_EXPIRING);\n    }\n\n    render() {\n        // System administrators\n        if (this.props.canViewSystemErrors) {\n            const renewalLink = RENEWAL_LINK + '?id=' + this.props.license.id + '&user_count=' + this.props.totalUsers;\n            if (isLicensePastGracePeriod()) {\n                return (\n                    <AnnouncementBar\n                        type={AnnouncementBarTypes.CRITICAL}\n                        message={\n                            <FormattedMarkdownMessage\n                                id={AnnouncementBarMessages.LICENSE_EXPIRED}\n                                defaultMessage='Enterprise license is expired and some features may be disabled. [Please renew](!{link}).'\n                                values={{\n                                    link: renewalLink,\n                                }}\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (isLicenseExpired()) {\n                return (\n                    <AnnouncementBar\n                        type={AnnouncementBarTypes.CRITICAL}\n                        message={\n                            <FormattedMarkdownMessage\n                                id={AnnouncementBarMessages.LICENSE_EXPIRED}\n                                defaultMessage='Enterprise license is expired and some features may be disabled. [Please renew](!{link}).'\n                                values={{\n                                    link: renewalLink,\n                                }}\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (isLicenseExpiring() && !this.props.dismissedExpiringLicense) {\n                return (\n                    <AnnouncementBar\n                        showCloseButton={true}\n                        handleClose={this.dismissExpiringLicense}\n                        type={AnnouncementBarTypes.ANNOUNCEMENT}\n                        message={\n                            <FormattedMarkdownMessage\n                                id={AnnouncementBarMessages.LICENSE_EXPIRING}\n                                defaultMessage='Enterprise license expires on {date, date, long}. [Please renew](!{link}).'\n                                values={{\n                                    date: new Date(parseInt(this.props.license.ExpiresAt, 10)),\n                                    link: renewalLink,\n                                }}\n                            />\n                        }\n                    />\n                );\n            }\n        } else {\n            // Regular users\n            if (isLicensePastGracePeriod()) { //eslint-disable-line no-lonely-if\n                return (\n                    <AnnouncementBar\n                        type={AnnouncementBarTypes.CRITICAL}\n                        message={\n                            <FormattedMessage\n                                id={AnnouncementBarMessages.LICENSE_PAST_GRACE}\n                                defaultMessage='Enterprise license is expired and some features may be disabled. Please contact your System Administrator for details.'\n                            />\n                        }\n                    />\n                );\n            }\n        }\n\n        const {formatMessage} = this.props.intl;\n\n        if (this.props.config.SendEmailNotifications !== 'true' &&\n            this.props.config.EnablePreviewModeBanner === 'true'\n        ) {\n            const emailMessage = formatMessage({\n                id: AnnouncementBarMessages.PREVIEW_MODE,\n                defaultMessage: 'Preview Mode: Email notifications have not been configured',\n            });\n\n            return (\n                <TextDismissableBar\n                    allowDismissal={true}\n                    text={emailMessage}\n                    type={AnnouncementBarTypes.ANNOUNCEMENT}\n                />\n            );\n        }\n\n        if (this.props.canViewSystemErrors && this.props.config.SiteURL === '') {\n            let id;\n            let defaultMessage;\n            if (this.props.config.EnableSignUpWithGitLab === 'true') {\n                id = t('announcement_bar.error.site_url_gitlab.full');\n                defaultMessage = 'Please configure your [Site URL](https://docs.mattermost.com/administration/config-settings.html#site-url) in the [System Console]({siteURL}/admin_console/environment/web_server) or in gitlab.rb if you\\'re using GitLab Mattermost.';\n            } else {\n                id = t('announcement_bar.error.site_url.full');\n                defaultMessage = 'Please configure your [Site URL](https://docs.mattermost.com/administration/config-settings.html#site-url) in the [System Console]({siteURL}/admin_console/environment/web_server).';\n            }\n\n            const values = {siteURL: this.props.siteURL};\n            const siteURLMessage = formatMessage({id, defaultMessage}, values);\n\n            return (\n                <TextDismissableBar\n                    allowDismissal={true}\n                    text={siteURLMessage}\n                    siteURL={this.props.siteURL}\n                    type={AnnouncementBarTypes.ANNOUNCEMENT}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default injectIntl(ConfigurationAnnouncementBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {AnnouncementBarMessages} from 'utils/constants';\nimport {dismissNotice} from 'actions/views/notice';\nimport {getSiteURL} from 'utils/url';\n\nimport ConfigurationBar from './configuration_bar.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        siteURL: getSiteURL(state),\n        dismissedExpiringLicense: Boolean(state.views.notice.hasBeenDismissed[AnnouncementBarMessages.LICENSE_EXPIRING]),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            dismissNotice,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurationBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {equalServerVersions} from 'utils/server_version';\nimport {AnnouncementBarTypes} from 'utils/constants';\n\nimport AnnouncementBar from '../announcement_bar.jsx';\n\nexport default class VersionBar extends React.PureComponent {\n    static propTypes = {\n        serverVersion: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverVersionOnAppLoad: props.serverVersion,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.serverVersionOnAppLoad && props.serverVersion) {\n            return {\n                serverVersionOnAppLoad: props.serverVersion,\n            };\n        }\n\n        return null;\n    }\n\n    reloadPage = () => {\n        window.location.reload();\n    }\n\n    render() {\n        const {serverVersionOnAppLoad} = this.state;\n        const {serverVersion} = this.props;\n\n        if (!serverVersionOnAppLoad) {\n            return null;\n        }\n\n        if (!equalServerVersions(serverVersionOnAppLoad, serverVersion)) {\n            return (\n                <AnnouncementBar\n                    type={AnnouncementBarTypes.ANNOUNCEMENT}\n                    message={\n                        <React.Fragment>\n                            <FormattedMessage\n                                id='version_bar.new'\n                                defaultMessage='A new version of Mattermost is available.'\n                            />\n                            {' '}\n                            <a onClick={this.reloadPage}>\n                                <FormattedMessage\n                                    id='version_bar.refresh'\n                                    defaultMessage='Refresh the app now'\n                                />\n                            </a>\n                            {'.'}\n                        </React.Fragment>\n                    }\n                />\n            );\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport VersionBar from './version_bar.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        serverVersion: state.entities.general.serverVersion,\n    };\n}\n\nexport default connect(mapStateToProps)(VersionBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ConfigurationAnnouncementBar from './configuration_bar';\nimport VersionBar from './version_bar';\nimport TextDismissableBar from './text_dismissable_bar.jsx';\nimport AnnouncementBar from './announcement_bar.jsx';\n\nexport default class AnnouncementBarController extends React.PureComponent {\n    static propTypes = {\n        license: PropTypes.object,\n        config: PropTypes.object,\n        user: PropTypes.shape({\n            email: PropTypes.string.isRequired,\n            email_verified: PropTypes.bool,\n        }),\n        canViewSystemErrors: PropTypes.bool.isRequired,\n        latestError: PropTypes.object,\n        totalUsers: PropTypes.number,\n        actions: PropTypes.shape({\n            dismissError: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    render() {\n        let adminConfiguredAnnouncementBar = null;\n        if (this.props.config.EnableBanner === 'true' && this.props.config.BannerText.trim()) {\n            adminConfiguredAnnouncementBar = (\n                <TextDismissableBar\n                    color={this.props.config.BannerColor}\n                    textColor={this.props.config.BannerTextColor}\n                    allowDismissal={this.props.config.AllowBannerDismissal === 'true'}\n                    text={this.props.config.BannerText}\n                />\n            );\n        }\n\n        let errorBar = null;\n        if (this.props.latestError) {\n            errorBar = (\n                <AnnouncementBar\n                    type={this.props.latestError.error.type}\n                    message={this.props.latestError.error.message}\n                    showCloseButton={true}\n                    handleClose={this.props.actions.dismissError}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {adminConfiguredAnnouncementBar}\n                {errorBar}\n                <VersionBar/>\n                <ConfigurationAnnouncementBar\n                    config={this.props.config}\n                    license={this.props.license}\n                    canViewSystemErrors={this.props.canViewSystemErrors}\n                    totalUsers={this.props.totalUsers}\n                    user={this.props.user}\n                />\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getDisplayableErrors} from 'mattermost-redux/selectors/errors';\nimport {dismissError} from 'mattermost-redux/actions/errors';\nimport {getStandardAnalytics} from 'mattermost-redux/actions/admin';\n\nimport {dismissNotice} from 'actions/views/notice';\n\nimport AnnouncementBarController from './announcement_bar_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const canViewSystemErrors = haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM});\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const user = getCurrentUser(state);\n    const errors = getDisplayableErrors(state);\n    const totalUsers = state.entities.admin.analytics.TOTAL_USERS;\n    let latestError = null;\n    if (errors && errors.length >= 1) {\n        latestError = errors[0];\n    }\n\n    return {\n        license,\n        config,\n        user,\n        canViewSystemErrors,\n        latestError,\n        totalUsers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    const dismissFirstError = dismissError.bind(null, 0);\n    return {\n        actions: bindActionCreators({\n            getStandardAnalytics,\n            dismissError: dismissFirstError,\n            dismissNotice,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnnouncementBarController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getPreviousActiveSection(state) {\n    return state.views.settings.previousActiveSection;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport function updateActiveSection(newActiveSection) {\n    return {\n        type: ActionTypes.UPDATE_ACTIVE_SECTION,\n        data: newActiveSection,\n    };\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport EditIcon from 'components/widgets/icons/fa_edit_icon';\n\nexport default class SettingItemMin extends React.PureComponent {\n    static defaultProps = {\n        section: '',\n    };\n\n    static propTypes = {\n\n        /**\n         * Settings title\n         */\n        title: PropTypes.node,\n\n        /**\n         * Option to disable opening the setting\n         */\n        disableOpen: PropTypes.bool,\n\n        /**\n         * Settings or tab section\n         */\n        section: PropTypes.string,\n\n        /**\n         * Function to update section\n         */\n        updateSection: PropTypes.func,\n\n        /**\n         * Settings description\n         */\n        describe: PropTypes.node,\n\n        /**\n         * Shows the previous active section for focusing\n         */\n        previousActiveSection: PropTypes.string,\n\n        /**\n         * Actions\n         */\n        actions: PropTypes.shape({\n\n            /**\n             * Update the active section for focusing\n             */\n            updateActiveSection: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    componentDidMount() {\n        if (this.props.previousActiveSection === this.props.section) {\n            this.edit.focus();\n        }\n    }\n\n    getEdit = (node) => {\n        this.edit = node;\n    }\n\n    handleUpdateSection = (e) => {\n        e.preventDefault();\n        this.props.actions.updateActiveSection(this.props.section);\n        this.props.updateSection(this.props.section);\n    }\n\n    render() {\n        let editButton = null;\n        let describeSection = null;\n\n        if (!this.props.disableOpen && isMobile()) {\n            editButton = (\n                <div className='section-min__edit'>\n                    <button\n                        id={this.props.section + 'Edit'}\n                        className='color--link cursor--pointer style--none'\n                        onClick={this.handleUpdateSection}\n                        ref={this.getEdit}\n                        aria-labelledby={this.props.section + 'Title ' + this.props.section + 'Edit'}\n                    >\n                        <EditIcon/>\n                        {this.props.describe}\n                    </button>\n                </div>\n            );\n        } else if (!this.props.disableOpen) {\n            editButton = (\n                <div className='section-min__edit'>\n                    <button\n                        id={this.props.section + 'Edit'}\n                        className='color--link cursor--pointer style--none text-left'\n                        onClick={this.handleUpdateSection}\n                        ref={this.getEdit}\n                        aria-labelledby={this.props.section + 'Title ' + this.props.section + 'Edit'}\n                    >\n                        <EditIcon/>\n                        <FormattedMessage\n                            id='setting_item_min.edit'\n                            defaultMessage='Edit'\n                        />\n                    </button>\n                </div>\n            );\n\n            describeSection = (\n                <div\n                    id={this.props.section + 'Desc'}\n                    className='section-min__describe'\n                >\n                    {this.props.describe}\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='section-min'\n                onClick={this.handleUpdateSection}\n            >\n                <div className='d-flex'>\n                    <h4\n                        id={this.props.section + 'Title'}\n                        className='section-min__title'\n                    >\n                        {this.props.title}\n                    </h4>\n                    {editButton}\n                </div>\n                {describeSection}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getPreviousActiveSection} from 'selectors/views/settings';\nimport {updateActiveSection} from 'actions/views/settings';\n\nimport SettingItemMin from './setting_item_min.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        previousActiveSection: getPreviousActiveSection(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateActiveSection,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingItemMin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class TeamPermissionGate extends React.Component {\n    static defaultProps = {\n        invert: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Team to check the permission\n         */\n        teamId: PropTypes.string,\n\n        /**\n         * Permissions enough to pass the gate (binary OR)\n         */\n        permissions: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Has permission\n         */\n        hasPermission: PropTypes.bool.isRequired,\n\n        /**\n         * Invert the permission (used for else)\n         */\n        invert: PropTypes.bool.isRequired,\n\n        /**\n         * Content protected by the permissions gate\n         */\n        children: PropTypes.node.isRequired,\n    };\n\n    render() {\n        if (this.props.hasPermission && !this.props.invert) {\n            return this.props.children;\n        }\n        if (!this.props.hasPermission && this.props.invert) {\n            return this.props.children;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport TeamPermissionGate from './team_permission_gate.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    if (!ownProps.teamId) {\n        return {hasPermission: false};\n    }\n\n    for (const permission of ownProps.permissions) {\n        if (haveITeamPermission(state, {team: ownProps.teamId, permission})) {\n            return {hasPermission: true};\n        }\n    }\n\n    return {hasPermission: false};\n}\n\nexport default connect(mapStateToProps)(TeamPermissionGate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getNavigationBlocked(state) {\n    return state.views.admin.navigationBlock.blocked;\n}\n\nexport function showNavigationPrompt(state) {\n    return state.views.admin.navigationBlock.showNavigationPrompt;\n}\n\nexport function getOnNavigationConfirmed(state) {\n    return state.views.admin.navigationBlock.onNavigationConfirmed;\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {imageURLForTeam} from 'utils/utils.jsx';\n\nimport './team_icon.scss';\n\ntype Props = {\n\n    /** Team icon URL (when available) */\n    url?: string;\n\n    /** Team display name (used for the initials) if icon URL is not set */\n    name: string;\n\n    /**\n     * Size of the icon, \"sm\", \"md\" or \"lg\".\n     *\n     * @default \"regular\"\n     **/\n    size?: 'sm'|'md'|'lg';\n\n    /** Whether to add hover effect to the icon */\n    withHover?: boolean;\n};\n\n/**\n * An icon representing a Team. If `url` is set - shows the image,\n * otherwise shows team initials\n */\nexport class TeamIcon extends React.PureComponent<Props> {\n    public static defaultProps = {\n        size: 'md',\n    };\n\n    public render() {\n        const {name, url, size, withHover} = this.props;\n        const hoverCss = withHover ? '' : 'no-hover';\n        const teamIconUrl = url || imageURLForTeam({display_name: name});\n        let icon;\n        if (teamIconUrl) {\n            icon = (\n                <div\n                    data-testid='teamIconImage'\n                    className={`TeamIcon__image TeamIcon__${size}`}\n                    aria-label={'Team Icon'}\n                    style={{backgroundImage: `url('${teamIconUrl}')`}}\n                />\n            );\n        } else {\n            icon = (\n                <div\n                    data-testid='teamIconInitial'\n                    className={`TeamIcon__initials TeamIcon__initials__${size}`}\n                    aria-label={'Team Initials'}\n                >\n                    {name ? name.replace(/\\s/g, '').substring(0, 2) : '??'}\n                </div>\n            );\n        }\n        return (\n            <div className={`TeamIcon ${hoverCss} TeamIcon__${size}`} >\n                <div className={`TeamIcon__content ${hoverCss}`}>\n                    {icon}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TeamIcon;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getOptionValue} from 'react-select/src/builtins';\n\nimport Constants from 'utils/constants';\nimport {cmdOrCtrlPressed} from 'utils/utils.jsx';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport {Value} from './multiselect';\n\nexport type Props = {\n    ariaLabelRenderer: getOptionValue<Value>;\n    loading?: boolean;\n    onAdd: (value: Value) => void;\n    onPageChange?: (newPage: number, currentPage: number) => void;\n    onSelect: (value: Value | null) => void;\n    optionRenderer: (\n        option: Value,\n        isSelected: boolean,\n        onAdd: (value: Value) => void,\n        onMouseMove: (value: Value) => void\n    ) => void;\n    options: Value[];\n    page: number;\n    perPage: number;\n}\n\ntype State = {\n    selected: number;\n}\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class MultiSelectList extends React.Component<Props, State> {\n    public static defaultProps = {\n        options: [],\n        perPage: 50,\n        onAction: () => null,\n    };\n\n    private toSelect = -1\n    private listRef = React.createRef<HTMLDivElement>()\n    private selectedRef = React.createRef<HTMLDivElement>()\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            selected: -1,\n        };\n    }\n\n    public componentDidMount() {\n        document.addEventListener('keydown', this.handleArrowPress);\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleArrowPress);\n    }\n\n    public componentDidUpdate(_: Props, prevState: State) {\n        const options = this.props.options;\n        if (options && options.length > 0 && this.state.selected >= 0) {\n            this.props.onSelect(options[this.state.selected]);\n        }\n\n        if (prevState.selected === this.state.selected) {\n            return;\n        }\n\n        if (this.listRef.current && this.selectedRef.current) {\n            const elemTop = this.selectedRef.current.getBoundingClientRect().top;\n            const elemBottom = this.selectedRef.current.getBoundingClientRect().bottom;\n            const listTop = this.listRef.current.getBoundingClientRect().top;\n            const listBottom = this.listRef.current.getBoundingClientRect().bottom;\n            if (elemBottom > listBottom) {\n                this.selectedRef.current.scrollIntoView(false);\n            } else if (elemTop < listTop) {\n                this.selectedRef.current.scrollIntoView(true);\n            }\n        }\n    }\n\n    // setSelected updates the selected index and is referenced\n    // externally by the MultiSelect component.\n    public setSelected = (selected: number) => {\n        this.setState({selected});\n    }\n\n    private handleArrowPress = (e: KeyboardEvent) => {\n        if (cmdOrCtrlPressed(e) && e.shiftKey) {\n            return;\n        }\n\n        const options = this.props.options;\n        if (options.length === 0) {\n            return;\n        }\n\n        let selected;\n        switch (e.key) {\n        case KeyCodes.DOWN[0]:\n            if (this.state.selected === -1) {\n                selected = 0;\n                break;\n            }\n            selected = Math.min(this.state.selected + 1, options.length - 1);\n            break;\n        case KeyCodes.UP[0]:\n            if (this.state.selected === -1) {\n                selected = 0;\n                break;\n            }\n            selected = Math.max(this.state.selected - 1, 0);\n            break;\n        default:\n            return;\n        }\n\n        e.preventDefault();\n        this.setState({selected});\n        this.props.onSelect(options[selected]);\n    }\n\n    private defaultOptionRenderer = (option: Value, isSelected: boolean, onAdd: Props['onAdd'], onMouseMove: (value: Value) => void) => {\n        let rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                ref={isSelected ? 'selected' : option.value}\n                className={rowSelected}\n                key={'multiselectoption' + option.value}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                {option.label}\n            </div>\n        );\n    }\n\n    private onMouseMove = (option: Value) => {\n        const i = this.props.options.indexOf(option);\n        if (i !== -1) {\n            if (this.state.selected !== i) {\n                this.setSelected(i);\n            }\n        }\n    }\n\n    public render() {\n        const options = this.props.options;\n        let renderOutput;\n\n        if (this.props.loading) {\n            renderOutput = (\n                <div aria-hidden={true}>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        } else if (options == null || options.length === 0) {\n            renderOutput = (\n                <div\n                    key='no-users-found'\n                    className='no-channel-message'\n                >\n                    <p className='primary-message'>\n                        <FormattedMessage\n                            id='multiselect.list.notFound'\n                            defaultMessage='No items found'\n                        />\n                    </p>\n                </div>\n            );\n        } else {\n            let renderer: Props['optionRenderer'];\n            if (this.props.optionRenderer) {\n                renderer = this.props.optionRenderer;\n            } else {\n                renderer = this.defaultOptionRenderer;\n            }\n\n            const optionControls = options.map((o, i) => renderer(o, this.state.selected === i, this.props.onAdd, this.onMouseMove));\n\n            const selectedOption = options[this.state.selected];\n            const ariaLabel = this.props.ariaLabelRenderer(selectedOption);\n\n            renderOutput = (\n                <div className='more-modal__list'>\n                    <div\n                        className='sr-only'\n                        aria-live='polite'\n                        aria-atomic='true'\n                    >\n                        {ariaLabel}\n                    </div>\n                    <div\n                        ref='list'\n                        id='multiSelectList'\n                        role='presentation'\n                        aria-hidden={true}\n                    >\n                        {optionControls}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='multi-select__wrapper'\n                aria-live='polite'\n            >\n                {renderOutput}\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport {ActionMeta} from 'react-select/src/types';\nimport {getOptionValue} from 'react-select/src/builtins';\nimport {StateManager} from 'react-select/src/stateManager';\n\nimport {Constants, A11yCustomEventTypes} from 'utils/constants';\nimport SaveButton from 'components/save_button';\n\nimport MultiSelectList from './multiselect_list';\n\nexport type Value = {\n    deleteAt?: number;\n    display_name?: string;\n    id: string;\n    label: string;\n    scheme_id?: string;\n    value: string;\n};\n\nexport type Props = {\n    ariaLabelRenderer: getOptionValue<Value>;\n    buttonSubmitLoadingText?: JSX.Element | string;\n    buttonSubmitText?: JSX.Element | string;\n    handleAdd: (value: Value) => void;\n    handleDelete: (values: Value[]) => void;\n    handleInput: (input: string, multiselect: MultiSelect) => void;\n    handlePageChange?: (newPage: number, currentPage: number) => void;\n    handleSubmit: (value?: Value[]) => void;\n    loading?: boolean;\n    maxValues?: number;\n    noteText?: JSX.Element;\n    numRemainingText?: JSX.Element;\n    optionRenderer: (\n        option: Value,\n        isSelected: boolean,\n        onAdd: (value: Value) => void,\n        onMouseMove: (value: Value) => void\n    ) => void;\n    options: Value[];\n    perPage: number;\n    placeholderText?: string;\n    saving?: boolean;\n    submitImmediatelyOn?: (value: Value) => void;\n    totalCount?: number;\n    users?: unknown[];\n    valueRenderer: typeof StateManager;\n    values: Value[];\n}\n\nexport type State = {\n    a11yActive: boolean;\n    input: string;\n    page: number;\n}\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class MultiSelect extends React.Component<Props, State> {\n    private listRef = React.createRef<MultiSelectList>()\n    private reactSelectRef = React.createRef<ReactSelect>()\n    private selected: Value | null = null\n\n    public static defaultProps = {\n        ariaLabelRenderer: defaultAriaLabelRenderer,\n    }\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            a11yActive: false,\n            page: 0,\n            input: '',\n        };\n    }\n\n    public componentDidMount() {\n        const inputRef: unknown = this.reactSelectRef.current && this.reactSelectRef.current.select.inputRef;\n\n        document.addEventListener<'keydown'>('keydown', this.handleEnterPress);\n        if (inputRef && typeof (inputRef as HTMLElement).addEventListener === 'function') {\n            (inputRef as HTMLElement).addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            (inputRef as HTMLElement).addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n\n            this.reactSelectRef.current!.focus(); // known from ternary definition of inputRef\n        }\n    }\n\n    public componentWillUnmount() {\n        const inputRef: unknown = this.reactSelectRef.current && this.reactSelectRef.current.select.inputRef;\n\n        if (inputRef && typeof (inputRef as HTMLElement).addEventListener === 'function') {\n            (inputRef as HTMLElement).removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            (inputRef as HTMLElement).removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n\n        document.removeEventListener('keydown', this.handleEnterPress);\n    }\n\n    private handleA11yActivateEvent = () => {\n        this.setState({a11yActive: true});\n    }\n\n    private handleA11yDeactivateEvent = () => {\n        this.setState({a11yActive: false});\n    }\n\n    private nextPage = () => {\n        if (this.props.handlePageChange) {\n            this.props.handlePageChange(this.state.page + 1, this.state.page);\n        }\n        if (this.listRef.current) {\n            this.listRef.current.setSelected(0);\n        }\n        this.setState({page: this.state.page + 1});\n    }\n\n    private prevPage = () => {\n        if (this.state.page === 0) {\n            return;\n        }\n\n        if (this.props.handlePageChange) {\n            this.props.handlePageChange(this.state.page - 1, this.state.page);\n        }\n\n        if (this.listRef.current) {\n            this.listRef.current.setSelected(0);\n        }\n        this.setState({page: this.state.page - 1});\n    }\n\n    private resetPaging = () => {\n        this.setState({page: 0});\n    }\n\n    private onSelect = (selected: Value | null) => {\n        this.selected = selected;\n    }\n\n    private onAdd = (value: Value) => {\n        if (this.props.maxValues && this.props.values.length >= this.props.maxValues) {\n            return;\n        }\n\n        for (let i = 0; i < this.props.values.length; i++) {\n            if (this.props.values[i].id === value.id) {\n                return;\n            }\n        }\n\n        this.props.handleAdd(value);\n        this.selected = null;\n\n        if (this.reactSelectRef.current) {\n            this.reactSelectRef.current.select.handleInputChange(\n                {currentTarget: {value: ''}} as React.KeyboardEvent<HTMLInputElement>\n            );\n            this.onInput('');\n            this.reactSelectRef.current.focus();\n        }\n\n        const submitImmediatelyOn = this.props.submitImmediatelyOn;\n        if (submitImmediatelyOn && submitImmediatelyOn(value)) {\n            this.props.handleSubmit([value]);\n        }\n    }\n\n    private onInput = (input: string, change: ActionMeta | { action: string } = {action: ''}) => {\n        if (!change) {\n            return;\n        }\n\n        if (change.action === 'input-blur' || change.action === 'menu-close') {\n            return;\n        }\n\n        if (this.state.input === input) {\n            return;\n        }\n\n        this.setState({input});\n\n        if (this.listRef.current) {\n            if (input === '') {\n                this.listRef.current.setSelected(-1);\n            } else {\n                this.listRef.current.setSelected(0);\n            }\n        }\n        this.selected = null;\n\n        this.props.handleInput(input, this);\n    }\n\n    private onInputKeyDown = (e: React.KeyboardEvent) => {\n        switch (e.key) {\n        case KeyCodes.ENTER[0]:\n            e.preventDefault();\n            break;\n        }\n    }\n\n    private handleEnterPress = (e: KeyboardEvent) => {\n        switch (e.key) {\n        case KeyCodes.ENTER[0]:\n            if (this.selected == null) {\n                this.props.handleSubmit();\n                return;\n            }\n            this.onAdd(this.selected);\n            break;\n        }\n    }\n\n    private handleOnClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        this.props.handleSubmit();\n    }\n\n    private onChange: ReactSelect['onChange'] = (_, change) => {\n        if (change.action !== 'remove-value' && change.action !== 'pop-value') {\n            return;\n        }\n\n        const values = [...this.props.values];\n        for (let i = 0; i < values.length; i++) {\n            // Types of ReactSelect do not match the behavior here,\n            if (values[i].id === (change as any).removedValue.id) {\n                values.splice(i, 1);\n                break;\n            }\n        }\n\n        this.props.handleDelete(values);\n    }\n\n    public render() {\n        const options = Object.assign([...this.props.options]);\n        const {totalCount, users, values} = this.props;\n\n        let numRemainingText;\n        if (this.props.numRemainingText) {\n            numRemainingText = this.props.numRemainingText;\n        } else if (this.props.maxValues != null) {\n            numRemainingText = (\n                <FormattedMessage\n                    id='multiselect.numRemaining'\n                    defaultMessage='You can add {num, number} more. '\n                    values={{\n                        num: this.props.maxValues - this.props.values.length,\n                    }}\n                />\n            );\n        }\n\n        let buttonSubmitText;\n        if (this.props.buttonSubmitText) {\n            buttonSubmitText = this.props.buttonSubmitText;\n        } else if (this.props.maxValues != null) {\n            buttonSubmitText = (\n                <FormattedMessage\n                    id='multiselect.go'\n                    defaultMessage='Go'\n                />\n            );\n        }\n\n        let optionsToDisplay = [];\n        let nextButton;\n        let previousButton;\n        let noteTextContainer;\n\n        if (this.props.noteText) {\n            noteTextContainer = (\n                <div className='multi-select__note'>\n                    <div className='note__icon'>\n                        <FormattedMessage\n                            id='generic_icons.info'\n                            defaultMessage='Info Icon'\n                        >\n                            {(title) => (\n                                <span\n                                    className='fa fa-info'\n                                    title={title as string}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </div>\n                    <div>{this.props.noteText}</div>\n                </div>\n            );\n        }\n\n        const valueMap: Record<string, boolean> = {};\n        for (let i = 0; i < values.length; i++) {\n            valueMap[values[i].id] = true;\n        }\n\n        for (let i = options.length - 1; i >= 0; i--) {\n            if (valueMap[options[i].id]) {\n                options.splice(i, 1);\n            }\n        }\n\n        if (options && options.length > this.props.perPage) {\n            const pageStart = this.state.page * this.props.perPage;\n            const pageEnd = pageStart + this.props.perPage;\n            optionsToDisplay = options.slice(pageStart, pageEnd);\n            if (!this.props.loading) {\n                if (options.length > pageEnd) {\n                    nextButton = (\n                        <button\n                            className='btn btn-link filter-control filter-control__next'\n                            onClick={this.nextPage}\n                        >\n                            <FormattedMessage\n                                id='filtered_user_list.next'\n                                defaultMessage='Next'\n                            />\n                        </button>\n                    );\n                }\n\n                if (this.state.page > 0) {\n                    previousButton = (\n                        <button\n                            className='btn btn-link filter-control filter-control__prev'\n                            onClick={this.prevPage}\n                        >\n                            <FormattedMessage\n                                id='filtered_user_list.prev'\n                                defaultMessage='Previous'\n                            />\n                        </button>\n                    );\n                }\n            }\n        } else {\n            optionsToDisplay = options;\n        }\n\n        let memberCount;\n        if (users && users.length && totalCount) {\n            memberCount = (\n                <FormattedMessage\n                    id='multiselect.numMembers'\n                    defaultMessage='{memberOptions, number} of {totalCount, number} members'\n                    values={{\n                        memberOptions: optionsToDisplay.length,\n                        totalCount: this.props.totalCount,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div className='filtered-user-list'>\n                <div className='filter-row filter-row--full'>\n                    <div className='multi-select__container'>\n                        <ReactSelect\n                            id='selectItems'\n                            ref={this.reactSelectRef as React.RefObject<any>} // type of ref on @types/react-select is outdated\n                            isMulti={true}\n                            options={this.props.options}\n                            styles={styles}\n                            components={{\n                                Menu: nullComponent,\n                                IndicatorsContainer: nullComponent,\n                                MultiValueLabel: paddedComponent(this.props.valueRenderer),\n                            }}\n                            isClearable={false}\n                            openMenuOnFocus={false}\n                            menuIsOpen={false}\n                            onInputChange={this.onInput}\n                            onKeyDown={this.onInputKeyDown as React.KeyboardEventHandler}\n                            onChange={this.onChange}\n                            value={this.props.values}\n                            placeholder={this.props.placeholderText}\n                            inputValue={this.state.input}\n                            getOptionValue={(option: Value) => option.id}\n                            getOptionLabel={this.props.ariaLabelRenderer}\n                            aria-label={this.props.placeholderText}\n                            className={this.state.a11yActive ? 'multi-select__focused' : ''}\n                        />\n                        <SaveButton\n                            id='saveItems'\n                            saving={this.props.saving}\n                            disabled={this.props.saving}\n                            onClick={this.handleOnClick}\n                            defaultMessage={buttonSubmitText}\n                            savingMessage={this.props.buttonSubmitLoadingText}\n                        />\n                    </div>\n                    <div className='multi-select__help'>\n                        {numRemainingText}\n                        {memberCount}\n                    </div>\n                    <div className='multi-select__help'>\n                        {noteTextContainer}\n                    </div>\n                </div>\n                <MultiSelectList\n                    ref={this.listRef}\n                    options={optionsToDisplay}\n                    optionRenderer={this.props.optionRenderer}\n                    ariaLabelRenderer={this.props.ariaLabelRenderer}\n                    page={this.state.page}\n                    perPage={this.props.perPage}\n                    onPageChange={this.props.handlePageChange}\n                    onAdd={this.onAdd}\n                    onSelect={this.onSelect}\n                    loading={this.props.loading}\n                />\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction defaultAriaLabelRenderer(option: Value) {\n    if (!option) {\n        return null;\n    }\n    return option.label;\n}\n\nconst nullComponent = () => null;\n\nconst paddedComponent = (WrappedComponent: typeof ReactSelect) => {\n    return (props: Props) => {\n        return (\n            <div style={{paddingRight: '5px', paddingLeft: '5px', borderRight: '1px solid rgba(15, 164, 74, 0.24)'}}>\n                <WrappedComponent {...props}/>\n            </div>\n        );\n    };\n};\n\nconst styles = {\n    container: () => {\n        return {\n            display: 'table-cell',\n            paddingRight: '15px',\n            verticalAlign: 'top',\n            width: '100%',\n        };\n    },\n    control: (base: React.CSSProperties) => {\n        return {\n            ...base,\n            borderRadius: '4px',\n            borderColor: 'hsl(0,0%,80%)',\n            minHeight: '36px',\n            '&:hover': {},\n            boxShadow: '',\n            backgroundColor: 'hsl(0,0%,100%)',\n        };\n    },\n    multiValue: (base: React.CSSProperties): React.CSSProperties => {\n        return {\n            ...base,\n            whiteSpace: 'nowrap',\n            border: '1px solid rgba(15, 164, 74, 0.24)',\n            backgroundColor: 'rgba(15, 164, 74, 0.08)',\n            color: 'rgb(15, 164, 74)',\n        };\n    },\n    multiValueRemove: (base: React.CSSProperties) => {\n        return {\n            ...base,\n            ':hover': {\n                backgroundColor: 'rgba(15, 164, 74, 0.15)',\n            },\n        };\n    },\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport const toggle = () => (dispatch) => dispatch({\n    type: ActionTypes.TOGGLE_LHS,\n});\n\nexport const open = () => (dispatch) => dispatch({\n    type: ActionTypes.OPEN_LHS,\n});\n\nexport const close = () => (dispatch) => dispatch({\n    type: ActionTypes.CLOSE_LHS,\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\nimport {\n    ChannelTypes,\n    EmojiTypes,\n    PostTypes,\n    TeamTypes,\n    UserTypes,\n    RoleTypes,\n    GeneralTypes,\n    AdminTypes,\n    IntegrationTypes,\n    PreferenceTypes,\n} from 'mattermost-redux/action_types';\nimport {WebsocketEvents, General, Permissions} from 'mattermost-redux/constants';\nimport {\n    getChannelAndMyMember,\n    getChannelMember,\n    getChannelStats,\n    viewChannel,\n    markChannelAsRead,\n} from 'mattermost-redux/actions/channels';\nimport {loadRolesIfNeeded} from 'mattermost-redux/actions/roles';\nimport {setServerVersion} from 'mattermost-redux/actions/general';\nimport {\n    getCustomEmojiForReaction,\n    getPosts,\n    getProfilesAndStatusesForPosts,\n    getThreadsForPosts,\n    postDeleted,\n    receivedNewPost,\n    receivedPost,\n} from 'mattermost-redux/actions/posts';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport * as TeamActions from 'mattermost-redux/actions/teams';\nimport {\n    checkForModifiedUsers,\n    getMe,\n    getMissingProfilesByIds,\n    getStatusesByIds,\n    getUser as loadUser,\n} from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\nimport {getCurrentUser, getCurrentUserId, getStatusForUserId, getUser, getIsManualStatusForUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getMyTeams, getCurrentRelativeTeamUrl, getCurrentTeamId, getCurrentTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getChannelsInTeam, getChannel, getCurrentChannel, getCurrentChannelId, getRedirectChannelNameForTeam, getMembersInCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost, getMostRecentPostIdInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {haveISystemPermission, haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport {getSelectedChannelId} from 'selectors/rhs';\n\nimport {openModal} from 'actions/views/modals';\nimport {incrementWsErrorCount, resetWsErrorCount} from 'actions/views/system';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {syncPostsInChannel} from 'actions/views/channel';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {loadChannelsForCurrentUser} from 'actions/channel_actions.jsx';\nimport {redirectUserToDefaultTeam} from 'actions/global_actions.jsx';\nimport {handleNewPost} from 'actions/post_actions.jsx';\nimport * as StatusActions from 'actions/status_actions.jsx';\nimport {loadProfilesForSidebar} from 'actions/user_actions.jsx';\nimport store from 'stores/redux_store.jsx';\nimport WebSocketClient from 'client/web_websocket_client.jsx';\nimport {loadPlugin, loadPluginsIfNecessary, removePlugin} from 'plugins';\nimport {ActionTypes, Constants, AnnouncementBarMessages, SocketEvents, UserStatuses, ModalIdentifiers} from 'utils/constants';\nimport {fromAutoResponder} from 'utils/post_utils';\nimport {getSiteURL} from 'utils/url';\nimport {isGuest} from 'utils/utils';\nimport RemovedFromChannelModal from 'components/removed_from_channel_modal';\nimport InteractiveDialog from 'components/interactive_dialog';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nconst MAX_WEBSOCKET_FAILS = 7;\n\nconst pluginEventHandlers = {};\n\nexport function initialize() {\n    if (!window.WebSocket) {\n        console.log('Browser does not support websocket'); //eslint-disable-line no-console\n        return;\n    }\n\n    const config = getConfig(getState());\n    let connUrl = '';\n    if (config.WebsocketURL) {\n        connUrl = config.WebsocketURL;\n    } else {\n        connUrl = new URL(getSiteURL());\n\n        // replace the protocol with a websocket one\n        if (connUrl.protocol === 'https:') {\n            connUrl.protocol = 'wss:';\n        } else {\n            connUrl.protocol = 'ws:';\n        }\n\n        // append a port number if one isn't already specified\n        if (!(/:\\d+$/).test(connUrl.host)) {\n            if (connUrl.protocol === 'wss:') {\n                connUrl.host += ':' + config.WebsocketSecurePort;\n            } else {\n                connUrl.host += ':' + config.WebsocketPort;\n            }\n        }\n\n        connUrl = connUrl.toString();\n    }\n\n    // Strip any trailing slash before appending the pathname below.\n    if (connUrl.length > 0 && connUrl[connUrl.length - 1] === '/') {\n        connUrl = connUrl.substring(0, connUrl.length - 1);\n    }\n\n    connUrl += Client4.getUrlVersion() + '/websocket';\n\n    let token = '';\n    if ($.chat_token) {\n        token = $.chat_token;\n    }\n\n    if (process.env.CHAT_TOKEN) { //eslint-disable-line no-process-env\n        token = process.env.CHAT_TOKEN; //eslint-disable-line no-process-env\n    }\n\n    WebSocketClient.setEventCallback(handleEvent);\n    WebSocketClient.setFirstConnectCallback(handleFirstConnect);\n    WebSocketClient.setReconnectCallback(() => reconnect(false));\n    WebSocketClient.setMissedEventCallback(() => reconnect(false));\n    WebSocketClient.setCloseCallback(handleClose);\n    WebSocketClient.initialize(connUrl, token);\n}\n\nexport function close() {\n    WebSocketClient.close();\n}\n\nfunction reconnectWebSocket() {\n    close();\n    initialize();\n}\n\nconst pluginReconnectHandlers = {};\n\nexport function registerPluginReconnectHandler(pluginId, handler) {\n    pluginReconnectHandlers[pluginId] = handler;\n}\n\nexport function unregisterPluginReconnectHandler(pluginId) {\n    Reflect.deleteProperty(pluginReconnectHandlers, pluginId);\n}\n\nexport function reconnect(includeWebSocket = true) {\n    if (includeWebSocket) {\n        reconnectWebSocket();\n    }\n\n    dispatch({\n        type: GeneralTypes.WEBSOCKET_SUCCESS,\n        timestamp: Date.now(),\n    });\n\n    loadPluginsIfNecessary();\n\n    Object.values(pluginReconnectHandlers).forEach((handler) => {\n        if (handler && typeof handler === 'function') {\n            handler();\n        }\n    });\n\n    const state = getState();\n    const currentTeamId = state.entities.teams.currentTeamId;\n    if (currentTeamId) {\n        const currentChannelId = getCurrentChannelId(state);\n        const mostRecentId = getMostRecentPostIdInChannel(state, currentChannelId);\n        const mostRecentPost = getPost(state, mostRecentId);\n        dispatch(loadChannelsForCurrentUser());\n        if (mostRecentPost) {\n            dispatch(syncPostsInChannel(currentChannelId, mostRecentPost.create_at));\n        } else {\n            // if network timed-out the first time when loading a channel\n            // we can request for getPosts again when socket is connected\n            dispatch(getPosts(currentChannelId));\n        }\n        StatusActions.loadStatusesForChannelAndSidebar();\n        dispatch(TeamActions.getMyTeamUnreads(getCurrentUserId(state), currentTeamId));\n    }\n\n    if (state.websocket.lastDisconnectAt) {\n        dispatch(checkForModifiedUsers());\n    }\n\n    dispatch(resetWsErrorCount());\n    dispatch(clearErrors());\n}\n\nlet intervalId = '';\nconst SYNC_INTERVAL_MILLISECONDS = 1000 * 60 * 15; // 15 minutes\n\nexport function startPeriodicSync() {\n    clearInterval(intervalId);\n\n    intervalId = setInterval(\n        () => {\n            if (getCurrentUser(getState()) != null) {\n                reconnect(false);\n            }\n        },\n        SYNC_INTERVAL_MILLISECONDS\n    );\n}\n\nexport function stopPeriodicSync() {\n    clearInterval(intervalId);\n}\n\nexport function registerPluginWebSocketEvent(pluginId, event, action) {\n    if (!pluginEventHandlers[pluginId]) {\n        pluginEventHandlers[pluginId] = {};\n    }\n    pluginEventHandlers[pluginId][event] = action;\n}\n\nexport function unregisterPluginWebSocketEvent(pluginId, event) {\n    const events = pluginEventHandlers[pluginId];\n    if (!events) {\n        return;\n    }\n\n    Reflect.deleteProperty(events, event);\n}\n\nexport function unregisterAllPluginWebSocketEvents(pluginId) {\n    Reflect.deleteProperty(pluginEventHandlers, pluginId);\n}\n\nfunction handleFirstConnect() {\n    dispatch(batchActions([\n        {\n            type: GeneralTypes.WEBSOCKET_SUCCESS,\n            timestamp: Date.now(),\n        },\n        clearErrors(),\n    ]));\n}\n\nfunction handleClose(failCount) {\n    if (failCount > MAX_WEBSOCKET_FAILS) {\n        dispatch(logError({type: 'critical', message: AnnouncementBarMessages.WEBSOCKET_PORT_ERROR}, true));\n    }\n    dispatch(batchActions([\n        {\n            type: GeneralTypes.WEBSOCKET_FAILURE,\n            timestamp: Date.now(),\n        },\n        incrementWsErrorCount(),\n    ]));\n}\n\nexport function handleEvent(msg) {\n    switch (msg.event) {\n    case SocketEvents.POSTED:\n    case SocketEvents.EPHEMERAL_MESSAGE:\n        handleNewPostEventDebounced(msg);\n        break;\n\n    case SocketEvents.POST_EDITED:\n        handlePostEditEvent(msg);\n        break;\n\n    case SocketEvents.POST_DELETED:\n        handlePostDeleteEvent(msg);\n        break;\n\n    case SocketEvents.POST_UNREAD:\n        handlePostUnreadEvent(msg);\n        break;\n\n    case SocketEvents.LEAVE_TEAM:\n        handleLeaveTeamEvent(msg);\n        break;\n\n    case SocketEvents.UPDATE_TEAM:\n        handleUpdateTeamEvent(msg);\n        break;\n\n    case SocketEvents.DELETE_TEAM:\n        handleDeleteTeamEvent(msg);\n        break;\n\n    case SocketEvents.ADDED_TO_TEAM:\n        handleTeamAddedEvent(msg);\n        break;\n\n    case SocketEvents.USER_ADDED:\n        handleUserAddedEvent(msg);\n        break;\n\n    case SocketEvents.USER_REMOVED:\n        handleUserRemovedEvent(msg);\n        break;\n\n    case SocketEvents.USER_UPDATED:\n        handleUserUpdatedEvent(msg);\n        break;\n\n    case SocketEvents.ROLE_ADDED:\n        handleRoleAddedEvent(msg);\n        break;\n\n    case SocketEvents.ROLE_REMOVED:\n        handleRoleRemovedEvent(msg);\n        break;\n\n    case SocketEvents.MEMBERROLE_UPDATED:\n        handleUpdateMemberRoleEvent(msg);\n        break;\n\n    case SocketEvents.ROLE_UPDATED:\n        handleRoleUpdatedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_CREATED:\n        handleChannelCreatedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_DELETED:\n        handleChannelDeletedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_CONVERTED:\n        handleChannelConvertedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_UPDATED:\n        dispatch(handleChannelUpdatedEvent(msg));\n        break;\n\n    case SocketEvents.CHANNEL_MEMBER_UPDATED:\n        handleChannelMemberUpdatedEvent(msg);\n        break;\n\n    case SocketEvents.DIRECT_ADDED:\n        handleDirectAddedEvent(msg);\n        break;\n\n    case SocketEvents.PREFERENCE_CHANGED:\n        handlePreferenceChangedEvent(msg);\n        break;\n\n    case SocketEvents.PREFERENCES_CHANGED:\n        handlePreferencesChangedEvent(msg);\n        break;\n\n    case SocketEvents.PREFERENCES_DELETED:\n        handlePreferencesDeletedEvent(msg);\n        break;\n\n    case SocketEvents.TYPING:\n        dispatch(handleUserTypingEvent(msg));\n        break;\n\n    case SocketEvents.STATUS_CHANGED:\n        handleStatusChangedEvent(msg);\n        break;\n\n    case SocketEvents.HELLO:\n        handleHelloEvent(msg);\n        break;\n\n    case SocketEvents.REACTION_ADDED:\n        handleReactionAddedEvent(msg);\n        break;\n\n    case SocketEvents.REACTION_REMOVED:\n        handleReactionRemovedEvent(msg);\n        break;\n\n    case SocketEvents.EMOJI_ADDED:\n        handleAddEmoji(msg);\n        break;\n\n    case SocketEvents.CHANNEL_VIEWED:\n        handleChannelViewedEvent(msg);\n        break;\n\n    case SocketEvents.PLUGIN_ENABLED:\n        handlePluginEnabled(msg);\n        break;\n\n    case SocketEvents.PLUGIN_DISABLED:\n        handlePluginDisabled(msg);\n        break;\n\n    case SocketEvents.USER_ROLE_UPDATED:\n        handleUserRoleUpdated(msg);\n        break;\n\n    case SocketEvents.CONFIG_CHANGED:\n        handleConfigChanged(msg);\n        break;\n\n    case SocketEvents.LICENSE_CHANGED:\n        handleLicenseChanged(msg);\n        break;\n\n    case SocketEvents.PLUGIN_STATUSES_CHANGED:\n        handlePluginStatusesChangedEvent(msg);\n        break;\n\n    case SocketEvents.OPEN_DIALOG:\n        handleOpenDialogEvent(msg);\n        break;\n\n    default:\n    }\n\n    Object.values(pluginEventHandlers).forEach((pluginEvents) => {\n        if (!pluginEvents) {\n            return;\n        }\n\n        if (pluginEvents.hasOwnProperty(msg.event) && typeof pluginEvents[msg.event] === 'function') {\n            pluginEvents[msg.event](msg);\n        }\n    });\n}\n\n// handleChannelConvertedEvent handles updating of channel which is converted from public to private\nfunction handleChannelConvertedEvent(msg) {\n    const channelId = msg.data.channel_id;\n    if (channelId) {\n        const channel = getChannel(getState(), channelId);\n        if (channel) {\n            dispatch({\n                type: ChannelTypes.RECEIVED_CHANNEL,\n                data: {...channel, type: General.PRIVATE_CHANNEL},\n            });\n        }\n    }\n}\n\nexport function handleChannelUpdatedEvent(msg) {\n    return (doDispatch, doGetState) => {\n        const channel = JSON.parse(msg.data.channel);\n\n        doDispatch({type: ChannelTypes.RECEIVED_CHANNEL, data: channel});\n\n        const state = doGetState();\n        if (channel.id === getCurrentChannelId(state)) {\n            browserHistory.replace(`${getCurrentRelativeTeamUrl(state)}/channels/${channel.name}`);\n        }\n    };\n}\n\nfunction handleChannelMemberUpdatedEvent(msg) {\n    const channelMember = JSON.parse(msg.data.channelMember);\n    const roles = channelMember.roles.split(' ');\n    dispatch(loadRolesIfNeeded(roles));\n    dispatch({type: ChannelTypes.RECEIVED_MY_CHANNEL_MEMBER, data: channelMember});\n}\n\nfunction debouncePostEvent(wait) {\n    let timeout;\n    let queue = [];\n    let count = 0;\n\n    // Called when timeout triggered\n    const triggered = () => {\n        timeout = null;\n\n        if (queue.length > 0) {\n            dispatch(handleNewPostEvents(queue));\n        }\n\n        queue = [];\n        count = 0;\n    };\n\n    return function fx(msg) {\n        if (timeout && count > 2) {\n            // If the timeout is going this is the second or further event so queue them up.\n            if (queue.push(msg) > 200) {\n                // Don't run us out of memory, give up if the queue gets insane\n                queue = [];\n                console.log('channel broken because of too many incoming messages'); //eslint-disable-line no-console\n            }\n            clearTimeout(timeout);\n            timeout = setTimeout(triggered, wait);\n        } else {\n            // Apply immediately for events up until count reaches limit\n            count += 1;\n            dispatch(handleNewPostEvent(msg));\n            clearTimeout(timeout);\n            timeout = setTimeout(triggered, wait);\n        }\n    };\n}\n\nconst handleNewPostEventDebounced = debouncePostEvent(100);\n\nexport function handleNewPostEvent(msg) {\n    return (myDispatch, myGetState) => {\n        const post = JSON.parse(msg.data.post);\n        myDispatch(handleNewPost(post, msg));\n\n        getProfilesAndStatusesForPosts([post], myDispatch, myGetState);\n\n        if (post.user_id !== getCurrentUserId(myGetState()) && !fromAutoResponder(post) && !getIsManualStatusForUserId(myGetState(), post.user_id)) {\n            myDispatch({\n                type: UserTypes.RECEIVED_STATUSES,\n                data: [{user_id: post.user_id, status: UserStatuses.ONLINE}],\n            });\n        }\n    };\n}\n\nexport function handleNewPostEvents(queue) {\n    return (myDispatch, myGetState) => {\n        const posts = queue.map((msg) => JSON.parse(msg.data.post));\n\n        // Receive the posts as one continuous block since they were received within a short period\n        const actions = posts.map(receivedNewPost);\n        myDispatch(batchActions(actions));\n\n        // Load the posts' threads\n        myDispatch(getThreadsForPosts(posts));\n\n        // And any other data needed for them\n        getProfilesAndStatusesForPosts(posts, myDispatch, myGetState);\n    };\n}\n\nexport function handlePostEditEvent(msg) {\n    // Store post\n    const post = JSON.parse(msg.data.post);\n    dispatch(receivedPost(post));\n\n    getProfilesAndStatusesForPosts([post], dispatch, getState);\n    const currentChannelId = getCurrentChannelId(getState());\n\n    // Update channel state\n    if (currentChannelId === msg.broadcast.channel_id) {\n        if (window.isActive) {\n            dispatch(viewChannel(currentChannelId));\n        }\n    }\n}\n\nfunction handlePostDeleteEvent(msg) {\n    const post = JSON.parse(msg.data.post);\n    dispatch(postDeleted(post));\n}\n\nexport function handlePostUnreadEvent(msg) {\n    dispatch(\n        {\n            type: ActionTypes.POST_UNREAD_SUCCESS,\n            data: {\n                lastViewedAt: msg.data.last_viewed_at,\n                channelId: msg.broadcast.channel_id,\n                msgCount: msg.data.msg_count,\n                mentionCount: msg.data.mention_count,\n            },\n        }\n    );\n}\n\nasync function handleTeamAddedEvent(msg) {\n    await dispatch(TeamActions.getTeam(msg.data.team_id));\n    await dispatch(TeamActions.getMyTeamMembers());\n    await dispatch(TeamActions.getMyTeamUnreads());\n}\n\nexport function handleLeaveTeamEvent(msg) {\n    const state = getState();\n\n    const actions = [\n        {\n            type: UserTypes.RECEIVED_PROFILE_NOT_IN_TEAM,\n            data: {id: msg.data.team_id, user_id: msg.data.user_id},\n        },\n        {\n            type: TeamTypes.REMOVE_MEMBER_FROM_TEAM,\n            data: {team_id: msg.data.team_id, user_id: msg.data.user_id},\n        },\n    ];\n\n    const channelsPerTeam = getChannelsInTeam(state);\n    const channels = (channelsPerTeam && channelsPerTeam[msg.data.team_id]) || [];\n\n    for (const channel of channels) {\n        actions.push({\n            type: ChannelTypes.REMOVE_MEMBER_FROM_CHANNEL,\n            data: {id: channel, user_id: msg.data.user_id},\n        });\n    }\n\n    dispatch(batchActions(actions));\n\n    if (getCurrentUserId(state) === msg.data.user_id) {\n        dispatch({type: TeamTypes.LEAVE_TEAM, data: {id: msg.data.team_id}});\n\n        // if they are on the team being removed redirect them to default team\n        if (getCurrentTeamId(state) === msg.data.team_id) {\n            if (!global.location.pathname.startsWith('/admin_console')) {\n                redirectUserToDefaultTeam();\n            }\n        }\n    }\n}\n\nfunction handleUpdateTeamEvent(msg) {\n    dispatch({type: TeamTypes.UPDATED_TEAM, data: JSON.parse(msg.data.team)});\n}\n\nfunction handleDeleteTeamEvent(msg) {\n    const deletedTeam = JSON.parse(msg.data.team);\n    const state = store.getState();\n    const {teams} = state.entities.teams;\n    if (\n        deletedTeam &&\n        teams &&\n        teams[deletedTeam.id] &&\n        teams[deletedTeam.id].delete_at === 0\n    ) {\n        const {currentUserId} = state.entities.users;\n        const {currentTeamId, myMembers} = state.entities.teams;\n        const teamMembers = Object.values(myMembers);\n        const teamMember = teamMembers.find((m) => m.user_id === currentUserId && m.team_id === currentTeamId);\n\n        let newTeamId = '';\n        if (\n            deletedTeam &&\n            teamMember &&\n            deletedTeam.id === teamMember.team_id\n        ) {\n            const myTeams = {};\n            getMyTeams(state).forEach((t) => {\n                myTeams[t.id] = t;\n            });\n\n            for (let i = 0; i < teamMembers.length; i++) {\n                const memberTeamId = teamMembers[i].team_id;\n                if (\n                    myTeams &&\n                    myTeams[memberTeamId] &&\n                    myTeams[memberTeamId].delete_at === 0 &&\n                    deletedTeam.id !== memberTeamId\n                ) {\n                    newTeamId = memberTeamId;\n                    break;\n                }\n            }\n        }\n\n        dispatch(batchActions([\n            {type: TeamTypes.RECEIVED_TEAM_DELETED, data: {id: deletedTeam.id}},\n            {type: TeamTypes.UPDATED_TEAM, data: deletedTeam},\n        ]));\n\n        if (newTeamId) {\n            dispatch({type: TeamTypes.SELECT_TEAM, data: newTeamId});\n            const globalState = getState();\n            const redirectChannel = getRedirectChannelNameForTeam(globalState, newTeamId);\n            browserHistory.push(`${getCurrentTeamUrl(globalState)}/channels/${redirectChannel}`);\n        } else {\n            browserHistory.push('/');\n        }\n    }\n}\n\nfunction handleUpdateMemberRoleEvent(msg) {\n    const memberData = JSON.parse(msg.data.member);\n    const newRoles = memberData.roles.split(' ');\n\n    dispatch(loadRolesIfNeeded(newRoles));\n\n    dispatch({\n        type: TeamTypes.RECEIVED_MY_TEAM_MEMBER,\n        data: memberData,\n    });\n}\n\nfunction handleDirectAddedEvent(msg) {\n    dispatch(getChannelAndMyMember(msg.broadcast.channel_id));\n}\n\nfunction handleUserAddedEvent(msg) {\n    const currentChannelId = getCurrentChannelId(getState());\n    if (currentChannelId === msg.broadcast.channel_id) {\n        dispatch(getChannelStats(currentChannelId));\n        dispatch({\n            type: UserTypes.RECEIVED_PROFILE_IN_CHANNEL,\n            data: {id: msg.broadcast.channel_id, user_id: msg.data.user_id},\n        });\n    }\n\n    const currentTeamId = getCurrentTeamId(getState());\n    const currentUserId = getCurrentUserId(getState());\n    if (currentTeamId === msg.data.team_id && currentUserId === msg.data.user_id) {\n        dispatch(getChannelAndMyMember(msg.broadcast.channel_id));\n    }\n}\n\nexport function handleUserRemovedEvent(msg) {\n    const state = getState();\n    const currentChannel = getCurrentChannel(state) || {};\n    const currentUserId = getCurrentUserId(state);\n\n    if (msg.broadcast.user_id === currentUserId) {\n        dispatch(loadChannelsForCurrentUser());\n\n        const rhsChannelId = getSelectedChannelId(state);\n        if (msg.data.channel_id === rhsChannelId) {\n            dispatch(closeRightHandSide());\n        }\n\n        if (msg.data.channel_id === currentChannel.id) {\n            if (msg.data.remover_id === msg.broadcast.user_id) {\n                browserHistory.push(getCurrentRelativeTeamUrl(state));\n            } else {\n                const user = getUser(state, msg.data.remover_id);\n                if (!user) {\n                    dispatch(loadUser(msg.data.remover_id));\n                }\n\n                dispatch(openModal({\n                    modalId: ModalIdentifiers.REMOVED_FROM_CHANNEL,\n                    dialogType: RemovedFromChannelModal,\n                    dialogProps: {\n                        channelName: currentChannel.display_name,\n                        removerId: msg.data.remover_id,\n                    },\n                }));\n                redirectUserToDefaultTeam();\n            }\n        }\n\n        dispatch({\n            type: ChannelTypes.LEAVE_CHANNEL,\n            data: {id: msg.data.channel_id, user_id: msg.broadcast.user_id},\n        });\n    } else if (msg.broadcast.channel_id === currentChannel.id) {\n        dispatch(getChannelStats(currentChannel.id));\n        dispatch({\n            type: UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL,\n            data: {id: msg.broadcast.channel_id, user_id: msg.data.user_id},\n        });\n    }\n\n    const channelId = msg.broadcast.channel_id || msg.data.channel_id;\n    const userId = msg.broadcast.user_id || msg.data.user_id;\n    const channel = getChannel(state, channelId);\n    if (channel && !haveISystemPermission(state, {permission: Permissions.VIEW_MEMBERS}) && !haveITeamPermission(state, {permission: Permissions.VIEW_MEMBERS, team: channel.team_id})) {\n        dispatch(batchActions([\n            {\n                type: UserTypes.RECEIVED_PROFILE_NOT_IN_TEAM,\n                data: {id: channel.team_id, user_id: userId},\n            },\n            {\n                type: TeamTypes.REMOVE_MEMBER_FROM_TEAM,\n                data: {team_id: channel.team_id, user_id: userId},\n            },\n        ]));\n    }\n}\n\nexport async function handleUserUpdatedEvent(msg) {\n    const state = getState();\n    const currentUser = getCurrentUser(state);\n    const user = msg.data.user;\n\n    if (isGuest(user)) {\n        let members = getMembersInCurrentChannel(state);\n        const currentChannelId = getCurrentChannelId(state);\n        if (members && members[user.id]) {\n            dispatch(getChannelStats(currentChannelId));\n        } else {\n            await dispatch(getChannelMember(currentChannelId, user.id));\n            members = getMembersInCurrentChannel(getState());\n            if (members && members[user.id]) {\n                dispatch(getChannelStats(currentChannelId));\n            }\n        }\n    }\n\n    if (currentUser.id === user.id) {\n        if (user.update_at > currentUser.update_at) {\n            // Need to request me to make sure we don't override with sanitized fields from the\n            // websocket event\n            getMe()(dispatch, getState);\n        }\n    } else {\n        dispatch({\n            type: UserTypes.RECEIVED_PROFILE,\n            data: user,\n        });\n    }\n}\n\nfunction handleRoleAddedEvent(msg) {\n    const role = JSON.parse(msg.data.role);\n\n    dispatch({\n        type: RoleTypes.RECEIVED_ROLE,\n        data: role,\n    });\n}\n\nfunction handleRoleRemovedEvent(msg) {\n    const role = JSON.parse(msg.data.role);\n\n    dispatch({\n        type: RoleTypes.ROLE_DELETED,\n        data: role,\n    });\n}\n\nfunction handleRoleUpdatedEvent(msg) {\n    const role = JSON.parse(msg.data.role);\n\n    dispatch({\n        type: RoleTypes.RECEIVED_ROLE,\n        data: role,\n    });\n}\n\nfunction handleChannelCreatedEvent(msg) {\n    const channelId = msg.data.channel_id;\n    const teamId = msg.data.team_id;\n    const state = getState();\n\n    if (getCurrentTeamId(state) === teamId && !getChannel(state, channelId)) {\n        dispatch(getChannelAndMyMember(channelId));\n    }\n}\n\nfunction handleChannelDeletedEvent(msg) {\n    const state = getState();\n    const config = getConfig(state);\n    const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n    if (getCurrentChannelId(state) === msg.data.channel_id && !viewArchivedChannels) {\n        const teamUrl = getCurrentRelativeTeamUrl(state);\n        const currentTeamId = getCurrentTeamId(state);\n        const redirectChannel = getRedirectChannelNameForTeam(state, currentTeamId);\n        browserHistory.push(teamUrl + '/channels/' + redirectChannel);\n    }\n\n    dispatch({type: ChannelTypes.RECEIVED_CHANNEL_DELETED, data: {id: msg.data.channel_id, team_id: msg.broadcast.team_id, deleteAt: msg.data.delete_at, viewArchivedChannels}});\n}\n\nfunction handlePreferenceChangedEvent(msg) {\n    const preference = JSON.parse(msg.data.preference);\n    dispatch({type: PreferenceTypes.RECEIVED_PREFERENCES, data: [preference]});\n\n    if (addedNewDmUser(preference)) {\n        loadProfilesForSidebar();\n    }\n}\n\nfunction handlePreferencesChangedEvent(msg) {\n    const preferences = JSON.parse(msg.data.preferences);\n    dispatch({type: PreferenceTypes.RECEIVED_PREFERENCES, data: preferences});\n\n    if (preferences.findIndex(addedNewDmUser) !== -1) {\n        loadProfilesForSidebar();\n    }\n}\n\nfunction handlePreferencesDeletedEvent(msg) {\n    const preferences = JSON.parse(msg.data.preferences);\n    dispatch({type: PreferenceTypes.DELETED_PREFERENCES, data: preferences});\n}\n\nfunction addedNewDmUser(preference) {\n    return preference.category === Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW && preference.value === 'true';\n}\n\nexport function handleUserTypingEvent(msg) {\n    return (doDispatch, doGetState) => {\n        const state = doGetState();\n        const config = getConfig(state);\n        const currentUserId = getCurrentUserId(state);\n        const userId = msg.data.user_id;\n\n        const data = {\n            id: msg.broadcast.channel_id + msg.data.parent_id,\n            userId,\n            now: Date.now(),\n        };\n\n        doDispatch({\n            type: WebsocketEvents.TYPING,\n            data,\n        });\n\n        setTimeout(() => {\n            doDispatch({\n                type: WebsocketEvents.STOP_TYPING,\n                data,\n            });\n        }, parseInt(config.TimeBetweenUserTypingUpdatesMilliseconds, 10));\n\n        if (userId !== currentUserId) {\n            doDispatch(getMissingProfilesByIds([userId]));\n        }\n\n        const status = getStatusForUserId(state, userId);\n        if (status !== General.ONLINE) {\n            doDispatch(getStatusesByIds([userId]));\n        }\n    };\n}\n\nfunction handleStatusChangedEvent(msg) {\n    dispatch({\n        type: UserTypes.RECEIVED_STATUSES,\n        data: [{user_id: msg.data.user_id, status: msg.data.status}],\n    });\n}\n\nfunction handleHelloEvent(msg) {\n    setServerVersion(msg.data.server_version)(dispatch, getState);\n}\n\nfunction handleReactionAddedEvent(msg) {\n    const reaction = JSON.parse(msg.data.reaction);\n\n    dispatch(getCustomEmojiForReaction(reaction.emoji_name));\n\n    dispatch({\n        type: PostTypes.RECEIVED_REACTION,\n        data: reaction,\n    });\n}\n\nfunction handleAddEmoji(msg) {\n    const data = JSON.parse(msg.data.emoji);\n\n    dispatch({\n        type: EmojiTypes.RECEIVED_CUSTOM_EMOJI,\n        data,\n    });\n}\n\nfunction handleReactionRemovedEvent(msg) {\n    const reaction = JSON.parse(msg.data.reaction);\n\n    dispatch({\n        type: PostTypes.REACTION_DELETED,\n        data: reaction,\n    });\n}\n\nfunction handleChannelViewedEvent(msg) {\n    // Useful for when multiple devices have the app open to different channels\n    if ((!window.isActive || getCurrentChannelId(getState()) !== msg.data.channel_id) &&\n        getCurrentUserId(getState()) === msg.broadcast.user_id) {\n        dispatch(markChannelAsRead(msg.data.channel_id, '', false));\n    }\n}\n\nexport function handlePluginEnabled(msg) {\n    const manifest = msg.data.manifest;\n    loadPlugin(manifest).catch((error) => {\n        console.error(error.message); //eslint-disable-line no-console\n    });\n}\n\nexport function handlePluginDisabled(msg) {\n    const manifest = msg.data.manifest;\n    removePlugin(manifest);\n}\n\nfunction handleUserRoleUpdated(msg) {\n    const user = store.getState().entities.users.profiles[msg.data.user_id];\n\n    if (user) {\n        const roles = msg.data.roles;\n        const newRoles = roles.split(' ');\n        const demoted = user.roles.includes(Constants.PERMISSIONS_SYSTEM_ADMIN) && !roles.includes(Constants.PERMISSIONS_SYSTEM_ADMIN);\n\n        store.dispatch({type: UserTypes.RECEIVED_PROFILE, data: {...user, roles}});\n        dispatch(loadRolesIfNeeded(newRoles));\n\n        if (demoted && global.location.pathname.startsWith('/admin_console')) {\n            redirectUserToDefaultTeam();\n        }\n    }\n}\n\nfunction handleConfigChanged(msg) {\n    store.dispatch({type: GeneralTypes.CLIENT_CONFIG_RECEIVED, data: msg.data.config});\n}\n\nfunction handleLicenseChanged(msg) {\n    store.dispatch({type: GeneralTypes.CLIENT_LICENSE_RECEIVED, data: msg.data.license});\n}\n\nfunction handlePluginStatusesChangedEvent(msg) {\n    store.dispatch({type: AdminTypes.RECEIVED_PLUGIN_STATUSES, data: msg.data.plugin_statuses});\n}\n\nfunction handleOpenDialogEvent(msg) {\n    const data = (msg.data && msg.data.dialog) || {};\n    const dialog = JSON.parse(data);\n\n    store.dispatch({type: IntegrationTypes.RECEIVED_DIALOG, data: dialog});\n\n    const currentTriggerId = getState().entities.integrations.dialogTriggerId;\n\n    if (dialog.trigger_id !== currentTriggerId) {\n        return;\n    }\n\n    store.dispatch(openModal({modalId: ModalIdentifiers.INTERACTIVE_DIALOG, dialogType: InteractiveDialog}));\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as Selectors from 'selectors/storage';\nimport * as Actions from 'actions/storage';\nimport store from 'stores/redux_store.jsx';\nimport {ErrorPageTypes, StoragePrefixes, LandingPreferenceTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nclass BrowserStoreClass {\n    setItem(name, value) {\n        dispatch(Actions.setItem(name, value));\n    }\n\n    getItem(name, defaultValue) {\n        return Selectors.makeGetItem(name, defaultValue)(getState());\n    }\n\n    removeItem(name) {\n        dispatch(Actions.removeItem(name));\n    }\n\n    setGlobalItem(name, value) {\n        dispatch(Actions.setGlobalItem(name, value));\n    }\n\n    getGlobalItem(name, defaultValue = null) {\n        return Selectors.makeGetGlobalItem(name, defaultValue)(getState());\n    }\n\n    removeGlobalItem(name) {\n        dispatch(Actions.removeGlobalItem(name));\n    }\n\n    signalLogout() {\n        if (this.isLocalStorageSupported()) {\n            // PLT-1285 store an identifier in session storage so we can catch if the logout came from this tab on IE11\n            const logoutId = Utils.generateId();\n\n            Utils.removePrefixFromLocalStorage(StoragePrefixes.ANNOUNCEMENT);\n\n            sessionStorage.setItem(StoragePrefixes.LOGOUT, logoutId);\n            localStorage.setItem(StoragePrefixes.LOGOUT, logoutId);\n            localStorage.removeItem(StoragePrefixes.LOGOUT);\n        }\n    }\n\n    isSignallingLogout(logoutId) {\n        return logoutId === sessionStorage.getItem(StoragePrefixes.LOGOUT);\n    }\n\n    signalLogin() {\n        if (this.isLocalStorageSupported()) {\n            // PLT-1285 store an identifier in session storage so we can catch if the logout came from this tab on IE11\n            const loginId = Utils.generateId();\n\n            sessionStorage.setItem(StoragePrefixes.LOGIN, loginId);\n            localStorage.setItem(StoragePrefixes.LOGIN, loginId);\n            localStorage.removeItem(StoragePrefixes.LOGIN);\n        }\n    }\n\n    isSignallingLogin(loginId) {\n        return loginId === sessionStorage.getItem(StoragePrefixes.LOGIN);\n    }\n\n    clear(options) {\n        dispatch(Actions.clear(options));\n    }\n\n    isLocalStorageSupported() {\n        if (this.hasCheckedLocalStorage) {\n            return this.localStorageSupported;\n        }\n\n        this.localStorageSupported = false;\n\n        try {\n            localStorage.setItem('__testLocal__', '1');\n            if (localStorage.getItem('__testLocal__') === '1') {\n                this.localStorageSupported = true;\n            }\n            localStorage.removeItem('__testLocal__', '1');\n        } catch (e) {\n            this.localStorageSupported = false;\n        }\n\n        try {\n            sessionStorage.setItem('__testSession__', '1');\n            sessionStorage.removeItem('__testSession__');\n        } catch (e) {\n            // Session storage not usable, website is unusable\n            browserHistory.push('/error?type=' + ErrorPageTypes.LOCAL_STORAGE);\n        }\n\n        this.hasCheckedLocalStorage = true;\n\n        return this.localStorageSupported;\n    }\n\n    hasSeenLandingPage() {\n        return localStorage.getItem(StoragePrefixes.LANDING_PAGE_SEEN);\n    }\n\n    setLandingPageSeen(landingPageSeen) {\n        localStorage.setItem(StoragePrefixes.LANDING_PAGE_SEEN, landingPageSeen);\n    }\n\n    getLandingPreference(siteUrl) {\n        return localStorage.getItem(StoragePrefixes.LANDING_PREFERENCE + String(siteUrl));\n    }\n\n    setLandingPreferenceToMattermostApp(siteUrl) {\n        localStorage.setItem(StoragePrefixes.LANDING_PREFERENCE + String(siteUrl), LandingPreferenceTypes.MATTERMOSTAPP);\n    }\n\n    setLandingPreferenceToBrowser(siteUrl) {\n        localStorage.setItem(StoragePrefixes.LANDING_PREFERENCE + String(siteUrl), LandingPreferenceTypes.BROWSER);\n    }\n\n    clearLandingPreference(siteUrl) {\n        localStorage.removeItem(StoragePrefixes.LANDING_PREFERENCE + String(siteUrl));\n    }\n}\n\nvar BrowserStore = new BrowserStoreClass();\nexport default BrowserStore;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport './menu_item.scss';\n\nexport default function menuItem(Component: React.ComponentType<any>) {\n    type Props = {\n        show: boolean;\n        id?: string;\n        icon?: React.ReactNode;\n        text?: string;\n    }\n    class MenuItem extends React.PureComponent<Props|React.ComponentProps<typeof Component>> {\n        public static defaultProps = {\n            show: true,\n        };\n\n        public static displayName?: string;\n\n        public render() {\n            const {id, show, icon, text, ...props} = this.props;\n            if (!show) {\n                return null;\n            }\n\n            let textProp: React.ReactNode = text;\n            if (icon) {\n                textProp = (\n                    <React.Fragment>\n                        <span className='icon'>{icon}</span>\n                        {text}\n                    </React.Fragment>\n                );\n            }\n\n            return (\n                <li\n                    className='MenuItem'\n                    role='menuitem'\n                    id={id}\n                >\n                    <Component\n                        text={textProp}\n                        {...props}\n                    />\n                </li>\n            );\n        }\n    }\n    return MenuItem;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport LoadingImagePreview from 'components/loading_image_preview';\n\nconst MIN_IMAGE_SIZE = 48;\n\n// SizeAwareImage is a component used for rendering images where the dimensions of the image are important for\n// ensuring that the page is laid out correctly.\nexport default class SizeAwareImage extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The source URL of the image\n         */\n        src: PropTypes.string.isRequired,\n\n        /*\n         * dimensions object to create empty space required to prevent scroll pop\n         */\n        dimensions: PropTypes.object,\n        fileInfo: PropTypes.object,\n\n        /*\n         * Boolean value to pass for showing a loader when image is being loaded\n         */\n        showLoader: PropTypes.bool,\n\n        /*\n         * A callback that is called as soon as the image component has a height value\n         */\n        onImageLoaded: PropTypes.func,\n\n        /*\n         * A callback that is called when image load fails\n         */\n        onImageLoadFail: PropTypes.func,\n\n        /*\n         * Fetch the onClick function\n         */\n        onClick: PropTypes.func,\n\n        /*\n         * css classes that can added to the img as well as parent div on svg for placeholder\n         */\n        className: PropTypes.string,\n\n        /*\n         * Enables the logic of surrounding small images with a bigger container div for better click/tap targeting\n         */\n        handleSmallImageContainer: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        const {dimensions} = props;\n\n        this.state = {\n            loaded: false,\n            isSmallImage: this.dimensionsAvailable(dimensions) ? this.isSmallImage(\n                dimensions.width, dimensions.height) : false,\n        };\n\n        this.heightTimeout = 0;\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    dimensionsAvailable = (dimensions) => {\n        return dimensions && dimensions.width && dimensions.height;\n    }\n\n    isSmallImage = (width, height) => {\n        return width < MIN_IMAGE_SIZE || height < MIN_IMAGE_SIZE;\n    }\n\n    handleLoad = (event) => {\n        if (this.mounted) {\n            const image = event.target;\n            const isSmallImage = this.isSmallImage(image.naturalWidth, image.naturalHeight);\n            this.setState({\n                loaded: true,\n                error: false,\n                isSmallImage,\n                imageWidth: image.naturalWidth,\n            }, () => { // Call onImageLoaded prop only after state has already been set\n                if (this.props.onImageLoaded && image.naturalHeight) {\n                    this.props.onImageLoaded({height: image.naturalHeight, width: image.naturalWidth});\n                }\n            });\n        }\n    };\n\n    handleError = () => {\n        if (this.mounted) {\n            if (this.props.onImageLoadFail) {\n                this.props.onImageLoadFail();\n            }\n            this.setState({error: true});\n        }\n    };\n\n    onEnterKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.props.onClick(e);\n        }\n    }\n\n    renderImageLoaderIfNeeded = () => {\n        if (!this.state.loaded && this.props.showLoader && !this.state.error) {\n            return (\n                <div style={{position: 'absolute', top: '50%', transform: 'translate(-50%, -50%)', left: '50%'}}>\n                    <LoadingImagePreview\n                        containerClass={'file__image-loading'}\n                    />\n                </div>\n            );\n        }\n        return null;\n    }\n\n    renderImageWithContainerIfNeeded = () => {\n        const {\n            fileInfo,\n            src,\n            ...props\n        } = this.props;\n\n        Reflect.deleteProperty(props, 'showLoader');\n        Reflect.deleteProperty(props, 'onImageLoaded');\n        Reflect.deleteProperty(props, 'onImageLoadFail');\n        Reflect.deleteProperty(props, 'dimensions');\n        Reflect.deleteProperty(props, 'handleSmallImageContainer');\n\n        let ariaLabelImage = localizeMessage('file_attachment.thumbnail', 'file thumbnail');\n        if (fileInfo) {\n            ariaLabelImage += ` ${fileInfo.name}`.toLowerCase();\n        }\n\n        const image = (\n            <img\n                {...props}\n                aria-label={ariaLabelImage}\n                tabIndex='0'\n                onKeyDown={this.onEnterKeyDown}\n                className={\n                    this.props.className +\n                    (this.props.handleSmallImageContainer &&\n                        this.state.isSmallImage ? ' small-image--inside-container' : '')}\n                src={src}\n                onError={this.handleError}\n                onLoad={this.handleLoad}\n            />\n        );\n\n        if (this.props.handleSmallImageContainer && this.state.isSmallImage) {\n            let className = 'small-image__container cursor--pointer a11y--active';\n            if (this.state.imageWidth < MIN_IMAGE_SIZE) {\n                className += ' small-image__container--min-width';\n            }\n\n            return (\n                <div\n                    onClick={this.props.onClick}\n                    className={className}\n                    style={this.state.imageWidth > MIN_IMAGE_SIZE ? {\n                        width: this.state.imageWidth + 2, // 2px to account for the border\n                    } : {}}\n                >\n                    {image}\n                </div>\n            );\n        }\n\n        return image;\n    }\n\n    renderImageOrPlaceholder = () => {\n        const {\n            dimensions,\n        } = this.props;\n\n        let placeHolder;\n\n        if (this.dimensionsAvailable(dimensions) && !this.state.loaded) {\n            placeHolder = (\n                <div\n                    className={`image-loading__container ${this.props.className}`}\n                    style={{maxWidth: dimensions.width}}\n                >\n                    {this.renderImageLoaderIfNeeded()}\n                    <svg\n                        xmlns='http://www.w3.org/2000/svg'\n                        viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}\n                        style={{maxHeight: dimensions.height, maxWidth: dimensions.width, verticalAlign: 'middle'}}\n                    />\n                </div>\n            );\n        }\n\n        const shouldShowImg = !this.dimensionsAvailable(dimensions) || this.state.loaded;\n\n        return (\n            <React.Fragment>\n                {placeHolder}\n                <div\n                    className='file-preview__button'\n                    style={{display: shouldShowImg ? 'initial' : 'none'}}\n                >\n                    {this.renderImageWithContainerIfNeeded()}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        return (\n            this.renderImageOrPlaceholder()\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SuccessIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.success'\n                defaultMessage='Success Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-check'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusAwayAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.away.icon'\n                    defaultMessage='Away Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-user-clock away--icon'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n                {/* <FormattedMessage\n                    id='mobile.set_status.away.icon'\n                    defaultMessage='Away Icon'\n                >\n                    {(ariaLabel) => (\n\n                        <svg\n                            width='13px'\n                            height='13px'\n                            viewBox='0 0 12 12'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='away--icon'\n                                d='M9.081,5.712C9.267,5.712 9.417,5.863 9.417,6.048L9.417,9.086L11.864,10.499C12.025,10.592 12.08,10.797 11.987,10.958L11.482,11.832C11.39,11.993 11.184,12.048 11.023,11.955L7.904,10.154C7.788,10.087 7.727,9.961 7.737,9.836C7.736,9.827 7.736,9.818 7.736,9.809L7.736,6.048C7.736,5.863 7.886,5.712 8.072,5.712L9.081,5.712ZM4.812,11.513L4.605,11.513C2.325,11.41 0.253,10.374 0.046,9.027C-0.058,8.923 0.046,8.509 0.046,8.405C0.15,7.576 0.357,6.437 0.771,5.815C0.978,5.401 2.015,5.297 2.015,5.297C2.015,5.297 2.015,7.369 4.605,7.369L5.019,7.369C4.915,7.784 4.812,8.198 4.812,8.612C4.812,9.648 5.226,10.581 5.848,11.41C5.537,11.513 5.123,11.513 4.812,11.513ZM4.605,0.117C6.034,0.117 7.195,1.277 7.195,2.707C7.195,4.136 6.034,5.297 4.605,5.297C3.175,5.297 2.015,4.136 2.015,2.707C2.015,1.277 3.175,0.117 4.605,0.117Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage> */}\n            </span>\n        );\n    }\n}\n\n// const style = {\n//     fillRule: 'evenodd',\n//     clipRule: 'evenodd',\n//     strokeLinejoin: 'round',\n//     strokeMiterlimit: 1.41421,\n// };\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusAwayIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.away.icon'\n                    defaultMessage='Away Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='away--icon'\n                                d='M10,0C15.519,0 20,4.481 20,10C20,15.519 15.519,20 10,20C4.481,20 0,15.519 0,10C0,4.481 4.481,0 10,0ZM10.27,3C10.949,3 11.5,3.586 11.5,4.307L11.5,9.379L15.002,12.881C15.492,13.37 15.499,14.158 15.019,14.638L14.638,15.019C14.158,15.499 13.37,15.492 12.881,15.002L8.887,11.008C8.739,10.861 8.636,10.686 8.576,10.501C8.528,10.402 8.5,10.299 8.5,10.193L8.5,4.307C8.5,3.586 9.051,3 9.73,3L10.27,3Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusDndAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.dnd.icon'\n                    defaultMessage='Do Not Disturb Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-user-minus dnd--icon'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n                {/* <FormattedMessage\n                    id='mobile.set_status.dnd.icon'\n                    defaultMessage='Do Not Disturb Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            x='0px'\n                            y='0px'\n                            width='13px'\n                            height='13px'\n                            viewBox='-299 391 12 12'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g>\n                                <ellipse\n                                    className='dnd--icon'\n                                    cx='-294.6'\n                                    cy='394'\n                                    rx='2.5'\n                                    ry='2.5'\n                                />\n                                <path\n                                    className='dnd--icon'\n                                    d='M-293.8,399.4c0-0.4,0.1-0.7,0.2-1c-0.3,0.1-0.6,0.2-1,0.2c-2.5,0-2.5-2-2.5-2s-1,0.1-1.2,0.5c-0.4,0.6-0.6,1.7-0.7,2.5 c0,0.1-0.1,0.5,0,0.6c0.2,1.3,2.2,2.3,4.4,2.4c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0c0.7,0,1.4-0.1,2-0.3 C-293.3,401.5-293.8,400.5-293.8,399.4z'\n                                />\n                            </g>\n                            <path\n                                className='dnd--icon'\n                                d='M-287,400c0,0.1-0.1,0.1-0.1,0.1l-4.9,0c-0.1,0-0.1-0.1-0.1-0.1v-1.6c0-0.1,0.1-0.1,0.1-0.1l4.9,0c0.1,0,0.1,0.1,0.1,0.1 V400z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage> */}\n            </span>\n        );\n    }\n}\n\n// const style = {\n//     enableBackground: 'new -299 391 12 12',\n// };\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusDndIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.dnd.icon'\n                    defaultMessage='Do Not Disturb Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='dnd--icon'\n                                d='M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm5.25,8.5l-10.5,0c-0.414,0 -0.75,0.336 -0.75,0.75l0,1.5c0,0.414 0.336,0.75 0.75,0.75l10.5,0c0.414,0 0.75,-0.336 0.75,-0.75l0,-1.5c0,-0.414 -0.336,-0.75 -0.75,-0.75Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusDndAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                {/* <i className='fas fa-user-times offline--icon'/> */}\n                <FormattedMessage\n                    id='mobile.set_status.offline.icon'\n                    defaultMessage='Offline Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-user-times offline--icon'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n                {/* <FormattedMessage\n                    id='mobile.set_status.offline.icon'\n                    defaultMessage='Offline Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            x='0px'\n                            y='0px'\n                            width='13px'\n                            height='13px'\n                            viewBox='-299 391 12 12'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g>\n                                <g>\n                                    <ellipse\n                                        className='offline--icon'\n                                        cx='-294.5'\n                                        cy='394'\n                                        rx='2.5'\n                                        ry='2.5'\n                                    />\n                                    <path\n                                        className='offline--icon'\n                                        d='M-294.3,399.7c0-0.4,0.1-0.8,0.2-1.2c-0.1,0-0.2,0-0.4,0c-2.5,0-2.5-2-2.5-2s-1,0.1-1.2,0.5c-0.4,0.6-0.6,1.7-0.7,2.5 c0,0.1-0.1,0.5,0,0.6c0.2,1.3,2.2,2.3,4.4,2.4h0.1h0.1c0.3,0,0.7,0,1-0.1C-293.9,401.6-294.3,400.7-294.3,399.7z'\n                                    />\n                                </g>\n                            </g>\n                            <g>\n                                <path\n                                    className='offline--icon'\n                                    d='M-288.9,399.4l1.8-1.8c0.1-0.1,0.1-0.3,0-0.3l-0.7-0.7c-0.1-0.1-0.3-0.1-0.3,0l-1.8,1.8l-1.8-1.8c-0.1-0.1-0.3-0.1-0.3,0 l-0.7,0.7c-0.1,0.1-0.1,0.3,0,0.3l1.8,1.8l-1.8,1.8c-0.1,0.1-0.1,0.3,0,0.3l0.7,0.7c0.1,0.1,0.3,0.1,0.3,0l1.8-1.8l1.8,1.8 c0.1,0.1,0.3,0.1,0.3,0l0.7-0.7c0.1-0.1,0.1-0.3,0-0.3L-288.9,399.4z'\n                                />\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage> */}\n            </span>\n        );\n    }\n}\n\n// const style = {\n//     enableBackground: 'new -299 391 12 12',\n// };\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusOfflineIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.offline.icon'\n                    defaultMessage='Offline Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            className='offline--icon'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm0,2c4.415,0 8,3.585 8,8c0,4.415 -3.585,8 -8,8c-4.415,0 -8,-3.585 -8,-8c0,-4.415 3.585,-8 8,-8Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusOnlineAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.online.icon'\n                    defaultMessage='Online Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-user-check online--icon'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n                {/* <FormattedMessage\n                    id='mobile.set_status.online.icon'\n                    defaultMessage='Online Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            x='0px'\n                            y='0px'\n                            width='13px'\n                            height='13px'\n                            viewBox='-243 245 12 12'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g>\n                                <path\n                                    className='online--icon'\n                                    d='M-236,250.5C-236,250.5-236,250.5-236,250.5C-236,250.5-236,250.5-236,250.5C-236,250.5-236,250.5-236,250.5z'\n                                />\n                                <ellipse\n                                    className='online--icon'\n                                    cx='-238.5'\n                                    cy='248'\n                                    rx='2.5'\n                                    ry='2.5'\n                                />\n                            </g>\n                            <path\n                                className='online--icon'\n                                d='M-238.9,253.8c0-0.4,0.1-0.9,0.2-1.3c-2.2-0.2-2.2-2-2.2-2s-1,0.1-1.2,0.5c-0.4,0.6-0.6,1.7-0.7,2.5c0,0.1-0.1,0.5,0,0.6 c0.2,1.3,2.2,2.3,4.4,2.4c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0C-238.7,255.7-238.9,254.8-238.9,253.8z'\n                            />\n                            <g>\n                                <g>\n                                    <path\n                                        className='online--icon'\n                                        d='M-232.3,250.1l1.3,1.3c0,0,0,0.1,0,0.1l-4.1,4.1c0,0,0,0-0.1,0c0,0,0,0,0,0l-2.7-2.7c0,0,0-0.1,0-0.1l1.2-1.2 c0,0,0.1,0,0.1,0l1.4,1.4l2.9-2.9C-232.4,250.1-232.3,250.1-232.3,250.1z'\n                                    />\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage> */}\n            </span>\n        );\n    }\n}\n\n// const style = {\n//     enableBackground: 'new -243 245 12 12',\n// };\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusOnlineIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.online.icon'\n                    defaultMessage='Online Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='online--icon'\n                                d='M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm6.19,7.18c0,0.208 -0.075,0.384 -0.224,0.53l-5.782,5.64l-1.087,1.059c-0.149,0.146 -0.33,0.218 -0.543,0.218c-0.213,0 -0.394,-0.072 -0.543,-0.218l-1.086,-1.059l-2.891,-2.82c-0.149,-0.146 -0.224,-0.322 -0.224,-0.53c0,-0.208 0.075,-0.384 0.224,-0.53l1.086,-1.059c0.149,-0.146 0.33,-0.218 0.543,-0.218c0.213,0 0.394,0.072 0.543,0.218l2.348,2.298l5.24,-5.118c0.149,-0.146 0.33,-0.218 0.543,-0.218c0.213,0 0.394,0.072 0.543,0.218l1.086,1.059c0.149,0.146 0.224,0.322 0.224,0.53Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport StatusAwayAvatarIcon from 'components/widgets/icons/status_away_avatar_icon';\nimport StatusAwayIcon from 'components/widgets/icons/status_away_icon';\nimport StatusDndAvatarIcon from 'components/widgets/icons/status_dnd_avatar_icon';\nimport StatusDndIcon from 'components/widgets/icons/status_dnd_icon';\nimport StatusOfflineAvatarIcon from 'components/widgets/icons/status_offline_avatar_icon';\nimport StatusOfflineIcon from 'components/widgets/icons/status_offline_icon';\nimport StatusOnlineAvatarIcon from 'components/widgets/icons/status_online_avatar_icon';\nimport StatusOnlineIcon from 'components/widgets/icons/status_online_icon';\n\nexport default class StatusIcon extends React.PureComponent {\n    static propTypes = {\n        button: PropTypes.bool,\n        status: PropTypes.string,\n        className: PropTypes.string,\n        type: PropTypes.string,\n    };\n\n    static defaultProps = {\n        className: '',\n        button: false,\n    };\n\n    render() {\n        const {button, status, type} = this.props;\n\n        if (!status) {\n            return null;\n        }\n\n        let className = 'status ' + this.props.className;\n\n        if (button) {\n            className = this.props.className;\n        }\n\n        let IconComponent = 'span';\n        if (type === 'avatar') {\n            if (status === 'online') {\n                IconComponent = StatusOnlineAvatarIcon;\n            } else if (status === 'away') {\n                IconComponent = StatusAwayAvatarIcon;\n            } else if (status === 'dnd') {\n                IconComponent = StatusDndAvatarIcon;\n            } else {\n                IconComponent = StatusOfflineAvatarIcon;\n            }\n        } else if (status === 'online') {\n            IconComponent = StatusOnlineIcon;\n        } else if (status === 'away') {\n            IconComponent = StatusAwayIcon;\n        } else if (status === 'dnd') {\n            IconComponent = StatusDndIcon;\n        } else {\n            IconComponent = StatusOfflineIcon;\n        }\n\n        return <IconComponent className={className}/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getImageSrc} from 'utils/post_utils.jsx';\n\nexport default class ExternalImage extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.func.isRequired,\n        enableSVGs: PropTypes.bool.isRequired,\n        hasImageProxy: PropTypes.bool.isRequired,\n        imageMetadata: PropTypes.object,\n        src: PropTypes.string.isRequired,\n    };\n\n    isSVGImage = () => {\n        if (!this.props.imageMetadata) {\n            // Just check if the string contains an svg extension instead of if it ends with one because it avoids\n            // having to deal with query strings and proxied image URLs\n            return this.props.src.indexOf('.svg') !== -1;\n        }\n\n        return this.props.imageMetadata.format === 'svg';\n    }\n\n    shouldRenderImage = () => {\n        // Return true unless the image is an SVG and we have SVG rendering disabled\n        return this.props.enableSVGs || !this.isSVGImage();\n    }\n\n    render() {\n        let src = getImageSrc(this.props.src, this.props.hasImageProxy);\n\n        if (!this.shouldRenderImage()) {\n            src = '';\n        }\n\n        return this.props.children(src);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport ExternalImage from './external_image';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        enableSVGs: config.EnableSVGs === 'true',\n        hasImageProxy: config.HasImageProxy === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(ExternalImage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getClientConfig, getLicenseConfig} from 'mattermost-redux/actions/general';\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {ActionTypes} from 'utils/constants';\nimport en from 'i18n/en.json';\nimport {getCurrentLocale, getTranslations} from 'selectors/i18n';\n\nexport function loadMeAndConfig() {\n    return async (dispatch) => {\n        // if any new promise needs to be added please be mindful of the order as it is used in root.jsx for redirection\n        const promises = [\n            dispatch(getClientConfig()),\n            // dispatch(getLicenseConfig()),\n        ];\n\n        // need to await for clientConfig first as it is required for loadMe\n        const resolvedPromises = await Promise.all(promises);\n        //if (document.cookie.indexOf('MMUSERID=') > -1) {\n            resolvedPromises.push(await dispatch(UserActions.loadMe()));\n        //}\n\n        return resolvedPromises;\n    };\n}\n\nconst pluginTranslationSources = {};\n\nexport function registerPluginTranslationsSource(pluginId, sourceFunction) {\n    pluginTranslationSources[pluginId] = sourceFunction;\n    return (dispatch, getState) => {\n        const state = getState();\n        const locale = getCurrentLocale(state);\n        const immutableTranslations = getTranslations(state, locale);\n        const translations = {};\n        Object.assign(translations, immutableTranslations);\n        if (immutableTranslations) {\n            Object.assign(translations, sourceFunction(locale));\n            dispatch({\n                type: ActionTypes.RECEIVED_TRANSLATIONS,\n                data: {\n                    locale,\n                    translations,\n                },\n            });\n        }\n    };\n}\n\nexport function unregisterPluginTranslationsSource(pluginId) {\n    Reflect.deleteProperty(pluginTranslationSources, pluginId);\n}\n\nexport function loadTranslations(locale, url) {\n    return async (dispatch) => {\n        const translations = {...en};\n        Object.values(pluginTranslationSources).forEach((pluginFunc) => {\n            Object.assign(translations, pluginFunc(locale));\n        });\n\n        // Need to go to the server for languages other than English\n        if (locale !== 'en') {\n            try {\n                const serverTranslations = await Client4.getTranslations(url);\n                Object.assign(translations, serverTranslations);\n            } catch (error) {\n                console.error(error); //eslint-disable-line no-console\n            }\n        }\n        dispatch({\n            type: ActionTypes.RECEIVED_TRANSLATIONS,\n            data: {\n                locale,\n                translations,\n            },\n        });\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport './badge.scss';\n\ntype Props = {\n    show: boolean;\n    children: React.ReactNode;\n    className: string;\n};\n\nexport default class Badge extends React.Component<Props> {\n    public static defaultProps = {\n        show: true,\n        className: '',\n    };\n\n    public render() {\n        if (!this.props.show) {\n            return null;\n        }\n        return (\n            <div className='Badge'>\n                <div className={'Badge__box ' + this.props.className}>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n// A component that can be used to make controlled inputs that function properly in certain\n// environments (ie. IE11) where typing quickly would sometimes miss inputs\nexport default class QuickInput extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Whether to delay updating the value of the textbox from props. Should only be used\n         * on textboxes that to properly compose CJK characters as the user types.\n         */\n        delayInputUpdate: PropTypes.bool,\n\n        /**\n         * An optional React component that will be used instead of an HTML input when rendering\n         */\n        inputComponent: PropTypes.elementType,\n\n        /**\n         * The string value displayed in this input\n         */\n        value: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        delayInputUpdate: false,\n        value: '',\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.value !== this.props.value) {\n            if (this.props.delayInputUpdate) {\n                requestAnimationFrame(this.updateInputFromProps);\n            } else {\n                this.updateInputFromProps();\n            }\n        }\n    }\n\n    updateInputFromProps = () => {\n        if (!this.input || this.input.value === this.props.value) {\n            return;\n        }\n\n        this.input.value = this.props.value;\n    }\n\n    get value() {\n        return this.input.value;\n    }\n\n    set value(value) {\n        this.input.value = value;\n    }\n\n    focus() {\n        this.input.focus();\n    }\n\n    blur() {\n        this.input.blur();\n    }\n\n    getInput = () => {\n        return this.input;\n    };\n\n    setInput = (input) => {\n        this.input = input;\n    }\n\n    render() {\n        const {value, inputComponent, ...props} = this.props;\n\n        Reflect.deleteProperty(props, 'delayInputUpdate');\n\n        return React.createElement(\n            inputComponent || 'input',\n            {\n                ...props,\n                ref: this.setInput,\n                defaultValue: value, // Only set the defaultValue since the real one will be updated using componentDidUpdate\n            }\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class BackIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.back'\n                defaultMessage='Back Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-angle-left'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/73209f482a967f9379602dc6253cf768.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// Use when sorting multiple teams by their `display_name` field\nfunction compareTeamsByDisplayName(locale, a, b) {\n    if (a.display_name !== b.display_name) {\n        return a.display_name.localeCompare(b.display_name, locale, {numeric: true});\n    }\n\n    return a.name.localeCompare(b.name, locale, {numeric: true});\n}\n\n// Use to filter out teams that are deleted and without display_name, then sort by their `display_name` field\nexport function filterAndSortTeamsByDisplayName(teams, locale) {\n    if (!teams) {\n        return [];\n    }\n\n    return teams.filter((team) => {\n        return team && !team.delete_at > 0 && team.display_name != null;\n    }).sort((a, b) => {\n        return compareTeamsByDisplayName(locale, a, b);\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class ModalToggleButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    show = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState({show: true});\n    }\n\n    hide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        const {children, dialogType, dialogProps, onClick, ...props} = this.props;\n\n        // allow callers to provide an onClick which will be called before the modal is shown\n        let clickHandler = this.show;\n        if (onClick) {\n            clickHandler = (e) => {\n                onClick();\n\n                this.show(e);\n            };\n        }\n\n        let dialog;\n        if (this.state.show) {\n            // this assumes that all modals will have an onHide event and will show when mounted\n            dialog = React.createElement(dialogType, Object.assign({}, dialogProps, {\n                onHide: () => {\n                    this.hide();\n\n                    if (dialogProps.onHide) {\n                        dialogProps.onHide();\n                    }\n                },\n            }));\n        }\n\n        // nesting the dialog in the anchor tag looks like it shouldn't work, but it does due to how react-bootstrap\n        // renders modals at the top level of the DOM instead of where you specify in the virtual DOM\n        return (\n            <button\n                {...props}\n                className={'style--none ' + props.className}\n                onClick={clickHandler}\n                data-testid='add-group'\n            >\n                {children}\n                {dialog}\n            </button>\n        );\n    }\n}\n\nModalToggleButton.propTypes = {\n    children: PropTypes.node.isRequired,\n    dialogType: PropTypes.func.isRequired,\n    dialogProps: PropTypes.object,\n    onClick: PropTypes.func,\n    className: PropTypes.string,\n};\n\nModalToggleButton.defaultProps = {\n    dialogProps: {},\n    className: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FileInfoPreview from 'components/file_info_preview';\n\nexport default class AudioVideoPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            canPlay: true,\n        };\n    }\n\n    componentDidMount() {\n        this.handleFileInfoChanged(this.props.fileInfo);\n\n        if (this.refs.source) {\n            $(ReactDOM.findDOMNode(this.refs.source)).one('error', this.handleLoadError);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.handleFileInfoChanged(this.props.fileInfo);\n        }\n\n        if (this.refs.source) {\n            $(ReactDOM.findDOMNode(this.refs.source)).one('error', this.handleLoadError);\n        }\n    }\n\n    handleFileInfoChanged = (fileInfo) => {\n        let video = ReactDOM.findDOMNode(this.refs.video);\n        if (!video) {\n            video = document.createElement('video');\n        }\n\n        const canPlayType = video.canPlayType(fileInfo.mime_type);\n\n        this.setState({\n            canPlay: canPlayType === 'probably' || canPlayType === 'maybe',\n        });\n    }\n\n    handleLoadError = () => {\n        this.setState({\n            canPlay: false,\n        });\n    }\n\n    stop = () => {\n        if (this.refs.video) {\n            const video = ReactDOM.findDOMNode(this.refs.video);\n            video.pause();\n            video.currentTime = 0;\n        }\n    }\n\n    render() {\n        if (!this.state.canPlay) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        let width = Constants.WEB_VIDEO_WIDTH;\n        let height = Constants.WEB_VIDEO_HEIGHT;\n        if (Utils.isMobile()) {\n            width = Constants.MOBILE_VIDEO_WIDTH;\n            height = Constants.MOBILE_VIDEO_HEIGHT;\n        }\n\n        // add a key to the video to prevent React from using an old video source while a new one is loading\n        return (\n            <video\n                key={this.props.fileInfo.id}\n                ref='video'\n                data-setup='{}'\n                controls='controls'\n                width={width}\n                height={height}\n            >\n                <source\n                    ref='source'\n                    src={this.props.fileUrl}\n                />\n            </video>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as SyntaxHighlighting from 'utils/syntax_highlighting';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport FileInfoPreview from 'components/file_info_preview';\n\nexport default class CodePreview extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            code: '',\n            lang: '',\n            loading: true,\n            success: true,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.updateStateFromProps(nextProps);\n        }\n    }\n\n    updateStateFromProps = (props) => {\n        const usedLanguage = SyntaxHighlighting.getLanguageFromFileExtension(props.fileInfo.extension);\n\n        if (!usedLanguage || props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n            this.setState({code: '', lang: '', loading: false, success: false});\n            return;\n        }\n\n        this.setState({code: '', lang: usedLanguage, loading: true});\n\n        $.ajax({\n            async: true,\n            url: props.fileUrl,\n            type: 'GET',\n            dataType: 'text',\n            error: this.handleReceivedError,\n            success: this.handleReceivedCode,\n        });\n    }\n\n    handleReceivedCode = (data) => {\n        let code = data;\n        if (data.nodeName === '#document') {\n            code = new XMLSerializer().serializeToString(data);\n        }\n        this.setState({\n            code,\n            loading: false,\n            success: true,\n        });\n    }\n\n    handleReceivedError = () => {\n        this.setState({loading: false, success: false});\n    }\n\n    static supports(fileInfo) {\n        return Boolean(SyntaxHighlighting.getLanguageFromFileExtension(fileInfo.extension));\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        // add line numbers when viewing a code file preview\n        const lines = this.state.code.match(/\\r\\n|\\r|\\n|$/g).length;\n        let strlines = '';\n        for (let i = 1; i <= lines; i++) {\n            if (strlines) {\n                strlines += '\\n' + i;\n            } else {\n                strlines += i;\n            }\n        }\n\n        const language = SyntaxHighlighting.getLanguageName(this.state.lang);\n\n        const highlighted = SyntaxHighlighting.highlight(this.state.lang, this.state.code);\n\n        return (\n            <div className='post-code'>\n                <span className='post-code__language'>\n                    {`${this.props.fileInfo.name} - ${language}`}\n                </span>\n                <div className='post-code__container'>\n                    <code className='hljs'>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td className='post-code__lineno'>{strlines}</td>\n                                    <td dangerouslySetInnerHTML={{__html: highlighted}}/>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </code>\n                </div>\n            </div>\n        );\n    }\n}\n\nCodePreview.propTypes = {\n    fileInfo: PropTypes.object.isRequired,\n    fileUrl: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getFilePreviewUrl, getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nexport default function ImagePreview({fileInfo, canDownloadFiles}) {\n    const isExternalFile = !fileInfo.id;\n\n    let fileUrl;\n    let previewUrl;\n    if (isExternalFile) {\n        fileUrl = fileInfo.link;\n        previewUrl = fileInfo.link;\n    } else {\n        fileUrl = getFileDownloadUrl(fileInfo.id);\n        previewUrl = fileInfo.has_preview_image ? getFilePreviewUrl(fileInfo.id) : fileUrl;\n    }\n\n    if (!canDownloadFiles) {\n        return <img src={previewUrl}/>;\n    }\n\n    return (\n        <a\n            href={fileUrl}\n            target='_blank'\n            rel='noopener noreferrer'\n            download={!isExternalFile}\n        >\n            <img\n                data-testid='imagePreview'\n                alt={'preview url image'}\n                src={previewUrl}\n            />\n        </a>\n    );\n}\n\nImagePreview.propTypes = {\n    fileInfo: PropTypes.object.isRequired,\n    canDownloadFiles: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class PopoverBar extends React.PureComponent {\n    static propTypes = {\n        fileIndex: PropTypes.number.isRequired,\n        totalFiles: PropTypes.number.isRequired,\n        filename: PropTypes.string.isRequired,\n        fileURL: PropTypes.string.isRequired,\n        showPublicLink: PropTypes.bool,\n        enablePublicLink: PropTypes.bool.isRequired,\n        canDownloadFiles: PropTypes.bool.isRequired,\n        isExternalFile: PropTypes.bool.isRequired,\n        onGetPublicLink: PropTypes.func,\n    };\n\n    static defaultProps = {\n        fileIndex: 0,\n        totalFiles: 0,\n        filename: '',\n        fileURL: '',\n        showPublicLink: true,\n    };\n\n    downloadFile(filename, url) {\n        window.postMessage(\n            {\n                type: 'download-file',\n                message: {\n                    filename,\n                    url\n                }\n            },\n            window.location.origin\n        );\n    }\n\n    render() {\n        var publicLink = '';\n        if (this.props.enablePublicLink && this.props.showPublicLink) {\n            publicLink = (\n                <div>\n                    <a\n                        href='#'\n                        className='public-link text'\n                        data-title='Public Image'\n                        onClick={this.props.onGetPublicLink}\n                    >\n                        <FormattedMessage\n                            id='view_image_popover.publicLink'\n                            defaultMessage='Get Public Link'\n                        />\n                    </a>\n                    <span className='text'>{' | '}</span>\n                </div>\n            );\n        }\n\n        let downloadLinks = null;\n        if (this.props.canDownloadFiles) {\n            let downloadLinkText;\n            const downloadLinkProps = {};\n            if (this.props.isExternalFile) {\n                downloadLinkText = (\n                    <FormattedMessage\n                        id='view_image_popover.open'\n                        defaultMessage='Open'\n                    />\n                );\n            } else {\n                downloadLinkText = (\n                    <FormattedMessage\n                        id='view_image_popover.download'\n                        defaultMessage='Download'\n                    />\n                );\n\n                downloadLinkProps.download = this.props.filename;\n            }\n\n            downloadLinks = (\n                <div className='image-links'>\n                    {publicLink}\n                    <a\n                        onClick={() => this.downloadFile(this.props.filename, this.props.fileURL)}\n                        href={'#'}\n                        className='text'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        {...downloadLinkProps}\n                    >\n                        {downloadLinkText}\n                    </a>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                data-testid='fileCountFooter'\n                ref='imageFooter'\n                className='modal-button-bar'\n            >\n                <span className='pull-left text'>\n                    <FormattedMessage\n                        id='view_image_popover.file'\n                        defaultMessage='File {count, number} of {total, number}'\n                        values={{\n                            count: (this.props.fileIndex + 1),\n                            total: this.props.totalFiles,\n                        }}\n                    />\n                </span>\n                {downloadLinks}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PopoverBar from './popover_bar.jsx';\n\nexport default PopoverBar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {getFilePreviewUrl, getFileUrl, getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport Constants, {FileTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport AudioVideoPreview from 'components/audio_video_preview';\nimport CodePreview from 'components/code_preview';\nimport FileInfoPreview from 'components/file_info_preview';\nimport LoadingImagePreview from 'components/loading_image_preview';\nconst PDFPreview = React.lazy(() => import('components/pdf_preview'));\n\nimport ImagePreview from './image_preview';\nimport PopoverBar from './popover_bar';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class ViewImageModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post the files are attached to\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * Set whether to show this modal or not\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * Function to call when this modal is dismissed\n         **/\n        onModalDismissed: PropTypes.func.isRequired,\n\n        /**\n         * List of FileInfo to view\n         **/\n        fileInfos: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * The index number of starting image\n         **/\n        startIndex: PropTypes.number.isRequired,\n\n        canDownloadFiles: PropTypes.bool.isRequired,\n        enablePublicLink: PropTypes.bool.isRequired,\n        pluginFilePreviewComponents: PropTypes.arrayOf(PropTypes.object),\n    };\n\n    static defaultProps = {\n        show: false,\n        fileInfos: [],\n        startIndex: 0,\n        pluginFilePreviewComponents: [],\n        post: {}, // Needed to avoid proptypes console errors for cases like channel header, which doesn't have a proper value\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imageIndex: this.props.startIndex,\n            imageHeight: '100%',\n            loaded: Utils.fillArray(false, this.props.fileInfos.length),\n            progress: Utils.fillArray(0, this.props.fileInfos.length),\n            showCloseBtn: false,\n        };\n    }\n\n    handleNext = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n        let id = this.state.imageIndex + 1;\n        if (id > this.props.fileInfos.length - 1) {\n            id = 0;\n        }\n        this.showImage(id);\n    }\n\n    handlePrev = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n        let id = this.state.imageIndex - 1;\n        if (id < 0) {\n            id = this.props.fileInfos.length - 1;\n        }\n        this.showImage(id);\n    }\n\n    handleKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, KeyCodes.RIGHT)) {\n            this.handleNext();\n        } else if (Utils.isKeyPressed(e, KeyCodes.LEFT)) {\n            this.handlePrev();\n        }\n    }\n\n    onModalShown = (nextProps) => {\n        document.addEventListener('keyup', this.handleKeyPress);\n\n        this.showImage(nextProps.startIndex);\n    }\n\n    onModalHidden = () => {\n        document.addEventListener('keyup', this.handleKeyPress);\n\n        if (this.refs.video) {\n            this.refs.video.stop();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.show === true && this.props.show === false) {\n            this.onModalShown(nextProps);\n        } else if (nextProps.show === false && this.props.show === true) {\n            this.onModalHidden();\n        }\n\n        if (this.props.fileInfos.length !== nextProps.fileInfos.length) {\n            this.setState({\n                loaded: Utils.fillArray(false, nextProps.fileInfos.length),\n                progress: Utils.fillArray(0, nextProps.fileInfos.length),\n            });\n        }\n    }\n\n    showImage = (id) => {\n        this.setState({imageIndex: id});\n\n        const imageHeight = window.innerHeight - 100;\n        this.setState({imageHeight});\n\n        if (!this.state.loaded[id]) {\n            this.loadImage(id);\n        }\n    }\n\n    loadImage = (index) => {\n        const fileInfo = this.props.fileInfos[index];\n        const fileType = Utils.getFileType(fileInfo.extension);\n\n        if (fileType === FileTypes.IMAGE && Boolean(fileInfo.id)) {\n            let previewUrl;\n            if (fileInfo.has_image_preview) {\n                previewUrl = getFilePreviewUrl(fileInfo.id);\n            } else {\n                // some images (eg animated gifs) just show the file itself and not a preview\n                previewUrl = getFileUrl(fileInfo.id);\n            }\n\n            Utils.loadImage(\n                previewUrl,\n                () => this.handleImageLoaded(index),\n                (completedPercentage) => this.handleImageProgress(index, completedPercentage)\n            );\n        } else {\n            // there's nothing to load for non-image files\n            this.handleImageLoaded(index);\n        }\n    }\n\n    handleImageLoaded = (index) => {\n        this.setState((prevState) => {\n            return {\n                loaded: {\n                    ...prevState.loaded,\n                    [index]: true,\n                },\n            };\n        });\n    }\n\n    handleImageProgress = (index, completedPercentage) => {\n        this.setState((prevState) => {\n            return {\n                progress: {\n                    ...prevState.progress,\n                    [index]: completedPercentage,\n                },\n            };\n        });\n    }\n\n    handleGetPublicLink = () => {\n        this.props.onModalDismissed();\n\n        GlobalActions.showGetPublicLinkModal(this.props.fileInfos[this.state.imageIndex].id);\n    }\n\n    onMouseEnterImage = () => {\n        this.setState({showCloseBtn: true});\n    }\n\n    onMouseLeaveImage = () => {\n        this.setState({showCloseBtn: false});\n    }\n\n    render() {\n        if (this.props.fileInfos.length < 1 || this.props.fileInfos.length - 1 < this.state.imageIndex) {\n            return null;\n        }\n\n        const fileInfo = this.props.fileInfos[this.state.imageIndex];\n        const showPublicLink = !fileInfo.link;\n        const fileName = fileInfo.link || fileInfo.name;\n        const fileUrl = fileInfo.link || getFileUrl(fileInfo.id);\n        const fileDownloadUrl = fileInfo.link || getFileDownloadUrl(fileInfo.id);\n        const isExternalFile = !fileInfo.id;\n        let dialogClassName = 'a11y__modal modal-image';\n\n        let content;\n        if (this.state.loaded[this.state.imageIndex]) {\n            const fileType = Utils.getFileType(fileInfo.extension);\n\n            if (fileType === FileTypes.IMAGE || fileType === FileTypes.SVG) {\n                content = (\n                    <ImagePreview\n                        fileInfo={fileInfo}\n                        canDownloadFiles={this.props.canDownloadFiles}\n                    />\n                );\n            } else if (fileType === FileTypes.VIDEO || fileType === FileTypes.AUDIO) {\n                content = (\n                    <AudioVideoPreview\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            } else if (fileInfo && fileInfo.extension && fileInfo.extension === FileTypes.PDF) {\n                content = (\n                    <React.Suspense fallback={null}>\n                        <PDFPreview\n                            fileInfo={fileInfo}\n                            fileUrl={fileUrl}\n                        />\n                    </React.Suspense>\n                );\n            } else if (CodePreview.supports(fileInfo)) {\n                dialogClassName += ' modal-code';\n                content = (\n                    <CodePreview\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            } else {\n                content = (\n                    <FileInfoPreview\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            }\n        } else {\n            // display a progress indicator when the preview for an image is still loading\n            const loading = Utils.localizeMessage('view_image.loading', 'Loading');\n            const progress = Math.floor(this.state.progress[this.state.imageIndex]);\n\n            content = (\n                <LoadingImagePreview\n                    loading={loading}\n                    progress={progress}\n                />\n            );\n        }\n\n        for (const preview of this.props.pluginFilePreviewComponents) {\n            if (preview.override(fileInfo, this.props.post)) {\n                content = (\n                    <preview.component\n                        fileInfo={fileInfo}\n                        post={this.props.post}\n                    />\n                );\n                break;\n            }\n        }\n\n        let leftArrow = null;\n        let rightArrow = null;\n        if (this.props.fileInfos.length > 1) {\n            leftArrow = (\n                <a\n                    id='previewArrowLeft'\n                    ref='previewArrowLeft'\n                    className='modal-prev-bar'\n                    href='#'\n                    onClick={this.handlePrev}\n                >\n                    <i className='image-control image-prev'/>\n                </a>\n            );\n\n            rightArrow = (\n                <a\n                    id='previewArrowRight'\n                    ref='previewArrowRight'\n                    className='modal-next-bar'\n                    href='#'\n                    onClick={this.handleNext}\n                >\n                    <i className='image-control image-next'/>\n                </a>\n            );\n        }\n\n        let closeButtonClass = 'modal-close';\n        if (this.state.showCloseBtn) {\n            closeButtonClass += ' modal-close--show';\n        }\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                className='modal-image'\n                dialogClassName={dialogClassName}\n                role='dialog'\n                aria-labelledby='viewImageModalLabel'\n            >\n                <Modal.Body>\n                    <div\n                        className={'modal-image__wrapper'}\n                        onClick={this.props.onModalDismissed}\n                    >\n                        <div\n                            onMouseEnter={this.onMouseEnterImage}\n                            onMouseLeave={this.onMouseLeaveImage}\n                            onClick={(e) => e.stopPropagation()}\n                        >\n                            <Modal.Title\n                                componentClass='h1'\n                                id='viewImageModalLabel'\n                                className='hide'\n                            >\n                                {fileName}\n                            </Modal.Title>\n                            <div\n                                className={closeButtonClass}\n                                onClick={this.props.onModalDismissed}\n                            />\n                            <div className='modal-image__content'>\n                                {content}\n                            </div>\n                            <PopoverBar\n                                showPublicLink={showPublicLink}\n                                fileIndex={this.state.imageIndex}\n                                totalFiles={this.props.fileInfos.length}\n                                filename={fileName}\n                                fileURL={fileDownloadUrl}\n                                enablePublicLink={this.props.enablePublicLink}\n                                canDownloadFiles={this.props.canDownloadFiles}\n                                isExternalFile={isExternalFile}\n                                onGetPublicLink={this.handleGetPublicLink}\n                            />\n                        </div>\n                    </div>\n                    {leftArrow}\n                    {rightArrow}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {canDownloadFiles} from 'utils/file_utils.jsx';\n\nimport ViewImage from './view_image.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n        enablePublicLink: config.EnablePublicLink === 'true',\n        pluginFilePreviewComponents: state.plugins.components.FilePreview,\n        post: ownProps.post || getPost(state, ownProps.postId),\n    };\n}\n\nexport default connect(mapStateToProps)(ViewImage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LatexBlock extends React.Component {\n    static propTypes = {\n        content: PropTypes.string.isRequired,\n        enableLatex: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            katex: null,\n        };\n    }\n\n    componentDidMount() {\n        import('katex').then((katex) => {\n            this.setState({katex});\n        });\n    }\n\n    render() {\n        if (this.state.katex == null || !this.props.enableLatex) {\n            return (\n                <div\n                    className='post-body--code tex'\n                >\n                    {this.props.content}\n                </div>\n            );\n        }\n\n        try {\n            const html = this.state.katex.renderToString(this.props.content, {throwOnError: false, displayMode: true});\n\n            return (\n                <div\n                    className='post-body--code tex'\n                    dangerouslySetInnerHTML={{__html: html}}\n                />\n            );\n        } catch (e) {\n            return (\n                <div\n                    className='post-body--code tex'\n                >\n                    <FormattedMessage\n                        id='katex.error'\n                        defaultMessage=\"Couldn't compile your Latex code. Please review the syntax and try again.\"\n                    />\n                </div>\n            );\n        }\n    }\n}\n\nLatexBlock.defaultProps = {\n    enableLatex: false,\n};","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport LatexBlock from './latex_block.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    return {\n        enableLatex: config.EnableLatex === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(LatexBlock);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\n\nimport ExternalImage from 'components/external_image';\nimport SizeAwareImage from 'components/size_aware_image';\nimport ViewImageModal from 'components/view_image';\n\nimport brokenImageIcon from 'images/icons/brokenimage.png';\n\nexport default class MarkdownImage extends React.PureComponent {\n    static defaultProps = {\n        imageMetadata: {},\n    };\n\n    static propTypes = {\n        alt: PropTypes.string,\n        imageMetadata: PropTypes.object,\n        src: PropTypes.string.isRequired,\n        height: PropTypes.number,\n        width: PropTypes.number,\n        title: PropTypes.string,\n        className: PropTypes.string.isRequired,\n        postId: PropTypes.string.isRequired,\n        imageIsLink: PropTypes.bool.isRequired,\n        onImageLoaded: PropTypes.func,\n        postType: PropTypes.string,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n            loadFailed: false,\n            loaded: false,\n        };\n    }\n\n    showModal = (e) => {\n        if (!this.props.imageIsLink) {\n            e.preventDefault();\n            this.setState({showModal: true});\n        }\n    }\n\n    hideModal = () => {\n        this.setState({showModal: false});\n    }\n\n    handleLoadFail = () => {\n        this.setState({loadFailed: true});\n    }\n\n    isHeaderChangeMessage = () => {\n        return this.props.postType &&\n            this.props.postType === Constants.PostTypes.HEADER_CHANGE;\n    }\n\n    componentDidUpdate(prevProps) {\n        this.onUpdated(prevProps.src);\n    }\n\n    onUpdated = (prevSrc) => {\n        if (this.props.src && this.props.src !== prevSrc) {\n            this.setState({loadFailed: false});\n        }\n    }\n\n    handleImageLoaded = ({height, width}) => {\n        this.setState({\n            loaded: true,\n        }, () => { // Call onImageLoaded prop only after state has already been set\n            if (this.props.onImageLoaded) {\n                this.props.onImageLoaded({height, width});\n            }\n        });\n    }\n\n    render() {\n        const {imageMetadata, src, alt, imageIsLink} = this.props;\n        if (src === '' || this.state.loadFailed) {\n            let className = 'markdown-inline-img broken-image';\n            if (this.isHeaderChangeMessage()) {\n                className += ' broken-image--scaled-down';\n            }\n\n            return (\n                <div style={{display: 'inline-block'}}>\n                    <img\n                        className={className}\n                        alt={alt}\n                        src={brokenImageIcon}\n                    />\n                </div>\n            );\n        }\n        return (\n            <ExternalImage\n                src={src}\n                imageMetadata={imageMetadata}\n            >\n                {(safeSrc) => {\n                    if (!safeSrc) {\n                        return (\n                            <a\n                                className='theme markdown__link'\n                                href={src}\n                                rel='noopener noreferrer'\n                                target='_blank'\n                                title={this.props.title}\n                            >\n                                {alt}\n                            </a>\n                        );\n                    }\n\n                    const getFileExtensionFromUrl = (url) => {\n                        const index = url.lastIndexOf('.');\n                        return index > 0 ? url.substring(index + 1) : null;\n                    };\n                    const extension = getFileExtensionFromUrl(safeSrc);\n\n                    let className = '';\n                    if (this.state.loaded) {\n                        className = imageIsLink || !extension ?\n                            `${this.props.className} markdown-inline-img--hover markdown-inline-img--no-border` :\n                            `${this.props.className} markdown-inline-img--hover cursor--pointer a11y--active`;\n\n                        if (this.isHeaderChangeMessage()) {\n                            className += ' markdown-inline-img--scaled-down';\n                        }\n                    } else {\n                        const loadingClass = this.isHeaderChangeMessage() ?\n                            'markdown-inline-img--scaled-down-loading' : 'markdown-inline-img--loading';\n                        className = `${this.props.className} ${loadingClass}`;\n                    }\n\n                    const {height, width, title} = this.props;\n                    return (\n                        <>\n                            <SizeAwareImage\n                                alt={alt}\n                                className={className}\n                                src={safeSrc}\n                                height={height}\n                                width={width}\n                                title={title}\n                                dimensions={imageMetadata}\n                                showLoader={false}\n                                onClick={this.showModal}\n                                onImageLoadFail={this.handleLoadFail}\n                                onImageLoaded={this.handleImageLoaded}\n                            />\n                            {!imageIsLink && extension &&\n                            <ViewImageModal\n                                show={this.state.showModal}\n                                onModalDismissed={this.hideModal}\n                                postId={this.props.postId}\n                                startIndex={0}\n                                fileInfos={[{\n                                    has_preview_image: false,\n                                    link: safeSrc,\n                                    extension: imageMetadata.format || extension,\n                                    name: alt,\n                                }]}\n                            />\n                            }\n                        </>\n                    );\n                }}\n            </ExternalImage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {CSSProperties} from 'react';\n\ninterface PostEmojiProps {\n    name: string;\n    imageUrl: string;\n}\ndeclare module 'react' {\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        alt?: string;\n    }\n}\n\nexport default class PostEmoji extends React.PureComponent<PostEmojiProps, {}> {\n    public render() {\n        const emojiText = ':' + this.props.name + ':';\n\n        if (!this.props.imageUrl) {\n            return emojiText;\n        }\n\n        return (\n            <span\n                alt={emojiText}\n                className='emoticon'\n                title={emojiText}\n                style={{backgroundImage: 'url(' + this.props.imageUrl + ')'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport {getEmojiMap} from 'selectors/emojis';\n\nimport PostEmoji from './post_emoji';\n\ntype Props = {\n    name: string;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const emojiMap = getEmojiMap(state);\n    const emoji = emojiMap.get(ownProps.name);\n\n    return {\n        imageUrl: emoji ? getEmojiImageUrl(emoji) : '',\n    };\n}\n\nexport default connect(mapStateToProps)(PostEmoji);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Parser, ProcessNodeDefinitions} from 'html-to-react';\n\nimport AtMention from 'components/at_mention';\nimport LatexBlock from 'components/latex_block';\nimport LinkTooltip from 'components/link_tooltip/link_tooltip';\nimport MarkdownImage from 'components/markdown_image';\nimport PostEmoji from 'components/post_emoji';\n\n/*\n * Converts HTML to React components using html-to-react.\n * The following options can be specified:\n * - mentions - If specified, mentions are replaced with the AtMention component. Defaults to true.\n * - mentionHighlight - If specified, mentions for the current user are highlighted. Defaults to true.\n * - emoji - If specified, emoji text is replaced with the PostEmoji component. Defaults to true.\n * - images - If specified, markdown images are replaced with the image component. Defaults to true.\n * - imageProps - If specified, any extra props that should be passed into the image component.\n * - latex - If specified, latex is replaced with the LatexBlock component. Defaults to true.\n * - imagesMetadata - the dimensions of the image as retrieved from post.metadata.images.\n * - hasPluginTooltips - If specified, the LinkTooltip component is placed inside links. Defaults to false.\n */\nexport function messageHtmlToComponent(html, isRHS, options = {}) {\n    if (!html) {\n        return null;\n    }\n\n    const parser = new Parser();\n    const processNodeDefinitions = new ProcessNodeDefinitions(React);\n\n    function isValidNode() {\n        return true;\n    }\n\n    const processingInstructions = [\n\n        // Workaround to fix MM-14931\n        {\n            replaceChildren: false,\n            shouldProcessNode: (node) => node.type === 'tag' && node.name === 'input' && node.attribs.type === 'checkbox',\n            processNode: (node) => {\n                const attribs = node.attribs || {};\n                node.attribs.checked = Boolean(attribs.checked);\n\n                return React.createElement('input', {...node.attribs});\n            },\n        },\n    ];\n\n    if (options.hasPluginTooltips) {\n        const hrefAttrib = 'href';\n        processingInstructions.push({\n            replaceChildren: true,\n            shouldProcessNode: (node) => node.type === 'tag' && node.name === 'a' && node.attribs[hrefAttrib],\n            processNode: (node, children) => {\n                return (\n                    <LinkTooltip\n                        href={node.attribs[hrefAttrib]}\n                        title={children[0]}\n                    />\n                );\n            },\n        });\n    }\n    if (!('mentions' in options) || options.mentions) {\n        const mentionHighlight = 'mentionHighlight' in options ? options.mentionHighlight : true;\n        const mentionAttrib = 'data-mention';\n        processingInstructions.push({\n            replaceChildren: true,\n            shouldProcessNode: (node) => node.attribs && node.attribs[mentionAttrib],\n            processNode: (node, children) => {\n                const mentionName = node.attribs[mentionAttrib];\n                const callAtMention = (\n                    <AtMention\n                        mentionName={mentionName}\n                        isRHS={isRHS}\n                        hasMention={true}\n                        disableHighlight={!mentionHighlight}\n                    >\n                        {children}\n                    </AtMention>\n                );\n                return callAtMention;\n            },\n        });\n    }\n\n    if (!('emoji' in options) || options.emoji) {\n        const emojiAttrib = 'data-emoticon';\n        processingInstructions.push({\n            replaceChildren: true,\n            shouldProcessNode: (node) => node.attribs && node.attribs[emojiAttrib],\n            processNode: (node) => {\n                const emojiName = node.attribs[emojiAttrib];\n\n                return <PostEmoji name={emojiName}/>;\n            },\n        });\n    }\n\n    if (!('images' in options) || options.images) {\n        processingInstructions.push({\n            shouldProcessNode: (node) => node.type === 'tag' && node.name === 'img',\n            processNode: (node) => {\n                const {\n                    class: className,\n                    ...attribs\n                } = node.attribs;\n\n                const imageIsLink = (parentNode) => {\n                    if (parentNode &&\n                        parentNode.type === 'tag' &&\n                        parentNode.name === 'a'\n                    ) {\n                        return true;\n                    }\n                    return false;\n                };\n\n                return (\n                    <MarkdownImage\n                        className={className}\n                        imageMetadata={options.imagesMetadata && options.imagesMetadata[attribs.src]}\n                        {...attribs}\n                        {...options.imageProps}\n                        postId={options.postId}\n                        imageIsLink={imageIsLink(node.parentNode)}\n                        postType={options.postType}\n                    />\n                );\n            },\n        });\n    }\n\n    if (!('latex' in options) || options.latex) {\n        processingInstructions.push({\n            shouldProcessNode: (node) => node.attribs && node.attribs['data-latex'],\n            processNode: (node) => {\n                return (\n                    <LatexBlock content={node.attribs['data-latex']}/>\n                );\n            },\n        });\n    }\n\n    processingInstructions.push({\n        shouldProcessNode: () => true,\n        processNode: processNodeDefinitions.processDefaultNode,\n    });\n\n    return parser.parseWithInstructions(html, isValidNode, processingInstructions);\n}\n\nexport default messageHtmlToComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\n\nimport {intlShape} from 'utils/react_intl';\n\nclass ModalToggleButtonRedux extends React.Component {\n    static propTypes = {\n        accessibilityLabel: PropTypes.string,\n        children: PropTypes.node.isRequired,\n        modalId: PropTypes.string.isRequired,\n        dialogType: PropTypes.func.isRequired,\n        dialogProps: PropTypes.object,\n        intl: intlShape.isRequired,\n        onClick: PropTypes.func,\n        className: PropTypes.string,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        dialogProps: {},\n        className: '',\n    };\n\n    show(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const {modalId, dialogProps, dialogType} = this.props;\n\n        const modalData = {\n            modalId,\n            dialogProps,\n            dialogType,\n        };\n\n        this.props.actions.openModal(modalData);\n    }\n\n    render() {\n        const {children, onClick, ...props} = this.props;\n        const {formatMessage} = this.props.intl;\n        const ariaLabel = formatMessage({id: 'accessibility.button.dialog', defaultMessage: '{dialogName} dialog'}, {dialogName: props.accessibilityLabel});\n\n        // removing these three props since they are not valid props on buttons\n        delete props.modalId;\n        delete props.dialogType;\n        delete props.dialogProps;\n        delete props.accessibilityLabel;\n\n        // allow callers to provide an onClick which will be called before the modal is shown\n        let clickHandler = () => this.show();\n        if (onClick) {\n            clickHandler = (e) => {\n                onClick();\n\n                this.show(e);\n            };\n        }\n\n        return (\n            <button\n                {...props}\n                className={'style--none ' + props.className}\n                data-toggle='modal toggle'\n                aria-label={ariaLabel}\n                onClick={clickHandler}\n            >\n                {children}\n            </button>\n        );\n    }\n}\n\nexport default injectIntl(ModalToggleButtonRedux);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ModalToggleButtonRedux from './toggle_modal_button_redux.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ModalToggleButtonRedux);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class FileInfoPreview extends React.PureComponent {\n    static propTypes = {\n        fileInfo: PropTypes.object.isRequired,\n        fileUrl: PropTypes.string.isRequired,\n        canDownloadFiles: PropTypes.bool.isRequired,\n    };\n\n    render() {\n        const fileInfo = this.props.fileInfo;\n        const fileUrl = this.props.fileUrl;\n\n        // non-image files include a section providing details about the file\n        const infoParts = [];\n\n        if (fileInfo.extension !== '') {\n            infoParts.push(Utils.localizeMessage('file_info_preview.type', 'File type ') + fileInfo.extension.toUpperCase());\n        }\n\n        if (fileInfo.size) {\n            infoParts.push(Utils.localizeMessage('file_info_preview.size', 'Size ') + Utils.fileSizeToString(fileInfo.size));\n        }\n\n        const infoString = infoParts.join(', ');\n\n        let preview = null;\n        if (this.props.canDownloadFiles) {\n            preview = (\n                <a\n                    className='file-details__preview'\n                    href={fileUrl}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    <span className='file-details__preview-helper'/>\n                    <img\n                        alt={'file preview'}\n                        src={Utils.getFileIconPath(fileInfo)}\n                    />\n                </a>\n            );\n        } else {\n            preview = (\n                <span className='file-details__preview'>\n                    <span className='file-details__preview-helper'/>\n                    <img\n                        alt={'file preview'}\n                        src={Utils.getFileIconPath(fileInfo)}\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <div className='file-details__container'>\n                {preview}\n                <div className='file-details'>\n                    <div className='file-details__name'>{fileInfo.name}</div>\n                    <div className='file-details__info'>{infoString}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {canDownloadFiles} from 'utils/file_utils.jsx';\n\nimport FileInfoPreview from './file_info_preview.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n    };\n}\n\nexport default connect(mapStateToProps)(FileInfoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport Constants from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport ConfirmModal from '../../confirm_modal.jsx';\n\nconst UserSettings = React.lazy(() => import(/* webpackPrefetch: true */ 'components/user_settings'));\nconst SettingsSidebar = React.lazy(() => import(/* webpackPrefetch: true */ '../../settings_sidebar.tsx'));\n\nconst holders = defineMessages({\n    general: {\n        id: t('user.settings.modal.general'),\n        defaultMessage: 'General',\n    },\n    security: {\n        id: t('user.settings.modal.security'),\n        defaultMessage: 'Security',\n    },\n    notifications: {\n        id: t('user.settings.modal.notifications'),\n        defaultMessage: 'Notifications',\n    },\n    display: {\n        id: t('user.settings.modal.display'),\n        defaultMessage: 'Display',\n    },\n    sidebar: {\n        id: t('user.settings.modal.sidebar'),\n        defaultMessage: 'Sidebar',\n    },\n    advanced: {\n        id: t('user.settings.modal.advanced'),\n        defaultMessage: 'Advanced',\n    },\n    checkEmail: {\n        id: 'user.settings.general.checkEmail',\n        defaultMessage: 'Check your email at {email} to verify the address. Cannot find the email?',\n    },\n    confirmTitle: {\n        id: t('user.settings.modal.confirmTitle'),\n        defaultMessage: 'Discard Changes?',\n    },\n    confirmMsg: {\n        id: t('user.settings.modal.confirmMsg'),\n        defaultMessage: 'You have unsaved changes, are you sure you want to discard them?',\n    },\n    confirmBtns: {\n        id: t('user.settings.modal.confirmBtns'),\n        defaultMessage: 'Yes, Discard',\n    },\n});\n\nclass UserSettingsModal extends React.Component {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        onHide: PropTypes.func.isRequired,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n            sendVerificationEmail: PropTypes.func.isRequred,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab: 'display',\n            active_section: '',\n            showConfirmModal: false,\n            enforceFocus: true,\n            show: true,\n        };\n\n        this.requireConfirm = false;\n\n        // Used when settings want to override the default confirm modal with their own\n        // If set by a child, it will be called in place of showing the regular confirm\n        // modal. It will be passed a function to call on modal confirm\n        this.customConfirmAction = null;\n\n        this.modalBodyRef = React.createRef();\n    }\n\n    handleResend = (email) => {\n        this.setState({resendStatus: 'sending'});\n\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    shouldComponentUpdate() {\n        return true;\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.active_tab !== prevState.active_tab) {\n            $(ReactDOM.findDOMNode(this.modalBodyRef.current)).scrollTop(0);\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (Utils.cmdOrCtrlPressed(e) && e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.A)) {\n            this.handleHide();\n        }\n    }\n\n    // Called when the close button is pressed on the main modal\n    handleHide = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(() => this.handleHide());\n            return;\n        }\n\n        this.setState({\n            show: false,\n        });\n    }\n\n    // called after the dialog is fully hidden and faded out\n    handleHidden = () => {\n        this.setState({\n            active_tab: 'general',\n            active_section: '',\n        });\n        this.props.onHide();\n    }\n\n    // Called to hide the settings pane when on mobile\n    handleCollapse = () => {\n        $(ReactDOM.findDOMNode(this.modalBodyRef.current)).closest('.modal-dialog').removeClass('display--content');\n\n        this.setState({\n            active_tab: '',\n            active_section: '',\n        });\n    }\n\n    handleConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n\n        this.requireConfirm = false;\n        this.customConfirmAction = null;\n\n        if (this.afterConfirm) {\n            this.afterConfirm();\n            this.afterConfirm = null;\n        }\n    }\n\n    handleCancelConfirmation = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n\n        this.afterConfirm = null;\n    }\n\n    showConfirmModal = (afterConfirm) => {\n        if (afterConfirm) {\n            this.afterConfirm = afterConfirm;\n        }\n\n        if (this.customConfirmAction) {\n            this.customConfirmAction(this.handleConfirm);\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            enforceFocus: false,\n        });\n    }\n\n    // Called by settings tabs when their close button is pressed\n    closeModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.closeModal);\n        } else {\n            this.handleHide();\n        }\n    }\n\n    // Called by settings tabs when their back button is pressed\n    collapseModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.collapseModal);\n        } else {\n            this.handleCollapse();\n        }\n    }\n\n    updateTab = (tab, skipConfirm) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateTab(tab, true));\n        } else {\n            this.setState({\n                active_tab: tab,\n                active_section: '',\n            });\n        }\n    }\n\n    updateSection = (section, skipConfirm) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateSection(section, true));\n        } else {\n            this.setState({\n                active_section: section,\n            });\n        }\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        if (this.props.currentUser == null) {\n            return (<div/>);\n        }\n        var tabs = [];\n\n        //tabs.push({name: 'general', uiName: formatMessage(holders.general), icon: 'icon fa fa-gear', iconTitle: Utils.localizeMessage('user.settings.general.icon', 'General Settings Icon')});\n        //tabs.push({name: 'security', uiName: formatMessage(holders.security), icon: 'icon fa fa-lock', iconTitle: Utils.localizeMessage('user.settings.security.icon', 'Security Settings Icon')});\n\n        tabs.push({name: 'notifications', uiName: formatMessage(holders.notifications), icon: 'icon fa fa-exclamation-circle', iconTitle: Utils.localizeMessage('user.settings.notifications.icon', 'Notification Settings Icon')});\n        tabs.push({name: 'display', uiName: formatMessage(holders.display), icon: 'icon fa fa-eye', iconTitle: Utils.localizeMessage('user.settings.display.icon', 'Display Settings Icon')});\n        tabs.push({name: 'sidebar', uiName: formatMessage(holders.sidebar), icon: 'icon fa fa-columns', iconTitle: Utils.localizeMessage('user.settings.sidebar.icon', 'Sidebar Settings Icon')});\n\n        //tabs.push({name: 'advanced', uiName: formatMessage(holders.advanced), icon: 'icon fa fa-list-alt', iconTitle: Utils.localizeMessage('user.settings.advance.icon', 'Advanced Settings Icon')});\n\n        return (\n            <Modal\n                id='accountSettingsModal'\n                dialogClassName='a11y__modal settings-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHidden}\n                enforceFocus={this.state.enforceFocus}\n                role='dialog'\n                aria-labelledby='accountSettingsModalLabel'\n            >\n                <Modal.Header\n                    id='accountSettingsHeader'\n                    closeButton={true}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accountSettingsModalLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.modal.title'\n                            defaultMessage='Account Settings'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref={this.modalBodyRef}>\n                    <div className='settings-table'>\n                        <div className='settings-links'>\n                            <React.Suspense fallback={null}>\n                                <SettingsSidebar\n                                    tabs={tabs}\n                                    activeTab={this.state.active_tab}\n                                    updateTab={this.updateTab}\n                                />\n                            </React.Suspense>\n                        </div>\n                        <div className='settings-content minimize-settings'>\n                            <React.Suspense fallback={null}>\n                                <UserSettings\n                                    activeTab={this.state.active_tab}\n                                    activeSection={this.state.active_section}\n                                    updateSection={this.updateSection}\n                                    updateTab={this.updateTab}\n                                    closeModal={this.closeModal}\n                                    collapseModal={this.collapseModal}\n                                    setEnforceFocus={(enforceFocus) => this.setState({enforceFocus})}\n                                    setRequireConfirm={\n                                        (requireConfirm, customConfirmAction) => {\n                                            this.requireConfirm = requireConfirm;\n                                            this.customConfirmAction = customConfirmAction;\n                                        }\n                                    }\n                                />\n                            </React.Suspense>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <ConfirmModal\n                    title={formatMessage(holders.confirmTitle)}\n                    message={formatMessage(holders.confirmMsg)}\n                    confirmButtonText={formatMessage(holders.confirmBtns)}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleConfirm}\n                    onCancel={this.handleCancelConfirmation}\n                />\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {sendVerificationEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsModal from './user_settings_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = config.CloseUnusedDirectMessages === 'true';\n    const experimentalChannelOrganization = config.ExperimentalChannelOrganization === 'true';\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n\n    return {\n        currentUser: getCurrentUser(state),\n        closeUnusedDirectMessages,\n        experimentalChannelOrganization,\n        sendEmailNotifications,\n        requireEmailVerification,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            sendVerificationEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport Constants from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect';\nimport groupsAvatar from 'images/groups-avatar.png';\nimport AddIcon from 'components/widgets/icons/fa_add_icon';\n\nconst GROUPS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 10;\n\nexport default class AddGroupsToChannelModal extends React.Component {\n    static propTypes = {\n        currentChannelName: PropTypes.string.isRequired,\n        currentChannelId: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        groups: PropTypes.array.isRequired,\n\n        // used in tandem with 'skipCommit' to allow using this component without performing actual linking\n        excludeGroups: PropTypes.arrayOf(PropTypes.object),\n        includeGroups: PropTypes.arrayOf(PropTypes.object),\n        onHide: PropTypes.func,\n        skipCommit: PropTypes.bool,\n        onAddCallback: PropTypes.func,\n        actions: PropTypes.shape({\n            getGroupsNotAssociatedToChannel: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            linkGroupSyncable: PropTypes.func.isRequired,\n            getAllGroupsAssociatedToChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingGroups: true,\n        };\n    }\n\n    componentDidMount() {\n        Promise.all([\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, '', 0, GROUPS_PER_PAGE + 1),\n            this.props.actions.getAllGroupsAssociatedToChannel(this.props.currentChannelId),\n        ]).then(() => {\n            this.setGroupsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setGroupsLoadingState(true);\n                    await this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, searchTerm);\n                    this.setGroupsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    handleResponse = (err) => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    }\n\n    handleSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const groupIDs = this.state.values.map((v) => v.id);\n        if (groupIDs.length === 0) {\n            return;\n        }\n\n        if (this.props.skipCommit) {\n            if (this.props.onAddCallback) {\n                this.props.onAddCallback(groupIDs);\n            }\n            this.handleHide();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        groupIDs.forEach(async (groupID) => {\n            const {error} = await this.props.actions.linkGroupSyncable(groupID, this.props.currentChannelId, Groups.SYNCABLE_TYPE_CHANNEL, {auto_add: true});\n            this.handleResponse(error);\n            if (!error) {\n                this.handleHide();\n            }\n        });\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        const userIds = values.map((v) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    setGroupsLoadingState = (loadingState) => {\n        this.setState({\n            loadingGroups: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setGroupsLoadingState(true);\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, this.props.searchTerm, page, GROUPS_PER_PAGE + 1).then(() => {\n                this.setGroupsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd, onMouseMove) {\n        const rowSelected = isSelected ? 'more-modal__row--selected' : '';\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='40'\n                    height='40'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {option.display_name}&nbsp;{'-'}&nbsp;<span className='more-modal__name_sub'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: option.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.display_name;\n    }\n\n    render() {\n        const numRemainingText = (\n            <div id='numGroupsRemaining'>\n                <FormattedMessage\n                    id='multiselect.numGroupsRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {group} other {groups}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n        let groupsToShow = this.props.groups;\n        if (this.props.excludeGroups) {\n            const hasGroup = (og) => !this.props.excludeGroups.find((g) => g.id === og.id);\n            groupsToShow = groupsToShow.filter(hasGroup);\n        }\n        if (this.props.includeGroups) {\n            const hasGroup = (og) => this.props.includeGroups.find((g) => g.id === og.id);\n            groupsToShow = [...groupsToShow, ...this.props.includeGroups.filter(hasGroup)];\n        }\n        groupsToShow = groupsToShow.map((group) => {\n            return {label: group.display_name, value: group.id, ...group};\n        });\n\n        return (\n            <Modal\n                id='addGroupsToChannelModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='add_groups_to_channel.title'\n                            defaultMessage='Add New Groups To {channelName} Channel'\n                            values={{\n                                channelName: (\n                                    <strong>{this.props.currentChannelName}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addGroupsToChannelKey'\n                        options={groupsToShow}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={GROUPS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingGroups}\n                        placeholderText={localizeMessage('multiselect.addGroupsPlaceholder', 'Search and add groups')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel} from 'mattermost-redux/actions/groups';\nimport {getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel} from 'mattermost-redux/selectors/entities/groups';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport AddGroupsToChannelModal from './add_groups_to_channel_modal';\n\nfunction mapStateToProps(state, ownProps) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const channel = ownProps.channel || getCurrentChannel(state) || {};\n\n    let groups = selectGroupsNotAssociatedToChannel(state, channel.id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n\n    return {\n        currentChannelName: channel.display_name,\n        currentChannelId: channel.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToChannel,\n            setModalSearchTerm,\n            linkGroupSyncable,\n            getAllGroupsAssociatedToChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGroupsToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentTeamId, getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport localStorageStore from 'stores/local_storage_store';\n\n// getLastViewedChannelName combines data from the Redux store and localStorage to return the\n// previously selected channel name, returning the default channel if none exists.\n//\n// See LocalStorageStore for context.\nexport const getLastViewedChannelName = (state) => {\n    const userId = getCurrentUserId(state);\n    const teamId = getCurrentTeamId(state);\n\n    return localStorageStore.getPreviousChannelName(userId, teamId);\n};\n\nexport const getPenultimateViewedChannelName = (state) => {\n    const userId = getCurrentUserId(state);\n    const teamId = getCurrentTeamId(state);\n\n    return localStorageStore.getPenultimateChannelName(userId, teamId);\n};\n\n// getLastViewedChannelNameByTeamName combines data from the Redux store and localStorage to return\n// the url to the previously selected channel, returning the path to the default channel if none\n// exists.\n//\n// See LocalStorageStore for context.\nexport const getLastViewedChannelNameByTeamName = (state, teamName) => {\n    const userId = getCurrentUserId(state);\n    const team = getTeamByName(state, teamName);\n    const teamId = team && team.id;\n\n    return localStorageStore.getPreviousChannelName(userId, teamId);\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass UserSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'suggestion-list__item mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const username = item.username;\n        let description = '';\n\n        if ((item.first_name || item.last_name) && item.nickname) {\n            description = `- ${Utils.getFullName(item)} (${item.nickname})`;\n        } else if (item.nickname) {\n            description = `- (${item.nickname})`;\n        } else if (item.first_name || item.last_name) {\n            description = `- ${Utils.getFullName(item)}`;\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                <Avatar\n                    size='xs'\n                    username={username}\n                    url={Client4.getUsersRoute() + '/' + item.id + '/image?_=' + (item.last_picture_update || 0)}\n                />\n                <span className='admin-setting-user--align'>\n                    {'@' + username}\n                </span>\n                <span className='admin-setting-user__fullname'>\n                    {' '}\n                    {description}\n                </span>\n                <BotBadge show={Boolean(item.is_bot)}/>\n                <GuestBadge show={Utils.isGuest(item)}/>\n            </div>\n        );\n    }\n}\n\nexport default class UserProvider extends Provider {\n    constructor(searchUsersFunc) {\n        super();\n        this.autocompleteUsers = searchUsersFunc;\n    }\n    async handlePretextChanged(pretext, resultsCallback) {\n        const normalizedPretext = pretext.toLowerCase();\n        this.startNewRequest(normalizedPretext);\n\n        const data = await this.autocompleteUsers(normalizedPretext);\n\n        if (this.shouldCancelDispatch(normalizedPretext)) {\n            return false;\n        }\n\n        const users = Object.assign([], data.users);\n\n        resultsCallback({\n            matchedPretext: normalizedPretext,\n            terms: users.map((user) => user.username),\n            items: users,\n            component: UserSuggestion,\n        });\n\n        return true;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    inputId?: string;\n    label: React.ReactNode;\n    labelClassName?: string;\n    inputClassName?: string;\n    children: React.ReactNode;\n    helpText?: React.ReactNode;\n    footer?: React.ReactNode;\n}\n\nconst Setting: React.FC<Props> = ({\n    inputId,\n    label,\n    labelClassName,\n    inputClassName,\n    children,\n    footer,\n    helpText,\n}: Props) => {\n    return (\n        <div\n            data-testid={inputId}\n            className='form-group'\n        >\n            <label\n                data-testid={inputId + 'label'}\n                className={'control-label ' + labelClassName}\n                htmlFor={inputId}\n            >\n                {label}\n            </label>\n            <div className={inputClassName}>\n                {children}\n                <div\n                    data-testid={inputId + 'help-text'}\n                    className='help-text'\n                >\n                    {helpText}\n                </div>\n                {footer}\n            </div>\n        </div>\n    );\n};\n\nexport default Setting;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as Flux from 'flux';\n\nimport Constants from 'utils/constants';\n\nconst PayloadSources = Constants.PayloadSources;\n\nconst AppDispatcher = Object.assign(new Flux.Dispatcher(), {\n    handleServerAction: function performServerAction(action) {\n        if (!action.type) {\n            console.warn('handleServerAction called with undefined action type'); // eslint-disable-line no-console\n        }\n\n        var payload = {\n            source: PayloadSources.SERVER_ACTION,\n            action,\n        };\n        this.dispatch(payload);\n    },\n\n    handleViewAction: function performViewAction(action) {\n        if (!action.type) {\n            console.warn('handleViewAction called with undefined action type'); // eslint-disable-line no-console\n        }\n\n        var payload = {\n            source: PayloadSources.VIEW_ACTION,\n            action,\n        };\n        this.dispatch(payload);\n    },\n});\n\nexport default AppDispatcher;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport function dismissNotice(type) {\n    return (dispatch) => {\n        dispatch({\n            type: ActionTypes.DISMISS_NOTICE,\n            data: type,\n        });\n\n        return {data: true};\n    };\n}\n","module.exports = __webpack_public_path__ + \"files/1e0544c5e85bdc8e9b030b958f2a085e.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MattermostLogo extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.mattermost'\n                    defaultMessage='Mattermost Logo'\n                >\n                    {(ariaLabel) => (\n                        <svg width=\"1024px\" height=\"1024px\" viewBox=\"0 0 1024 1024\" version=\"1.1\">\n                            <g id=\"ACheckin-Android-Copy\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                                <g id=\"Group\" fill=\"#0FA44A\">\n                                    <path d=\"M512,0 C794.769792,-5.19439681e-14 1024,229.230208 1024,512 C1024,794.769792 794.769792,1024 512,1024 C229.230208,1024 3.46293121e-14,794.769792 0,512 C-3.46293121e-14,229.230208 229.230208,5.19439681e-14 512,0 Z\" id=\"Path\"></path>\n                                </g>\n                                <g id=\"ACheckin-Icon\" transform=\"translate(209.000000, 121.000000)\" fill=\"#FFFFFF\">\n                                    <path d=\"M473.974424,444.911918 L481.118295,435 C510.609071,437.068444 539.999682,441.477586 569,448.290876 C563.426258,458.406088 557.268188,468.266107 550.501542,477.818455 L549.301106,479.500959 L540.088333,492.291163 L353.682225,755.952565 C341.935421,771.634899 323.253133,781 303.701606,781 C284.349585,781 265.844642,771.825048 254.082606,756.428422 L253.720988,755.950258 L253.07165,755.060815 L243.069,740.922 L242.913177,741 L106,547.488426 C127.122483,531.337756 149.195261,516.888412 172.020613,504.153039 L174.097713,503 L303.552728,686.014421 L307,681.138109 C305.771334,683.411402 304.468491,685.650815 303.094015,687.854201 L303.236711,687.628522 C304.337312,685.864128 305.392026,684.076655 306.399549,682.267203 L307.146322,680.90601 L473.974424,444.911918 L481.118295,435 Z M303.0442,0.213614599 C470.025791,0.213614599 605.871123,136.149235 605.871123,303.235255 C605.871123,338.793906 599.685553,373.566767 587.707058,406.409724 C560.71255,399.671762 533.385275,394.814161 505.920978,391.883009 C518.180427,364.057807 524.582468,334.043458 524.582468,303.235255 C524.582468,180.999083 425.201138,81.5553807 303.0442,81.5553807 C180.888414,81.5553807 81.5082352,180.999083 81.5082352,303.235255 C81.5082352,349.721202 95.9727037,394.392462 123.334522,432.419087 L123.334522,432.419087 L130.318044,442.214941 L146.761848,465.426806 C123.256224,478.613532 100.486373,493.458249 78.6422854,509.980543 L78.6422854,509.980543 L57.2622305,479.804889 C19.9795508,427.993555 0.218429363,366.885262 0.218429363,303.235255 C0.218429363,136.149235 136.064912,0.213614599 303.0442,0.213614599 Z M302.998848,155 C384.73822,155 451,221.26178 451,303 C451,384.73822 384.73822,451 302.998848,451 C221.262932,451 155,384.73822 155,303 C155,221.26178 221.262932,155 302.998848,155 Z M338.694748,340.143684 C319.910403,344.474369 302.200666,351.158136 285.829296,359.841389 C283.450874,372.016833 283.13068,384.811933 285.200425,397.777497 C286.333774,404.880511 288.135155,411.711705 290.526246,418.218098 C299.761201,397.228099 315.522129,379.4458 335.648295,367.812844 C335.465163,358.340623 336.521343,349.053838 338.694748,340.143684 Z M354.387721,304.858969 C329.371106,299.647175 303.013821,298.785645 276.28912,303 C270.000412,304.014716 263.826883,305.301252 257.763924,306.825054 C252.549826,323.88634 249.405473,341.740048 248.570434,360.04295 C272.277477,345.403854 299.204892,335.101201 328.439318,330.438804 C333.048733,329.702818 337.64663,329.138447 342.231858,328.700771 C345.372756,320.26515 349.350997,312.261446 354.387721,304.858969 Z M256.946162,210.878503 C241.097699,235.008249 230.017596,262.324965 224.758578,291.324428 C234.090282,288.506027 243.717993,286.266971 253.610613,284.690187 C291.362436,278.667541 328.390943,282.779388 361.936473,294.99284 C369.539359,286.150642 378.566994,278.499381 388.756773,272.437574 C353.695503,237.956801 307.327229,215.648015 256.946162,210.878503 Z\" id=\"Combined-Shape\"></path>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    background: {\n        enableBackground: 'new 0 0 500 500',\n    },\n    st0: {\n        fillRule: 'evenodd',\n        clipRule: 'evenodd',\n    },\n};\n","module.exports = __webpack_public_path__ + \"files/fb02f374b8f73825415db1bccd4bd76d.gif\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MenuIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.menu'\n                    defaultMessage='Menu Icon'\n                >\n                    {(title) => (\n                        <svg\n                            width='16px'\n                            height='10px'\n                            viewBox='0 0 16 10'\n                            version='1.1'\n                            role='img'\n                            title={title}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-188.000000, -38.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g>\n                                        <g>\n                                            <g transform='translate(188.000000, 38.000000)'>\n                                                <path d='M15.5,0 C15.776,0 16,0.224 16,0.5 L16,1.5 C16,1.776 15.776,2 15.5,2 L0.5,2 C0.224,2 0,1.776 0,1.5 L0,0.5 C0,0.224 0.224,0 0.5,0 L15.5,0 Z M15.5,4 C15.776,4 16,4.224 16,4.5 L16,5.5 C16,5.776 15.776,6 15.5,6 L0.5,6 C0.224,6 0,5.776 0,5.5 L0,4.5 C0,4.224 0.224,4 0.5,4 L15.5,4 Z M15.5,8 C15.776,8 16,8.224 16,8.5 L16,9.5 C16,9.776 15.776,10 15.5,10 L0.5,10 C0.224,10 0,9.776 0,9.5 L0,8.5 C0,8.224 0.224,8 0.5,8 L15.5,8 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getTeamMember} from 'mattermost-redux/actions/teams';\nimport {getChannelMember} from 'mattermost-redux/actions/channels';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSelectedPost} from 'selectors/rhs';\n\nexport function getMembershipForCurrentEntities(userId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentTeamId = getCurrentTeamId(state);\n\n        const selectedPost = getSelectedPost(state);\n        const currentChannel = getCurrentChannel(state);\n\n        let channelId;\n        if (selectedPost.exists === false) {\n            channelId = currentChannel.id;\n        } else {\n            channelId = selectedPost.channel_id;\n        }\n\n        return Promise.all([dispatch(getTeamMember(currentTeamId, userId)), dispatch(getChannelMember(channelId, userId))]);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {\n    getChannelsInCurrentTeam,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserLocale} from 'mattermost-redux/selectors/entities/i18n';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\nimport {logError} from 'mattermost-redux/actions/errors';\n\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport store from 'stores/redux_store.jsx';\nimport {Constants} from 'utils/constants';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass SearchChannelWithPermissionsSuggestion extends Suggestion {\n    static get propTypes() {\n        return {\n            ...super.propTypes,\n        };\n    }\n\n    render() {\n        const {item, isSelection} = this.props;\n        const channel = item.channel;\n        const channelIsArchived = channel.delete_at && channel.delete_at !== 0;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const displayName = channel.display_name;\n        let icon = null;\n        if (channelIsArchived) {\n            icon = (\n                <ArchiveIcon className='icon icon__archive'/>\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            icon = (\n                <GlobeIcon className='icon icon__globe icon--body'/>\n            );\n        } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n            icon = (\n                <LockIcon className='icon icon__lock icon--body'/>\n            );\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                onMouseMove={this.handleMouseMove}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {icon}\n                {displayName}\n            </div>\n        );\n    }\n}\n\nlet prefix = '';\n\nfunction channelSearchSorter(wrappedA, wrappedB) {\n    const aIsArchived = wrappedA.channel.delete_at ? wrappedA.channel.delete_at !== 0 : false;\n    const bIsArchived = wrappedB.channel.delete_at ? wrappedB.channel.delete_at !== 0 : false;\n    if (aIsArchived && !bIsArchived) {\n        return 1;\n    } else if (!aIsArchived && bIsArchived) {\n        return -1;\n    }\n\n    const locale = getCurrentUserLocale(store.getState());\n\n    const a = wrappedA.channel;\n    const b = wrappedB.channel;\n\n    const aDisplayName = a.display_name.toLowerCase();\n    const bDisplayName = b.display_name.toLowerCase();\n\n    const aStartsWith = aDisplayName.startsWith(prefix);\n    const bStartsWith = bDisplayName.startsWith(prefix);\n    if (aStartsWith && bStartsWith) {\n        return sortChannelsByTypeAndDisplayName(locale, a, b);\n    } else if (!aStartsWith && !bStartsWith) {\n        return sortChannelsByTypeAndDisplayName(locale, a, b);\n    } else if (aStartsWith) {\n        return -1;\n    }\n\n    return 1;\n}\n\nexport default class SearchChannelWithPermissionsProvider extends Provider {\n    constructor(channelSearchFunc) {\n        super();\n        this.autocompleteChannelsForSearch = channelSearchFunc;\n    }\n\n    makeChannelSearchFilter(channelPrefix) {\n        const channelPrefixLower = channelPrefix.toLowerCase();\n\n        return (channel) => {\n            const state = store.getState();\n            const channelId = channel.id;\n            const teamId = getCurrentTeamId(state);\n\n            const searchString = channel.display_name;\n\n            if (channel.type === Constants.OPEN_CHANNEL &&\n                haveIChannelPermission(state, {channel: channelId, team: teamId, permission: Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS})) {\n                return searchString.toLowerCase().includes(channelPrefixLower);\n            } else if (channel.type === Constants.PRIVATE_CHANNEL &&\n                haveIChannelPermission(state, {channel: channelId, team: teamId, permission: Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS})) {\n                return searchString.toLowerCase().includes(channelPrefixLower);\n            }\n\n            return false;\n        };\n    }\n\n    handlePretextChanged(channelPrefix, resultsCallback) {\n        if (channelPrefix) {\n            prefix = channelPrefix;\n            this.startNewRequest(channelPrefix);\n            const state = store.getState();\n\n            // Dispatch suggestions for local data\n            const channels = getChannelsInCurrentTeam(state);\n            this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels);\n\n            // Fetch data from the server and dispatch\n            this.fetchChannels(channelPrefix, resultsCallback);\n        }\n\n        return true;\n    }\n\n    async fetchChannels(channelPrefix, resultsCallback) {\n        const state = store.getState();\n        const teamId = getCurrentTeamId(state);\n        if (!teamId) {\n            return;\n        }\n\n        const channelsAsync = this.autocompleteChannelsForSearch(teamId, channelPrefix);\n\n        let channelsFromServer = [];\n        try {\n            const {data} = await channelsAsync;\n            channelsFromServer = data;\n        } catch (err) {\n            store.dispatch(logError(err));\n        }\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const channels = getChannelsInCurrentTeam(state).concat(channelsFromServer);\n        this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels);\n    }\n\n    formatChannelsAndDispatch(channelPrefix, resultsCallback, allChannels) {\n        const channels = [];\n\n        const state = store.getState();\n\n        const members = getMyChannelMemberships(state);\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const completedChannels = {};\n\n        const channelFilter = this.makeChannelSearchFilter(channelPrefix);\n\n        const config = getConfig(state);\n        const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n        for (const id of Object.keys(allChannels)) {\n            const channel = allChannels[id];\n            if (!channel) {\n                continue;\n            }\n\n            if (completedChannels[channel.id]) {\n                continue;\n            }\n\n            if (channelFilter(channel)) {\n                const newChannel = Object.assign({}, channel);\n                const channelIsArchived = channel.delete_at !== 0;\n\n                const wrappedChannel = {channel: newChannel, name: newChannel.name, deactivated: false};\n                if (!viewArchivedChannels && channelIsArchived) {\n                    continue;\n                } else if (!members[channel.id]) {\n                    continue;\n                } else if (channelIsArchived && !members[channel.id]) {\n                    continue;\n                } else if (channel.type === Constants.OPEN_CHANNEL) {\n                    wrappedChannel.type = Constants.OPEN_CHANNEL;\n                } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n                    wrappedChannel.type = Constants.PRIVATE_CHANNEL;\n                } else {\n                    continue;\n                }\n                completedChannels[channel.id] = true;\n                channels.push(wrappedChannel);\n            }\n        }\n\n        const channelNames = channels.\n            sort(channelSearchSorter).\n            map((wrappedChannel) => wrappedChannel.channel.name);\n\n        resultsCallback({\n            matchedPretext: channelPrefix,\n            terms: channelNames,\n            items: channels,\n            component: SearchChannelWithPermissionsSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getFullName} from 'mattermost-redux/utils/user_utils';\n\nimport SearchChannelWithPermissionsProvider from 'components/suggestion/search_channel_with_permissions_provider.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nimport {placeCaretAtEnd} from 'utils/utils.jsx';\n\nexport default class AddUserToChannelModal extends React.Component {\n    static propTypes = {\n\n        /**\n         * Function that's called when modal is closed\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * The user that is being added to a channel\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Object used to determine if the user\n         * is a member of a given channel\n         */\n        channelMembers: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to add the user to a channel\n             */\n            addChannelMember: PropTypes.func.isRequired,\n\n            /**\n             * Function to fetch the user's channel membership\n             */\n            getChannelMember: PropTypes.func.isRequired,\n\n            /**\n             * Function passed on to the constructor of the\n             * SearchChannelWithPermissionsProvider class to fetch channels\n             * based on a search term\n             */\n            autocompleteChannelsForSearch: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n            /**\n             * Whether or not the modal is visible\n             */\n            show: true,\n\n            /**\n             * Whether or not a request to add the user is in progress\n             */\n            saving: false,\n\n            /**\n             * Whether or not a request to check for the user's channel membership\n             * is in progress\n             */\n            checkingForMembership: false,\n\n            /**\n             * The user input in the channel search box\n             */\n            text: '',\n\n            /**\n             * The id for the channel that is selected\n             */\n            selectedChannelId: null,\n\n            /**\n             * An error to display when the add request fails\n             */\n            submitError: '',\n        };\n        this.suggestionProviders = [new SearchChannelWithPermissionsProvider(props.actions.autocompleteChannelsForSearch)];\n        this.enableChannelProvider();\n    }\n\n    enableChannelProvider = () => {\n        this.suggestionProviders[0].disableDispatches = false;\n    }\n\n    focusTextbox = () => {\n        if (this.channelSearchBox == null) {\n            return;\n        }\n\n        const textbox = this.channelSearchBox.getTextbox();\n        if (document.activeElement !== textbox) {\n            textbox.focus();\n            placeCaretAtEnd(textbox);\n        }\n    }\n\n    onInputChange = (e) => {\n        this.setState({text: e.target.value, selectedChannelId: null});\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n        this.props.onHide();\n    }\n\n    setSearchBoxRef = (input) => {\n        this.channelSearchBox = input;\n        this.focusTextbox();\n    }\n\n    handleSubmitError = (error) => {\n        if (error) {\n            this.setState({submitError: error.message, saving: false});\n        }\n    }\n\n    didSelectChannel = (selection) => {\n        const channel = selection.channel;\n        const userId = this.props.user.id;\n\n        this.setState({\n            text: channel.display_name,\n            selectedChannelId: channel.id,\n            checkingForMembership: true,\n            submitError: '',\n        });\n\n        this.props.actions.getChannelMember(channel.id, userId).then(() => {\n            this.setState({checkingForMembership: false});\n        });\n    }\n\n    handleSubmit = (e) => {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n\n        const channelId = this.state.selectedChannelId;\n        const user = this.props.user;\n\n        if (!channelId) {\n            return;\n        }\n\n        if (this.isUserMemberOfChannel(channelId) || this.state.saving) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        this.props.actions.addChannelMember(channelId, user.id).then(({error}) => {\n            if (error) {\n                this.handleSubmitError(error);\n            } else {\n                this.onHide();\n            }\n        });\n    }\n\n    isUserMemberOfChannel = (channelId) => {\n        const user = this.props.user;\n        const memberships = this.props.channelMembers;\n\n        if (!channelId) {\n            return false;\n        }\n\n        if (!memberships[channelId]) {\n            return false;\n        }\n\n        return Boolean(memberships[channelId][user.id]);\n    }\n\n    render() {\n        const user = this.props.user;\n        const channelId = this.state.selectedChannelId;\n        const targetUserIsMemberOfSelectedChannel = this.isUserMemberOfChannel(channelId);\n\n        let name = getFullName(user);\n        if (!name) {\n            name = `@${user.username}`;\n        }\n\n        let errorMsg;\n        if (!this.state.saving) {\n            if (this.state.submitError) {\n                errorMsg = (\n                    <label\n                        id='add-user-to-channel-modal__invite-error'\n                        className='modal__error has-error control-label'\n                    >\n                        {this.state.submitError}\n                    </label>\n                );\n            } else if (targetUserIsMemberOfSelectedChannel) {\n                errorMsg = (\n                    <label\n                        id='add-user-to-channel-modal__user-is-member'\n                        className='modal__error has-error control-label'\n                    >\n                        <FormattedMessage\n                            id='add_user_to_channel_modal.membershipExistsError'\n                            defaultMessage='{name} is already a member of that channel'\n                            values={{\n                                name,\n                            }}\n                        />\n                    </label>\n                );\n            }\n        }\n\n        const help = (\n            <FormattedMessage\n                id='add_user_to_channel_modal.help'\n                defaultMessage='Type to find a channel. Use ↑↓ to browse, ↵ to select, ESC to dismiss.'\n            />\n        );\n\n        const content = (\n            <SuggestionBox\n                ref={this.setSearchBoxRef}\n                className='form-control focused'\n                onChange={this.onInputChange}\n                value={this.state.text}\n                onKeyDown={this.handleKeyDown}\n                onItemSelected={this.didSelectChannel}\n                listComponent={SuggestionList}\n                maxLength='64'\n                providers={this.suggestionProviders}\n                listStyle='bottom'\n                completeOnTab={false}\n                renderDividers={false}\n                delayInputUpdate={true}\n                openWhenEmpty={true}\n            />\n        );\n\n        const shouldDisableAddButton = targetUserIsMemberOfSelectedChannel ||\n            this.state.checkingForMembership ||\n            Boolean(!this.state.selectedChannelId) ||\n            this.state.saving;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--overflow'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                ref='modal'\n                enforceFocus={true}\n                role='dialog'\n                aria-labelledby='addChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='addChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='add_user_to_channel_modal.title'\n                            defaultMessage='Add {name} to a channel'\n                            values={{\n                                name,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    onSubmit={this.handleSubmit}\n                >\n                    <Modal.Body>\n                        <div className='modal__hint'>\n                            {help}\n                        </div>\n                        {content}\n                        <div>\n                            {errorMsg}\n                            <br/>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.onHide}\n                        >\n                            <FormattedMessage\n                                id='add_user_to_channel_modal.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            type='button'\n                            id='add-user-to-channel-modal__add-button'\n                            className='btn btn-primary'\n                            onClick={this.handleSubmit}\n                            disabled={shouldDisableAddButton}\n                        >\n                            <FormattedMessage\n                                id='add_user_to_channel_modal.add'\n                                defaultMessage='Add'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {addChannelMember, getChannelMember, autocompleteChannelsForSearch} from 'mattermost-redux/actions/channels';\nimport {getChannelMembersInChannels} from 'mattermost-redux/selectors/entities/channels';\n\nimport AddUserToChannelModal from './add_user_to_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const channelMembers = getChannelMembersInChannels(state) || {};\n    return {\n        channelMembers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addChannelMember,\n            getChannelMember,\n            autocompleteChannelsForSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUserToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage, injectIntl} from 'react-intl';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport LocalDateTime from 'components/local_date_time';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport UserSettingsModal from 'components/user_settings/modal';\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport Constants, {ModalIdentifiers, UserStatuses} from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport Pluggable from 'plugins/pluggable';\n\nimport AddUserToChannelModal from 'components/add_user_to_channel_modal';\nimport LocalizedIcon from 'components/localized_icon';\nimport ToggleModalButtonRedux from 'components/toggle_modal_button_redux';\nimport Avatar from 'components/widgets/users/avatar';\nimport Popover from 'components/widgets/popover';\n\n/**\n * The profile popover, or hovercard, that appears with user information when clicking\n * on the username or profile picture of a user.\n */\nclass ProfilePopover extends React.PureComponent {\n    static getComponentName() {\n        return 'ProfilePopover';\n    }\n\n    static propTypes = {\n\n        /**\n         * Source URL from the image to display in the popover\n         */\n        src: PropTypes.string.isRequired,\n\n        /**\n         * User the popover is being opened for\n         */\n        user: PropTypes.object,\n\n        /**\n         * Status for the user, either 'offline', 'away', 'dnd' or 'online'\n         */\n        status: PropTypes.string,\n\n        hideStatus: PropTypes.bool,\n\n        /**\n         * Function to call to hide the popover\n         */\n        hide: PropTypes.func,\n\n        /**\n         * Set to true if the popover was opened from the right-hand\n         * sidebar (comment thread, search results, etc.)\n         */\n        isRHS: PropTypes.bool,\n\n        currentTeamId: PropTypes.string.isRequired,\n\n        /**\n         * @internal\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * @internal\n         */\n        hasMention: PropTypes.bool,\n\n        /**\n         * @internal\n         */\n        isInCurrentTeam: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        teamUrl: PropTypes.string.isRequired,\n\n        /**\n         * @internal\n         */\n        isTeamAdmin: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        isChannelAdmin: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        canManageAnyChannelMembersInCurrentTeam: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        actions: PropTypes.shape({\n            getMembershipForCurrentEntities: PropTypes.func.isRequired,\n            openDirectChannelToUserId: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * react-intl helper object\n         */\n        intl: intlShape.isRequired,\n\n        ...Popover.propTypes,\n    }\n\n    static defaultProps = {\n        isRHS: false,\n        hasMention: false,\n        status: UserStatuses.OFFLINE,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingDMChannel: -1,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getMembershipForCurrentEntities(this.props.userId);\n    }\n\n    handleShowDirectChannel = (e) => {\n        const {actions} = this.props;\n        e.preventDefault();\n\n        if (!this.props.user) {\n            return;\n        }\n\n        const user = this.props.user;\n\n        if (this.state.loadingDMChannel !== -1) {\n            return;\n        }\n\n        this.setState({loadingDMChannel: user.id});\n\n        actions.openDirectChannelToUserId(user.id).then((result) => {\n            if (!result.error) {\n                if (Utils.isMobile()) {\n                    GlobalActions.emitCloseRightHandSide();\n                }\n                this.setState({loadingDMChannel: -1});\n                if (this.props.hide) {\n                    this.props.hide();\n                }\n                browserHistory.push(`${this.props.teamUrl}/messages/@${user.username}`);\n            }\n        });\n    }\n\n    handleMentionKeyClick = (e) => {\n        e.preventDefault();\n\n        if (!this.props.user) {\n            return;\n        }\n        if (this.props.hide) {\n            this.props.hide();\n        }\n        EventEmitter.emit('mention_key_click', this.props.user.username, this.props.isRHS);\n    }\n\n    handleEditAccountSettings = (e) => {\n        e.preventDefault();\n\n        if (!this.props.user) {\n            return;\n        }\n        if (this.props.hide) {\n            this.props.hide();\n        }\n        this.props.actions.openModal({ModalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal});\n    }\n\n    render() {\n        if (!this.props.user) {\n            return null;\n        }\n\n        const popoverProps = Object.assign({}, this.props);\n        delete popoverProps.user;\n        delete popoverProps.userId;\n        delete popoverProps.src;\n        delete popoverProps.status;\n        delete popoverProps.hideStatus;\n        delete popoverProps.isBusy;\n        delete popoverProps.hide;\n        delete popoverProps.isRHS;\n        delete popoverProps.hasMention;\n        delete popoverProps.dispatch;\n        delete popoverProps.enableTimezone;\n        delete popoverProps.currentUserId;\n        delete popoverProps.currentTeamId;\n        delete popoverProps.teamUrl;\n        delete popoverProps.actions;\n        delete popoverProps.isTeamAdmin;\n        delete popoverProps.isChannelAdmin;\n        delete popoverProps.canManageAnyChannelMembersInCurrentTeam;\n        delete popoverProps.intl;\n\n        const {formatMessage} = this.props.intl;\n\n        var dataContent = [];\n        dataContent.push(\n            <Avatar\n                size='xxl'\n                username={this.props.user.username}\n                url={this.props.src}\n                key='user-popover-image'\n            />,\n        );\n\n        const fullname = Utils.getFullName(this.props.user);\n\n        // if (fullname || this.props.user.position) {\n        //     dataContent.push(\n        //         <hr\n        //             key='user-popover-hr'\n        //             className='divider divider--expanded'\n        //         />,\n        //     );\n        // }\n\n        if (fullname) {\n            dataContent.push(\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={<Tooltip id='fullNameTooltip'>{fullname}</Tooltip>}\n                    key='user-popover-fullname'\n                >\n                    <div className='text-center'>\n                        <h4 className='user-popover__fullname'>\n                            {fullname}\n                        </h4>\n                    </div>\n                </OverlayTrigger>,\n            );\n        }\n\n        if (this.props.user.is_bot) {\n            dataContent.push(\n                <div\n                    key='bot-description'\n                    className='overflow--ellipsis text-center text-nowrap user-popover__sub'\n                >\n                    {this.props.user.bot_description}\n                </div>,\n            );\n        }\n\n        if (this.props.user.position) {\n            const position = this.props.user.position.substring(0, Constants.MAX_POSITION_LENGTH);\n            dataContent.push(\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={<Tooltip id='positionTooltip'>{position}</Tooltip>}\n                    key='user-popover-position'\n                >\n                    <div\n                        className='overflow--ellipsis text-nowrap user-popover__sub text-center'\n                    >\n                        {position}\n                    </div>\n                </OverlayTrigger>,\n            );\n        }\n\n        const email = this.props.user.email;\n        if (email && !this.props.user.is_bot) {\n            dataContent.push(\n                <div\n                    data-toggle='tooltip'\n                    title={email}\n                    key='user-popover-email'\n                >\n                    <a\n                        href={'mailto:' + email}\n                        className='text-nowrap text-center text-lowercase user-popover__sub padding-bottom'\n                    >\n                        <small>{email}</small>\n                    </a>\n                </div>,\n            );\n        }\n\n        dataContent.push(\n            <Pluggable\n                key='profilePopoverPluggable2'\n                pluggableName='PopoverUserAttributes'\n                user={this.props.user}\n                hide={this.props.hide}\n                status={this.props.hideStatus ? null : this.props.status}\n            />,\n        );\n\n        if (this.props.enableTimezone && this.props.user.timezone) {\n            dataContent.push(\n                <div\n                    key='user-popover-local-time'\n                    className='padding-bottom half'\n                >\n                    <FormattedMessage\n                        id='user_profile.account.localTime'\n                        defaultMessage='Local Time: '\n                    />\n                    <LocalDateTime userTimezone={this.props.user.timezone}/>\n                </div>,\n            );\n        }\n\n        if (this.props.user.id === this.props.currentUserId) {\n            dataContent.push(\n                <div\n                    data-toggle='tooltip'\n                    key='user-popover-settings'\n                    className='popover__row first'\n                >\n                    <a\n                        href='#'\n                        onClick={this.handleEditAccountSettings}\n                        className='user-popover__title'\n                    >\n                        <LocalizedIcon\n                            className='fas fa-edit'\n                            title={{id: t('generic_icons.edit'), defaultMessage: 'Edit Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user_profile.account.editSettings'\n                            defaultMessage='Edit Account Settings'\n                        />\n                    </a>\n                </div>,\n            );\n        }\n\n        if (this.props.user.id !== this.props.currentUserId) {\n            dataContent.push(\n                <div\n                    data-toggle='tooltip'\n                    key='user-popover-dm'\n                    className='popover__row first'\n                >\n                    <a\n                        href='#'\n                        className='text-nowrap user-popover__title'\n                        onClick={this.handleShowDirectChannel}\n                    >\n                        <LocalizedIcon\n                            className='fas fa-comment-dots'\n                            title={{id: t('user_profile.send.dm.icon'), defaultMessage: 'Send Message Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user_profile.send.dm'\n                            defaultMessage='Send Message'\n                        />\n                    </a>\n                </div>,\n            );\n\n            if (this.props.canManageAnyChannelMembersInCurrentTeam && this.props.isInCurrentTeam) {\n                const addToChannelMessage = formatMessage({id: 'user_profile.add_user_to_channel', defaultMessage: 'Add to a Channel'});\n                dataContent.push(\n                    <div\n                        data-toggle='tooltip'\n                        className='popover__row first'\n                        key='user-popover-add-to-channel'\n                    >\n                        <a\n                            href='#'\n                            className='text-nowrap user-popover__title'\n                        >\n                            <ToggleModalButtonRedux\n                                accessibilityLabel={addToChannelMessage}\n                                ref='addUserToChannelModalButton'\n                                modalId={ModalIdentifiers.ADD_USER_TO_CHANNEL}\n                                role='menuitem'\n                                dialogType={AddUserToChannelModal}\n                                dialogProps={{user: this.props.user}}\n                                onClick={this.props.hide}\n                            >\n                                <LocalizedIcon\n                                    className='fas fa-user-plus'\n                                    title={{id: t('user_profile.add_user_to_channel.icon'), defaultMessage: 'Add User to Channel Icon'}}\n                                />\n                                {addToChannelMessage}\n                            </ToggleModalButtonRedux>\n                        </a>\n                    </div>,\n                );\n            }\n        }\n\n        dataContent.push(\n            <Pluggable\n                key='profilePopoverPluggable3'\n                pluggableName='PopoverUserActions'\n                user={this.props.user}\n                hide={this.props.hide}\n                status={this.props.hideStatus ? null : this.props.status}\n            />,\n        );\n\n        let roleTitle;\n        if (this.props.user.is_bot) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('bots.is_bot', 'BOT')}</span>;\n        } else if (Utils.isGuest(this.props.user)) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('post_info.guest', 'GUEST')}</span>;\n        } else if (Utils.isSystemAdmin(this.props.user.roles)) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('admin.permissions.roles.system_admin.name', 'System Admin')}</span>;\n        } else if (this.props.isTeamAdmin) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('admin.permissions.roles.team_admin.name', 'Team Admin')}</span>;\n        } else if (this.props.isChannelAdmin) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('admin.permissions.roles.channel_admin.name', 'Channel Admin')}</span>;\n        }\n\n        let title = `@${this.props.user.username}`;\n        if (this.props.hasMention) {\n            title = <a onClick={this.handleMentionKeyClick}>{title}</a>;\n        }\n\n        title = (\n            <span data-testid={`profilePopoverTitle_${this.props.user.username}`}>\n                <span className='user-popover__username'>\n                    {title}\n                </span>\n                {roleTitle}\n            </span>\n        );\n\n        return (\n            <Popover\n                {...popoverProps}\n                title={title}\n                id='user-profile-popover'\n            >\n                {dataContent}\n            </Popover>\n        );\n    }\n}\n\ndelete ProfilePopover.propTypes.id;\n\nexport default injectIntl(ProfilePopover);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentUserId, getStatusForUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {\n    getCurrentTeam,\n    getCurrentRelativeTeamUrl,\n    getTeamMember,\n} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentChannel,\n    getChannelMembersInChannels,\n    canManageAnyChannelMembersInCurrentTeam,\n} from 'mattermost-redux/selectors/entities/channels';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions.jsx';\nimport {getMembershipForCurrentEntities} from 'actions/views/profile_popover';\nimport {openModal} from 'actions/views/modals';\n\nimport {areTimezonesEnabledAndSupported} from 'selectors/general';\nimport {getSelectedPost, getRhsState} from 'selectors/rhs';\n\nimport ProfilePopover from './profile_popover.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const userId = ownProps.userId;\n    const team = getCurrentTeam(state);\n    const teamMember = getTeamMember(state, team.id, userId);\n\n    let isTeamAdmin = false;\n    if (teamMember && teamMember.scheme_admin) {\n        isTeamAdmin = true;\n    }\n\n    const selectedPost = getSelectedPost(state);\n    const currentChannel = getCurrentChannel(state);\n\n    let channelId;\n    if (selectedPost.exists === false) {\n        channelId = currentChannel.id;\n    } else {\n        channelId = selectedPost.channel_id;\n    }\n\n    const channelMember = getChannelMembersInChannels(state)[channelId][userId];\n\n    let isChannelAdmin = false;\n    if (getRhsState(state) !== 'search' && channelMember != null && channelMember.scheme_admin) {\n        isChannelAdmin = true;\n    }\n\n    return {\n        currentTeamId: team.id,\n        currentUserId: getCurrentUserId(state),\n        enableTimezone: areTimezonesEnabledAndSupported(state),\n        isTeamAdmin,\n        isChannelAdmin,\n        isInCurrentTeam: Boolean(teamMember) && teamMember.delete_at === 0,\n        canManageAnyChannelMembersInCurrentTeam: canManageAnyChannelMembersInCurrentTeam(state),\n        status: getStatusForUserId(state, userId),\n        teamUrl: getCurrentRelativeTeamUrl(state),\n        user: getUser(state, userId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openDirectChannelToUserId,\n            openModal,\n            getMembershipForCurrentEntities,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfilePopover);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport * as ServerVersion from 'utils/server_version';\nimport * as UserAgent from 'utils/user_agent';\n\nimport mattermostIcon from 'images/icon50x50.png';\n\n// Notices are objects with the following fields:\n//  - name - string identifier\n//  - adminOnly - set to true if only system admins should see this message\n//  - icon - the image to display for the notice icon\n//  - title - JSX node to display for the notice title\n//  - body - JSX node to display for the notice body\n//  - allowForget - boolean to allow forget the notice\n//  - show - function that check if we need to show the notice\n//\n// Order is important! The notices at the top are shown first.\nexport default [\n    {\n        name: 'apiv3_deprecation',\n        adminOnly: true,\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.api3'\n                defaultMessage='If you’ve created or installed integrations in the last two years, find out how [recent changes](!https://about.mattermost.com/default-apiv3-deprecation-guide) may have affected them.'\n            />\n        ),\n        allowForget: true,\n        show: (serverVersion, config) => {\n            if (config.InstallationDate >= new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            return true;\n        },\n    },\n    {\n        name: 'advanced_permissions',\n        adminOnly: true,\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.permissions'\n                defaultMessage='Some policy and permission System Console settings have moved with the release of [advanced permissions](!https://about.mattermost.com/default-advanced-permissions) in Enterprise E10 and E20.'\n            />\n        ),\n        allowForget: true,\n        show: (serverVersion, config, license) => {\n            if (license.IsLicensed === 'false') {\n                return false;\n            }\n            if (config.InstallationDate > new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            if (license.IsLicensed === 'true' && license.IssuedAt > new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            return true;\n        },\n    },\n    {\n        name: 'ee_upgrade_advice',\n        adminOnly: true,\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.ee_upgrade_advice'\n                defaultMessage='Enterprise Edition is recommended to ensure optimal operation and reliability. [Learn more](!https://mattermost.com/performance).'\n            />\n        ),\n        allowForget: false,\n        show: (serverVersion, config, license, analytics) => {\n            const USERS_THRESHOLD = 10000;\n\n            // If we don't have the analytics yet, don't show\n            if (!analytics.hasOwnProperty('TOTAL_USERS')) {\n                return false;\n            }\n\n            if (analytics.TOTAL_USERS < USERS_THRESHOLD) {\n                return false;\n            }\n\n            if (license.IsLicensed === 'true' && license.Cluster === 'true') {\n                return false;\n            }\n\n            return true;\n        },\n    },\n    {\n        name: 'ie11_deprecation',\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        allowForget: false,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.ie11_deprecation'\n                defaultMessage='Your browser, IE11, will no longer be supported in an upcoming release. [Find out how to move to another browser in one simple step](!https://forum.mattermost.org/t/mattermost-is-dropping-support-for-internet-explorer-ie11-in-v5-16/7575).'\n            />\n        ),\n        show: (serverVersion) => {\n            // Don't show the notice after v5.16, show a different notice\n            if (ServerVersion.isServerVersionGreaterThanOrEqualTo(serverVersion, '5.16.0')) {\n                return false;\n            }\n\n            // Only show if they're using IE\n            if (!UserAgent.isInternetExplorer()) {\n                return false;\n            }\n\n            return true;\n        },\n    },\n];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport LocalizedIcon from 'components/localized_icon';\nimport MattermostLogo from 'components/widgets/icons/mattermost_logo';\n\nexport default class SystemNotice extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        notices: PropTypes.arrayOf(PropTypes.object).isRequired,\n        preferences: PropTypes.object.isRequired,\n        dismissedNotices: PropTypes.object.isRequired,\n        isSystemAdmin: PropTypes.bool,\n        serverVersion: PropTypes.string.isRequired,\n        config: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        analytics: PropTypes.object,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            dismissNotice: PropTypes.func.isRequired,\n            getStandardAnalytics: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    componentDidMount() {\n        if (this.props.isSystemAdmin) {\n            this.props.actions.getStandardAnalytics();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isSystemAdmin !== this.props.isSystemAdmin && this.props.isSystemAdmin) {\n            this.props.actions.getStandardAnalytics();\n        }\n    }\n\n    getCurrentNotice = () => {\n        for (const notice of this.props.notices) {\n            // Skip if dismissed previously this session\n            if (this.props.dismissedNotices[notice.name]) {\n                continue;\n            }\n\n            // Skip if dismissed forever\n            if (this.props.preferences[notice.name]) {\n                continue;\n            }\n\n            if (notice.adminOnly && !this.props.isSystemAdmin) {\n                continue;\n            }\n\n            if (!notice.show(this.props.serverVersion, this.props.config, this.props.license, this.props.analytics)) {\n                continue;\n            }\n\n            return notice;\n        }\n        return null;\n    }\n\n    hide = (remind = false) => {\n        const notice = this.getCurrentNotice();\n        if (!notice) {\n            return;\n        }\n\n        if (!remind) {\n            this.props.actions.savePreferences(this.props.currentUserId, [{\n                user_id: this.props.currentUserId,\n                category: Preferences.CATEGORY_SYSTEM_NOTICE,\n                name: notice.name,\n                value: 'dismissed',\n            }]);\n        }\n\n        this.props.actions.dismissNotice(notice.name);\n    }\n\n    hideAndRemind = () => {\n        this.hide(true);\n    }\n\n    hideAndForget = () => {\n        this.hide(false);\n    }\n\n    render() {\n        const notice = this.getCurrentNotice();\n\n        if (notice == null) {\n            return null;\n        }\n\n        let visibleMessage;\n        if (notice.adminOnly) {\n            visibleMessage = (\n                <div className='system-notice__info'>\n                    <LocalizedIcon\n                        className='fa fa-eye'\n                        title={{id: t('system_notice.adminVisible.icon'), defaultMessage: 'Only visible to System Admins Icon'}}\n                    />\n                    <FormattedMessage\n                        id='system_notice.adminVisible'\n                        defaultMessage='Only visible to System Admins'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='system-notice bg--white shadow--2'\n            >\n                <div className='system-notice__header'>\n                    <div className='system-notice__logo'>\n                        <MattermostLogo/>\n                    </div>\n                    <div className='system-notice__title'>\n                        {notice.title}\n                    </div>\n                </div>\n                <div className='system-notice__body'>\n                    {notice.body}\n                </div>\n                {visibleMessage}\n                <div className='system-notice__footer'>\n                    <button\n                        id='systemnotice_remindme'\n                        className='btn btn-transparent'\n                        onClick={this.hideAndRemind}\n                    >\n                        <FormattedMessage\n                            id='system_notice.remind_me'\n                            defaultMessage='Remind Me Later'\n                        />\n                    </button>\n                    {notice.allowForget &&\n                        <button\n                            id='systemnotice_dontshow'\n                            className='btn btn-transparent'\n                            onClick={this.hideAndForget}\n                        >\n                            <FormattedMessage\n                                id='system_notice.dont_show'\n                                defaultMessage=\"Don't Show Again\"\n                            />\n                        </button>}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {bindActionCreators} from 'redux';\nimport {makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getStandardAnalytics} from 'mattermost-redux/actions/admin';\n\nimport {Preferences} from 'utils/constants';\n\nimport {dismissNotice} from 'actions/views/notice';\n\nimport Notices from './notices.jsx';\nimport SystemNotice from './system_notice.jsx';\n\nfunction makeMapStateToProps() {\n    const getCategory = makeGetCategory();\n\n    const getPreferenceNameMap = createSelector(\n        getCategory,\n        (preferences) => {\n            const nameMap = {};\n            preferences.forEach((p) => {\n                nameMap[p.name] = p;\n            });\n            return nameMap;\n        }\n    );\n\n    return function mapStateToProps(state) {\n        const license = getLicense(state);\n        const config = getConfig(state);\n        const serverVersion = state.entities.general.serverVersion;\n        const analytics = state.entities.admin.analytics;\n\n        return {\n            currentUserId: state.entities.users.currentUserId,\n            preferences: getPreferenceNameMap(state, Preferences.CATEGORY_SYSTEM_NOTICE),\n            dismissedNotices: state.views.notice.hasBeenDismissed,\n            isSystemAdmin: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n            notices: Notices,\n            config,\n            license,\n            serverVersion,\n            analytics,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            dismissNotice,\n            getStandardAnalytics,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SystemNotice);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport moment from 'moment-timezone';\n\ntype Props = {\n\n    /*\n     * The time to display\n     */\n    eventTime?: number;\n\n    /*\n     * Set to display using 24 hour format\n     */\n    useMilitaryTime?: boolean;\n\n    /*\n     * Current timezone of the user\n     */\n    timeZone?: string | null | undefined;\n\n    /*\n     * Enable timezone feature\n     */\n    enableTimezone?: boolean;\n\n    intl: any; // TODO This needs to be replaced with IntlShape once react-intl is upgraded\n}\n\nclass LocalDateTime extends React.PureComponent<Props> {\n    public render() {\n        const {\n            enableTimezone,\n            eventTime,\n            timeZone,\n            useMilitaryTime,\n        } = this.props;\n\n        const date = eventTime ? new Date(eventTime) : new Date();\n\n        const momentDate = moment(date);\n        let titleString = momentDate.toString();\n        if (enableTimezone && timeZone) {\n            momentDate.tz(timeZone);\n            titleString = momentDate.toString() + ' (' + momentDate.tz() + ')';\n        }\n\n        const timezoneProps = enableTimezone && timeZone ? {timeZone} : {};\n        const options = {\n            ...timezoneProps,\n            hour12: !useMilitaryTime,\n        };\n        let formattedTime = this.props.intl.formatTime(date, options);\n\n        if (formattedTime === String(date)) {\n            const format = useMilitaryTime ? 'HH:mm' : 'hh:mm A';\n            formattedTime = momentDate.format(format);\n        }\n\n        return (\n            <time\n                aria-label={date.toString()}\n                className='post__time'\n                dateTime={date.toISOString()}\n                title={titleString}\n            >\n                <span>{formattedTime}</span>\n            </time>\n        );\n    }\n}\n\nexport default injectIntl(LocalDateTime);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserTimezone} from 'mattermost-redux/types/users';\n\nimport {areTimezonesEnabledAndSupported} from 'selectors/general';\n\nimport {Preferences} from 'utils/constants';\n\nimport LocalDateTime from './local_date_time';\n\ntype Props = {\n    userTimezone: UserTimezone;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const currentUserId = getCurrentUserId(state);\n\n    let userTimezone;\n    if (ownProps.userTimezone) {\n        userTimezone = ownProps.userTimezone;\n    } else {\n        userTimezone = getUserTimezone(state, currentUserId);\n    }\n\n    return {\n        enableTimezone: areTimezonesEnabledAndSupported(state),\n        useMilitaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n        timeZone: getUserCurrentTimezone(userTimezone),\n    };\n}\n\nexport default connect(mapStateToProps)(LocalDateTime);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport Constants from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect';\nimport groupsAvatar from 'images/groups-avatar.png';\nimport AddIcon from 'components/widgets/icons/fa_add_icon';\n\nconst GROUPS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 10;\n\nexport default class AddGroupsToTeamModal extends React.Component {\n    static propTypes = {\n        currentTeamName: PropTypes.string.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        groups: PropTypes.array.isRequired,\n\n        // used in tandem with 'skipCommit' to allow using this component without performing actual linking\n        excludeGroups: PropTypes.arrayOf(PropTypes.object),\n        includeGroups: PropTypes.arrayOf(PropTypes.object),\n        onHide: PropTypes.func,\n        skipCommit: PropTypes.bool,\n        onAddCallback: PropTypes.func,\n        actions: PropTypes.shape({\n            getGroupsNotAssociatedToTeam: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            linkGroupSyncable: PropTypes.func.isRequired,\n            getAllGroupsAssociatedToTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingGroups: true,\n        };\n    }\n\n    componentDidMount() {\n        Promise.all([\n            this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, '', 0, GROUPS_PER_PAGE + 1),\n            this.props.actions.getAllGroupsAssociatedToTeam(this.props.currentTeamId),\n        ]).then(() => {\n            this.setGroupsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setGroupsLoadingState(true);\n                    await this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, searchTerm);\n                    this.setGroupsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    handleResponse = (err) => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    }\n\n    handleSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const groupIDs = this.state.values.map((v) => v.id);\n        if (groupIDs.length === 0) {\n            return;\n        }\n        if (this.props.skipCommit) {\n            if (this.props.onAddCallback) {\n                this.props.onAddCallback(groupIDs);\n            }\n            this.handleHide();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        groupIDs.forEach(async (groupID) => {\n            const {error} = await this.props.actions.linkGroupSyncable(groupID, this.props.currentTeamId, Groups.SYNCABLE_TYPE_TEAM, {auto_add: true});\n            this.handleResponse(error);\n            if (!error) {\n                this.handleHide();\n            }\n        });\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        const userIds = values.map((v) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    setGroupsLoadingState = (loadingState) => {\n        this.setState({\n            loadingGroups: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setGroupsLoadingState(true);\n            this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, this.props.searchTerm, page, GROUPS_PER_PAGE + 1).then(() => {\n                this.setGroupsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd, onMouseMove) {\n        const rowSelected = isSelected ? 'more-modal__row--selected' : '';\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='40'\n                    height='40'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {option.display_name}&nbsp;{'-'}&nbsp;<span className='more-modal__name_sub'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: option.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.display_name;\n    }\n\n    render() {\n        const numRemainingText = (\n            <div id='numGroupsRemaining'>\n                <FormattedMessage\n                    id='multiselect.numGroupsRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {group} other {groups}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n\n        let groupsToShow = this.props.groups;\n        if (this.props.excludeGroups) {\n            const hasGroup = (og) => !this.props.excludeGroups.find((g) => g.id === og.id);\n            groupsToShow = groupsToShow.filter(hasGroup);\n        }\n        if (this.props.includeGroups) {\n            const hasGroup = (og) => this.props.includeGroups.find((g) => g.id === og.id);\n            groupsToShow = [...groupsToShow, ...this.props.includeGroups.filter(hasGroup)];\n        }\n\n        groupsToShow = groupsToShow.map((group) => {\n            return {label: group.display_name, value: group.id, ...group};\n        });\n\n        return (\n            <Modal\n                id='addGroupsToTeamModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='add_groups_to_team.title'\n                            defaultMessage='Add New Groups To {teamName} Team'\n                            values={{\n                                teamName: (\n                                    <strong>{this.props.currentTeamName}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addGroupsToTeamKey'\n                        options={groupsToShow}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={GROUPS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingGroups}\n                        placeholderText={localizeMessage('multiselect.addGroupsPlaceholder', 'Search and add groups')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getGroupsNotAssociatedToTeam, linkGroupSyncable, getAllGroupsAssociatedToTeam} from 'mattermost-redux/actions/groups';\nimport {getGroupsNotAssociatedToTeam as selectGroupsNotAssociatedToTeam} from 'mattermost-redux/selectors/entities/groups';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport AddGroupsToTeamModal from './add_groups_to_team_modal';\n\nfunction mapStateToProps(state, ownProps) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const team = ownProps.team || getCurrentTeam(state) || {};\n\n    let groups = selectGroupsNotAssociatedToTeam(state, team.id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n\n    return {\n        currentTeamName: team.display_name,\n        currentTeamId: team.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToTeam,\n            setModalSearchTerm,\n            linkGroupSyncable,\n            getAllGroupsAssociatedToTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGroupsToTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport WebSocketClient from './websocket_client.jsx';\n\nvar WebClient = new WebSocketClient();\nexport default WebClient;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nconst MAX_WEBSOCKET_FAILS = 7;\nconst MIN_WEBSOCKET_RETRY_TIME = 3000; // 3 sec\nconst MAX_WEBSOCKET_RETRY_TIME = 300000; // 5 mins\n\nexport default class WebSocketClient {\n    constructor() {\n        this.conn = null;\n        this.connectionUrl = null;\n        this.sequence = 1;\n        this.eventSequence = 0;\n        this.connectFailCount = 0;\n        this.eventCallback = null;\n        this.responseCallbacks = {};\n        this.firstConnectCallback = null;\n        this.reconnectCallback = null;\n        this.missedEventCallback = null;\n        this.errorCallback = null;\n        this.closeCallback = null;\n    }\n\n    initialize(connectionUrl = this.connectionUrl, token) {\n        if (this.conn) {\n            return;\n        }\n\n        if (connectionUrl == null) {\n            console.log('websocket must have connection url'); //eslint-disable-line no-console\n            return;\n        }\n\n        if (this.connectFailCount === 0) {\n            console.log('websocket connecting to ' + connectionUrl); //eslint-disable-line no-console\n        }\n\n        this.conn = new WebSocket(connectionUrl);\n        this.connectionUrl = connectionUrl;\n\n        this.conn.onopen = () => {\n            this.eventSequence = 0;\n\n            if (token) {\n                this.sendMessage('authentication_challenge', {token});\n            }\n\n            if (this.connectFailCount > 0) {\n                console.log('websocket re-established connection'); //eslint-disable-line no-console\n                if (this.reconnectCallback) {\n                    this.reconnectCallback();\n                }\n            } else if (this.firstConnectCallback) {\n                this.firstConnectCallback();\n            }\n\n            this.connectFailCount = 0;\n        };\n\n        this.conn.onclose = () => {\n            this.conn = null;\n            this.sequence = 1;\n\n            if (this.connectFailCount === 0) {\n                console.log('websocket closed'); //eslint-disable-line no-console\n            }\n\n            this.connectFailCount++;\n\n            if (this.closeCallback) {\n                this.closeCallback(this.connectFailCount);\n            }\n\n            let retryTime = MIN_WEBSOCKET_RETRY_TIME;\n\n            // If we've failed a bunch of connections then start backing off\n            if (this.connectFailCount > MAX_WEBSOCKET_FAILS) {\n                retryTime = MIN_WEBSOCKET_RETRY_TIME * this.connectFailCount * this.connectFailCount;\n                if (retryTime > MAX_WEBSOCKET_RETRY_TIME) {\n                    retryTime = MAX_WEBSOCKET_RETRY_TIME;\n                }\n            }\n\n            setTimeout(\n                () => {\n                    this.initialize(connectionUrl, token);\n                },\n                retryTime\n            );\n        };\n\n        this.conn.onerror = (evt) => {\n            if (this.connectFailCount <= 1) {\n                console.log('websocket error'); //eslint-disable-line no-console\n                console.log(evt); //eslint-disable-line no-console\n            }\n\n            if (this.errorCallback) {\n                this.errorCallback(evt);\n            }\n        };\n\n        this.conn.onmessage = (evt) => {\n            const msg = JSON.parse(evt.data);\n            if (msg.seq_reply) {\n                if (msg.error) {\n                    console.log(msg); //eslint-disable-line no-console\n                }\n\n                if (this.responseCallbacks[msg.seq_reply]) {\n                    this.responseCallbacks[msg.seq_reply](msg);\n                    Reflect.deleteProperty(this.responseCallbacks, msg.seq_reply);\n                }\n            } else if (this.eventCallback) {\n                if (msg.seq !== this.eventSequence && this.missedEventCallback) {\n                    console.log('missed websocket event, act_seq=' + msg.seq + ' exp_seq=' + this.eventSequence); //eslint-disable-line no-console\n                    this.missedEventCallback();\n                }\n                this.eventSequence = msg.seq + 1;\n                this.eventCallback(msg);\n            }\n        };\n    }\n\n    setEventCallback(callback) {\n        this.eventCallback = callback;\n    }\n\n    setFirstConnectCallback(callback) {\n        this.firstConnectCallback = callback;\n    }\n\n    setReconnectCallback(callback) {\n        this.reconnectCallback = callback;\n    }\n\n    setMissedEventCallback(callback) {\n        this.missedEventCallback = callback;\n    }\n\n    setErrorCallback(callback) {\n        this.errorCallback = callback;\n    }\n\n    setCloseCallback(callback) {\n        this.closeCallback = callback;\n    }\n\n    close() {\n        this.connectFailCount = 0;\n        this.sequence = 1;\n        if (this.conn && this.conn.readyState === WebSocket.OPEN) {\n            this.conn.onclose = () => {}; //eslint-disable-line no-empty-function\n            this.conn.close();\n            this.conn = null;\n            console.log('websocket closed'); //eslint-disable-line no-console\n        }\n    }\n\n    sendMessage(action, data, responseCallback) {\n        const msg = {\n            action,\n            seq: this.sequence++,\n            data,\n        };\n\n        if (responseCallback) {\n            this.responseCallbacks[msg.seq] = responseCallback;\n        }\n\n        if (this.conn && this.conn.readyState === WebSocket.OPEN) {\n            this.conn.send(JSON.stringify(msg));\n        } else if (!this.conn || this.conn.readyState === WebSocket.CLOSED) {\n            this.conn = null;\n            this.initialize();\n        }\n    }\n\n    userTyping(channelId, parentId, callback) {\n        const data = {};\n        data.channel_id = channelId;\n        data.parent_id = parentId;\n\n        this.sendMessage('user_typing', data, callback);\n    }\n\n    userUpdateActiveStatus(userIsActive, manual, callback) {\n        const data = {\n            user_is_active: userIsActive,\n            manual,\n        };\n        this.sendMessage('user_update_active_status', data, callback);\n    }\n\n    getStatuses(callback) {\n        this.sendMessage('get_statuses', null, callback);\n    }\n\n    getStatusesByIds(userIds, callback) {\n        const data = {};\n        data.user_ids = userIds;\n        this.sendMessage('get_statuses_by_ids', data, callback);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport const getSocketStatus = (state) => state.websocket;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass MenuActionSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                {item.text}\n            </div>\n        );\n    }\n}\n\nexport default class MenuActionProvider extends Provider {\n    constructor(options) {\n        super();\n        this.options = options;\n    }\n\n    handlePretextChanged(prefix, resultsCallback) {\n        if (prefix.length === 0) {\n            this.displayAllOptions(resultsCallback);\n            return true;\n        }\n\n        if (prefix) {\n            this.filterOptions(prefix, resultsCallback);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllOptions(resultsCallback) {\n        const terms = this.options.map((option) => option.text);\n\n        resultsCallback({\n            matchedPretext: '',\n            terms,\n            items: this.options,\n            component: MenuActionSuggestion,\n        });\n    }\n\n    async filterOptions(prefix, resultsCallback) {\n        const filteredOptions = this.options.filter((option) => option.text.toLowerCase().indexOf(prefix) >= 0);\n        const terms = filteredOptions.map((option) => option.text);\n\n        resultsCallback({\n            matchedPretext: prefix,\n            terms,\n            items: filteredOptions,\n            component: MenuActionSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass ChannelSuggestion extends Suggestion {\n    render() {\n        const isSelection = this.props.isSelection;\n        const item = this.props.item;\n\n        const channelName = item.display_name;\n        const purpose = item.purpose;\n\n        let className = 'mentions__name no-flex';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const description = '(~' + item.name + ')';\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                <div className='mention__align'>\n                    <span>\n                        {channelName}\n                    </span>\n                    <span className='mention__channelname'>\n                        {' '}\n                        {description}\n                    </span>\n                </div>\n                <div className='mention__purpose'>\n                    {purpose}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class ChannelProvider extends Provider {\n    constructor(channelSearchFunc) {\n        super();\n\n        this.autocompleteChannels = channelSearchFunc;\n    }\n\n    handlePretextChanged(pretext, resultsCallback) {\n        const normalizedPretext = pretext.toLowerCase();\n        this.startNewRequest(normalizedPretext);\n\n        this.autocompleteChannels(\n            normalizedPretext,\n            (data) => {\n                if (this.shouldCancelDispatch(normalizedPretext)) {\n                    return;\n                }\n\n                const channels = Object.assign([], data);\n\n                resultsCallback({\n                    matchedPretext: normalizedPretext,\n                    terms: channels.map((channel) => channel.display_name),\n                    items: channels,\n                    component: ChannelSuggestion,\n                });\n            }\n        );\n\n        return true;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Setting from './setting';\n\ntype InputTypes = 'input' | 'textarea' | 'number' | 'email' | 'tel' | 'url' | 'password'\n\nexport type WidgetTextSettingProps = {\n    id: string;\n    label: React.ReactNode;\n    labelClassName: string;\n    placeholder?: string;\n    helpText?: React.ReactNode;\n    footer?: React.ReactNode;\n    value: string | number;\n    inputClassName: string;\n    maxLength: number;\n    resizable: boolean;\n    onChange(name: string, value: any): void;\n    disabled?: boolean;\n    type: InputTypes;\n}\n\n// Since handle change is read from input and textarea element\ntype HandleChangeTypes = React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>\n\nexport default class TextSetting extends React.Component<WidgetTextSettingProps> {\n    public static validTypes: string[] = ['input', 'textarea', 'number', 'email', 'tel', 'url', 'password'];\n\n    public static defaultProps: Partial<WidgetTextSettingProps> = {\n        labelClassName: '',\n        inputClassName: '',\n        type: 'input',\n        maxLength: -1, // A negative number allows for values of any length\n        resizable: true,\n    };\n\n    private handleChange: HandleChangeTypes = (e) => {\n        if (this.props.type === 'number') {\n            this.props.onChange(this.props.id, parseInt(e.target.value, 10));\n        } else {\n            this.props.onChange(this.props.id, e.target.value);\n        }\n    }\n\n    public render(): JSX.Element {\n        const {resizable} = this.props;\n        let {type} = this.props;\n        let input = null;\n\n        if (type === 'textarea') {\n            let style = {};\n            if (!resizable) {\n                style = Object.assign({}, {resize: 'none'});\n            }\n\n            input = (\n                <textarea\n                    data-testid={this.props.id + 'input'}\n                    id={this.props.id}\n                    style={style}\n                    className='form-control'\n                    rows={5}\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled}\n                />\n            );\n        } else {\n            type = ['input', 'email', 'tel', 'number', 'url', 'password'].includes(type) ? type : 'input';\n\n            input = (\n                <input\n                    data-testid={this.props.id + type}\n                    id={this.props.id}\n                    className='form-control'\n                    type={type}\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled}\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                labelClassName={this.props.labelClassName}\n                inputClassName={this.props.inputClassName}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n                footer={this.props.footer}\n            >\n                {input}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nexport default class AutocompleteSelector extends React.PureComponent {\n    static propTypes = {\n        providers: PropTypes.array.isRequired,\n        value: PropTypes.string.isRequired,\n        onSelected: PropTypes.func,\n        label: PropTypes.node,\n        labelClassName: PropTypes.string,\n        inputClassName: PropTypes.string,\n        helpText: PropTypes.node,\n        placeholder: PropTypes.string,\n        footer: PropTypes.node,\n        disabled: PropTypes.bool,\n        toggleFocus: PropTypes.func,\n    };\n\n    static defaultProps = {\n        value: '',\n        id: '',\n        labelClassName: '',\n        inputClassName: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            input: '',\n        };\n    }\n\n    onChange = (e) => {\n        if (!e || !e.target) {\n            return;\n        }\n\n        this.setState({input: e.target.value});\n    }\n\n    handleSelected = (selected) => {\n        this.setState({input: ''});\n\n        if (this.props.onSelected) {\n            this.props.onSelected(selected);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.suggestionRef) {\n                this.suggestionRef.blur();\n            }\n        });\n    }\n\n    setSuggestionRef = (ref) => {\n        this.suggestionRef = ref;\n    }\n\n    onFocus = () => {\n        this.setState({focused: true});\n\n        if (this.props.toggleFocus) {\n            this.props.toggleFocus(true);\n        }\n    }\n\n    onBlur = () => {\n        this.setState({focused: false});\n\n        if (this.props.toggleFocus) {\n            this.props.toggleFocus(false);\n        }\n    }\n\n    render() {\n        const {\n            providers,\n            placeholder,\n            footer,\n            label,\n            labelClassName,\n            helpText,\n            inputClassName,\n            value,\n            disabled,\n        } = this.props;\n\n        const {focused} = this.state;\n        let {input} = this.state;\n\n        if (!focused) {\n            input = value;\n        }\n\n        let labelContent;\n        if (label) {\n            labelContent = (\n                <label\n                    className={'control-label ' + labelClassName}\n                >\n                    {label}\n                </label>\n            );\n        }\n\n        let helpTextContent;\n        if (helpText) {\n            helpTextContent = (\n                <div className='help-text'>\n                    {helpText}\n                </div>\n            );\n        }\n\n        return (\n            <div\n                data-testid='autoCompleteSelector'\n                className='form-group'\n            >\n                {labelContent}\n                <div className={inputClassName}>\n                    <SuggestionBox\n                        placeholder={placeholder}\n                        ref={this.setSuggestionRef}\n                        listComponent={SuggestionList}\n                        className='form-control'\n                        containerClass='select-suggestion-container'\n                        value={input}\n                        onChange={this.onChange}\n                        onItemSelected={this.handleSelected}\n                        onFocus={this.onFocus}\n                        onBlur={this.onBlur}\n                        providers={providers}\n                        completeOnTab={true}\n                        renderDividers={false}\n                        renderNoResults={true}\n                        openOnFocus={true}\n                        openWhenEmpty={true}\n                        replaceAllInputOnSelect={true}\n                        disabled={disabled}\n                    />\n                    {helpTextContent}\n                    {footer}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function popOverOverlayPosition(\n    targetBounds: DOMRect,\n    innerHeight: number,\n    spaceRequiredAbove: number,\n    spaceRequiredBelow?: number\n): string {\n    let placement: string;\n\n    if (targetBounds.top > spaceRequiredAbove) {\n        placement = 'top';\n    } else if (innerHeight - targetBounds.bottom > (spaceRequiredBelow || spaceRequiredAbove)) {\n        placement = 'bottom';\n    } else {\n        placement = 'left';\n    }\n    return placement;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\ntype Props = {\n    loading?: string;\n    progress?: number;\n    containerClass?: string;\n}\n\nconst LoadingImagePreview: React.FC<Props> = ({loading, progress, containerClass}: Props) => {\n    let progressView: JSX.Element = (\n        <span className='loader-percent'/>\n    );\n\n    if (progress) {\n        progressView = (\n            <span className='loader-percent'>\n                {`${loading} ${progress}%`}\n            </span>\n        );\n    }\n\n    return (\n        <div className={containerClass}>\n            <LoadingSpinner/>\n            {progressView}\n        </div>\n    );\n};\n\nLoadingImagePreview.defaultProps = {\n    containerClass: 'view-image__loading',\n};\n\nexport default LoadingImagePreview;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport {isGuest} from 'utils/utils.jsx';\n\nexport function importComponentSuccess(callback) {\n    return (comp) => callback(null, comp.default);\n}\n\nexport function createGetChildComponentsFunction(arrayOfComponents) {\n    return (locaiton, callback) => callback(null, arrayOfComponents);\n}\n\nexport const notFoundParams = {\n    type: ErrorPageTypes.PAGE_NOT_FOUND,\n};\n\nconst mfaPaths = [\n    '/mfa/setup',\n    '/mfa/confirm',\n];\n\nconst mfaAuthServices = [\n    '',\n    'email',\n    'ldap',\n];\n\nexport function checkIfMFARequired(user, license, config, path) {\n    if (license.MFA === 'true' &&\n            config.EnableMultifactorAuthentication === 'true' &&\n            config.EnforceMultifactorAuthentication === 'true' &&\n            mfaPaths.indexOf(path) === -1) {\n        if (isGuest(user) && config.GuestAccountsEnforceMultifactorAuthentication !== 'true') {\n            return false;\n        }\n\n        if (user && !user.mfa_active &&\n                mfaAuthServices.indexOf(user.auth_service) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/**\n * Compare server versions, ignoring the configuration hash and licensed status.\n *\n * For example, the following two server versions are considered equal:\n *     4.7.1.dev.3034fbc5fd566195d1b53e03890e35ff.true\n *     4.7.1.dev.d131dd02c5e6eec4693d9a0698aff95c.false\n *\n * but the following two are not\n *     4.7.0.dev.3034fbc5fd566195d1b53e03890e35ff.true\n *     4.7.1.dev.d131dd02c5e6eec4693d9a0698aff95c.true\n */\nexport function equalServerVersions(a: string, b: string): boolean {\n    if (a === b) {\n        return true;\n    }\n\n    const ignoredComponents = 2;\n    const aIgnoringComponents = (a || '').split('.').slice(0, -ignoredComponents).join('.');\n    const bIgnoringComponents = (b || '').split('.').slice(0, -ignoredComponents).join('.');\n    if (aIgnoringComponents === bIgnoringComponents) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Boolean function to check if a server version is greater than another.\n *\n * currentVersion: The server version being checked\n * compareVersion: The version to compare the former version against\n *\n * eg.  currentVersion = 4.16.0, compareVersion = 4.17.0 returns false\n *      currentVersion = 4.16.1, compareVersion = 4.16.1 returns true\n */\nexport function isServerVersionGreaterThanOrEqualTo(currentVersion: string, compareVersion: string): boolean {\n    if (currentVersion === compareVersion) {\n        return true;\n    }\n\n    // We only care about the numbers\n    const currentVersionNumber = (currentVersion || '').split('.').filter((x) => (/^[0-9]+$/).exec(x) !== null);\n    const compareVersionNumber = (compareVersion || '').split('.').filter((x) => (/^[0-9]+$/).exec(x) !== null);\n\n    for (let i = 0; i < Math.max(currentVersionNumber.length, compareVersionNumber.length); i++) {\n        if ((currentVersionNumber[i] || 0) > (compareVersionNumber[i] || 0)) {\n            return true;\n        }\n\n        if ((currentVersionNumber[i] || 0) < (compareVersionNumber[i] || 0)) {\n            return false;\n        }\n    }\n\n    // If all components are equal, then return true\n    return true;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, FormEvent, CSSProperties} from 'react';\n\ntype Props = {\n    id?: string;\n    disabled?: boolean;\n    value?: string;\n    defaultValue?: string;\n    onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n    onHeightChange?: (height: number, maxHeight: number) => void;\n    onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n    placeholder?: string;\n}\n\nexport default class AutosizeTextarea extends React.Component<Props> {\n    private height: number;\n    constructor(props: Props) {\n        super(props);\n\n        this.height = 0;\n    }\n\n    get value() {\n        return (this.refs.textarea as HTMLTextAreaElement).value;\n    }\n\n    set value(value) {\n        (this.refs.textarea as HTMLTextAreaElement).value = value;\n    }\n\n    get selectionStart() {\n        return (this.refs.textarea as HTMLTextAreaElement).selectionStart;\n    }\n\n    set selectionStart(selectionStart) {\n        (this.refs.textarea as HTMLTextAreaElement).selectionStart = selectionStart;\n    }\n\n    get selectionEnd() {\n        return (this.refs.textarea as HTMLTextAreaElement).selectionEnd;\n    }\n\n    set selectionEnd(selectionEnd) {\n        (this.refs.textarea as HTMLTextAreaElement).selectionEnd = selectionEnd;\n    }\n\n    focus() {\n        (this.refs.textarea as HTMLTextAreaElement).focus();\n    }\n\n    blur() {\n        (this.refs.textarea as HTMLTextAreaElement).blur();\n    }\n\n    componentDidMount() {\n        this.recalculateSize();\n    }\n\n    componentDidUpdate() {\n        this.recalculateSize();\n    }\n\n    recalculateSize = () => {\n        if (!this.refs.reference || !(this.refs.textarea as HTMLTextAreaElement)) {\n            return;\n        }\n\n        const height = (this.refs.reference as HTMLTextAreaElement).scrollHeight;\n        const textarea = (this.refs.textarea as HTMLTextAreaElement);\n\n        if (height > 0 && height !== this.height) {\n            const style = getComputedStyle(textarea);\n            const borderWidth = parseInt(style.borderTopWidth || '0', 10) + parseInt(style.borderBottomWidth || '0', 10);\n\n            // Directly change the height to avoid circular rerenders\n            textarea.style.height = String(height + borderWidth) + 'px';\n\n            this.height = height;\n\n            if (this.props.onHeightChange) {\n                this.props.onHeightChange(height, parseInt(style.maxHeight || '0', 10));\n            }\n        }\n    };\n\n    getDOMNode = () => {\n        return (this.refs.textarea as HTMLTextAreaElement);\n    };\n\n    handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        if (this.props.onChange) {\n            this.props.onChange(e);\n        }\n    };\n\n    render() {\n        const props = {...this.props};\n\n        Reflect.deleteProperty(props, 'onHeightChange');\n        Reflect.deleteProperty(props, 'providers');\n        Reflect.deleteProperty(props, 'channelId');\n\n        const {\n            value,\n            defaultValue,\n            placeholder,\n            disabled,\n            onInput,\n\n            // TODO: The provided `id` is sometimes hard-coded and used to interface with the\n            // component, e.g. `post_textbox`, so it can't be changed. This would ideally be\n            // abstracted to avoid passing in an `id` prop at all, but we intentionally maintain\n            // the old behaviour to address ABC-213.\n            id,\n            ...otherProps\n        } = props;\n\n        const heightProps = {\n            rows: 0,\n            height: 0\n        };\n\n        if (this.height <= 0) {\n            // Set an initial number of rows so that the textarea doesn't appear too large when its first rendered\n            heightProps.rows = 1;\n        } else {\n            heightProps.height = this.height;\n        }\n\n        let textareaPlaceholder = null;\n        const placeholderAriaLabel = placeholder ? placeholder.toLowerCase() : '';\n        if (!this.props.value && !this.props.defaultValue) {\n            textareaPlaceholder = (\n                <div\n                    {...otherProps as any}\n                    style={style.placeholder}\n                >\n                    {placeholder}\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {textareaPlaceholder}\n                <textarea\n                    ref='textarea'\n                    id={id}\n                    {...heightProps}\n                    {...otherProps}\n                    role='textbox'\n                    aria-label={placeholderAriaLabel}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    onInput={onInput}\n                    value={value}\n                    defaultValue={defaultValue}\n                />\n                <div style={style.container}>\n                    <textarea\n                        ref='reference'\n                        id={id + '-reference'}\n                        style={style.reference}\n                        disabled={true}\n                        rows={1}\n                        {...otherProps}\n                        value={value || defaultValue}\n                        aria-hidden={true}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style: { [Key: string]: CSSProperties} = {\n    container: {height: 0, overflow: 'hidden'},\n    reference: {height: 'auto', width: '100%'},\n    placeholder: {overflow: 'hidden', textOverflow: 'ellipsis', opacity: 0.5, pointerEvents: 'none', position: 'absolute', whiteSpace: 'nowrap', background: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EditIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.edit'\n                defaultMessage='Edit Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fas fa-pen'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class AddIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.add'\n                defaultMessage='Add Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fas fa-plus'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Setting from './setting';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    labelClassName: string;\n    helpText?: React.ReactNode;\n    placeholder: string;\n    value: boolean;\n    inputClassName: string;\n    onChange(name: string, value: any): void; // value is any since onChange is a common func for inputs and checkboxes\n}\n\nexport default class BoolSetting extends React.Component<Props> {\n    public static defaultProps: Partial<Props> = {\n        labelClassName: '',\n        inputClassName: '',\n    };\n\n    private handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.props.onChange(this.props.id, e.target.checked);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <Setting\n                label={this.props.label}\n                labelClassName={this.props.labelClassName}\n                inputClassName={this.props.inputClassName}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div className='checkbox'>\n                    <label>\n                        <input\n                            id={this.props.id}\n                            type='checkbox'\n                            checked={this.props.value}\n                            onChange={this.handleChange}\n                        />\n                        <span>{this.props.placeholder}</span>\n                    </label>\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Setting from './setting';\n\ntype Props = {\n    id: string;\n    options: {text: string;value: string}[];\n    label: React.ReactNode;\n    onChange(name: string, value: any): void;\n    value?: string;\n    labelClassName?: string;\n    inputClassName?: string;\n    helpText?: React.ReactNode;\n\n}\n\nexport default class RadioSetting extends React.Component<Props> {\n    public static defaultProps: Partial<Props> = {\n        labelClassName: '',\n        inputClassName: '',\n        options: [],\n    };\n\n    private handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <Setting\n                label={this.props.label}\n                labelClassName={this.props.labelClassName}\n                inputClassName={this.props.inputClassName}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                {\n                    this.props.options.map(({value, text}) => {\n                        return (\n                            <div\n                                className='radio'\n                                key={value}\n                            >\n                                <label>\n                                    <input\n                                        type='radio'\n                                        value={value}\n                                        name={this.props.id}\n                                        checked={value === this.props.value}\n                                        onChange={this.handleChange}\n                                    />\n                                    {text}\n                                </label>\n                            </div>\n                        );\n                    })\n                }\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport MenuActionProvider from 'components/suggestion/menu_action_provider';\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport GenericChannelProvider from 'components/suggestion/generic_channel_provider.jsx';\n\nimport TextSetting from 'components/widgets/settings/text_setting';\nimport AutocompleteSelector from 'components/autocomplete_selector';\nimport BoolSetting from 'components/widgets/settings/bool_setting';\nimport RadioSetting from 'components/widgets/settings/radio_setting';\n\nconst TEXT_DEFAULT_MAX_LENGTH = 150;\nconst TEXTAREA_DEFAULT_MAX_LENGTH = 3000;\n\nexport default class DialogElement extends React.PureComponent {\n    static propTypes = {\n        displayName: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        subtype: PropTypes.string,\n        placeholder: PropTypes.string,\n        helpText: PropTypes.string,\n        errorText: PropTypes.node,\n        maxLength: PropTypes.number,\n        dataSource: PropTypes.string,\n        optional: PropTypes.bool,\n        options: PropTypes.arrayOf(PropTypes.object),\n        value: PropTypes.any,\n        onChange: PropTypes.func,\n        actions: PropTypes.shape({\n            autocompleteChannels: PropTypes.func.isRequired,\n            autocompleteUsers: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let defaultText = '';\n        this.providers = [];\n        if (props.type === 'select') {\n            if (props.dataSource === 'users') {\n                this.providers = [new GenericUserProvider(props.actions.autocompleteUsers)];\n            } else if (props.dataSource === 'channels') {\n                this.providers = [new GenericChannelProvider(props.actions.autocompleteChannels)];\n            } else if (props.options) {\n                this.providers = [new MenuActionProvider(props.options)];\n            }\n\n            if (props.value && props.options) {\n                const defaultOption = props.options.find(\n                    (option) => option.value === props.value\n                );\n                defaultText = defaultOption ? defaultOption.text : '';\n            }\n        }\n\n        this.state = {\n            value: defaultText,\n        };\n    }\n\n    handleSelected = (selected) => {\n        const {name, dataSource, onChange} = this.props;\n\n        if (dataSource === 'users') {\n            onChange(name, selected.id);\n            this.setState({value: selected.username});\n        } else if (dataSource === 'channels') {\n            onChange(name, selected.id);\n            this.setState({value: selected.display_name});\n        } else {\n            onChange(name, selected.value);\n            this.setState({value: selected.text});\n        }\n    }\n\n    render() {\n        const {\n            name,\n            subtype,\n            displayName,\n            value,\n            placeholder,\n            onChange,\n            helpText,\n            errorText,\n            optional,\n            options,\n        } = this.props;\n\n        let {type, maxLength} = this.props;\n\n        let displayNameContent = displayName;\n        if (optional) {\n            displayNameContent = (\n                <React.Fragment>\n                    {displayName + ' '}\n                    <span className='font-weight--normal light'>\n                        <FormattedMessage\n                            id='interactive_dialog.element.optional'\n                            defaultMessage='(optional)'\n                        />\n                    </span>\n                </React.Fragment>\n            );\n        } else {\n            displayNameContent = (\n                <React.Fragment>\n                    {displayName}\n                    <span className='error-text'>{' *'}</span>\n                </React.Fragment>\n            );\n        }\n\n        let helpTextContent = helpText;\n        if (errorText) {\n            helpTextContent = (\n                <React.Fragment>\n                    {helpText}\n                    <div className='error-text margin-top x2'>\n                        {errorText}\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        if (type === 'text' || type === 'textarea') {\n            if (type === 'text') {\n                maxLength = maxLength || TEXT_DEFAULT_MAX_LENGTH;\n\n                if (subtype && TextSetting.validTypes.includes(subtype)) {\n                    type = subtype;\n                } else {\n                    type = 'input';\n                }\n            } else {\n                maxLength = maxLength || TEXTAREA_DEFAULT_MAX_LENGTH;\n            }\n\n            return (\n                <TextSetting\n                    id={name}\n                    type={type}\n                    label={displayNameContent}\n                    maxLength={maxLength}\n                    value={value || ''}\n                    placeholder={placeholder}\n                    helpText={helpTextContent}\n                    onChange={onChange}\n                    resizable={false}\n                />\n            );\n        } else if (type === 'select') {\n            return (\n                <AutocompleteSelector\n                    id={name}\n                    providers={this.providers}\n                    onSelected={this.handleSelected}\n                    label={displayNameContent}\n                    helpText={helpTextContent}\n                    placeholder={placeholder}\n                    value={this.state.value}\n                />\n            );\n        } else if (type === 'bool') {\n            return (\n                <BoolSetting\n                    id={name}\n                    label={displayNameContent}\n                    value={value || false}\n                    helpText={helpTextContent}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                />\n            );\n        } else if (type === 'radio') {\n            return (\n                <RadioSetting\n                    id={name}\n                    label={displayNameContent}\n                    helpText={helpTextContent}\n                    options={options}\n                    value={value}\n                    onChange={onChange}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {autocompleteChannels} from 'actions/channel_actions';\nimport {autocompleteUsers} from 'actions/user_actions';\n\nimport DialogElement from './dialog_element';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            autocompleteChannels,\n            autocompleteUsers,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(DialogElement);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as Markdown from 'utils/markdown';\n\nexport default class DialogIntroductionText extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string,\n        value: PropTypes.string.isRequired,\n    };\n\n    render() {\n        const formattedMessage = Markdown.format(this.props.value, {\n            breaks: true,\n            sanitize: true,\n            gfm: true,\n        });\n\n        return (\n            <span\n                id={this.props.id}\n                dangerouslySetInnerHTML={{__html: formattedMessage}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {checkDialogElementForError, checkIfErrorsMatchElements} from 'mattermost-redux/utils/integration_utils';\n\nimport SpinnerButton from 'components/spinner_button';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport DialogElement from './dialog_element';\nimport DialogIntroductionText from './dialog_introduction_text';\n\nexport default class InteractiveDialog extends React.Component {\n    static propTypes = {\n        url: PropTypes.string.isRequired,\n        callbackId: PropTypes.string,\n        elements: PropTypes.arrayOf(PropTypes.object),\n        title: PropTypes.string.isRequired,\n        introductionText: PropTypes.string,\n        iconUrl: PropTypes.string,\n        submitLabel: PropTypes.string,\n        notifyOnCancel: PropTypes.bool,\n        state: PropTypes.string,\n        onHide: PropTypes.func,\n        actions: PropTypes.shape({\n            submitInteractiveDialog: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const values = {};\n        if (props.elements != null) {\n            props.elements.forEach((e) => {\n                if (e.type === 'bool') {\n                    values[e.name] = (e.default === true || String(e.default).toLowerCase() === 'true');\n                } else {\n                    values[e.name] = e.default || null;\n                }\n            });\n        }\n\n        this.state = {\n            show: true,\n            values,\n            error: null,\n            errors: {},\n            submitting: false,\n        };\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const {elements} = this.props;\n        const values = this.state.values;\n        const errors = {};\n        if (elements) {\n            elements.forEach((elem) => {\n                const error = checkDialogElementForError(elem, values[elem.name]);\n                if (error) {\n                    errors[elem.name] = (\n                        <FormattedMessage\n                            id={error.id}\n                            defaultMessage={error.defaultMessage}\n                            values={error.values}\n                        />\n                    );\n                }\n            });\n        }\n\n        this.setState({errors});\n\n        if (Object.keys(errors).length !== 0) {\n            return;\n        }\n\n        const {url, callbackId, state} = this.props;\n\n        const dialog = {\n            url,\n            callback_id: callbackId,\n            state,\n            submission: values,\n        };\n\n        this.setState({submitting: true});\n\n        const {data} = await this.props.actions.submitInteractiveDialog(dialog);\n\n        this.setState({submitting: false});\n\n        let hasErrors = false;\n\n        if (data) {\n            if (data.error) {\n                hasErrors = true;\n                this.setState({error: data.error});\n            }\n\n            if (data.errors &&\n                Object.keys(data.errors).length >= 0 &&\n                checkIfErrorsMatchElements(data.errors, elements)\n            ) {\n                hasErrors = true;\n                this.setState({errors: data.errors});\n            }\n        }\n\n        if (!hasErrors) {\n            this.handleHide(true);\n        }\n    }\n\n    onHide = () => {\n        this.handleHide(false);\n    }\n\n    handleHide = (submitted = false) => {\n        const {url, callbackId, state, notifyOnCancel} = this.props;\n\n        if (!submitted && notifyOnCancel) {\n            const dialog = {\n                url,\n                callback_id: callbackId,\n                state,\n                cancelled: true,\n            };\n\n            this.props.actions.submitInteractiveDialog(dialog);\n        }\n\n        this.setState({show: false});\n    }\n\n    onChange = (name, value) => {\n        const values = {...this.state.values, [name]: value};\n        this.setState({values});\n    }\n\n    render() {\n        const {title, introductionText, iconUrl, submitLabel, elements} = this.props;\n\n        let submitText = (\n            <FormattedMessage\n                id='interactive_dialog.submit'\n                defaultMessage='Submit'\n            />\n        );\n        if (submitLabel) {\n            submitText = submitLabel;\n        }\n\n        let icon;\n        if (iconUrl) {\n            icon = (\n                <img\n                    id='interactiveDialogIconUrl'\n                    alt={'modal title icon'}\n                    className='more-modal__image'\n                    width='36'\n                    height='36'\n                    src={iconUrl}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                id='interactiveDialogModal'\n                dialogClassName='a11y__modal about-modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                backdrop='static'\n                role='dialog'\n                aria-labelledby='interactiveDialogModalLabel'\n            >\n                <Modal.Header\n                    closeButton={true}\n                    style={{borderBottom: elements == null && '0px'}}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='interactiveDialogModalLabel'\n                    >\n                        {icon}{title}\n                    </Modal.Title>\n                </Modal.Header>\n                {(elements || introductionText) && <Modal.Body>\n                    {introductionText &&\n                        <DialogIntroductionText\n                            id='interactiveDialogModalIntroductionText'\n                            value={introductionText}\n                        />\n                    }\n                    {elements && elements.map((e) => {\n                        return (\n                            <DialogElement\n                                key={'dialogelement' + e.name}\n                                displayName={e.display_name}\n                                name={e.name}\n                                type={e.type}\n                                subtype={e.subtype}\n                                helpText={e.help_text}\n                                errorText={this.state.errors[e.name]}\n                                placeholder={e.placeholder}\n                                minLength={e.min_length}\n                                maxLength={e.max_length}\n                                dataSource={e.data_source}\n                                optional={e.optional}\n                                options={e.options}\n                                value={this.state.values[e.name]}\n                                onChange={this.onChange}\n                            />\n                        );\n                    })}\n                </Modal.Body>}\n                <Modal.Footer>\n                    {this.state.error && (\n                        <div className='error-text'>\n                            {this.state.error}\n                        </div>\n                    )}\n                    <button\n                        id='interactiveDialogCancel'\n                        type='button'\n                        className='btn btn-link cancel-button'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='interactive_dialog.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <SpinnerButton\n                        id='interactiveDialogSubmit'\n                        type='button'\n                        className='btn btn-primary save-button'\n                        onClick={this.handleSubmit}\n                        spinning={this.state.submitting}\n                        spinningText={localizeMessage('interactive_dialog.submitting', 'Submitting...')}\n                    >\n                        {submitText}\n                    </SpinnerButton>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {submitInteractiveDialog} from 'mattermost-redux/actions/integrations';\n\nimport InteractiveDialog from './interactive_dialog';\n\nfunction mapStateToProps(state) {\n    const data = state.entities.integrations.dialog;\n    if (!data || !data.dialog) {\n        return {};\n    }\n\n    return {\n        url: data.url,\n        callbackId: data.dialog.callback_id,\n        elements: data.dialog.elements,\n        title: data.dialog.title,\n        introductionText: data.dialog.introduction_text,\n        iconUrl: data.dialog.icon_url,\n        submitLabel: data.dialog.submit_label,\n        notifyOnCancel: data.dialog.notify_on_cancel,\n        state: data.dialog.state,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            submitInteractiveDialog,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InteractiveDialog);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n//import {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport BotBadge from 'components/widgets/badges/bot_badge';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class UserListRow extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        status: PropTypes.string,\n        extraInfo: PropTypes.arrayOf(PropTypes.object),\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        index: PropTypes.number,\n        totalUsers: PropTypes.number,\n        userCount: PropTypes.number,\n    };\n\n    static defaultProps = {\n        extraInfo: [],\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n    };\n\n    render() {\n        let buttons = null;\n        if (this.props.actions) {\n            buttons = this.props.actions.map((Action, index) => {\n                return (\n                    <Action\n                        key={index.toString()}\n                        user={this.props.user}\n                        index={this.props.index}\n                        totalUsers={this.props.totalUsers}\n                        {...this.props.actionProps}\n                        {...this.props.actionUserProps}\n                    />\n                );\n            });\n        }\n\n        // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS\n        let email = this.props.user.email;\n        let emailStyle = 'more-modal__description';\n        let status;\n        if (this.props.extraInfo && this.props.extraInfo.length > 0) {\n            email = (\n                <FormattedMarkdownMessage\n                    id='admin.user_item.emailTitle'\n                    defaultMessage='**Email:** {email}'\n                    values={{\n                        email: this.props.user.email,\n                    }}\n                />\n            );\n            emailStyle = '';\n        } else if (this.props.user.status) {\n            status = this.props.user.status;\n        } else {\n            status = this.props.status;\n        }\n\n        if (this.props.user.is_bot) {\n            status = null;\n            email = null;\n        }\n\n        let userCountID = null;\n        let userCountEmail = null;\n        if (this.props.userCount >= 0) {\n            userCountID = Utils.createSafeId('userListRowName' + this.props.userCount);\n            userCountEmail = Utils.createSafeId('userListRowEmail' + this.props.userCount);\n        }\n\n        return (\n            <div\n                key={this.props.user.id}\n                className='more-modal__row'\n            >\n                <ProfilePicture\n\n                    // src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    src={this.props.user.avatar}\n                    status={status}\n                    size='lg'\n                />\n                <div\n                    className='more-modal__details'\n                    data-testid='userListItemDetails'\n                >\n                    <div\n                        id={userCountID}\n                        className='more-modal__name'\n                    >\n                        {Utils.displayEntireNameForUser(this.props.user)}\n                        <BotBadge\n                            className='badge-popoverlist'\n                            show={Boolean(this.props.user.is_bot)}\n                        />\n                        <GuestBadge\n                            className='badge-popoverlist'\n                            show={Utils.isGuest(this.props.user)}\n                        />\n                    </div>\n                    <div\n                        id={userCountEmail}\n                        className={emailStyle}\n                    >\n                        {email}\n                    </div>\n                    {this.props.extraInfo}\n                </div>\n                <div\n                    data-testid='userListItemActions'\n                    className='more-modal__actions'\n                >\n                    {buttons}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport UserListRow from './user_list_row.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const user = ownProps.user || {};\n    return {\n        status: getStatusForUserId(state, user.id),\n    };\n}\n\nexport default connect(mapStateToProps)(UserListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport LoadingScreen from 'components/loading_screen';\n\nimport UserListRow from './user_list_row';\n\nexport default class UserList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        extraInfo: PropTypes.object,\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n\n        // the type of user list row to render\n        rowComponentType: PropTypes.func,\n    }\n\n    static defaultProps = {\n        users: [],\n        extraInfo: {},\n        actions: [],\n        actionProps: {},\n        rowComponentType: UserListRow,\n    }\n\n    scrollToTop = () => {\n        if (this.refs.container) {\n            this.refs.container.scrollTop = 0;\n        }\n    }\n\n    render() {\n        const users = this.props.users;\n        const RowComponentType = this.props.rowComponentType;\n\n        let content;\n        if (users == null) {\n            return <LoadingScreen/>;\n        } else if (users.length > 0) {\n            content = users.map((user, index) => {\n                return (\n                    <RowComponentType\n                        key={user.id}\n                        user={user}\n                        extraInfo={this.props.extraInfo[user.id]}\n                        actions={this.props.actions}\n                        actionProps={this.props.actionProps}\n                        actionUserProps={this.props.actionUserProps[user.id]}\n                        index={index}\n                        totalUsers={users.length}\n                        userCount={(index >= 0 && index < Constants.TEST_ID_COUNT) ? index : -1}\n                    />\n                );\n            });\n        } else {\n            content = (\n                <div\n                    key='no-users-found'\n                    className='more-modal__placeholder-row'\n                    data-testid='noUsersFound'\n                >\n                    <p>\n                        <FormattedMessage\n                            id='user_list.notFound'\n                            defaultMessage='No users found'\n                        />\n                    </p>\n                </div>\n            );\n        }\n\n        return (\n            <div ref='container'>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport QuickInput from 'components/quick_input';\nimport UserList from 'components/user_list.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n';\n\nconst NEXT_BUTTON_TIMEOUT = 500;\n\nexport default class SearchableUserList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        extraInfo: PropTypes.object,\n        nextPage: PropTypes.func.isRequired,\n        previousPage: PropTypes.func.isRequired,\n        search: PropTypes.func.isRequired,\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        focusOnMount: PropTypes.bool,\n        renderCount: PropTypes.func,\n        filter: PropTypes.string,\n        renderFilterRow: PropTypes.func,\n\n        page: PropTypes.number.isRequired,\n        term: PropTypes.string.isRequired,\n        onTermChange: PropTypes.func.isRequired,\n\n        // the type of user list row to render\n        rowComponentType: PropTypes.func,\n    };\n\n    static defaultProps = {\n        users: [],\n        usersPerPage: 50, // eslint-disable-line no-magic-numbers\n        extraInfo: {},\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n        showTeamToggle: false,\n        focusOnMount: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        this.focusSearchBar();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.page !== prevProps.page || this.props.term !== prevProps.term) {\n            this.refs.userList.scrollToTop();\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.nextTimeoutId);\n    }\n\n    nextPage = (e) => {\n        e.preventDefault();\n\n        this.setState({nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT);\n\n        this.props.nextPage();\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    previousPage = (e) => {\n        e.preventDefault();\n\n        this.props.previousPage();\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    focusSearchBar = () => {\n        if (this.props.focusOnMount) {\n            this.refs.filter.focus();\n        }\n    }\n\n    handleInput = (e) => {\n        this.props.onTermChange(e.target.value);\n        this.props.search(e.target.value);\n    }\n\n    renderCount = (users) => {\n        if (!users) {\n            return null;\n        }\n\n        if (this.props.filter) {\n            return null;\n        }\n\n        const count = users.length;\n        const total = this.props.total;\n        const isSearch = Boolean(this.props.term);\n\n        let startCount;\n        let endCount;\n        if (isSearch) {\n            startCount = -1;\n            endCount = -1;\n        } else {\n            startCount = this.props.page * this.props.usersPerPage;\n            endCount = Math.min(startCount + this.props.usersPerPage, total);\n        }\n\n        if (this.props.renderCount) {\n            return this.props.renderCount(count, this.props.total, startCount, endCount, isSearch);\n        }\n\n        if (this.props.total) {\n            if (isSearch) {\n                return (\n                    <FormattedMessage\n                        id='filtered_user_list.countTotal'\n                        defaultMessage='{count, number} {count, plural, one {member} other {members}} of {total, number} total'\n                        values={{\n                            count,\n                            total,\n                        }}\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='filtered_user_list.countTotalPage'\n                    defaultMessage='{startCount, number} - {endCount, number} {count, plural, one {member} other {members}} of {total, number} total'\n                    values={{\n                        count,\n                        startCount: startCount + 1,\n                        endCount,\n                        total,\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        let nextButton;\n        let previousButton;\n        let usersToDisplay;\n\n        if (this.props.term || !this.props.users) {\n            usersToDisplay = this.props.users;\n        } else if (!this.props.term) {\n            const pageStart = this.props.page * this.props.usersPerPage;\n            const pageEnd = pageStart + this.props.usersPerPage;\n            usersToDisplay = this.props.users.slice(pageStart, pageEnd);\n\n            if (pageEnd < this.props.users.length) {\n                nextButton = (\n                    <button\n                        id='searchableUserListNextBtn'\n                        className='btn btn-link filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                    >\n                        <FormattedMessage\n                            id='filtered_user_list.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.props.page > 0) {\n                previousButton = (\n                    <button\n                        id='searchableUserListPrevBtn'\n                        className='btn btn-link filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                    >\n                        <FormattedMessage\n                            id='filtered_user_list.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        let filterRow;\n        if (this.props.renderFilterRow) {\n            filterRow = this.props.renderFilterRow(this.handleInput);\n        } else {\n            filterRow = (\n                <div className='col-xs-12'>\n                    <label\n                        className='hidden-label'\n                        htmlFor='searchUsersInput'\n                    >\n                        <FormattedMessage\n                            id='filtered_user_list.search'\n                            defaultMessage='Search users'\n                        />\n                    </label>\n                    <QuickInput\n                        id='searchUsersInput'\n                        ref='filter'\n                        className='form-control filter-textbox'\n                        placeholder={{id: t('filtered_user_list.search'), defaultMessage: 'Search users'}}\n                        inputComponent={LocalizedInput}\n                        value={this.props.term}\n                        onInput={this.handleInput}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='filtered-user-list'>\n                <div className='filter-row'>\n                    {filterRow}\n                    <div className='col-sm-12'>\n                        <span\n                            id='searchableUserListTotal'\n                            className='member-count pull-left'\n                            aria-live='polite'\n                        >\n                            {this.renderCount(usersToDisplay)}\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__list'>\n                    <UserList\n                        ref='userList'\n                        users={usersToDisplay}\n                        extraInfo={this.props.extraInfo}\n                        actions={this.props.actions}\n                        actionProps={this.props.actionProps}\n                        actionUserProps={this.props.actionUserProps}\n                        rowComponentType={this.props.rowComponentType}\n                    />\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay} from 'react-bootstrap';\n\n// import {Client4} from 'mattermost-redux/client';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport ProfilePopover from 'components/profile_popover';\n\nimport {popOverOverlayPosition} from 'utils/position_utils.tsx';\nconst spaceRequiredForPopOver = 300;\n\nexport default class AtMention extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        currentUserId: PropTypes.string.isRequired,\n        hasMention: PropTypes.bool,\n        disableHighlight: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        mentionName: PropTypes.string.isRequired,\n        teammateNameDisplay: PropTypes.string.isRequired,\n        usersByUsername: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n        isRHS: false,\n        hasMention: false,\n        disableHighlight: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n        };\n\n        this.overlayRef = React.createRef();\n    }\n\n    handleClick = (e) => {\n        const targetBounds = this.overlayRef.current.getBoundingClientRect();\n        const placement = popOverOverlayPosition(targetBounds, window.innerHeight, spaceRequiredForPopOver);\n\n        this.setState({target: e.target, show: !this.state.show, placement});\n    }\n\n    hideOverlay = () => {\n        this.setState({show: false});\n    }\n\n    getUserFromMentionName(props) {\n        const usersByUsername = props.usersByUsername;\n        let mentionName = props.mentionName.toLowerCase();\n\n        while (mentionName.length > 0) {\n            if (usersByUsername.hasOwnProperty(mentionName)) {\n                return usersByUsername[mentionName];\n            }\n\n            // Repeatedly trim off trailing punctuation in case this is at the end of a sentence\n            if ((/[._-]$/).test(mentionName)) {\n                mentionName = mentionName.substring(0, mentionName.length - 1);\n            } else {\n                break;\n            }\n        }\n\n        return '';\n    }\n\n    render() {\n        const user = this.getUserFromMentionName(this.props);\n        if (!user) {\n            return <React.Fragment>{this.props.children}</React.Fragment>;\n        }\n\n        const suffix = this.props.mentionName.substring(user.username.length);\n\n        let className = 'mention-link';\n        if (!this.props.disableHighlight && user.id === this.props.currentUserId) {\n            className += ' mention--highlight';\n        }\n\n        return (\n            <span>\n                <Overlay\n                    placement={this.state.placement}\n                    show={this.state.show}\n                    target={this.state.target}\n                    rootClose={true}\n                    onHide={this.hideOverlay}\n                >\n                    <ProfilePopover\n                        className='user-profile-popover'\n                        userId={user.id}\n\n                        //src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                        src={user.avatar}\n                        isRHS={this.props.isRHS}\n                        hasMention={this.props.hasMention}\n                        hide={this.hideOverlay}\n                    />\n                </Overlay>\n                <a\n                    className={className}\n                    onClick={this.handleClick}\n                    ref={this.overlayRef}\n                >\n                    {'@' + displayUsername(user, this.props.teammateNameDisplay)}\n                </a>\n                {suffix}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId, getUsersByUsername} from 'mattermost-redux/selectors/entities/users';\n\nimport AtMention from './at_mention.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        teammateNameDisplay: getTeammateNameDisplaySetting(state),\n        usersByUsername: getUsersByUsername(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AtMention);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class ModalController extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object that has map of modal's id and element\n         */\n        modals: PropTypes.object.isRequired,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n\n            /**\n             * Action creator to close modal\n             */\n            closeModal: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    render() {\n        const {modals, ...props} = this.props;\n        const {modalState} = modals;\n\n        if (!modals) {\n            return <div/>;\n        }\n\n        const modalOutput = [];\n\n        for (const modalId in modalState) {\n            if (modalState.hasOwnProperty(modalId)) {\n                const modal = modalState[modalId];\n                if (modal.open) {\n                    const modalComponent = React.createElement(modal.dialogType, Object.assign({}, modal.dialogProps, {\n                        onHide: props.actions.closeModal.bind(this, modalId),\n                        key: `${modalId}_modal`,\n                    }));\n\n                    modalOutput.push(modalComponent);\n                }\n            }\n        }\n\n        return (\n            <div>{modalOutput}</div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {closeModal} from 'actions/views/modals';\n\nimport ModalController from './modal_controller.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        modals: state.views.modals,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport reducerRegistry from 'mattermost-redux/store/reducer_registry';\n\nimport {\n    registerPluginWebSocketEvent,\n    unregisterPluginWebSocketEvent,\n    registerPluginReconnectHandler,\n    unregisterPluginReconnectHandler,\n} from 'actions/websocket_actions.jsx';\n\nimport {showRHSPlugin, hideRHSPlugin, toggleRHSPlugin} from 'actions/views/rhs';\n\nimport {\n    registerPluginTranslationsSource,\n} from 'actions/views/root';\n\nimport {\n    registerAdminConsolePlugin,\n    unregisterAdminConsolePlugin,\n    registerAdminConsoleCustomSetting,\n} from 'actions/admin_actions';\n\nimport store from 'stores/redux_store.jsx';\nimport {ActionTypes} from 'utils/constants';\nimport {generateId} from 'utils/utils.jsx';\n\nfunction dispatchPluginComponentAction(name, pluginId, component, id = generateId()) {\n    store.dispatch({\n        type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n        name,\n        data: {\n            id,\n            pluginId,\n            component,\n        },\n    });\n\n    return id;\n}\n\nconst resolveReactElement = (element) => {\n    if (typeof element === 'function') {\n        // Allow element to be passed as the name of the component, instead of a React element.\n        return React.createElement(element);\n    }\n\n    return element;\n};\n\nexport default class PluginRegistry {\n    constructor(id) {\n        this.id = id;\n    }\n\n    // Register a component at the root of the channel view of the app.\n    // Accepts a React component. Returns a unique identifier.\n    registerRootComponent(component) {\n        return dispatchPluginComponentAction('Root', this.id, component);\n    }\n\n    // Register a component in the user attributes section of the profile popover (hovercard), below the default user attributes.\n    // Accepts a React component. Returns a unique identifier.\n    registerPopoverUserAttributesComponent(component) {\n        return dispatchPluginComponentAction('PopoverUserAttributes', this.id, component);\n    }\n\n    // Register a component in the user actions of the profile popover (hovercard), below the default actions.\n    // Accepts a React component. Returns a unique identifier.\n    registerPopoverUserActionsComponent(component) {\n        return dispatchPluginComponentAction('PopoverUserActions', this.id, component);\n    }\n\n    // Register a component fixed to the top of the left-hand channel sidebar.\n    // Accepts a React component. Returns a unique identifier.\n    registerLeftSidebarHeaderComponent(component) {\n        return dispatchPluginComponentAction('LeftSidebarHeader', this.id, component);\n    }\n\n    // Register a component fixed to the bottom of the team sidebar. Does not render if\n    // user is only on one team and the team sidebar is not shown.\n    // Accepts a React component. Returns a unique identifier.\n    registerBottomTeamSidebarComponent(component) {\n        return dispatchPluginComponentAction('BottomTeamSidebar', this.id, component);\n    }\n\n    // Register a component fixed to the bottom of the post message.\n    // Accepts a React component. Returns a unique identifier.\n    registerPostMessageAttachmentComponent(component) {\n        return dispatchPluginComponentAction('PostMessageAttachment', this.id, component);\n    }\n\n    // Register a component to show as a tooltip when a user hovers on a link in a post.\n    // Accepts a React component. Returns a unique identifier.\n    registerLinkTooltipComponent(component) {\n        return dispatchPluginComponentAction('LinkTooltip', this.id, component);\n    }\n\n    // Add a button to the channel header. If there are more than one buttons registered by any\n    // plugin, a dropdown menu is created to contain all the plugin buttons.\n    // Accepts the following:\n    // - icon - React element to use as the button's icon\n    // - action - a function called when the button is clicked, passed the channel and channel member as arguments\n    // - dropdown_text - string or React element shown for the dropdown button description\n    // - tooltip_text - string shown for tooltip appear on hover\n    registerChannelHeaderButtonAction(icon, action, dropdownText, tooltipText) {\n        const id = generateId();\n\n        const data = {\n            id,\n            pluginId: this.id,\n            icon: resolveReactElement(icon),\n            action,\n            dropdownText: resolveReactElement(dropdownText),\n            tooltipText,\n        };\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'ChannelHeaderButton',\n            data,\n        });\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MobileChannelHeaderButton',\n            data,\n        });\n\n        return id;\n    }\n\n    // Register a component to render a custom body for posts with a specific type.\n    // Custom post types must be prefixed with 'custom_'.\n    // Custom post types can also apply for ephemeral posts.\n    // Accepts a string type and a component.\n    // Returns a unique identifier.\n    registerPostTypeComponent(type, component) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_POST_COMPONENT,\n            data: {\n                id,\n                pluginId: this.id,\n                type,\n                component,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a component to render a custom body for post cards with a specific type.\n    // Custom post types must be prefixed with 'custom_'.\n    // Accepts a string type and a component.\n    // Returns a unique identifier.\n    registerPostCardTypeComponent(type, component) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_POST_CARD_COMPONENT,\n            data: {\n                id,\n                pluginId: this.id,\n                type,\n                component,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a component to render a custom embed preview for post links.\n    // Accepts the following:\n    // - match - A function that receives the embed object and returns a\n    //   boolean indicating if the plugin is able to process it.\n    //   The embed object contains the embed `type`, the `url` of the post link\n    //   and in some cases, a `data` object with information related to the\n    //   link (the opengraph or the image details, for example).\n    // - component - The component that renders the embed view for the link\n    // - toggleable - A boolean indicating if the embed view should be collapsable\n    // Returns a unique identifier.\n    registerPostWillRenderEmbedComponent(match, component, toggleable) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'PostWillRenderEmbedComponent',\n            data: {\n                id,\n                pluginId: this.id,\n                component,\n                match,\n                toggleable,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a main menu list item by providing some text and an action function.\n    // Accepts the following:\n    // - text - A string or React element to display in the menu\n    // - action - A function to trigger when component is clicked on\n    // - mobileIcon - A React element to display as the icon in the menu in mobile view\n    // Returns a unique identifier.\n    registerMainMenuAction(text, action, mobileIcon) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MainMenu',\n            data: {\n                id,\n                pluginId: this.id,\n                text: resolveReactElement(text),\n                action,\n                mobileIcon: resolveReactElement(mobileIcon),\n            },\n        });\n\n        return id;\n    }\n\n    // Register a channel menu list item by providing some text and an action function.\n    // Accepts the following:\n    // - text - A string or React element to display in the menu\n    // - action - A function that receives the channelId and is called when the menu items is clicked.\n    // Returns a unique identifier.\n    registerChannelHeaderMenuAction(text, action) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'ChannelHeader',\n            data: {\n                id,\n                pluginId: this.id,\n                text: resolveReactElement(text),\n                action,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a post menu list item by providing some text and an action function.\n    // Accepts the following:\n    // - text - A string or React element to display in the menu\n    // - action - A function to trigger when component is clicked on\n    // - filter - A function whether to apply the plugin into the post' dropdown menu\n    // Returns a unique identifier.\n    registerPostDropdownMenuAction(text, action, filter) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'PostDropdownMenu',\n            data: {\n                id,\n                pluginId: this.id,\n                text: resolveReactElement(text),\n                action,\n                filter,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a post sub menu list item by providing some text and an action function.\n    // Accepts the following:\n    // - text - A string or React element to display in the menu\n    // - action - A function to trigger when component is clicked on\n    // - filter - A function whether to apply the plugin into the post' dropdown menu\n    //\n    // Returns an unique identifier for the root submenu, and a function to register submenu items.\n    // At this time, only one level of nesting is allowed to avoid rendering issue in the RHS.\n    registerPostDropdownSubMenuAction(text, action, filter) {\n        function registerMenuItem(pluginId, id, parentMenuId, innerText, innerAction, innerFilter) {\n            store.dispatch({\n                type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n                name: 'PostDropdownMenu',\n                data: {\n                    id,\n                    parentMenuId,\n                    pluginId,\n                    text: resolveReactElement(innerText),\n                    subMenu: [],\n                    action: innerAction,\n                    filter: innerFilter,\n                },\n            });\n            return function registerSubMenuItem(t, a, f) {\n                if (parentMenuId) {\n                    throw new Error('Submenus are currently limited to a single level.');\n                }\n\n                return registerMenuItem(pluginId, generateId(), id, t, a, f);\n            };\n        }\n        const id = generateId();\n        return {id, rootRegisterMenuItem: registerMenuItem(this.id, id, null, text, action, filter)};\n    }\n\n    // Register a component at the bottom of the post dropdown menu.\n    // Accepts a React component. Returns a unique identifier.\n    registerPostDropdownMenuComponent(component) {\n        return dispatchPluginComponentAction('PostDropdownMenuItem', this.id, component);\n    }\n\n    // Register a file upload method by providing some text, an icon, and an action function.\n    // Accepts the following:\n    // - icon - JSX element to use as the button's icon\n    // - text - A string or JSX element to display in the file upload menu\n    // - action - A function to trigger when the menu item is selected.\n    // Returns a unique identifier.\n    registerFileUploadMethod(icon, action, text) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'FileUploadMethod',\n            data: {\n                id,\n                pluginId: this.id,\n                text,\n                action,\n                icon,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a hook to intercept file uploads before they take place.\n    // Accepts a function to run before files get uploaded. Receives an array of\n    // files and a function to upload files at a later time as arguments. Must\n    // return an object that can contain two properties:\n    // - message - An error message to display, leave blank or null to display no message\n    // - files - Modified array of files to upload, set to null to reject all files\n    // Returns a unique identifier.\n    registerFilesWillUploadHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'FilesWillUploadHook',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Unregister a component, action or hook using the unique identifier returned after registration.\n    // Accepts a string id.\n    // Returns undefined in all cases.\n    unregisterComponent(componentId) {\n        store.dispatch({\n            type: ActionTypes.REMOVED_PLUGIN_COMPONENT,\n            id: componentId,\n        });\n    }\n\n    // Unregister a component that provided a custom body for posts with a specific type.\n    // Accepts a string id.\n    // Returns undefined in all cases.\n    unregisterPostTypeComponent(componentId) {\n        store.dispatch({\n            type: ActionTypes.REMOVED_PLUGIN_POST_COMPONENT,\n            id: componentId,\n        });\n    }\n\n    // Register a reducer against the Redux store. It will be accessible in redux state\n    // under \"state['plugins-<yourpluginid>']\"\n    // Accepts a reducer. Returns undefined.\n    registerReducer(reducer) {\n        reducerRegistry.register('plugins-' + this.id, reducer);\n    }\n\n    // Register a handler for WebSocket events.\n    // Accepts the following:\n    // - event - the event type, can be a regular server event or an event from plugins.\n    // Plugin events will have \"custom_<pluginid>_\" prepended\n    // - handler - a function to handle the event, receives the event message as an argument\n    // Returns undefined.\n    registerWebSocketEventHandler(event, handler) {\n        registerPluginWebSocketEvent(this.id, event, handler);\n    }\n\n    // Unregister a handler for a custom WebSocket event.\n    // Accepts a string event type.\n    // Returns undefined.\n    unregisterWebSocketEventHandler(event) {\n        unregisterPluginWebSocketEvent(this.id, event);\n    }\n\n    // Register a handler that will be called when the app reconnects to the\n    // internet after previously disconnecting.\n    // Accepts a function to handle the event. Returns undefined.\n    registerReconnectHandler(handler) {\n        registerPluginReconnectHandler(this.id, handler);\n    }\n\n    // Unregister a previously registered reconnect handler.\n    // Returns undefined.\n    unregisterReconnectHandler() {\n        unregisterPluginReconnectHandler(this.id);\n    }\n\n    // Register a hook that will be called when a message is posted by the user before it\n    // is sent to the server. Accepts a function that receives the post as an argument.\n    //\n    // To reject a post, return an object containing an error such as\n    //     {error: {message: 'Rejected'}}\n    // To modify or allow the post without modifcation, return an object containing the post\n    // such as\n    //     {post: {...}}\n    //\n    // If the hook function is asynchronous, the message will not be sent to the server\n    // until the hook returns.\n    registerMessageWillBePostedHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MessageWillBePosted',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a hook that will be called when a slash command is posted by the user before it\n    // is sent to the server. Accepts a function that receives the message (string) and the args\n    // (object) as arguments.\n    // The args object is:\n    //        {\n    //            channel_id: channelId,\n    //            team_id: teamId,\n    //            root_id: rootId,\n    //            parent_id: rootId,\n    //        }\n    //\n    // To reject a command, return an object containing an error:\n    //     {error: {message: 'Rejected'}}\n    // To ignore a command, return an empty object (to prevent an error from being displayed):\n    //     {}\n    // To modify or allow the command without modification, return an object containing the new message\n    // and args. It is not likely that you will need to change the args, so return the object that was provided:\n    //     {message: {...}, args}\n    //\n    // If the hook function is asynchronous, the command will not be sent to the server\n    // until the hook returns.\n    registerSlashCommandWillBePostedHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'SlashCommandWillBePosted',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a hook that will be called before a message is formatted into Markdown.\n    // Accepts a function that receives the unmodified post and the message (potentially\n    // already modified by other hooks) as arguments. This function must return a string\n    // message that will be formatted.\n    // Returns a unique identifier.\n    registerMessageWillFormatHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MessageWillFormat',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a component to override file previews. Accepts a function to run before file is\n    // previewed and a react component to be rendered as the file preview.\n    // - override - A function to check whether preview needs to be overridden. Receives fileInfo and post as arguments.\n    // Returns true is preview should be overridden and false otherwise.\n    // - component - A react component to display instead of original preview. Receives fileInfo and post as props.\n    // Returns a unique identifier.\n    // Only one plugin can override a file preview at a time. If two plugins try to override the same file preview, the first plugin will perform the override and the second will not. Plugin precedence is ordered alphabetically by plugin ID.\n    registerFilePreviewComponent(override, component) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'FilePreview',\n            data: {\n                id,\n                pluginId: this.id,\n                override,\n                component,\n            },\n        });\n\n        return id;\n    }\n\n    registerTranslations(getTranslationsForLocale) {\n        store.dispatch(registerPluginTranslationsSource(this.id, getTranslationsForLocale));\n    }\n\n    // Register a admin console definitions override function\n    // Note that this is a low-level interface primarily meant for internal use, and is not subject\n    // to semver guarantees. It may change in the future.\n    // Accepts the following:\n    // - func - A function that recieve the admin console config definitions and return a new\n    //          version of it, which is used for build the admin console.\n    // Each plugin can register at most one admin console plugin function, with newer registrations\n    // replacing older ones.\n    registerAdminConsolePlugin(func) {\n        store.dispatch(registerAdminConsolePlugin(this.id, func));\n    }\n\n    // Register a custom React component to manage the plugin configuration for the given setting key.\n    // Accepts the following:\n    // - key - A key specified in the settings_schema.settings block of the plugin's manifest.\n    // - component - A react component to render in place of the default handling.\n    // - options - Object for the following available options to display the setting:\n    //     showTitle - Optional boolean that if true the display_name of the setting will be rendered\n    // on the left column of the settings page and the registered component will be displayed on the\n    // available space in the right column.\n    registerAdminConsoleCustomSetting(key, component, {showTitle} = {}) {\n        store.dispatch(registerAdminConsoleCustomSetting(this.id, key, component, {showTitle}));\n    }\n\n    // Unregister a previously registered admin console definition override function.\n    // Returns undefined.\n    unregisterAdminConsolePlugin() {\n        store.dispatch(unregisterAdminConsolePlugin(this.id));\n    }\n\n    // Register a Right-Hand Sidebar component by providing a title for the right hand component.\n    // Accepts the following:\n    // - title - A string or JSX element to display as a title for the RHS.\n    // - component - A react component to display in the Right-Hand Sidebar.\n    // Returns:\n    // - id: a unique identifier\n    // - showRHSPlugin: the action to dispatch that will open the RHS.\n    // - hideRHSPlugin: the action to dispatch that will close the RHS\n    // - toggleRHSPlugin: the action to dispatch that will toggle the RHS\n    registerRightHandSidebarComponent(component, title) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'RightHandSidebarComponent',\n            data: {\n                id,\n                pluginId: this.id,\n                component,\n                title,\n            },\n        });\n\n        return {id, showRHSPlugin: showRHSPlugin(id), hideRHSPlugin: hideRHSPlugin(id), toggleRHSPlugin: toggleRHSPlugin(id)};\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport regeneratorRuntime from 'regenerator-runtime';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport store from 'stores/redux_store.jsx';\nimport {ActionTypes} from 'utils/constants.jsx';\nimport {getSiteURL} from 'utils/url';\nimport PluginRegistry from 'plugins/registry';\nimport {unregisterAllPluginWebSocketEvents, unregisterPluginReconnectHandler} from 'actions/websocket_actions.jsx';\nimport {unregisterPluginTranslationsSource} from 'actions/views/root';\nimport {unregisterAdminConsolePlugin} from 'actions/admin_actions';\n\n// Plugins may have been compiled with the regenerator runtime. Ensure this remains available\n// as a global export even though the webapp does not depend on same.\nwindow.regeneratorRuntime = regeneratorRuntime;\n\n// plugins records all active web app plugins by id.\nwindow.plugins = {};\n\n// registerPlugin, on the global window object, should be invoked by a plugin's web app bundle as\n// it is loaded.\n//\n// During the beta, plugins manipulated the global window.plugins data structure directly. This\n// remains possible, but is officially deprecated and may be removed in a future release.\nfunction registerPlugin(id, plugin) {\n    window.plugins[id] = plugin;\n}\nwindow.registerPlugin = registerPlugin;\n\n// initializePlugins queries the server for all enabled plugins and loads each in turn.\nexport async function initializePlugins() {\n    if (store.getState().entities.general.config.PluginsEnabled !== 'true') {\n        return;\n    }\n\n    const {data, error} = await getPlugins()(store.dispatch);\n    if (error) {\n        console.error(error); //eslint-disable-line no-console\n        return;\n    }\n\n    if (data == null || data.length === 0) {\n        return;\n    }\n\n    await Promise.all(data.map((m) => {\n        return loadPlugin(m).catch((loadErr) => {\n            console.error(loadErr.message); //eslint-disable-line no-console\n        });\n    }));\n}\n\n// getPlugins queries the server for all enabled plugins\nexport function getPlugins() {\n    return async (dispatch) => {\n        let plugins;\n        try {\n            plugins = await Client4.getWebappPlugins();\n        } catch (error) {\n            plugins = [];\n        }\n\n        dispatch({type: ActionTypes.RECEIVED_WEBAPP_PLUGINS, data: plugins});\n\n        return {data: plugins};\n    };\n}\n\n// loadedPlugins tracks which plugins have been added as script tags to the page\nconst loadedPlugins = {};\n\n// loadPlugin fetches the web app bundle described by the given manifest, waits for the bundle to\n// load, and then ensures the plugin has been initialized.\nexport function loadPlugin(manifest) {\n    return new Promise((resolve, reject) => {\n        // Don't load it again if previously loaded\n        const oldManifest = loadedPlugins[manifest.id];\n        if (oldManifest && oldManifest.webapp.bundle_path === manifest.webapp.bundle_path) {\n            resolve();\n            return;\n        }\n\n        if (oldManifest) {\n            // upgrading, perform cleanup\n            store.dispatch({type: ActionTypes.REMOVED_WEBAPP_PLUGIN, data: manifest});\n        }\n\n        function onLoad() {\n            initializePlugin(manifest);\n            console.log('Loaded ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n            resolve();\n        }\n\n        function onError() {\n            reject(new Error('Unable to load bundle for plugin ' + manifest.id));\n        }\n\n        // Backwards compatibility for old plugins\n        let bundlePath = manifest.webapp.bundle_path;\n        if (bundlePath.includes('/static/') && !bundlePath.includes('/static/plugins/')) {\n            bundlePath = bundlePath.replace('/static/', '/static/plugins/');\n        }\n\n        console.log('Loading ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n\n        const script = document.createElement('script');\n        script.id = 'plugin_' + manifest.id;\n        script.type = 'text/javascript';\n        script.src = getSiteURL() + bundlePath;\n        script.onload = onLoad;\n        script.onerror = onError;\n\n        document.getElementsByTagName('head')[0].appendChild(script);\n        loadedPlugins[manifest.id] = manifest;\n    });\n}\n\n// initializePlugin creates a registry specific to the plugin and invokes any initialize function\n// on the registered plugin class.\nfunction initializePlugin(manifest) {\n    // Initialize the plugin\n    const plugin = window.plugins[manifest.id];\n    const registry = new PluginRegistry(manifest.id);\n    if (plugin && plugin.initialize) {\n        plugin.initialize(registry, store);\n    }\n}\n\n// removePlugin triggers any uninitialize callback on the registered plugin, unregisters any\n// event handlers, and removes the plugin script from the DOM entirely. The plugin is responsible\n// for removing any of its registered components.\nexport function removePlugin(manifest) {\n    if (!loadedPlugins[manifest.id]) {\n        return;\n    }\n    console.log('Removing ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n\n    delete loadedPlugins[manifest.id];\n\n    store.dispatch({type: ActionTypes.REMOVED_WEBAPP_PLUGIN, data: manifest});\n\n    const plugin = window.plugins[manifest.id];\n    if (plugin && plugin.uninitialize) {\n        plugin.uninitialize();\n\n    // Support the deprecated deinitialize callback from the plugins beta.\n    } else if (plugin && plugin.deinitialize) {\n        plugin.deinitialize();\n    }\n    unregisterAllPluginWebSocketEvents(manifest.id);\n    unregisterPluginReconnectHandler(manifest.id);\n    store.dispatch(unregisterAdminConsolePlugin(manifest.id));\n    unregisterPluginTranslationsSource(manifest.id);\n    const script = document.getElementById('plugin_' + manifest.id);\n    if (!script) {\n        return;\n    }\n    script.parentNode.removeChild(script);\n    console.log('Removed ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n}\n\n// loadPluginsIfNecessary synchronizes the current state of loaded plugins with that of the server,\n// loading any newly added plugins and unloading any removed ones.\nexport async function loadPluginsIfNecessary() {\n    if (store.getState().entities.general.config.PluginsEnabled !== 'true') {\n        return;\n    }\n\n    const oldManifests = store.getState().plugins.plugins;\n\n    const {error} = await getPlugins()(store.dispatch);\n    if (error) {\n        console.error(error); //eslint-disable-line no-console\n        return;\n    }\n\n    const newManifests = store.getState().plugins.plugins;\n\n    // Get new plugins and update existing plugins if version changed\n    Object.values(newManifests).forEach((newManifest) => {\n        const oldManifest = oldManifests[newManifest.id];\n        if (!oldManifest || oldManifest.version !== newManifest.version) {\n            loadPlugin(newManifest).catch((loadErr) => {\n                console.error(loadErr.message); //eslint-disable-line no-console\n            });\n        }\n    });\n\n    // Remove old plugins\n    Object.keys(oldManifests).forEach((id) => {\n        if (!newManifests.hasOwnProperty(id)) {\n            const oldManifest = oldManifests[id];\n            store.dispatch({type: ActionTypes.REMOVED_WEBAPP_PLUGIN, data: oldManifest});\n            removePlugin(oldManifest);\n        }\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport FastClick from 'fastclick';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\nimport {setUrl, setStoreFromLocalData} from 'mattermost-redux/actions/general';\nimport {setSystemEmojis} from 'mattermost-redux/actions/emojis';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport * as UserAgent from 'utils/user_agent';\nimport {EmojiIndicesByAlias} from 'utils/emoji.jsx';\nimport {trackLoadTime} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {loadRecentlyUsedCustomEmojis} from 'actions/emoji_actions.jsx';\nimport {initializePlugins} from 'plugins';\nimport 'plugins/export.js';\nimport Constants, {StoragePrefixes} from 'utils/constants';\nimport {HFTRoute, LoggedInHFTRoute} from 'components/header_footer_template_route';\nimport IntlProvider from 'components/intl_provider';\nimport NeedsTeam from 'components/needs_team';\nimport PermalinkRedirector from 'components/permalink_redirector';\nimport {makeAsyncComponent} from 'components/async_load';\n\nconst LazyErrorPage = React.lazy(() => import('components/error_page'));\nconst LazyLoginController = React.lazy(() => import('components/login/login_controller'));\nconst LazyAdminConsole = React.lazy(() => import('components/admin_console'));\nconst LazyLoggedIn = React.lazy(() => import('components/logged_in'));\nconst LazyPasswordResetSendLink = React.lazy(() => import('components/password_reset_send_link'));\nconst LazyPasswordResetForm = React.lazy(() => import('components/password_reset_form'));\nconst LazySignupController = React.lazy(() => import('components/signup/signup_controller'));\nconst LazySignupEmail = React.lazy(() => import('components/signup/signup_email'));\nconst LazyTermsOfService = React.lazy(() => import('components/terms_of_service'));\nconst LazyShouldVerifyEmail = React.lazy(() => import('components/should_verify_email'));\nconst LazyDoVerifyEmail = React.lazy(() => import('components/do_verify_email'));\nconst LazyClaimController = React.lazy(() => import('components/claim'));\nconst LazyHelpController = React.lazy(() => import('components/help/help_controller'));\nconst LazyLinkingLandingPage = React.lazy(() => import('components/linking_landing_page'));\nconst LazySelectTeam = React.lazy(() => import('components/select_team'));\nconst LazyAuthorize = React.lazy(() => import('components/authorize'));\nconst LazyCreateTeam = React.lazy(() => import('components/create_team'));\nconst LazyMfa = React.lazy(() => import('components/mfa/mfa_controller'));\n\nimport store from 'stores/redux_store.jsx';\nimport {getSiteURL} from 'utils/url';\nimport {enableDevModeFeatures, isDevMode} from 'utils/utils';\n\nimport A11yController from 'utils/a11y_controller';\n\nconst CreateTeam = makeAsyncComponent(LazyCreateTeam);\nconst ErrorPage = makeAsyncComponent(LazyErrorPage);\nconst TermsOfService = makeAsyncComponent(LazyTermsOfService);\nconst LoginController = makeAsyncComponent(LazyLoginController);\nconst AdminConsole = makeAsyncComponent(LazyAdminConsole);\nconst LoggedIn = makeAsyncComponent(LazyLoggedIn);\nconst PasswordResetSendLink = makeAsyncComponent(LazyPasswordResetSendLink);\nconst PasswordResetForm = makeAsyncComponent(LazyPasswordResetForm);\nconst SignupController = makeAsyncComponent(LazySignupController);\nconst SignupEmail = makeAsyncComponent(LazySignupEmail);\nconst ShouldVerifyEmail = makeAsyncComponent(LazyShouldVerifyEmail);\nconst DoVerifyEmail = makeAsyncComponent(LazyDoVerifyEmail);\nconst ClaimController = makeAsyncComponent(LazyClaimController);\nconst HelpController = makeAsyncComponent(LazyHelpController);\nconst LinkingLandingPage = makeAsyncComponent(LazyLinkingLandingPage);\nconst SelectTeam = makeAsyncComponent(LazySelectTeam);\nconst Authorize = makeAsyncComponent(LazyAuthorize);\nconst Mfa = makeAsyncComponent(LazyMfa);\n\nconst LoggedInRoute = ({component: Component, ...rest}) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <LoggedIn {...props}>\n                <Component {...props}/>\n            </LoggedIn>\n        )}\n    />\n);\n\nexport default class Root extends React.Component {\n    static propTypes = {\n        diagnosticsEnabled: PropTypes.bool,\n        diagnosticId: PropTypes.string,\n        noAccounts: PropTypes.bool,\n        showTermsOfService: PropTypes.bool,\n        actions: PropTypes.shape({\n            loadMeAndConfig: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.currentCategoryFocus = 0;\n        this.currentSidebarFocus = 0;\n\n        let serverUrl = '';\n        let chatToken = '';\n        if ($.chat_token) {\n            chatToken = $.chat_token;\n        }\n\n        if ($.server_url) {\n            serverUrl = $.server_url;\n        }\n\n        if (process.env.CHAT_TOKEN) {//eslint-disable-line no-process-env\n            chatToken = process.env.CHAT_TOKEN;//eslint-disable-line no-process-env\n        }\n\n        if (process.env.SERVER_URL) { //eslint-disable-line no-process-env\n            serverUrl = process.env.SERVER_URL; //eslint-disable-line no-process-env\n        }\n\n        // Redux\n        setUrl(getSiteURL());\n        setStoreFromLocalData({\n            token: chatToken,\n            url: serverUrl\n        });\n\n        Client4.setToken(chatToken);\n\n        setSystemEmojis(EmojiIndicesByAlias);\n\n        // Force logout of all tabs if one tab is logged out\n        $(window).bind('storage', (e) => {\n            // when one tab on a browser logs out, it sets __logout__ in localStorage to trigger other tabs to log out\n            if (e.originalEvent.key === StoragePrefixes.LOGOUT && e.originalEvent.storageArea === localStorage && e.originalEvent.newValue) {\n                // make sure it isn't this tab that is sending the logout signal (only necessary for IE11)\n                if (BrowserStore.isSignallingLogout(e.originalEvent.newValue)) {\n                    return;\n                }\n\n                console.log('detected logout from a different tab'); //eslint-disable-line no-console\n                GlobalActions.emitUserLoggedOutEvent('/', false, false);\n            }\n\n            if (e.originalEvent.key === StoragePrefixes.LOGIN && e.originalEvent.storageArea === localStorage && e.originalEvent.newValue) {\n                // make sure it isn't this tab that is sending the logout signal (only necessary for IE11)\n                if (BrowserStore.isSignallingLogin(e.originalEvent.newValue)) {\n                    return;\n                }\n\n                console.log('detected login from a different tab'); //eslint-disable-line no-console\n                location.reload();\n            }\n        });\n\n        // Prevent drag and drop files from navigating away from the app\n        document.addEventListener('drop', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        document.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        // Fastclick\n        FastClick.attach(document.body);\n\n        this.state = {\n            configLoaded: false,\n        };\n\n        // Keyboard navigation for accessibility\n        if (!UserAgent.isInternetExplorer()) {\n            this.a11yController = new A11yController();\n        }\n    }\n\n    // shouldComponentUpdate() {\n    //     return true;\n    // }\n\n    onConfigLoaded = () => {\n        if (isDevMode()) {\n            enableDevModeFeatures();\n        }\n\n        const segmentKey = Constants.DIAGNOSTICS_SEGMENT_KEY;\n        const diagnosticId = this.props.diagnosticId;\n\n        /*eslint-disable */\n        if (segmentKey != null && segmentKey !== '' && !segmentKey.startsWith('placeholder') && this.props.diagnosticsEnabled) {\n            !function(){var analytics=global.window.analytics=global.window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(\"Segment snippet included twice.\");else{analytics.invoked=!0;analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"group\",\"track\",\"ready\",\"alias\",\"page\",\"once\",\"off\",\"on\"];analytics.factory=function(t){return function(...args){var e=Array.prototype.slice.call(args);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement(\"script\");e.type=\"text/javascript\";e.async=!0;e.src=(\"https:\"===document.location.protocol ? \"https://\":\"http://\")+\"cdn.segment.com/analytics.js/v1/\"+t+\"/analytics.min.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION=\"3.0.1\";\n                analytics.load(segmentKey);\n\n                analytics.identify(diagnosticId, {}, {\n                    context: {\n                        ip: '0.0.0.0',\n                    },\n                    page: {\n                        path: '',\n                        referrer: '',\n                        search: '',\n                        title: '',\n                        url: '',\n                    },\n                    anonymousId: '00000000000000000000000000',\n                });\n\n                analytics.page('ApplicationLoaded', {\n                        path: '',\n                        referrer: '',\n                        search: '',\n                        title: '',\n                        url: '',\n                    },\n                    {\n                        context: {\n                            ip: '0.0.0.0'\n                        },\n                        anonymousId: '00000000000000000000000000'\n                    });\n            }}();\n        }\n        /*eslint-enable */\n\n        if (this.props.location.pathname === '/' && this.props.noAccounts) {\n            this.props.history.push('/signup_user_complete');\n        }\n\n        initializePlugins().then(() => {\n            this.setState({configLoaded: true});\n        });\n\n        loadRecentlyUsedCustomEmojis()(store.dispatch, store.getState);\n\n        const iosDownloadLink = getConfig(store.getState()).IosAppDownloadLink;\n        const androidDownloadLink = getConfig(store.getState()).AndroidAppDownloadLink;\n\n        const toResetPasswordScreen = this.props.location.pathname === '/reset_password_complete';\n\n        // redirect to the mobile landing page if the user hasn't seen it before\n        let mobileLanding;\n        if (UserAgent.isAndroidWeb()) {\n            mobileLanding = androidDownloadLink;\n        } else if (UserAgent.isIosWeb()) {\n            mobileLanding = iosDownloadLink;\n        }\n\n        if (mobileLanding && !BrowserStore.hasSeenLandingPage() && !toResetPasswordScreen && !this.props.location.pathname.includes('/landing')) {\n            this.props.history.push('/landing#' + this.props.location.pathname + this.props.location.search);\n            BrowserStore.setLandingPageSeen(true);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.location.pathname === '/') {\n            if (this.props.noAccounts) {\n                prevProps.history.push('/signup_user_complete');\n            } else if (this.props.showTermsOfService) {\n                prevProps.history.push('/terms_of_service');\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.props.actions.loadMeAndConfig().then((response) => {\n            if (this.props.location.pathname === '/' && response[2] && response[2].data) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n            this.onConfigLoaded();\n        });\n        trackLoadTime();\n    }\n\n    componentWillUnmount() {\n        $(window).unbind('storage');\n    }\n\n    render() {\n        if (!this.state.configLoaded) {\n            return <div/>;\n        }\n\n        return (\n            <IntlProvider>\n                <Switch>\n                    <Route\n                        path={'/error'}\n                        component={ErrorPage}\n                    />\n                    <HFTRoute\n                        path={'/login'}\n                        component={LoginController}\n                    />\n                    <HFTRoute\n                        path={'/reset_password'}\n                        component={PasswordResetSendLink}\n                    />\n                    <HFTRoute\n                        path={'/reset_password_complete'}\n                        component={PasswordResetForm}\n                    />\n                    <HFTRoute\n                        path={'/signup_user_complete'}\n                        component={SignupController}\n                    />\n                    <HFTRoute\n                        path={'/signup_email'}\n                        component={SignupEmail}\n                    />\n                    <HFTRoute\n                        path={'/should_verify_email'}\n                        component={ShouldVerifyEmail}\n                    />\n                    <HFTRoute\n                        path={'/do_verify_email'}\n                        component={DoVerifyEmail}\n                    />\n                    <HFTRoute\n                        path={'/claim'}\n                        component={ClaimController}\n                    />\n                    <HFTRoute\n                        path={'/help'}\n                        component={HelpController}\n                    />\n                    <LoggedInRoute\n                        path={'/terms_of_service'}\n                        component={TermsOfService}\n                    />\n                    <Route\n                        path={'/landing'}\n                        component={LinkingLandingPage}\n                    />\n                    <LoggedInRoute\n                        path={'/admin_console'}\n                        component={AdminConsole}\n                    />\n                    <LoggedInHFTRoute\n                        path={'/select_team'}\n                        component={SelectTeam}\n                    />\n                    <LoggedInHFTRoute\n                        path={'/oauth/authorize'}\n                        component={Authorize}\n                    />\n                    <LoggedInHFTRoute\n                        path={'/create_team'}\n                        component={CreateTeam}\n                    />\n                    <LoggedInRoute\n                        path={'/mfa'}\n                        component={Mfa}\n                    />\n                    <LoggedInRoute\n                        path={['/_redirect/integrations*', '/_redirect/pl/:postid']}\n                        component={PermalinkRedirector}\n                    />\n                    <LoggedInRoute\n                        path={'/:team'}\n                        component={NeedsTeam}\n                    />\n                    <Redirect\n                        to={{\n                            ...this.props.location,\n                            pathname: '/login',\n                        }}\n                    />\n                </Switch>\n            </IntlProvider>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport function incrementWsErrorCount() {\n    return async (dispatch) => {\n        dispatch({\n            type: ActionTypes.INCREMENT_WS_ERROR_COUNT,\n        });\n    };\n}\n\nexport function resetWsErrorCount() {\n    return async (dispatch) => {\n        dispatch({\n            type: ActionTypes.RESET_WS_ERROR_COUNT,\n        });\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\n\nimport MenuWrapper from '../../menu_wrapper';\nimport Menu from '../../menu';\nimport SubMenuItem from '../../menu_items/submenu_item';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport './submenu_modal.scss';\n\ntype Props = {\n    elements?: (React.ComponentProps<typeof SubMenuItem>)[];\n    onHide: () => void;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class SubMenuModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onHide = () => { //public because it is used on tests\n        this.setState({show: false});\n    }\n\n    public render() {\n        let SubMenuItems;\n        if (this.props.elements) {\n            SubMenuItems = this.props.elements.map((element) => {\n                return (\n                    <Menu.ItemSubMenu\n                        key={element.id}\n                        id={element.id}\n                        text={element.text}\n                        subMenu={element.subMenu}\n                        action={element.action}\n                        filter={element.filter}\n                        xOffset={0}\n                        root={false}\n                    />\n                );\n            });\n        }\n        return (\n            <Modal\n                dialogClassName={'SubMenuModal a11y__modal mobile-sub-menu'}\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                enforceFocus={false}\n                id='submenuModal'\n                role='dialog'\n            >\n                <Modal.Body\n                    onClick={this.onHide}\n                >\n                    <MenuWrapper>\n                        <Menu\n                            openLeft={true}\n                            ariaLabel={Utils.localizeMessage('post_info.submenu.mobile', 'mobile submenu').toLowerCase()}\n                        >\n                            {SubMenuItems}\n                        </Menu>\n                        <div/>\n                    </MenuWrapper>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {RefObject, MouseEvent, CSSProperties} from 'react';\nimport Popper from 'popper.js';\nimport ReactDOM from 'react-dom';\n\nimport {Constants} from 'utils/constants';\nimport Pluggable from 'plugins/pluggable';\n\nconst tooltipContainerStyles: CSSProperties = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    zIndex: 10,\n};\n\ntype Props = {\n    href: string;\n    title: string;\n}\n\nexport default class LinkTooltip extends React.PureComponent<Props> {\n    public static propTypes = {\n        href: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    };\n    private tooltipContainerRef: RefObject<any>;\n    private show: boolean;\n    private hideTimeout: number;\n    private showTimeout: number;\n    private popper?: Popper;\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.tooltipContainerRef = React.createRef();\n        this.show = false;\n        this.showTimeout = -1;\n        this.hideTimeout = -1;\n    }\n\n    public showTooltip = (e: any): void => {\n        //clear the hideTimeout in the case when the cursor is moved from a tooltipContainer child to the link\n        window.clearTimeout(this.hideTimeout);\n\n        if (!this.show) {\n            const $target: JQuery = $(e.target);\n            const target: Element = $target.get(0);\n            const $tooltipContainer: JQuery = $(this.tooltipContainerRef.current);\n            const tooltipContainer: Element = $tooltipContainer.get(0);\n\n            //clear the old this.showTimeout if there is any before overriding\n            window.clearTimeout(this.showTimeout);\n\n            this.showTimeout = window.setTimeout(() => {\n                this.show = true;\n\n                $tooltipContainer.show();\n                $tooltipContainer.children().on('mouseover', () => clearTimeout(this.hideTimeout));\n                $tooltipContainer.children().on('mouseleave', (event: JQueryEventObject) => {\n                    if (event.relatedTarget !== null) {\n                        this.hideTooltip();\n                    }\n                });\n\n                this.popper = new Popper(target, tooltipContainer, {\n                    placement: 'bottom',\n                    modifiers: {\n                        preventOverflow: {enabled: false},\n                        hide: {enabled: false},\n                    },\n                });\n            }, Constants.OVERLAY_TIME_DELAY);\n        }\n    };\n\n    public hideTooltip = (): void => {\n        //clear the old this.hideTimeout if there is any before overriding\n        window.clearTimeout(this.hideTimeout);\n\n        this.hideTimeout = window.setTimeout(() => {\n            this.show = false;\n\n            //prevent executing the showTimeout after the hideTooltip\n            clearTimeout(this.showTimeout);\n\n            $(this.tooltipContainerRef.current).hide();\n        }, Constants.OVERLAY_TIME_DELAY_SMALL);\n    };\n\n    public render() {\n        const {href, title} = this.props;\n        return (\n            <React.Fragment>\n                {ReactDOM.createPortal(\n                    <div\n                        style={tooltipContainerStyles}\n                        ref={this.tooltipContainerRef}\n                    >\n                        <Pluggable\n                            href={href}\n                            pluggableName='LinkTooltip'\n                        />\n                    </div>,\n                    document.getElementById('root') as HTMLElement\n                )}\n                <span\n                    onMouseOver={this.showTooltip}\n                    onMouseLeave={this.hideTooltip}\n                >\n                    {title}\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\n","module.exports = __webpack_public_path__ + \"files/e11e64802eafaf4c7d9d85465b9cbbce.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route} from 'react-router-dom';\n\nconst HeaderFooterTemplate = React.lazy(() => import('components/header_footer_template'));\nconst LoggedIn = React.lazy(() => import('components/logged_in'));\n\nexport const HFTRoute = ({component: Component, ...rest}) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <React.Suspense fallback={null}>\n                <HeaderFooterTemplate {...props}>\n                    <Component {...props}/>\n                </HeaderFooterTemplate>\n            </React.Suspense>\n        )}\n    />\n);\n\nexport const LoggedInHFTRoute = ({component: Component, ...rest}) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <React.Suspense fallback={null}>\n                <LoggedIn {...props}>\n                    <React.Suspense fallback={null}>\n                        <HeaderFooterTemplate {...props}>\n                            <Component {...props}/>\n                        </HeaderFooterTemplate>\n                    </React.Suspense>\n                </LoggedIn>\n            </React.Suspense>\n        )}\n    />\n);\n","module.exports = __webpack_public_path__ + \"files/84c1ce7412135b70309723274272115a.png\";","module.exports = __webpack_public_path__ + \"files/ebbe08361dc67d55d127c0ab760950c7.png\";","module.exports = __webpack_public_path__ + \"files/bd956aafccffed574da236f21af209ef.gif\";","module.exports = __webpack_public_path__ + \"files/8b03642d36741ba3030a9004a1d56bb0.gif\";","module.exports = __webpack_public_path__ + \"files/8ecdcaa3967828b4268164766528e1e8.png\";","module.exports = __webpack_public_path__ + \"files/e1ce12e78439189fa5a0ff0729aafee5.png\";","module.exports = __webpack_public_path__ + \"files/134212b6cdb1ad00f11626f100db367b.png\";","module.exports = __webpack_public_path__ + \"files/b9407b443e9466eaace5bb619d8cef83.png\";","module.exports = __webpack_public_path__ + \"files/e447449d040020e4d2a27c2f3338af2d.png\";","module.exports = __webpack_public_path__ + \"files/b3b3bea43ae4f81ad85b1746a4563119.png\";","module.exports = __webpack_public_path__ + \"files/dada73cb61740b48be647f9e7d7c8605.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport Constants, {EventTypes, A11yClassNames, A11yAttributeNames, A11yCustomEventTypes} from 'utils/constants';\nimport {isKeyPressed, cmdOrCtrlPressed, isMac} from 'utils/utils';\nimport {isDesktopApp} from 'utils/user_agent';\n\nconst listenerOptions = {\n    capture: true,\n};\n\nexport default class A11yController {\n    constructor() {\n        this.regionHTMLCollection = this.getAllRegions();\n        this.sectionHTMLCollection = null; // populated when region changes\n        this.modalHTMLCollection = this.getAllModals();\n        this.popupHTMLCollection = this.getAllPopups();\n\n        this.activeRegion = null;\n        this.activeSection = null;\n        this.activeElement = null;\n\n        this.mouseIsPressed = false;\n\n        this.lastInputEventIsKeyboard = false;\n\n        this.enterKeyIsPressed = false;\n        this.f6KeyIsPressed = false;\n        this.upArrowKeyIsPressed = false;\n        this.downArrowKeyIsPressed = false;\n        this.tabKeyIsPressed = false;\n        this.tildeKeyIsPressed = false;\n        this.lKeyIsPressed = false;\n        this.windowIsFocused = true;\n\n        // used to reset navigation whenever navigation within a region occurs (section or element)\n        this.resetNavigation = false;\n\n        document.addEventListener(EventTypes.KEY_DOWN, this.handleKeyDown, listenerOptions);\n        document.addEventListener(EventTypes.KEY_UP, this.handleKeyUp, listenerOptions);\n        document.addEventListener(EventTypes.CLICK, this.handleMouseClick, listenerOptions);\n        document.addEventListener(EventTypes.MOUSE_DOWN, this.handleMouseDown, listenerOptions);\n        document.addEventListener(EventTypes.MOUSE_UP, this.handleMouseUp, listenerOptions);\n        document.addEventListener(EventTypes.FOCUS, this.handleFocus, listenerOptions);\n        window.addEventListener(EventTypes.BLUR, this.handleWindowBlur, listenerOptions);\n    }\n\n    destroy() {\n        this.clearActiveRegion();\n        this.clearCurrentFocus();\n\n        document.removeEventListener(EventTypes.KEY_DOWN, this.handleKeyDown, listenerOptions);\n        document.removeEventListener(EventTypes.KEY_UP, this.handleKeyUp, listenerOptions);\n        document.removeEventListener(EventTypes.CLICK, this.handleMouseClick, listenerOptions);\n        document.removeEventListener(EventTypes.MOUSE_DOWN, this.handleMouseDown, listenerOptions);\n        document.removeEventListener(EventTypes.MOUSE_UP, this.handleMouseUp, listenerOptions);\n        document.removeEventListener(EventTypes.FOCUS, this.handleFocus, listenerOptions);\n        window.removeEventListener(EventTypes.BLUR, this.handleWindowBlur, listenerOptions);\n    }\n\n    // convenience getter/setters\n\n    /**\n     * Determines if keyboard navigation is currently in progress based on several criteria as follows:\n     * 1. There must be defined regions and a single region must be active\n     * 2. The last input event detected must be a keyboard event\n     * 3. There must be no open modals and/or popups\n     * 4. There must be an active element and it must support classList\n     */\n    get navigationInProgress() {\n        if (!this.regions || !this.regions.length || !this.isElementValid(this.activeRegion)) {\n            return false;\n        }\n        if (!this.lastInputEventIsKeyboard) {\n            return false;\n        }\n        if (this.modalIsOpen || this.popupIsOpen) {\n            return false;\n        }\n        if (!this.isElementValid(this.activeElement)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns an array of available regions sorted by A11yAttributeNames.SORT_ORDER\n     */\n    get regions() {\n        let domElements = this.sortElementsByAttributeOrder(this.regionHTMLCollection);\n        domElements = domElements.filter((element) => {\n            return this.elementIsVisible(element);\n        });\n        return domElements;\n    }\n\n    /**\n     * Returns an array of available sections sorted by A11yAttributeNames.SORT_ORDER and optionally reversed\n     */\n    get sections() {\n        let domElements = this.sortElementsByAttributeOrder(this.sectionHTMLCollection);\n        domElements = domElements.filter((element) => {\n            return this.elementIsVisible(element);\n        });\n        if (this.shouldReverseSections) {\n            domElements.reverse();\n        }\n        return domElements;\n    }\n\n    /**\n     * Returns the index of the active region\n     */\n    get activeRegionIndex() {\n        if (!this.activeRegion) {\n            return null;\n        }\n        return this.regions.indexOf(this.activeRegion);\n    }\n\n    /**\n     * Returns the index of the active section\n     */\n    get activeSectionIndex() {\n        if (!this.activeSection) {\n            return null;\n        }\n        return this.sections.indexOf(this.activeSection);\n    }\n\n    /**\n     * Returns whether the regions requires reverse section navigation\n     */\n    get shouldReverseSections() {\n        if (!this.activeRegion) {\n            return false;\n        }\n        return this.getOrderReverseAttribute(this.activeRegion);\n    }\n\n    /**\n     * Returns the element that should currently have focus\n     */\n    get focusedElement() {\n        let focusedElement;\n        if (this.activeElement) {\n            focusedElement = this.activeElement;\n        } else if (this.activeSection) {\n            focusedElement = this.activeSection;\n        } else if (this.activeRegion) {\n            focusedElement = this.activeRegion;\n        }\n        return focusedElement;\n    }\n\n    /**\n     * Returnes whether an a11y-specific key is currently pressed\n     */\n    get a11yKeyIsPressed() {\n        return this.f6KeyIsPressed ||\n               this.upArrowKeyIsPressed ||\n               this.downArrowKeyIsPressed ||\n               this.tabKeyIsPressed ||\n               this.tildeKeyIsPressed ||\n               this.lKeyIsPressed;\n    }\n\n    /**\n     * Indicates if a modal window is currently open\n     * - modals must have A11yClassNames.MODAL to be considered\n     */\n    get modalIsOpen() {\n        return this.modalHTMLCollection.length > 0;\n    }\n\n    /**\n     * Indicates if a popup/dropdown element is currently open\n     * - popups/dropdowns must have A11yClassNames.POPUP to be considered\n     */\n    get popupIsOpen() {\n        return this.popupHTMLCollection.length > 0;\n    }\n\n    // public methods\n\n    /**\n     * Determines the next region, sets it as active and updates the current focus\n     */\n    nextRegion() {\n        const regions = this.regions;\n        if (\n            !regions ||\n            !regions.length ||\n            this.modalIsOpen ||\n            this.popupIsOpen\n        ) {\n            return;\n        }\n        let newRegion;\n        if (\n            !this.activeRegion ||\n            this.activeRegionIndex === regions.length - 1 ||\n            this.resetNavigation\n        ) {\n            newRegion = regions[0];\n        } else {\n            newRegion = regions[this.activeRegionIndex + 1];\n        }\n        this.setActiveRegion(newRegion);\n        this.setCurrentFocus();\n        this.resetNavigation = false;\n    }\n\n    /**\n     * Determines the previous region, sets it as active and updates the current focus\n     */\n    previousRegion() {\n        const regions = this.regions;\n        if (\n            !regions ||\n            !regions.length ||\n            this.modalIsOpen ||\n            this.popupIsOpen\n        ) {\n            return;\n        }\n        let newRegion;\n        if (!this.activeRegion || (this.activeRegionIndex !== 0 && this.resetNavigation)) {\n            newRegion = regions[0];\n        } else if (this.activeRegionIndex === 0) {\n            newRegion = regions[regions.length - 1];\n        } else {\n            newRegion = regions[this.activeRegionIndex - 1];\n        }\n        this.setActiveRegion(newRegion);\n        this.setCurrentFocus();\n        this.resetNavigation = false;\n    }\n\n    /**\n     * Determines the next section, sets it as active and updates the current focus\n     */\n    nextSection() {\n        const sections = this.sections;\n        const shouldLoopNavigation = this.getLoopNavigationAttribute(this.activeRegion);\n        if (\n            this.modalIsOpen ||\n            this.popupIsOpen ||\n            !sections ||\n            !sections.length ||\n            (!shouldLoopNavigation && this.activeSectionIndex === sections.length - 1)\n        ) {\n            return;\n        }\n        let newSection;\n        if (this.activeSection && this.activeSectionIndex < sections.length - 1) {\n            newSection = sections[this.activeSectionIndex + 1];\n        } else {\n            newSection = sections[0];\n        }\n        this.setActiveSection(newSection);\n        this.setCurrentFocus();\n        this.resetNavigation = true;\n    }\n\n    /**\n     * Determines the previous section, sets it as active and updates the current focus\n     */\n    previousSection() {\n        const sections = this.sections;\n        const shouldLoopNavigation = this.getLoopNavigationAttribute(this.activeRegion);\n        if (\n            this.modalIsOpen ||\n            this.popupIsOpen ||\n            !sections ||\n            !sections.length ||\n            (!shouldLoopNavigation && this.activeSectionIndex === 0)\n        ) {\n            return;\n        }\n        let newSection;\n        if (this.activeSection && this.activeSectionIndex > 0) {\n            newSection = sections[this.activeSectionIndex - 1];\n        } else if (this.activeSection && this.activeSectionIndex === 0) {\n            newSection = sections[sections.length - 1];\n        } else {\n            newSection = sections[0];\n        }\n        this.setActiveSection(newSection);\n        this.setCurrentFocus();\n        this.resetNavigation = true;\n    }\n\n    /**\n     * Takes the provided dom element, finds it's parent section and region (if available),\n     * sets them as active and updates the current focus\n     * @param {HTMLElement} element - the DOM element to set as the active element\n     * @param {array or boolean} elementPath - array of element's dom branch or boolean to find section/region of element\n     */\n    nextElement(element, elementPath = false) {\n        let region;\n        let section;\n        if (elementPath && elementPath.length) {\n            // is the current element in an active region?\n            if (elementPath.indexOf(this.activeRegion) < 0) {\n                region = elementPath.find((pathElement) => {\n                    if (!pathElement.classList) {\n                        return false;\n                    }\n                    return pathElement.classList.contains(A11yClassNames.REGION);\n                });\n            }\n\n            // is the current element in an active section?\n            if (elementPath.indexOf(this.activeSection) < 0) {\n                section = elementPath.find((pathElement) => {\n                    if (!pathElement.classList) {\n                        return false;\n                    }\n                    return pathElement.classList.contains(A11yClassNames.SECTION);\n                });\n            }\n        } else if (elementPath && typeof element.closest === 'function') {\n            region = element.closest(`.${A11yClassNames.REGION}`);\n            section = element.closest(`.${A11yClassNames.SECTION}`);\n        }\n        if (region && this.activeRegion !== region) {\n            this.setActiveRegion(region, false);\n        }\n        if (section && this.activeSection !== section) {\n            this.setActiveSection(section);\n        }\n        this.setActiveElement(element);\n        this.setCurrentFocus();\n        this.resetNavigation = true;\n    }\n\n    /**\n     * Resets the a11y navigation controller, active region/section/element, clears focus and resets user interraction states\n     */\n    cancelNavigation() {\n        this.clearActiveRegion();\n        this.setCurrentFocus();\n        this.resetInterractionStates();\n    }\n\n    // private methods\n\n    /**\n     * Sets the currently active region and stores a list of the regions sections\n     * @param {HTMLElement} element - DOM element to set as the active region\n     * @param {boolean} canFocusChild - whether to focus child section instead of provide region\n     * @emits {A11yCustomEventTypes.ACTIVATE} - emitted on the provided DOM element once set to active\n     */\n    setActiveRegion(element, canFocusChild = true) {\n        if (!this.isElementValid(element, [this.activeRegion]) && !this.resetNavigation) {\n            return;\n        }\n\n        // clear previous active region\n        this.clearActiveRegion();\n\n        // setup new active region\n        this.activeRegion = element;\n        this.activeRegion.addEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveRegionUpdate);\n        this.activeRegion.dispatchEvent(new Event(A11yCustomEventTypes.ACTIVATE));\n\n        // apply visual updates to active region\n        this.updateActiveRegion();\n\n        // retrieve all sections for the new active region\n        this.sectionHTMLCollection = this.getAllSectionsForRegion(this.activeRegion);\n\n        // should the visual focus start on a child section\n        if (canFocusChild && this.getFocusChildAttribute(this.activeRegion) && this.sections && this.sections.length) {\n            this.setActiveSection(this.sections[0]);\n        }\n    }\n\n    /**\n     * Sets the currently active section\n     * @param {HTMLElement} element - DOM element to set as the active section\n     * @emits {A11yCustomEventTypes.ACTIVATE} - emitted on the provided DOM element once set to active\n     */\n    setActiveSection(element) {\n        if (!this.isElementValid(element, [this.activeSection])) {\n            return;\n        }\n\n        // clear previous active section\n        this.clearActiveSection();\n\n        // setup new active section\n        this.activeSection = element;\n        this.activeSection.addEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveSectionUpdate);\n        this.activeSection.dispatchEvent(new Event(A11yCustomEventTypes.ACTIVATE));\n\n        // apply visual updates to active section\n        this.updateActiveSection();\n    }\n\n    /**\n     * Sets the currently active element\n     * @param {HTMLElement} element - DOM element to set as the active element\n     * @emits {A11yCustomEventTypes.ACTIVATE} - emitted on the provided DOM element once set to active\n     */\n    setActiveElement(element) {\n        if (!this.isElementValid(element, [this.activeElement])) {\n            return;\n        }\n\n        // clear previous active element\n        this.clearActiveElement();\n\n        // setup new active element\n        this.activeElement = element;\n        this.activeElement.addEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveElementUpdate);\n        if (this.activeElement !== this.activeRegion && this.activeElement !== this.activeSection) {\n            this.activeElement.dispatchEvent(new Event(A11yCustomEventTypes.ACTIVATE));\n        }\n\n        // apply visual updates to active element\n        this.updateActiveElement();\n    }\n\n    /**\n     * Updates the focus status of the element that should now have focus\n     */\n    setCurrentFocus() {\n        this.clearCurrentFocus();\n        if (!this.focusedElement) {\n            return;\n        }\n\n        // set focus on the element that should have focus if needed\n        if (document.activeElement !== this.focusedElement) {\n            this.focusedElement.focus();\n        }\n\n        // apply visual updates to focused element\n        this.udpateCurrentFocus();\n    }\n\n    /**\n     * Updates the visual state of the active region and makes sure it is focusable\n     */\n    updateActiveRegion() {\n        if (!this.activeRegion) {\n            return;\n        }\n        this.activeRegion.classList.add(A11yClassNames.ACTIVE);\n\n        // ensure active region element is focusable\n        if (!this.activeRegion.getAttribute('tabindex')) {\n            this.activeRegion.setAttribute('tabindex', -1);\n        }\n    }\n\n    /**\n     * Updates the visual state of the active section and makes sure it is focusable\n     */\n    updateActiveSection() {\n        if (!this.activeSection) {\n            return;\n        }\n        this.activeSection.classList.add(A11yClassNames.ACTIVE);\n\n        // ensure active section element is focusable\n        if (!this.activeSection.getAttribute('tabindex')) {\n            this.activeSection.setAttribute('tabindex', -1);\n        }\n    }\n\n    /**\n     * Updates the visual state of the active element\n     */\n    updateActiveElement() {\n        if (!this.activeElement) {\n            return;\n        }\n        this.activeElement.classList.add(A11yClassNames.ACTIVE);\n    }\n\n    /**\n     * Updates the visual state of the currently focused element\n     */\n    udpateCurrentFocus(forceUpdate = false) {\n        if ((!this.focusedElement || !this.a11yKeyIsPressed) && !forceUpdate) {\n            return;\n        }\n        this.focusedElement.classList.add(A11yClassNames.FOCUSED);\n    }\n\n    /**\n     * Clears all a11y-applied classes, events and the active region DOM element reference\n     */\n    clearActiveRegion() {\n        if (this.activeRegion) {\n            this.activeRegion.classList.remove(A11yClassNames.ACTIVE);\n            this.activeRegion.dispatchEvent(new Event(A11yCustomEventTypes.DEACTIVATE));\n            this.activeRegion.removeEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveRegionUpdate);\n            this.activeRegion = null;\n        }\n        this.clearActiveSection();\n    }\n\n    /**\n     * Clears all a11y-applied classes, events and the active section DOM element reference\n     */\n    clearActiveSection() {\n        if (this.activeSection) {\n            this.activeSection.classList.remove(A11yClassNames.ACTIVE);\n            this.activeSection.dispatchEvent(new Event(A11yCustomEventTypes.DEACTIVATE));\n            this.activeSection.removeEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveSectionUpdate);\n            this.activeSection = null;\n        }\n        this.clearActiveElement();\n    }\n\n    /**\n     * Clears all a11y-applied classes, events and the active DOM element reference\n     */\n    clearActiveElement() {\n        if (this.activeElement) {\n            if (this.activeElement !== this.activeRegion && this.activeElement !== this.activeSection) {\n                this.activeElement.classList.remove(A11yClassNames.ACTIVE);\n                this.activeElement.dispatchEvent(new Event(A11yCustomEventTypes.DEACTIVATE));\n            }\n            this.activeElement.removeEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveElementUpdate);\n            this.activeElement = null;\n        }\n    }\n\n    /**\n     * Clears all focused element classes and blurs the active element if requested\n     */\n    clearCurrentFocus(blurActiveElement = false) {\n        Array.from(document.getElementsByClassName(A11yClassNames.FOCUSED)).forEach((element) => {\n            element.classList.remove(A11yClassNames.FOCUSED);\n        });\n        if (blurActiveElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Resets the state of all a11y-defined interraction methods\n     */\n    resetInterractionStates() {\n        this.mouseIsPressed = false;\n        this.f6KeyIsPressed = false;\n        this.upArrowKeyIsPressed = false;\n        this.downArrowKeyIsPressed = false;\n        this.tabKeyIsPressed = false;\n        this.tildeKeyIsPressed = false;\n        this.enterKeyIsPressed = false;\n        this.lKeyIsPressed = false;\n        this.lastInputEventIsKeyboard = false;\n    }\n\n    // helper methods\n\n    /**\n     * Returns an HTMLCollection object of all defined regions\n     * - use of HTMLCollection is intentional as this object auto updates to reflect DOM changes\n     */\n    getAllRegions() {\n        return document.getElementsByClassName(A11yClassNames.REGION);\n    }\n\n    /**\n     * Returns an HTMLCollection object of all defined sections for the currently active region\n     * - use of HTMLCollection is intentional as this object auto updates to reflect DOM changes\n     */\n    getAllSectionsForRegion(region) {\n        if (!region) {\n            return null;\n        }\n        return region.getElementsByClassName(A11yClassNames.SECTION);\n    }\n\n    /**\n     * Sort a list of DOM elements by defined A11yAttributeNames.SORT_ORDER attribute\n     * @param {HTMLCollection} elements - list of elements to be sorted\n     */\n    sortElementsByAttributeOrder(elements) {\n        if (!elements || !elements.length) {\n            return [];\n        }\n        return Array.from(elements).sort((elementA, elementB) => {\n            const elementAOrder = parseInt(elementA.getAttribute(A11yAttributeNames.SORT_ORDER), 10);\n            const elementBOrder = parseInt(elementB.getAttribute(A11yAttributeNames.SORT_ORDER), 10);\n\n            if (isNaN(elementAOrder) && isNaN(elementBOrder)) {\n                return 0;\n            }\n            if (isNaN(elementBOrder)) {\n                return -1;\n            }\n            if (isNaN(elementAOrder)) {\n                return 1;\n            }\n\n            return elementAOrder - elementBOrder;\n        });\n    }\n\n    /**\n     * Returns whether a DOM element is currently visible or not\n     * @param {HTMLElement} element - the DOM element to check\n     */\n    elementIsVisible(element) {\n        return element && element.offsetParent;\n    }\n\n    /**\n     * Retuns an HTMLCollection of all DOM elements that have the A11yClassNames.MODAL class\n     */\n    getAllModals() {\n        return document.getElementsByClassName(A11yClassNames.MODAL);\n    }\n\n    /**\n     * Retuns an HTMLCollection of all DOM elements that have the A11yClassNames.POPUP class\n     */\n    getAllPopups() {\n        return document.getElementsByClassName(A11yClassNames.POPUP);\n    }\n\n    /**\n     * Helper to retrieve the value of the A11yAttributeNames.LOOP_NAVIGATION attribute for the provided DOM element\n     * @param {HTMLElement} element - the element to retrive the A11yAttributeNames.LOOP_NAVIGATION value from\n     */\n    getLoopNavigationAttribute(element) {\n        const attributeValue = element.getAttribute(A11yAttributeNames.LOOP_NAVIGATION);\n        if (attributeValue && attributeValue.toLowerCase() === 'false') {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Helper to retrieve the value of the A11yAttributeNames.ORDER_REVERSE attribute for the provided DOM element\n     * @param {HTMLElement} element - the element to retrive the A11yAttributeNames.ORDER_REVERSE value from\n     */\n    getOrderReverseAttribute(element) {\n        const attributeValue = element.getAttribute(A11yAttributeNames.ORDER_REVERSE);\n        if (attributeValue && attributeValue.toLowerCase() === 'true') {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Helper to retrieve the value of the A11yAttributeNames.FOCUS_CHILD attribute for the provided DOM element\n     * @param {HTMLElement} element - the element to retrive the A11yAttributeNames.FOCUS_CHILD value from\n     */\n    getFocusChildAttribute(element) {\n        const attributeValue = element.getAttribute(A11yAttributeNames.FOCUS_CHILD);\n        if (attributeValue && attributeValue.toLowerCase() === 'true') {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Helper method to verify if a provided DOM element is a valid element for a11y navigation\n     * @param {HTMLElement} element - the DOM element to check\n     * @param {arry of HTMLElements} invalidElements - a list of invalid DOM elements to check against\n     */\n    isElementValid(element, invalidElements = []) {\n        if (\n            element &&\n            element.classList &&\n            !invalidElements.includes(element)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    // event handling methods\n\n    handleKeyDown = (event) => {\n        const modifierKeys = {\n            ctrlIsPressed: event.ctrlKey,\n            altIsPressed: event.altKey,\n            shiftIsPressed: event.shiftKey,\n        };\n        switch (true) {\n        case isKeyPressed(event, Constants.KeyCodes.TAB):\n            this.lastInputEventIsKeyboard = true;\n            if ((!isMac() && modifierKeys.altIsPressed) || cmdOrCtrlPressed(event)) {\n                return;\n            }\n            this.tabKeyIsPressed = true;\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.TILDE):\n            this.lastInputEventIsKeyboard = true;\n            if (!this.regions || !this.regions.length) {\n                return;\n            }\n\n            // Check to make sure both aren't pressed because some older webkit browsers set CTRL and ALT when AltGr is pressed\n            if (modifierKeys.ctrlIsPressed && !modifierKeys.altIsPressed) {\n                this.tildeKeyIsPressed = true;\n                event.preventDefault();\n                if (modifierKeys.shiftIsPressed) {\n                    this.previousRegion();\n                } else {\n                    this.nextRegion();\n                }\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.F6):\n            this.lastInputEventIsKeyboard = true;\n            if (!isDesktopApp() && !cmdOrCtrlPressed(event)) {\n                return;\n            }\n            this.f6KeyIsPressed = true;\n            event.preventDefault();\n            if (modifierKeys.shiftIsPressed) {\n                this.previousRegion();\n            } else {\n                this.nextRegion();\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.UP):\n            this.lastInputEventIsKeyboard = true;\n            if (!this.navigationInProgress || !this.sections || !this.sections.length) {\n                return;\n            }\n            this.upArrowKeyIsPressed = true;\n            event.preventDefault();\n            if (this.shouldReverseSections) {\n                this.nextSection();\n            } else {\n                this.previousSection();\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.DOWN):\n            this.lastInputEventIsKeyboard = true;\n            if (!this.navigationInProgress || !this.sections || !this.sections.length) {\n                return;\n            }\n            this.downArrowKeyIsPressed = true;\n            event.preventDefault();\n            if (this.shouldReverseSections) {\n                this.previousSection();\n            } else {\n                this.nextSection();\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.ESCAPE):\n            if (!this.navigationInProgress) {\n                return;\n            }\n            event.preventDefault();\n            this.cancelNavigation();\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.ENTER):\n            this.enterKeyIsPressed = true;\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.SPACE):\n            if (event.target.nodeName === 'BUTTON') {\n                event.preventDefault();\n                event.stopPropagation();\n                event.target.click();\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.L):\n            // For the Ctrl+Shift+L keyboard shortcut\n            this.lastInputEventIsKeyboard = true;\n            this.lKeyIsPressed = true;\n            break;\n        }\n    }\n\n    handleKeyUp = () => {\n        this.resetInterractionStates();\n    }\n\n    handleMouseClick = (event) => {\n        // hitting enter on a <button> triggers a click event\n        if (!this.enterKeyIsPressed) {\n            this.lastInputEventIsKeyboard = false;\n        }\n        if (event.target === this.activeElement) {\n            return;\n        }\n        this.cancelNavigation();\n    }\n\n    handleMouseDown = () => {\n        this.mouseIsPressed = true;\n    }\n\n    handleMouseUp = () => {\n        this.mouseIsPressed = false;\n    }\n\n    handleFocus = (event) => {\n        if (this.lastInputEventIsKeyboard && this.windowIsFocused) {\n            this.nextElement(event.target, event.path || true);\n        }\n\n        // focus just came back to the app\n        if (!this.windowIsFocused) {\n            this.windowIsFocused = true;\n        }\n    }\n\n    handleWindowBlur = (event) => {\n        if (event.target === window) {\n            this.windowIsFocused = false;\n        }\n    }\n\n    handleActiveRegionUpdate = () => {\n        if (this.navigationInProgress) {\n            this.updateActiveRegion();\n            if (this.focusedElement === this.activeRegion) {\n                this.udpateCurrentFocus(true);\n            }\n        }\n    }\n\n    handleActiveSectionUpdate = () => {\n        if (this.navigationInProgress) {\n            this.updateActiveSection();\n            if (this.focusedElement === this.activeSection) {\n                this.udpateCurrentFocus(true);\n            }\n        }\n    }\n\n    handleActiveElementUpdate = () => {\n        if (this.navigationInProgress) {\n            this.updateActiveElement();\n            if (this.focusedElement === this.activeElement) {\n                this.udpateCurrentFocus(true);\n            }\n        }\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as PostActions from 'mattermost-redux/actions/posts';\n\nimport {logError} from 'mattermost-redux/actions/errors';\n\nimport {ActionTypes, AnnouncementBarTypes} from 'utils/constants';\n\nexport function editPost(post) {\n    return async (dispatch, getState) => {\n        const result = await PostActions.editPost(post)(dispatch, getState);\n\n        // Send to error bar if it's an edit post error about time limit.\n        if (result.error && result.error.server_error_id === 'api.post.update_post.permissions_time_limit.app_error') {\n            dispatch(logError({type: AnnouncementBarTypes.ANNOUNCEMENT, message: result.error.message}, true));\n        }\n\n        return result;\n    };\n}\n\nexport function selectAttachmentMenuAction(postId, actionId, cookie, dataSource, text, value) {\n    return async (dispatch) => {\n        dispatch({\n            type: ActionTypes.SELECT_ATTACHMENT_MENU_ACTION,\n            postId,\n            data: {\n                [actionId]: {\n                    text,\n                    value,\n                },\n            },\n        });\n\n        dispatch(PostActions.doPostActionWithCookie(postId, actionId, cookie, value));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as UserAgent from 'utils/user_agent';\n\nexport default class DeletePostModal extends React.PureComponent {\n    static propTypes = {\n\n        channelName: PropTypes.string,\n        focusedPostId: PropTypes.string,\n        teamName: PropTypes.string,\n        post: PropTypes.object.isRequired,\n        commentCount: PropTypes.number.isRequired,\n        isRHS: PropTypes.bool.isRequired,\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            deleteAndRemovePost: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n        };\n    }\n\n    handleDelete = async () => {\n        const {\n            actions,\n            channelName,\n            focusedPostId,\n            post,\n            teamName,\n        } = this.props;\n\n        const result = await actions.deleteAndRemovePost(post);\n\n        if (post.id === focusedPostId && channelName) {\n            browserHistory.push('/' + teamName + '/channels/' + channelName);\n        }\n\n        if (result.data) {\n            this.onHide();\n        }\n    }\n\n    handleEntered = () => {\n        if (this.deletePostBtn) {\n            this.deletePostBtn.focus();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n\n        if (!UserAgent.isMobile()) {\n            var element;\n            if (this.props.isRHS) {\n                element = document.getElementById('reply_textbox');\n            } else {\n                element = document.getElementById('post_textbox');\n            }\n            if (element) {\n                element.focus();\n            }\n        }\n    }\n\n    render() {\n        var commentWarning = '';\n        if (this.props.commentCount > 0 && this.props.post.root_id === '') {\n            commentWarning = (\n                <FormattedMessage\n                    id='delete_post.warning'\n                    defaultMessage='This post has {count, number} {count, plural, one {comment} other {comments}} on it.'\n                    values={{\n                        count: this.props.commentCount,\n                    }}\n                />\n            );\n        }\n\n        const postTerm = this.props.post.root_id ? (\n            <FormattedMessage\n                id='delete_post.comment'\n                defaultMessage='Comment'\n            />\n        ) : (\n            <FormattedMessage\n                id='delete_post.post'\n                defaultMessage='Post'\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onEntered={this.handleEntered}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                enforceFocus={false}\n                id='deletePostModal'\n                role='dialog'\n                aria-labelledby='deletePostModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='deletePostModalLabel'\n                    >\n                        <FormattedMessage\n                            id='delete_post.confirm'\n                            defaultMessage='Confirm {term} Delete'\n                            values={{\n                                term: (postTerm),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedMessage\n                        id='delete_post.question'\n                        defaultMessage='Are you sure you want to delete this {term}?'\n                        values={{\n                            term: (postTerm),\n                        }}\n                    />\n                    <br/>\n                    <br/>\n                    {commentWarning}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='delete_post.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        ref={(deletePostBtn) => {\n                            this.deletePostBtn = deletePostBtn;\n                        }}\n                        type='button'\n                        autoFocus={true}\n                        className='btn btn-danger'\n                        onClick={this.handleDelete}\n                        id='deletePostModalButton'\n                    >\n                        <FormattedMessage\n                            id='delete_post.del'\n                            defaultMessage='Delete'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {deleteAndRemovePost} from 'actions/post_actions.jsx';\n\nimport DeletePostModal from './delete_post_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const channel = getChannel(state, ownProps.post.channel_id);\n    let channelName = '';\n    if (channel) {\n        channelName = channel.name;\n    }\n\n    const {focusedPostId} = state.views.channel;\n\n    return {\n        channelName,\n        focusedPostId,\n        teamName: getCurrentTeam(state).name,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteAndRemovePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeletePostModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport default {\n    ItemTapAction: {\n        OPEN_EMBED_PAGE: 1,\n        SHARE: 2,\n    },\n\n    Tab: {\n        TRENDING: 0,\n        REACTIONS: 1,\n    },\n\n    appName: {\n        mattermost: 'mattermost',\n    },\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifSearchIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='-10 -10 40 40'\n                    version='1.1'\n                >\n                    <g\n                        id='ic_search'\n                        transform='matrix(0.959095,-9.6091e-18,-1.00189e-17,0.959095,-0.0633002,-0.777826)'\n                    >\n                        <path\n                            d='M2.648,15.872C3.433,16.658 4.376,17.287 5.454,17.758C6.553,18.229 7.698,18.454 8.888,18.454C10.728,18.454 12.389,17.938 13.893,16.905L18.18,21.192C18.494,21.506 18.854,21.664 19.302,21.664C19.751,21.664 20.111,21.506 20.447,21.192C20.761,20.855 20.919,20.496 20.919,20.047C20.919,19.621 20.761,19.239 20.447,18.925L16.16,14.638C17.193,13.134 17.709,11.473 17.709,9.633C17.709,8.443 17.484,7.298 17.013,6.198C16.542,5.121 15.913,4.178 15.128,3.393C14.342,2.607 13.399,1.979 12.322,1.507C11.222,1.036 10.077,0.811 8.888,0.811C7.698,0.811 6.553,1.036 5.454,1.507C4.376,1.979 3.433,2.607 2.648,3.393C1.862,4.178 1.234,5.121 0.762,6.198C0.291,7.298 0.066,8.443 0.066,9.633C0.066,10.822 0.291,11.967 0.762,13.067C1.234,14.144 1.862,15.087 2.648,15.872ZM8.888,4.021C10.436,4.021 11.761,4.56 12.861,5.66C13.96,6.76 14.499,8.084 14.499,9.633C14.499,11.181 13.96,12.506 12.861,13.606C11.761,14.705 10.436,15.244 8.888,15.244C7.339,15.244 6.015,14.705 4.915,13.606C3.815,12.506 3.276,11.181 3.276,9.633C3.276,8.084 3.815,6.76 4.915,5.66C6.015,4.56 7.339,4.021 8.888,4.021Z'\n                            style={{fill: 'inherit'}}\n                        />\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifSearchClearIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='-10 -10 40 40'\n                    enableBackground='new 0 0 20 20'\n                    version='1.1'\n                >\n                    <g transform='matrix(0.952381,0,0,1,0,0)'>\n                        <path\n                            fill='inherit'\n                            d='M10.5 11.7L2.2 19.8C2 19.9 1.9 20 1.7 20 1.6 20 1.4 19.9 1.3 19.8L0.2 18.8C0.1 18.7 0 18.5 0 18.3 0 18.2 0.1 18 0.2 17.9L8.3 10 0.2 2.1C0.1 2 0 1.8 0 1.7 0 1.5 0.1 1.3 0.2 1.2L1.3 0.2C1.4 0.1 1.6 0 1.7 0 1.9 0 2 0.1 2.2 0.2L10.5 8.3 18.8 0.2C19 0.1 19.1 0 19.3 0 19.4 0 19.6 0.1 19.7 0.2L20.8 1.2C20.9 1.3 21 1.5 21 1.7 21 1.8 20.9 2 20.8 2.1L12.7 10 20.8 17.9C20.9 18 21 18.2 21 18.3 21 18.5 20.9 18.7 20.8 18.8L19.7 19.8C19.6 19.9 19.4 20 19.3 20 19.1 20 19 19.9 18.8 19.8L10.5 11.7Z'\n                        />\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveSearchScrollPosition, saveSearchBarText, searchTextUpdate} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport GifSearchIcon from 'components/widgets/icons/gif_search_icon';\nimport GifSearchClearIcon from 'components/widgets/icons/gif_search_clear_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport {t} from 'utils/i18n.jsx';\n\nimport './SearchBar.scss';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.categories,\n        ...state.entities.gifs.search,\n        theme: getTheme(state),\n        appProps: state.entities.gifs.app,\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchBarText,\n    saveSearchScrollPosition,\n    searchTextUpdate,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: theme.centerChannelBg,\n        },\n        icon: {\n            fill: changeOpacity(theme.centerChannelColor, 0.4),\n        },\n        inputBackground: {\n            backgroundColor: theme.centerChannelBg,\n        },\n        input: {\n            borderColor: changeOpacity(theme.centerChannelColor, 0.12),\n        },\n    };\n});\n\nexport class SearchBar extends Component {\n    static propTypes = {\n        searchBarText: PropTypes.string,\n        tagsList: PropTypes.array,\n        theme: PropTypes.object.isRequired,\n        onTrending: PropTypes.func,\n        onSearch: PropTypes.func,\n        onCategories: PropTypes.func,\n        action: PropTypes.string,\n        saveSearchScrollPosition: PropTypes.func,\n        saveSearchBarText: PropTypes.func,\n        searchTextUpdate: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inputFocused: false,\n        };\n\n        this.searchTimeout = null;\n        this.props.saveSearchBarText('');\n        this.props.searchTextUpdate('');\n    }\n\n    componentDidUpdate(prevProps) {\n        const {searchBarText} = this.props;\n\n        if (searchBarText !== prevProps.searchBarText) {\n            if (searchBarText === 'trending') {\n                this.updateSearchInputValue('');\n            } else {\n                this.updateSearchInputValue(searchBarText);\n            }\n        }\n    }\n\n    /**\n     * Returns text request with hyphens\n     */\n    parseSearchText = (searchText) => {\n        return searchText.trim().split(/ +/).join('-');\n    }\n\n    removeExtraSpaces = (searchText) => {\n        return searchText.trim().split(/ +/).join(' ');\n    }\n\n    updateSearchInputValue = (searchText) => {\n        this.searchInput.value = searchText;\n        this.props.saveSearchBarText(searchText);\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.triggerSearch(this.searchInput.value);\n        this.searchInput.blur();\n    }\n\n    triggerSearch = (searchText) => {\n        const {onSearch} = this.props;\n        this.props.searchTextUpdate(this.parseSearchText(searchText));\n        onSearch();\n        this.props.saveSearchScrollPosition(0);\n    }\n\n    handleChange = (event) => {\n        clearTimeout(this.searchTimeout);\n\n        const searchText = event.target.value;\n\n        const {onCategories, action} = this.props;\n        this.props.saveSearchBarText(searchText);\n\n        if (searchText === '') {\n            onCategories();\n        } else if (action !== 'reactions' || !this.isFilteredTags(searchText)) {\n            // not reactions page or there's no reactions for this search request\n            this.searchTimeout = setTimeout(() => {\n                this.triggerSearch(searchText);\n            }, 500);\n        }\n    }\n\n    focusInput = () => {\n        this.setState({inputFocused: true});\n    }\n\n    blurInput = () => {\n        this.setState({inputFocused: false});\n    }\n\n    /**\n     * Checks if there're reactions for a current searchText\n     */\n    isFilteredTags = (searchText) => {\n        var text = this.removeExtraSpaces(searchText);\n\n        const {tagsList} = this.props;\n        const substr = text.toLowerCase();\n        const filteredTags = tagsList && tagsList.length ? tagsList.filter((tag) => {\n            if (!text || tag.tagName.indexOf(substr) !== -1) {\n                return tag;\n            }\n            return '';\n        }) : [];\n\n        return Boolean(filteredTags.length);\n    }\n\n    clearSearchHandle = () => {\n        const {action, onTrending, onCategories} = this.props;\n        this.updateSearchInputValue('');\n        if (action === 'reactions') {\n            onCategories();\n        } else {\n            onTrending();\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return ((!nextProps.searchBarText && this.props.searchBarText) ||\n            (nextProps.searchBarText && !this.props.searchBarText) ||\n            (nextState.inputFocused !== this.state.inputFocused));\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n        const {searchBarText} = this.props;\n        const clearSearchButton = searchBarText ?\n            (\n                <GifSearchClearIcon\n                    className='ic-clear-search'\n                    style={style.icon}\n                    onClick={this.clearSearchHandle}\n                />\n            ) : null;\n\n        return (\n            <form\n                className='gfycat-search'\n                method='get'\n                target='_top'\n                noValidate=''\n                onSubmit={this.handleSubmit}\n            >\n                <div\n                    className='search-bar'\n                    style={style.background}\n                >\n                    <div\n                        className='search-input-bg'\n                        style={style.inputBackground}\n                    />\n                    <LocalizedInput\n                        className='search-input'\n                        name='searchText'\n                        autoFocus={true}\n                        placeholder={{id: t('gif_picker.gfycat'), defaultMessage: 'Search Gfycat'}}\n                        onChange={this.handleChange}\n                        autoComplete='off'\n                        autoCapitalize='off'\n                        onFocus={this.focusInput}\n                        onBlur={this.blurInput}\n                        ref={(input) => {\n                            this.searchInput = input;\n                            return input;\n                        }}\n                        style={style.input}\n                    />\n                    <GifSearchIcon\n                        className='ic ic-search'\n                        style={style.icon}\n                    />\n                    {clearSearchButton}\n                </div>\n                <button\n                    type='submit'\n                    className='submit-button'\n                />\n            </form>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifTrendingIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    className='ic-svg ic-trending-svg'\n                    width='11px'\n                    height='15px'\n                    viewBox='0 0 11 15'\n                    version='1.1'\n                >\n                    <g\n                        id='Finalized-Design'\n                        stroke='none'\n                        fill='inherit'\n                    >\n                        <g\n                            id='GfyCat---Gycat-Tab'\n                            transform='translate(-1212.000000, -619.000000)'\n                            fill='inherit'\n                        >\n                            <g\n                                id='modal---emojis'\n                                transform='translate(1147.000000, 542.000000)'\n                            >\n                                <g\n                                    id='tabs---gfycat'\n                                    transform='translate(1.000000, 68.000000)'\n                                >\n                                    <g id='tab---trending---selected'>\n                                        <path\n                                            d='M69.90625,10.4062776 C69.90625,10.9531513 70.0976562,11.4909106 70.4804688,12.019555 C70.6992188,12.32945 71.1276043,12.7760638 71.765625,13.3593956 C72.3489582,13.9062693 72.7773438,14.3346538 73.0507812,14.6445488 C73.5065106,15.1731932 73.8528644,15.7109525 74.0898438,16.2578262 C74.3632812,16.9505327 74.5,17.6979271 74.5,18.5000083 C74.5,19.4479229 74.2630207,20.3229208 73.7890625,21.1250021 C73.3151043,21.9270834 72.6770832,22.565103 71.875,23.03906 C71.0729168,23.5130171 70.1979168,23.7499958 69.25,23.7499958 C68.3020832,23.7499958 67.4270832,23.5130171 66.625,23.03906 C65.8229168,22.565103 65.1848957,21.9270834 64.7109375,21.1250021 C64.2369793,20.3229208 64,19.4479229 64,18.5000083 C64,17.6432397 64.2005207,16.8320436 64.6015625,16.0664204 C65.0026043,15.3007972 65.5494793,14.6718925 66.2421875,14.1797061 C66.4609375,14.0338733 66.6888019,14.0247585 66.9257812,14.1523625 C67.1627606,14.2799665 67.28125,14.4713723 67.28125,14.7265798 L67.28125,17.6250104 C67.28125,17.9349054 67.3860676,18.1946704 67.5957031,18.4043054 C67.8053387,18.6139405 68.0651043,18.7187578 68.375,18.7187578 C68.6848957,18.7187578 68.9446613,18.6139405 69.1542969,18.4043054 C69.3639324,18.1946704 69.46875,17.9349054 69.46875,17.6250104 C69.46875,17.4427191 69.4049481,17.2330844 69.2773438,16.9961057 C69.2044269,16.8320436 69.0677082,16.576836 68.8671875,16.2304825 C68.4661457,15.5742341 68.1835938,15.0547041 68.0195312,14.6718925 C67.7643231,13.9791859 67.6640625,13.2955938 67.71875,12.6211161 C67.8098957,11.7825763 68.1380207,10.9258077 68.703125,10.0508097 C68.8125,9.86851837 68.9628906,9.76825847 69.1542969,9.75002921 C69.3457031,9.73179994 69.5188801,9.78648731 69.6738281,9.91409132 C69.8287762,10.0416953 69.90625,10.2057574 69.90625,10.4062776 Z M69.2499875,22.437499 C69.9609233,22.437499 70.6171717,22.259765 71.2187328,21.9042971 C71.8202939,21.5488292 72.2988083,21.0703147 72.6542762,20.4687537 C73.0097441,19.8671926 73.1874781,19.2109441 73.1874781,18.5000083 C73.1874781,17.880218 73.0781034,17.3060006 72.8593539,16.7773562 C72.6588337,16.3398572 72.376282,15.9023583 72.0116996,15.4648593 C71.7929502,15.1914225 71.4329248,14.8131683 70.9316241,14.3300964 C70.4303233,13.8470245 70.070298,13.4687703 69.8515485,13.1953335 C69.4869662,12.7760638 69.2135294,12.3567937 69.031238,11.937524 C68.8671759,12.5573143 68.8945196,13.1953335 69.1132691,13.8515819 C69.2408731,14.2343935 69.5143099,14.7812672 69.9335796,15.492203 C70.2252457,15.9661601 70.4166515,16.321628 70.507797,16.5586067 C70.6900884,16.9414183 70.7812338,17.2968862 70.7812338,17.6250104 C70.7812338,18.2812589 70.5442551,18.8463618 70.070298,19.3203189 C69.596341,19.794276 69.031238,20.0312547 68.3749896,20.0312547 C67.7187411,20.0312547 67.1536382,19.794276 66.6796811,19.3203189 C66.205724,18.8463618 65.9687453,18.2812589 65.9687453,17.6250104 L65.9687453,16.0937641 C65.7682251,16.403659 65.60872,16.7819136 65.4902308,17.228527 C65.3717417,17.6751404 65.3124969,18.0989675 65.3124969,18.5000083 C65.3124969,19.2109441 65.4902308,19.8671926 65.8456987,20.4687537 C66.2011666,21.0703147 66.6796811,21.5488292 67.2812422,21.9042971 C67.8828032,22.259765 68.5390517,22.437499 69.2499875,22.437499 Z'\n                                            id='icon---trending'\n                                        />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifReactionsIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    className='ic-svg ic-reactions-svg'\n                    width='14px'\n                    height='14px'\n                    viewBox='0 0 14 14'\n                    version='1.1'\n                >\n                    <g\n                        id='Finalized-Design'\n                        stroke='none'\n                        fill='inherit'\n                    >\n                        <g\n                            id='GfyCat---Gycat-Tab'\n                            transform='translate(-1348.000000, -620.000000)'\n                            fill='inherit'\n                        >\n                            <g\n                                id='modal---emojis'\n                                transform='translate(1147.000000, 542.000000)'\n                            >\n                                <g\n                                    id='tabs---gfycat'\n                                    transform='translate(1.000000, 68.000000)'\n                                >\n                                    <g\n                                        id='tab---category---deselected'\n                                        transform='translate(138.000000, 0.000000)'\n                                    >\n                                        <path\n                                            d='M62,16 L62,10 L68,10 L68,16 L62,16 Z M64,12 L64,14 L66,14 L66,12 L64,12 Z M70,24 L70,18 L76,18 L76,24 L70,24 Z M72,20 L72,22 L74,22 L74,20 L72,20 Z M70,10 L76,10 L76,16 L70,16 L70,10 Z M74,14 L74,12 L72,12 L72,14 L74,14 Z M62,24 L62,18 L68,18 L68,24 L62,24 Z M64,20 L64,22 L66,22 L66,20 L64,20 Z'\n                                            id='icon---categories'\n                                        />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveSearchBarText, searchTextUpdate} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport constants from 'components/gif_picker/utils/constants';\nimport SearchBar from 'components/gif_picker/components/SearchBar';\nimport GifTrendingIcon from 'components/widgets/icons/gif_trending_icon';\nimport GifReactionsIcon from 'components/widgets/icons/gif_reactions_icon';\nimport './Header.scss';\n\nfunction mapStateToProps(state) {\n    return {\n        theme: getTheme(state),\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchBarText,\n    searchTextUpdate,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: theme.centerChannelBg,\n        },\n        header: {\n            borderBottomColor: changeOpacity(theme.centerChannelColor, 0.2),\n        },\n        icon: {\n            fill: changeOpacity(theme.centerChannelColor, 0.3),\n        },\n        iconActive: {\n            fill: theme.centerChannelColor,\n        },\n        iconHover: {\n            fill: changeOpacity(theme.centerChannelColor, 0.8),\n        },\n    };\n});\n\nexport class Header extends PureComponent {\n    static propTypes = {\n        action: PropTypes.string,\n        appProps: PropTypes.object,\n        saveSearchBarText: PropTypes.func,\n        searchTextUpdate: PropTypes.func,\n        theme: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hovering: '',\n        };\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n\n        return (\n            <header\n                className='header-container'\n                style={style.background}\n            >\n                <SearchBar {...this.props}/>\n                <nav\n                    className='nav-bar'\n                    style={style.header}\n                >\n                    {this.renderTabs(this.props, style)}\n                </nav>\n            </header>\n        );\n    }\n\n    renderTabs(props, style) {\n        const {appProps, onTrending, onCategories} = props;\n        const {header} = appProps;\n        return header.tabs.map((tab, index) => {\n            let link;\n            if (tab === constants.Tab.TRENDING) {\n                link = this.renderTab('trending', onTrending, GifTrendingIcon, index, style);\n            } else if (tab === constants.Tab.REACTIONS) {\n                link = this.renderTab('reactions', onCategories, GifReactionsIcon, index, style);\n            }\n            return link;\n        });\n    }\n\n    renderTab(name, callback, Icon, index, style) {\n        var props = this.props;\n        const {action} = props;\n        function callbackWrapper() {\n            props.searchTextUpdate('');\n            props.saveSearchBarText('');\n            callback();\n        }\n        return (\n            <a\n                onClick={callbackWrapper}\n                onMouseOver={() => {\n                    this.setState({hovering: name});\n                }}\n                onMouseOut={() => {\n                    this.setState({hovering: ''});\n                }}\n                style={{cursor: 'pointer'}}\n                key={index}\n            >\n                <div style={{paddingTop: '2px'}}>\n                    <Icon\n                        style={(() => {\n                            if (this.state.hovering === name) {\n                                return style.iconHover;\n                            }\n                            return action === name ? style.iconActive : style.icon;\n                        })()}\n                    />\n                </div>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveAppProps} from 'mattermost-redux/actions/gifs';\n\nimport Header from 'components/gif_picker/components/Header';\n\nconst mapDispatchToProps = ({\n    saveAppProps,\n});\n\nexport class App extends PureComponent {\n    static propTypes = {\n        appProps: PropTypes.object,\n        action: PropTypes.string,\n        onCategories: PropTypes.func,\n        onSearch: PropTypes.func,\n        onTrending: PropTypes.func,\n        children: PropTypes.object,\n        saveAppProps: PropTypes.func,\n        authenticateSdk: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n        const {appProps} = this.props;\n        this.props.saveAppProps(appProps);\n    }\n\n    render() {\n        const {\n            appProps,\n            action,\n            onCategories,\n            onSearch,\n            onTrending,\n            children,\n        } = this.props;\n        const appClassName = 'main-container ' + (appProps.appClassName || '');\n        return (\n            <div className={appClassName}>\n                <Header\n                    appProps={appProps}\n                    action={action}\n                    onCategories={onCategories}\n                    onSearch={onSearch}\n                    onTrending={onTrending}\n                />\n                <div className='component-container'>\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(App);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class InfiniteScroll extends PureComponent {\n    static propTypes = {\n        children: PropTypes.array,\n        element: PropTypes.string,\n        hasMore: PropTypes.bool,\n        initialLoad: PropTypes.bool,\n        loader: PropTypes.object,\n        loadMore: PropTypes.func.isRequired,\n        pageStart: PropTypes.number,\n        threshold: PropTypes.number,\n        useWindow: PropTypes.bool,\n        isReverse: PropTypes.bool,\n        containerHeight: PropTypes.number,\n        scrollPosition: PropTypes.number,\n    }\n\n    static defaultProps = {\n        element: 'div',\n        hasMore: false,\n        initialLoad: true,\n        pageStart: 0,\n        threshold: 250,\n        useWindow: true,\n        isReverse: false,\n        containerHeight: null,\n        scrollPosition: null,\n    }\n\n    componentDidMount() {\n        this.pageLoaded = this.props.pageStart;\n        this.attachScrollListener();\n        this.setScrollPosition();\n    }\n\n    componentDidUpdate() {\n        this.attachScrollListener();\n    }\n\n    render() {\n        const {\n            children,\n            element,\n            hasMore,\n            initialLoad, // eslint-disable-line no-unused-vars\n            loader,\n            loadMore, // eslint-disable-line no-unused-vars\n            pageStart, // eslint-disable-line no-unused-vars\n            threshold, // eslint-disable-line no-unused-vars\n            useWindow, // eslint-disable-line no-unused-vars\n            isReverse, // eslint-disable-line no-unused-vars\n            scrollPosition, // eslint-disable-line no-unused-vars\n            containerHeight,\n            ...props\n        } = this.props;\n\n        props.ref = (node) => {\n            this.scrollComponent = node;\n        };\n\n        const elementProps = containerHeight ? {...props, style: {height: containerHeight}} : props;\n\n        return React.createElement(element, elementProps, children, hasMore && (loader || this.defaultLoader));\n    }\n\n    calculateTopPosition(el) {\n        if (!el) {\n            return 0;\n        }\n        return el.offsetTop + this.calculateTopPosition(el.offsetParent);\n    }\n\n    setScrollPosition() {\n        const {scrollPosition} = this.props;\n        if (scrollPosition !== null) {\n            window.scrollTo(0, scrollPosition);\n        }\n    }\n\n    scrollListener = () => {\n        const el = this.scrollComponent;\n        const scrollEl = window;\n\n        let offset;\n        if (this.props.useWindow) {\n            var scrollTop = ('pageYOffset' in scrollEl) ? scrollEl.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n            if (this.props.isReverse) {\n                offset = scrollTop;\n            } else {\n                offset = this.calculateTopPosition(el) + (el.offsetHeight - scrollTop - window.innerHeight);\n            }\n        } else if (this.props.isReverse) {\n            offset = el.parentNode.scrollTop;\n        } else {\n            offset = el.scrollHeight - el.parentNode.scrollTop - el.parentNode.clientHeight;\n        }\n\n        if (offset < Number(this.props.threshold)) {\n            this.detachScrollListener();\n\n            // Call loadMore after detachScrollListener to allow for non-async loadMore functions\n            if (typeof this.props.loadMore === 'function') {\n                this.props.loadMore(this.pageLoaded += 1);\n            }\n        }\n    }\n\n    attachScrollListener() {\n        if (!this.props.hasMore) {\n            return;\n        }\n\n        let scrollEl = window;\n        if (this.props.useWindow === false) {\n            scrollEl = this.scrollComponent.parentNode;\n        }\n\n        scrollEl.addEventListener('scroll', this.scrollListener);\n        scrollEl.addEventListener('resize', this.scrollListener);\n\n        if (this.props.initialLoad) {\n            this.scrollListener();\n        }\n    }\n\n    detachScrollListener() {\n        var scrollEl = window;\n        if (this.props.useWindow === false) {\n            scrollEl = this.scrollComponent.parentNode;\n        }\n\n        scrollEl.removeEventListener('scroll', this.scrollListener);\n        scrollEl.removeEventListener('resize', this.scrollListener);\n    }\n\n    componentWillUnmount() {\n        this.detachScrollListener();\n    }\n\n    // Set a defaut loader for all your `InfiniteScroll` components\n    setDefaultLoader(loader) {\n        this.defaultLoader = loader;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {requestCategoriesList, requestCategoriesListIfNeeded, saveSearchBarText, saveSearchScrollPosition, searchTextUpdate} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as PostUtils from 'utils/post_utils.jsx';\n\nimport InfiniteScroll from 'components/gif_picker/components/InfiniteScroll';\n\nimport './Categories.scss';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.categories,\n        ...state.entities.gifs.cache,\n        theme: getTheme(state),\n        appProps: state.entities.gifs.app,\n        searchText: state.entities.gifs.search.searchText,\n        searchBarText: state.entities.gifs.search.searchBarText,\n        hasImageProxy: state.entities.general.config.HasImageProxy,\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchBarText,\n    saveSearchScrollPosition,\n    searchTextUpdate,\n    requestCategoriesList,\n    requestCategoriesListIfNeeded,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: changeOpacity(theme.centerChannelColor, 0.05),\n        },\n    };\n});\n\nexport class Categories extends PureComponent {\n    static propTypes = {\n        appProps: PropTypes.object,\n        gifs: PropTypes.object,\n        hasMore: PropTypes.bool,\n        onSearch: PropTypes.func,\n        onTrending: PropTypes.func,\n        requestCategoriesList: PropTypes.func,\n        requestCategoriesListIfNeeded: PropTypes.func,\n        saveSearchBarText: PropTypes.func,\n        saveSearchScrollPosition: PropTypes.func,\n        searchTextUpdate: PropTypes.func,\n        searchBarText: PropTypes.string,\n        tagsList: PropTypes.array,\n        hasImageProxy: PropTypes.string,\n        theme: PropTypes.object.isRequired,\n    }\n\n    componentDidMount() {\n        window.scrollTo(0, 0);\n        this.props.requestCategoriesListIfNeeded();\n        this.sendImpressions();\n    }\n\n    sendImpressions = () => {\n        const {tagsList} = this.props;\n        const gfycats = tagsList.map((tag) => {\n            return {gfyId: tag.gfyId};\n        });\n\n        if (gfycats.length) {\n            trackEvent('gfycat', 'views', {context: 'category_list', count: gfycats.length});\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.saveSearchScrollPosition(0);\n    }\n\n    filterTagsList = () => {\n        const {searchBarText, tagsList} = this.props;\n\n        const substr = searchBarText.toLowerCase().trim().split(/ +/).join(' ');\n        return tagsList && tagsList.length ? tagsList.filter((tag) => {\n            if (!searchBarText || tag.tagName.indexOf(substr) !== -1) {\n                return tag;\n            }\n            return '';\n        }) : [];\n    }\n\n    loadMore = () => {\n        this.props.requestCategoriesList();\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n\n        const {hasMore, tagsList, gifs, onSearch, onTrending, hasImageProxy} = this.props;\n\n        const content = tagsList && tagsList.length ? this.filterTagsList(tagsList).map((item, index) => {\n            const {tagName, gfyId} = item;\n\n            if (!gifs[gfyId]) {\n                return null;\n            }\n\n            const gfyItem = gifs[gfyId];\n            const {max1mbGif, avgColor} = gfyItem;\n            const url = PostUtils.getImageSrc(max1mbGif, hasImageProxy === 'true');\n            const searchText = tagName.replace(/\\s/g, '-');\n            const backgroundImage = {backgroundImage: `url(${url}`};\n            const backgroundColor = {backgroundColor: avgColor};\n            const props = this.props;\n            function callback() {\n                props.searchTextUpdate(tagName);\n                props.saveSearchBarText(tagName);\n                if (searchText === 'trending') {\n                    onTrending();\n                } else {\n                    onSearch();\n                }\n            }\n            return (\n                <a\n                    onClick={callback}\n                    key={index}\n                >\n                    <div className='category-container'>\n                        <div\n                            className='category'\n                            style={{...backgroundImage, ...backgroundColor}}\n                        >\n                            <div className='category-name'>{tagName}</div>\n                        </div>\n                    </div>\n                </a>\n            );\n        }) : [];\n\n        return content && content.length ? (\n            <div\n                className='categories-container'\n                style={style.background}\n            >\n                <InfiniteScroll\n                    hasMore={hasMore}\n                    loadMore={this.loadMore}\n                    threshold={1}\n                >\n                    {content}\n                </InfiniteScroll>\n            </div>\n        ) : (\n            <div\n                className='categories-container'\n                style={style.background}\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Categories);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport {connect} from 'react-redux';\n\nimport PropTypes from 'prop-types';\n\nimport './SearchItem.scss';\nimport * as PostUtils from 'utils/post_utils.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        hasImageProxy: state.entities.general.config.HasImageProxy,\n    };\n}\n\nexport class SearchItem extends PureComponent {\n    static propTypes = {\n        gfyItem: PropTypes.object,\n        top: PropTypes.string,\n        left: PropTypes.string,\n        itemWidth: PropTypes.number,\n        itemClickHandler: PropTypes.func,\n        hasImageProxy: PropTypes.string,\n    }\n\n    render() {\n        const {\n            gfyItem,\n            top,\n            left,\n            itemWidth,\n            itemClickHandler,\n        } = this.props;\n\n        const {width, height, max1mbGif, avgColor} = gfyItem;\n        const {hasImageProxy} = this.props;\n        const url = PostUtils.getImageSrc(max1mbGif, hasImageProxy === 'true');\n\n        const backgroundImage = {backgroundImage: `url(${url})`};\n        const backgroundColor = {backgroundColor: avgColor};\n        const paddingBottom = {paddingBottom: ((itemWidth / width) * height) + 'px'};\n\n        return (\n            <div\n                className='search-item-wrapper'\n                style={{top, left, width: itemWidth ? `${itemWidth}px` : ''}}\n            >\n                <div\n                    className='search-item'\n                    style={{...backgroundImage, ...backgroundColor, ...paddingBottom}}\n                    onClick={() => itemClickHandler(gfyItem)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(SearchItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveSearchScrollPosition} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport InfiniteScroll from 'components/gif_picker/components/InfiniteScroll';\nimport SearchItem from 'components/gif_picker/components/SearchItem';\n\nimport './SearchGrid.scss';\n\nconst ITEMS_PADDING = 8;\nconst NUMBER_OF_COLUMNS_PORTRAIT = 2;\nconst NUMBER_OF_COLUMNS_LANDSCAPE = 2;\nconst WEBKIT_SCROLLBAR_WIDTH = 8;\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.cache,\n        ...state.entities.gifs.search,\n        theme: getTheme(state),\n        appProps: state.entities.gifs.app,\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchScrollPosition,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: changeOpacity(theme.centerChannelColor, 0.05),\n        },\n    };\n});\n\nexport class SearchGrid extends PureComponent {\n    static propTypes = {\n        appProps: PropTypes.object,\n        gifs: PropTypes.object,\n        resultsByTerm: PropTypes.object,\n        containerClassName: PropTypes.string,\n        keyword: PropTypes.string, // searchText, tagName\n        handleItemClick: PropTypes.func,\n        onCategories: PropTypes.func,\n        loadMore: PropTypes.func,\n        numberOfColumns: PropTypes.number,\n        scrollPosition: PropTypes.number,\n        saveSearchScrollPosition: PropTypes.func,\n        theme: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            containerWidth: null,\n        };\n        this.scrollPosition = this.props.scrollPosition;\n        this.setNumberOfColumns();\n\n        /**\n         * Inital values for columns heights\n         */\n        this.columnsHeights = Array(this.numberOfColumns).fill(0);\n\n        /**\n         * Items padding value\n         */\n        this.padding = ITEMS_PADDING;\n    }\n\n    componentDidMount() {\n        this.container = document.getElementById('search-grid-container');\n        // eslint-disable-next-line react/no-did-mount-set-state\n        this.setState({\n            ...this.state,\n            containerWidth: this.container.offsetWidth - WEBKIT_SCROLLBAR_WIDTH,\n        });\n        window.addEventListener('resize', this.resizeHandler);\n        window.addEventListener('scroll', this.scrollHandler);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.keyword !== this.props.keyword) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    componentWillUnmount() {\n        const {keyword} = this.props;\n        if (keyword !== 'trending') {\n            this.props.saveSearchScrollPosition(this.scrollPosition);\n        }\n\n        window.removeEventListener('resize', this.resizeHandler);\n        window.removeEventListener('scroll', this.scrollHandler);\n    }\n\n    setNumberOfColumns = () => {\n        if (window.matchMedia('(orientation: portrait)').matches) {\n            this.numberOfColumns = NUMBER_OF_COLUMNS_PORTRAIT;\n        } else {\n            this.numberOfColumns = NUMBER_OF_COLUMNS_LANDSCAPE;\n        }\n    }\n\n    itemClickHandler = (gfyItem) => {\n        const {keyword, handleItemClick} = this.props;\n        this.props.saveSearchScrollPosition(this.scrollPosition);\n\n        trackEvent('gfycat', 'shares', {gfyid: gfyItem.gfyId, keyword});\n        handleItemClick(gfyItem);\n    }\n\n    minHeightColumnIndex = () => {\n        return this.columnsHeights.indexOf(Math.min(...this.columnsHeights));\n    }\n\n    maxHeightColumnIndex = () => {\n        return this.columnsHeights.indexOf(Math.max(...this.columnsHeights));\n    }\n\n    maxColumnHeight = () => {\n        return Math.max(...this.columnsHeights);\n    }\n\n    resizeHandler = () => {\n        if (this.state.containerWidth !== this.container.offsetWidth - WEBKIT_SCROLLBAR_WIDTH) {\n            this.setNumberOfColumns();\n            this.setState({\n                ...this.state,\n                containerWidth: this.container.offsetWidth - WEBKIT_SCROLLBAR_WIDTH,\n            });\n            this.columnsHeights = Array(this.numberOfColumns).fill(0);\n        }\n    }\n\n    scrollHandler = () => {\n        this.scrollPosition = window.scrollY;\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n        const {\n            containerClassName,\n            gifs,\n            keyword,\n            resultsByTerm,\n            scrollPosition,\n            loadMore,\n            onCategories,\n        } = this.props;\n\n        const {containerWidth} = this.state;\n        const {moreRemaining, items = [], isEmpty} = resultsByTerm[keyword] ? resultsByTerm[keyword] : {};\n\n        /**\n         * Columns 'left' values\n         */\n        const columnWidth = parseInt(containerWidth / this.numberOfColumns, 10);\n        const leftPosition = Array(this.numberOfColumns).fill(0).map((item, index) => this.padding + ((index * columnWidth) - (index * (this.padding / 2))));\n\n        this.columnsHeights = Array(this.numberOfColumns).fill(this.padding);\n\n        // Item width in %\n        //const itemWidth = this.numberOfColumns === NUMBER_OF_COLUMNS_PORTRAIT ? 100 / NUMBER_OF_COLUMNS_PORTRAIT : 100 / this.numberOfColumns;\n        const itemWidth = 140;\n\n        const searchItems = containerWidth && items.length ?\n            items.map((item, index) => {\n                const gfyItem = gifs[item];\n                const {gfyId} = gfyItem;\n\n                // Position calculation\n                const colIndex = this.minHeightColumnIndex();\n                const top = this.columnsHeights[colIndex] + 'px';\n                const left = leftPosition[colIndex] + 'px';\n                const itemHeight = ((itemWidth / gfyItem.width) * gfyItem.height) + this.padding;\n                this.columnsHeights[colIndex] += itemHeight;\n\n                return (\n                    <SearchItem\n                        gfyItem={gfyItem}\n                        top={top}\n                        left={left}\n                        itemWidth={itemWidth}\n                        itemClickHandler={this.itemClickHandler}\n                        key={`${index}-${gfyId}`}\n                    />\n                );\n            }) : null;\n\n        this.containerHeight = this.maxColumnHeight();\n\n        const content = searchItems ? (\n            <InfiniteScroll\n                className='search-grid-infinite-scroll'\n                pageStart={0}\n                loadMore={loadMore}\n                initialLoad={false}\n                hasMore={moreRemaining}\n                threshold={1}\n                containerHeight={this.containerHeight}\n                scrollPosition={scrollPosition}\n                useWindow={false}\n            >\n                {searchItems}\n            </InfiniteScroll>\n        ) : null;\n\n        const emptySearch = isEmpty ? (\n            <div className='empty-search'>\n                <div className='empty-search-image'/>\n                <p>{'0 Gifs found for '}<strong>{keyword}</strong></p>\n                <a onClick={onCategories}>\n                    <div className='empty-search-button'>{'Go to Reactions'}</div>\n                </a>\n            </div>\n        ) : null;\n\n        return (\n            <div\n                id='search-grid-container'\n                className={`search-grid-container ${containerClassName}`}\n                style={style.background}\n            >\n                {content}\n                {emptySearch}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchGrid);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {saveSearchScrollPosition} from 'mattermost-redux/actions/gifs';\n\nimport SearchGrid from './SearchGrid';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.cache,\n        ...state.entities.gifs.search,\n        appProps: state.entities.gifs.app,\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {\n        saveSearchScrollPosition,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchGrid);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {searchIfNeededInitial, searchGfycat} from 'mattermost-redux/actions/gifs';\n\nimport SearchGrid from 'components/gif_picker/components/SearchGrid';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.search,\n    };\n}\n\nconst mapDispatchToProps = ({\n    searchGfycat,\n    searchIfNeededInitial,\n});\n\nexport class Search extends PureComponent {\n    static propTypes = {\n        handleItemClick: PropTypes.func,\n        onCategories: PropTypes.func,\n        searchText: PropTypes.string,\n        searchIfNeededInitial: PropTypes.func,\n        searchGfycat: PropTypes.func,\n    }\n\n    componentDidMount() {\n        const {searchText} = this.props;\n        this.props.searchIfNeededInitial(searchText.split('-').join(' '));\n    }\n\n    componentDidUpdate(prevProps) {\n        const {searchText} = this.props;\n        if (prevProps.searchText !== searchText) {\n            this.props.searchIfNeededInitial(searchText.split('-').join(' '));\n        }\n    }\n\n    loadMore = () => {\n        const {searchText} = this.props;\n        this.props.searchGfycat({searchText});\n    }\n\n    render() {\n        const {handleItemClick, searchText, onCategories} = this.props;\n\n        return (\n            <SearchGrid\n                keyword={searchText}\n                handleItemClick={handleItemClick}\n                onCategories={onCategories}\n                loadMore={this.loadMore}\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {\n    searchCategory,\n    searchIfNeededInitial,\n    saveSearchScrollPosition,\n} from 'mattermost-redux/actions/gifs';\n\nimport SearchGrid from 'components/gif_picker/components/SearchGrid';\n\nconst mapDispatchToProps = ({\n    searchCategory,\n    searchIfNeededInitial,\n    saveSearchScrollPosition,\n});\n\nexport class Trending extends PureComponent {\n    static propTypes = {\n        handleItemClick: PropTypes.func,\n        onCategories: PropTypes.func,\n        searchCategory: PropTypes.func,\n        searchIfNeededInitial: PropTypes.func,\n        saveSearchScrollPosition: PropTypes.func,\n    }\n\n    componentDidMount() {\n        this.props.searchIfNeededInitial('trending');\n    }\n\n    componentWillUnmount() {\n        this.props.saveSearchScrollPosition(0);\n    }\n\n    loadMore = () => {\n        this.props.searchCategory({tagName: 'trending'});\n    }\n\n    render() {\n        const {handleItemClick, onCategories} = this.props;\n        return (\n            <SearchGrid\n                keyword='trending'\n                handleItemClick={handleItemClick}\n                onCategories={onCategories}\n                loadMore={this.loadMore}\n            />\n        );\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Trending);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nimport App from 'components/gif_picker/components/App';\nimport Categories from 'components/gif_picker/components/Categories';\nimport Search from 'components/gif_picker/components/Search';\nimport Trending from 'components/gif_picker/components/Trending';\nimport constants from 'components/gif_picker/utils/constants';\n\nexport const appProps = {\n    appName: constants.appName.mattermost,\n    basePath: '/mattermost',\n    itemTapType: constants.ItemTapAction.SHARE,\n    appClassName: 'gfycat',\n    shareEvent: 'shareMattermost',\n    appId: 'mattermostwebviews',\n    enableHistory: true,\n    header: {\n        tabs: [constants.Tab.TRENDING, constants.Tab.REACTIONS],\n        displayText: false,\n    },\n};\n\nexport default class GifPicker extends React.Component {\n    static propTypes = {\n        onGifClick: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        // All props are primitives or treated as immutable\n        this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);\n\n        this.state = {\n            action: 'trending',\n        };\n    }\n\n    handleTrending = () => {\n        this.setState({\n            action: 'trending',\n        });\n    }\n\n    handleCategories = () => {\n        this.setState({\n            action: 'reactions',\n        });\n    }\n\n    handleSearch = () => {\n        this.setState({\n            action: 'search',\n        });\n    }\n\n    handleItemClick = (gif) => {\n        this.props.onGifClick(gif.max5mbGif);\n    }\n\n    render() {\n        const {action} = this.state;\n        let component;\n        switch (action) {\n        case 'reactions':\n            component = (\n                <Categories\n                    appProps={appProps}\n                    onTrending={this.handleTrending}\n                    onSearch={this.handleSearch}\n                />\n            );\n            break;\n        case 'search':\n            component = (\n                <Search\n                    appProps={appProps}\n                    onCategories={this.handleCategories}\n                    handleItemClick={this.handleItemClick}\n                />\n            );\n            break;\n        case 'trending':\n            component = (\n                <Trending\n                    appProps={appProps}\n                    onCategories={this.handleCategories}\n                    handleItemClick={this.handleItemClick}\n                />\n            );\n            break;\n        }\n        return (\n            <div>\n                <App\n                    appProps={appProps}\n                    action={action}\n                    onTrending={this.handleTrending}\n                    onCategories={this.handleCategories}\n                    onSearch={this.handleSearch}\n                >\n                    {component}\n                </App>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class EmojiIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <i className='far fa-laugh'/>\n                {/* <svg\n                    width='16px'\n                    height='16px'\n                    viewBox='0 0 15 15'\n                    role='img'\n                    aria-label='Emoji icon'\n                >\n                    <g\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='inherit'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-1071.000000, -954.000000)'\n                            fill='inherit'\n                        >\n                            <g transform='translate(25.000000, 937.000000)'>\n                                <g transform='translate(1046.000000, 17.000000)'>\n                                    <path d='M7.5,0.0852272727 C3.405,0.0852272727 0.0852272727,3.405 0.0852272727,7.5 C0.0852272727,11.595 3.405,14.9147727 7.5,14.9147727 C11.595,14.9147727 14.9147727,11.595 14.9147727,7.5 C14.9147727,3.405 11.595,0.0852272727 7.5,0.0852272727 Z M7.5,14.0663436 C3.87926951,14.0663436 0.933656417,11.1207305 0.933656417,7.5 C0.933656417,3.87926951 3.87926951,0.933656417 7.5,0.933656417 C11.1207305,0.933656417 14.0663436,3.87926951 14.0663436,7.5 C14.0663436,11.1207305 11.1207305,14.0663436 7.5,14.0663436 Z'/>\n                                    <path d='M11.7732955,8.95397727 C12.0119318,8.90488636 12.2159659,9.11778409 12.1684091,9.35676136 C11.8063636,11.1790909 9.85346591,12.5710227 7.49846591,12.5710227 C5.15096591,12.5710227 3.20284091,11.1877841 2.83193182,9.37397727 C2.78181818,9.129375 2.99267045,8.911875 3.23744318,8.96198864 C4.85369318,9.29232955 10.1786932,9.28142045 11.7732955,8.95397727 Z'/>\n                                    <ellipse\n                                        cx='4.94318182'\n                                        cy='5.50431818'\n                                        rx='1'\n                                        ry='1.06534091'\n                                    />\n                                    <ellipse\n                                        cx='10.0568182'\n                                        cy='5.50431818'\n                                        rx='1'\n                                        ry='1.06534091'\n                                    />\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg> */}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GfycatIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='22px'\n                    height='14px'\n                    viewBox='0 0 22 14'\n                >\n                    <g\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='inherit'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-1344.000000, -552.000000)'\n                            fill='inherit'\n                        >\n                            <g transform='translate(1147.000000, 542.000000)'>\n                                <g transform='translate(1.000000, 1.000000)'>\n                                    <g transform='translate(138.000000, 0.000000)'>\n                                        <path d='M63.6748519,23 L62.2292481,23 C61.8176589,23 61.4619872,22.8510143 61.1631497,22.5539741 C60.8633954,22.2569338 60.71306,21.8993681 60.71306,21.4831393 C60.71306,21.0678417 60.8597287,20.710276 61.1539829,20.4132358 C61.4473204,20.1161955 61.800242,19.9672098 62.2118312,19.9672098 L63.6565183,19.9672098 C64.0681075,19.9672098 64.4182791,19.8219488 64.7061166,19.5304955 C64.993954,19.2390422 65.1378727,18.8917193 65.1378727,18.4866644 L65.1378727,15.4371134 C65.1378727,15.0208846 64.993954,14.6670436 64.7061166,14.3755903 C64.4182791,14.084137 64.0745243,13.938876 63.6748519,13.938876 C63.2632628,13.938876 62.9103411,14.0869305 62.6170036,14.3849019 C62.3227494,14.6819421 62.1760807,15.0329897 62.1760807,15.4371134 C62.1760807,15.7294978 62.3016658,16.0563352 62.5519193,16.4185567 L62.575753,16.4530096 C62.8269232,16.8143 62.9515917,17.1420685 62.9515917,17.4344529 C62.9515917,17.8506817 62.8049229,18.2073163 62.5115854,18.5043565 C62.2173313,18.8023279 61.8653263,18.9503824 61.4537371,18.9503824 C60.7836443,18.9503824 60.2198863,18.5164616 59.7615465,17.6486199 C59.373791,16.9232458 59.1794549,16.1857665 59.1794549,15.4371134 C59.1794549,14.188427 59.6176278,13.1213169 60.4930568,12.234852 C61.3684859,11.3493183 62.4226675,10.9060858 63.6565183,10.9060858 C64.8912858,10.9060858 65.9482175,11.3493183 66.8300633,12.234852 C67.7109925,13.1213169 68.1519154,14.188427 68.1519154,15.4371134 L68.1519154,18.4866644 C68.1519154,19.7353508 67.7137425,20.7996674 66.8383134,21.6796142 C65.9628844,22.559561 64.9087028,23 63.6748519,23 Z M80,15.9269039 C80,16.3068174 79.8689148,16.6317925 79.6076611,16.9027602 C79.3454907,17.173728 79.0319863,17.3096774 78.6653144,17.3096774 L76.8438719,17.3096774 L76.8438719,18.6589292 C76.8438719,19.0388427 76.7127867,19.3638178 76.4506164,19.6347855 C76.1893627,19.9057532 75.8749415,20.0417027 75.5082697,20.0417027 C75.1315143,20.0417027 74.8125098,19.9057532 74.5503394,19.6347855 C74.2890857,19.3638178 74.1580005,19.0388427 74.1580005,18.6589292 L74.1580005,13.1464583 C74.1580005,12.00858 74.5485061,11.0355171 75.3276838,10.2272697 C76.1077782,9.41995344 77.0473748,9.01582973 78.1473904,9.01582973 L78.6653144,9.01582973 C79.0319863,9.01582973 79.3454907,9.15177918 79.6076611,9.42274692 C79.8689148,9.69371467 80,10.0186897 80,10.3986033 C80,10.7775856 79.8689148,11.1034919 79.6076611,11.3744596 C79.3454907,11.6454273 79.0319863,11.7804456 78.6653144,11.7804456 L78.162974,11.7804456 C77.7963021,11.7804456 77.481881,11.9163951 77.2206273,12.1873628 C76.9584569,12.4583306 76.8282884,12.7777187 76.8282884,13.1464583 L76.8282884,14.5450615 L78.6653144,14.5450615 C79.0319863,14.5450615 79.3454907,14.681011 79.6076611,14.9519787 C79.8689148,15.2229465 80,15.5479215 80,15.9269039 Z M72.6344789,18.6589292 C72.6344789,19.0388427 72.5043104,19.3638178 72.24214,19.6347855 C71.9808863,19.9057532 71.6664652,20.0417027 71.2997933,20.0417027 C70.9340382,20.0417027 70.616867,19.9057532 70.3501132,19.6347855 C70.0833594,19.3638178 69.9495242,19.0388427 69.9495242,18.6589292 L69.9495242,14.170735 C69.9495242,13.7917526 70.0806094,13.4667775 70.3418631,13.1958098 C70.6040335,12.9239109 70.9175379,12.7888926 71.2842098,12.7888926 C71.6508817,12.7888926 71.9671361,12.9239109 72.2348066,13.1958098 C72.5015604,13.4667775 72.6344789,13.7917526 72.6344789,14.170735 L72.6344789,18.6589292 Z M58.3370263,12.5356169 C58.1023563,11.7441304 58.0042716,10.9163286 58.0042716,10.9163286 C57.9721878,10.6937812 58.1243566,10.547589 58.3425264,10.5904223 C58.3425264,10.5904223 58.5350291,10.6267376 58.8017829,10.6807449 C59.0767868,10.7375457 59.4324585,10.8139009 59.7404628,10.8921184 C60.3473048,11.0448287 60.95323,11.2720319 60.95323,11.2720319 C60.95323,11.2720319 60.2904706,11.6621882 59.7239626,12.3018956 C59.1565379,12.9406718 58.8650338,13.8420353 58.8650338,13.8420353 C58.8650338,13.8420353 58.5716963,13.3280346 58.3370263,12.5356169 Z M69.088762,12.5356169 C69.323432,11.7441304 69.4224334,10.9163286 69.4224334,10.9163286 C69.4536005,10.6937812 69.3014317,10.547589 69.0832619,10.5904223 C69.0832619,10.5904223 68.2921674,10.7384769 67.6853254,10.8921184 C67.0794002,11.0448287 66.4725583,11.2720319 66.4725583,11.2720319 C66.4725583,11.2720319 67.1353177,11.6621882 67.7027424,12.3018956 C68.2692504,12.9406718 68.5616712,13.8420353 68.5616712,13.8420353 C68.5616712,13.8420353 68.8550087,13.3280346 69.088762,12.5356169 Z M72.6344789,10.3818424 C72.6344789,10.7617559 72.5043104,11.086731 72.24214,11.3576987 C71.9808863,11.6286664 71.6664652,11.7646159 71.2997933,11.7646159 C70.9340382,11.7646159 70.616867,11.6286664 70.3501132,11.3576987 C70.0833594,11.086731 69.9495242,10.7617559 69.9495242,10.3818424 C69.9495242,10.00286 70.0806094,9.67788494 70.3418631,9.40691719 C70.6040335,9.13594945 70.9175379,9 71.2842098,9 C71.6508817,9 71.9671361,9.13594945 72.2348066,9.40691719 C72.5015604,9.67788494 72.6344789,10.00286 72.6344789,10.3818424 Z'/>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EmojiPickerHeader extends React.PureComponent {\n    static propTypes = {\n        handleEmojiPickerClose: PropTypes.func.isRequired,\n    };\n\n    render() {\n        return (\n            <div className='emoji-picker__header modal-header'>\n                <button\n                    type='button'\n                    className='close emoji-picker__header-close-button'\n                    onClick={this.props.handleEmojiPickerClose}\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                    <span className='sr-only'>\n                        <FormattedMessage\n                            id={'emoji_picker.close'}\n                            defaultMessage={'Close'}\n                        />\n                    </span>\n                </button>\n                <h4 className='modal-title emoji-picker__header-title'>\n                    <FormattedMessage\n                        id={'emoji_picker.header'}\n                        defaultMessage={'Emoji Picker'}\n                    />\n                </h4>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nconst defaultRule = (aName, bName, emojiA, emojiB) => {\n    if (emojiA && emojiB && emojiA.category === 'custom' && emojiB.category !== 'custom') {\n        return 1;\n    } else if (emojiB && emojiA && emojiB.category === 'custom' && emojiA.category !== 'custom') {\n        return -1;\n    }\n\n    return aName.localeCompare(bName);\n};\n\nconst thumbsDownRule = (otherName) => {\n    if (otherName === 'thumbsup' || otherName === '+1') {\n        return 1;\n    }\n    return 0;\n};\n\nconst thumbsUpRule = (otherName) => {\n    if (otherName === 'thumbsdown' || otherName === '-1') {\n        return -1;\n    }\n    return 0;\n};\n\nconst customRules = {\n    thumbsdown: thumbsDownRule,\n    '-1': thumbsDownRule,\n    thumbsup: thumbsUpRule,\n    '+1': thumbsUpRule,\n};\n\nconst getEmojiName = (emoji, searchedName) => {\n    // There's an edge case for custom emojis that start with a thumb prefix.\n    // It doesn't match the first alias for the relevant system emoji.\n    // We don't have control over the names or aliases of custom emojis...\n    // ... and how they compare to the relevant system ones.\n    // So we need to search for a matching alias in the whole array.\n    // E.g. thumbsup-custom vs [+1, thumbsup]\n    if (!emoji || !(emoji.name || emoji.aliases)) {\n        return '';\n    }\n\n    if (searchedName) {\n        return emoji.name || emoji.aliases.find((alias) => alias.startsWith(searchedName)) || emoji.aliases[0];\n    }\n\n    return emoji.name || emoji.aliases[0];\n};\n\nexport function compareEmojis(emojiA, emojiB, searchedName) {\n    const aName = getEmojiName(emojiA, searchedName);\n    const bName = getEmojiName(emojiB, searchedName);\n\n    // Have the emojis that contain the search appear first\n    const aPrefix = aName.startsWith(searchedName);\n    const bPrefix = bName.startsWith(searchedName);\n\n    if (aPrefix === bPrefix) {\n        if (customRules[aName]) {\n            return customRules[aName](bName, emojiB) || defaultRule(aName, bName, emojiA, emojiB);\n        }\n\n        return defaultRule(aName, bName, emojiA, emojiB);\n    } else if (aPrefix) {\n        return -1;\n    }\n\n    return 1;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class EmojiPickerCategory extends React.Component {\n    static propTypes = {\n        category: PropTypes.string.isRequired,\n        icon: PropTypes.node.isRequired,\n        onCategoryClick: PropTypes.func.isRequired,\n        selected: PropTypes.bool.isRequired,\n        enable: PropTypes.bool.isRequired,\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.selected !== this.props.selected ||\n            nextProps.enable !== this.props.enable;\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        this.props.onCategoryClick(this.props.category);\n    }\n\n    render() {\n        let className = 'emoji-picker__category';\n        if (this.props.selected) {\n            className += ' emoji-picker__category--selected';\n        }\n\n        if (!this.props.enable) {\n            className += ' disable';\n        }\n\n        return (\n            <a\n                className={className}\n                href='#'\n                onClick={this.handleClick}\n                aria-label={this.props.category}\n            >\n                {this.props.icon}\n            </a>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport debounce from 'lodash/debounce';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\n\nimport imgTrans from 'images/img_trans.gif';\nimport {intlShape} from 'utils/react_intl';\n\nconst SCROLLING_ADDITIONAL_VISUAL_SPACING = 10; // to make give the emoji some visual 'breathing room'\nconst EMOJI_LAZY_LOAD_SCROLL_THROTTLE = 150;\n\nclass EmojiPickerItem extends React.Component {\n    static propTypes = {\n        emoji: PropTypes.object.isRequired,\n        onItemOver: PropTypes.func.isRequired,\n        onItemClick: PropTypes.func.isRequired,\n        category: PropTypes.string.isRequired,\n        isSelected: PropTypes.bool,\n        categoryIndex: PropTypes.number.isRequired,\n        emojiIndex: PropTypes.number.isRequired,\n        containerRef: PropTypes.any,\n        containerTop: PropTypes.number.isRequired,\n        containerBottom: PropTypes.number.isRequired,\n        intl: intlShape.isRequired,\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.isSelected !== this.props.isSelected;\n    }\n\n    emojiItemRef = (emojiItem) => {\n        this.emojiItem = emojiItem;\n    };\n\n    emojiName = () => {\n        const {formatMessage} = this.props.intl;\n        return formatMessage({\n            id: 'emoji_picker_item.emoji_aria_label',\n            defaultMessage: '{emojiName} emoji',\n        },\n        {\n            emojiName: this.props.emoji.aliases[0].replace(/_/g, ' '),\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.isSelected && this.props.isSelected) {\n            const topOfTheEmojiItem = this.emojiItem.offsetTop;\n            const bottomOfTheEmojiItem = topOfTheEmojiItem + this.emojiItem.offsetHeight;\n            const {containerRef, containerTop, containerBottom} = this.props;\n            if (topOfTheEmojiItem < containerTop) {\n                containerRef.scrollTop = topOfTheEmojiItem - SCROLLING_ADDITIONAL_VISUAL_SPACING;\n            } else if (bottomOfTheEmojiItem > containerBottom) {\n                containerRef.scrollTop = (bottomOfTheEmojiItem - containerRef.offsetHeight) + SCROLLING_ADDITIONAL_VISUAL_SPACING;\n            }\n        }\n    }\n\n    handleMouseOver = () => {\n        if (!this.props.isSelected) {\n            this.props.onItemOver(this.props.categoryIndex, this.props.emojiIndex);\n        }\n    };\n\n    handleMouseOverThrottle = debounce(this.handleMouseOver, EMOJI_LAZY_LOAD_SCROLL_THROTTLE, {leading: true, trailing: true});\n\n    handleClick = () => {\n        this.props.onItemClick(this.props.emoji);\n    };\n\n    render() {\n        const {emoji} = this.props;\n\n        let itemClassName = 'emoji-picker__item';\n        if (this.props.isSelected) {\n            itemClassName += ' selected';\n        }\n\n        let spriteClassName = 'emojisprite';\n        spriteClassName += ' emoji-category-' + emoji.category + '-' + emoji.batch;\n        spriteClassName += ' emoji-' + emoji.filename;\n\n        let image;\n        if (emoji.category && emoji.batch) {\n            image = (\n                <img\n                    alt={'emoji image'}\n                    data-testid={emoji.aliases}\n                    onMouseOver={this.handleMouseOverThrottle}\n                    src={imgTrans}\n                    className={spriteClassName}\n                    onClick={this.handleClick}\n                    id={'emoji-' + emoji.filename}\n                    aria-label={this.emojiName()}\n                    role='button'\n                />\n            );\n        } else {\n            image = (\n                <img\n                    alt={'custom emoji image'}\n                    onMouseOver={this.handleMouseOver}\n                    src={getEmojiImageUrl(emoji)}\n                    className={'emoji-category--custom'}\n                    onClick={this.handleClick}\n                />\n            );\n        }\n\n        return (\n            <div\n                className={itemClassName}\n                ref={this.emojiItemRef}\n            >\n                <div data-testid='emojiItem'>\n                    {image}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(EmojiPickerItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EmojiPickerCategorySection extends React.PureComponent {\n    static propTypes = {\n        categoryName: PropTypes.string.isRequired,\n        children: PropTypes.any,\n        updateCategoryOffset: PropTypes.func.isRequired,\n    };\n\n    componentDidMount() {\n        this.updateOffsetFrame = window.requestAnimationFrame(() => {\n            this.props.updateCategoryOffset(this.props.categoryName, this.div.offsetTop);\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.updateOffsetFrame) {\n            window.cancelAnimationFrame(this.updateOffsetFrame);\n        }\n    }\n\n    divRef = (div) => {\n        this.div = div;\n    };\n\n    render() {\n        return (\n            <div\n                ref={this.divRef}\n            >\n                <div className='emoji-picker-items__container'>\n                    <div\n                        className='emoji-picker__category-header'\n                        id={`emojipickercat-${this.props.categoryName}`}\n                    >\n                        <FormattedMessage id={'emoji_picker.' + this.props.categoryName}/>\n                    </div>\n                </div>\n                <div className='emoji-picker-items__container'>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\n\nimport imgTrans from 'images/img_trans.gif';\n\nexport default class EmojiPickerPreview extends React.Component {\n    static propTypes = {\n        emoji: PropTypes.object,\n    }\n\n    render() {\n        const emoji = this.props.emoji;\n\n        if (emoji) {\n            let name;\n            let aliases;\n            let previewImage;\n\n            if (emoji.aliases && emoji.category && emoji.batch) {\n                // This is a system emoji which only has a list of aliases\n                name = emoji.aliases[0];\n                aliases = emoji.aliases;\n\n                previewImage = (\n                    <span className='sprite-preview'>\n                        <img\n                            id='emojiPickerSpritePreview'\n                            alt={'emoji category image'}\n                            src={imgTrans}\n                            className={'emojisprite-preview emoji-category-' + emoji.category + '-' + emoji.batch + ' emoji-' + emoji.filename}\n                        />\n                    </span>\n                );\n            } else {\n                // This is a custom emoji that matches the model on the server\n                name = emoji.name;\n                aliases = [emoji.name];\n                previewImage = (\n                    <img\n                        id='emojiPickerSpritePreview'\n                        alt={'emoji preview image'}\n                        className='emoji-picker__preview-image'\n                        src={getEmojiImageUrl(emoji)}\n                    />\n                );\n            }\n\n            return (\n                <div className='emoji-picker__preview'>\n                    <div className='emoji-picker__preview-image-box'>\n                        {previewImage}\n                    </div>\n                    <div className='emoji-picker__preview-image-label-box'>\n                        <span className='emoji-picker__preview-name'>{name}</span>\n                        <span\n                            id='emojiPickerAliasesPreview'\n                            className='emoji-picker__preview-aliases'\n                        >\n                            {':' + aliases[0] + ':'}\n                        </span>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='emoji-picker__preview emoji-picker__preview-placeholder'>\n                <FormattedMessage\n                    id='emoji_picker.emojiPicker'\n                    defaultMessage='Emoji Picker'\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport throttle from 'lodash/throttle';\n\nimport * as Emoji from 'utils/emoji.jsx';\nimport {compareEmojis} from 'utils/emoji_utils.jsx';\nimport {t} from 'utils/i18n';\nimport imgTrans from 'images/img_trans.gif';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport EmojiPickerCategory from './components/emoji_picker_category';\nimport EmojiPickerItem from './components/emoji_picker_item';\nimport EmojiPickerCategorySection from './emoji_picker_category_section';\nimport EmojiPickerPreview from './components/emoji_picker_preview';\n\nconst CATEGORY_SEARCH_RESULTS = 'searchResults';\nt('emoji_picker.searchResults');\n\nconst EMOJI_HEIGHT = 27;\n\n// If this changes, the spaceRequiredAbove and spaceRequiredBelow props passed to the EmojiPickerOverlay must be updated\nconst EMOJI_CONTAINER_HEIGHT = 290;\nconst EMOJI_CONTAINER_STYLE = {\n    height: EMOJI_CONTAINER_HEIGHT,\n};\n\nconst EMOJI_LAZY_LOAD_BUFFER = 75;\nconst EMOJI_PER_ROW = 9; // needs to match variable `$emoji-per-row` in _variables.scss\nconst EMOJI_TO_LOAD_PER_UPDATE = 135;\nconst SYSTEM_EMOJIS_COUNT = 1476;\nconst EMOJI_LAZY_LOAD_SCROLL_THROTTLE = 100;\n\nconst recentEmojiCategory = {\n    recent: {\n        name: 'recent',\n        className: 'fa fa-clock-o',\n        id: t('emoji_picker.recent'),\n        message: 'Recently Used',\n        offset: 0,\n    },\n};\n\nconst peopleEmojiCategory = {\n    people: {\n        name: 'people',\n        className: 'fa fa-smile-o',\n        id: t('emoji_picker.people'),\n        message: 'People',\n        offset: 0,\n    },\n};\n\nconst CATEGORIES = {\n    ...peopleEmojiCategory,\n    nature: {\n        name: 'nature',\n        className: 'fa fa-leaf',\n        id: t('emoji_picker.nature'),\n        message: 'Nature',\n        offset: 0,\n    },\n    foods: {\n        name: 'foods',\n        className: 'fa fa-cutlery',\n        id: t('emoji_picker.foods'),\n        message: 'Foods',\n        offset: 0,\n    },\n    activity: {\n        name: 'activity',\n        className: 'fa fa-futbol-o',\n        id: t('emoji_picker.activity'),\n        message: 'Activity',\n        offset: 0,\n    },\n    places: {\n        name: 'places',\n        className: 'fa fa-plane',\n        id: t('emoji_picker.places'),\n        message: 'Places',\n        offset: 0,\n    },\n    objects: {\n        name: 'objects',\n        className: 'fa fa-lightbulb-o',\n        id: t('emoji_picker.objects'),\n        message: 'Objects',\n        offset: 0,\n    },\n    symbols: {\n        name: 'symbols',\n        className: 'fa fa-heart-o',\n        id: t('emoji_picker.symbols'),\n        message: 'Symbols',\n        offset: 0,\n    },\n    flags: {\n        name: 'flags',\n        className: 'fa fa-flag-o',\n        id: t('emoji_picker.flags'),\n        message: 'Flags',\n        offset: 0,\n    },\n    custom: {\n        name: 'custom',\n        className: 'fa fa-at',\n        id: t('emoji_picker.custom'),\n        message: 'Custom',\n        offset: 0,\n    },\n};\n\nfunction getEmojiFilename(emoji) {\n    return emoji.filename || emoji.id;\n}\n\nexport function filterEmojiSearchInput(input) {\n    return input.toLowerCase().replace(/^:|:$/g, '');\n}\n\nconst EMOJIS_PER_PAGE = 200;\nconst LOAD_MORE_AT_PIXELS_FROM_BOTTOM = 500;\n\nexport default class EmojiPicker extends React.PureComponent {\n    static propTypes = {\n        listHeight: PropTypes.number,\n        onEmojiClose: PropTypes.func.isRequired,\n        onEmojiClick: PropTypes.func.isRequired,\n        customEmojisEnabled: PropTypes.bool,\n        emojiMap: PropTypes.object.isRequired,\n        recentEmojis: PropTypes.array.isRequired,\n        customEmojiPage: PropTypes.number.isRequired,\n        visible: PropTypes.bool,\n        actions: PropTypes.shape({\n            getCustomEmojis: PropTypes.func.isRequired,\n            searchCustomEmojis: PropTypes.func.isRequired,\n            incrementEmojiPickerPage: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        listHeight: 245,\n        customEmojiPage: 0,\n        customEmojisEnabled: false,\n    };\n\n    static getEmojis(props, state) {\n        const {categories, allEmojis} = state;\n        const emojiMap = props.emojiMap;\n        const customEmojiMap = emojiMap.customEmojis;\n\n        for (const category of Object.keys(categories)) {\n            let categoryEmojis = [];\n            if (category === 'recent' && props.recentEmojis.length) {\n                const recentEmojis = [...props.recentEmojis].reverse();\n                categoryEmojis = recentEmojis.filter((name) => {\n                    return emojiMap.has(name);\n                }).map((name) => {\n                    return emojiMap.get(name);\n                });\n            } else {\n                const indices = Emoji.EmojiIndicesByCategory.get(category) || [];\n                categoryEmojis = indices.map((index) => Emoji.Emojis[index]);\n                if (category === 'custom') {\n                    categoryEmojis = categoryEmojis.concat([...customEmojiMap.values()]);\n                }\n            }\n            categories[category].emojiIds = categoryEmojis.map((emoji) => getEmojiFilename(emoji));\n            for (let i = 0; i < categoryEmojis.length; i++) {\n                const currentEmoji = categoryEmojis[i];\n                const fileName = getEmojiFilename(currentEmoji);\n                allEmojis[fileName] = {\n                    ...currentEmoji,\n                    visible: false,\n                    offset: null,\n                };\n                if (!currentEmoji.filename) {\n                    // if custom emoji, set proper attributes\n                    allEmojis[fileName] = {\n                        ...allEmojis[fileName],\n                        aliases: [currentEmoji.name],\n                        category: 'custom',\n                        filename: fileName,\n                    };\n                }\n            }\n        }\n\n        return {categories, allEmojis};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let updatedState = {emojiMap: props.emojiMap};\n        if (JSON.stringify(Object.keys(state.categories)) !== state.categoryKeys || props.emojiMap !== state.emojiMap) {\n            const {categories, allEmojis} = EmojiPicker.getEmojis(props, state);\n            updatedState = {...updatedState, categories, allEmojis, categoryKeys: JSON.stringify(Object.keys(categories))};\n        }\n\n        return updatedState;\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleScrollThrottle = throttle(this.handleScroll, EMOJI_LAZY_LOAD_SCROLL_THROTTLE, {leading: false, trailing: true});\n\n        this.divHeight = 0;\n        this.missingPages = true;\n        this.loadingMoreEmojis = false;\n        const categories = props.recentEmojis.length ? {...recentEmojiCategory, ...peopleEmojiCategory} : peopleEmojiCategory;\n        this.state = {\n            allEmojis: {},\n            categories,\n            filter: '',\n            cursor: [-1, -1], // categoryIndex, emojiIndex\n            divTopOffset: 0,\n            emojisToShow: SYSTEM_EMOJIS_COUNT,\n            renderAllCategories: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.customEmojiPage === 0) {\n            this.loadMoreCustomEmojis();\n        }\n\n        // Delay taking focus because this briefly renders offscreen when using an Overlay\n        // so focusing it immediately on mount can cause weird scrolling\n        window.requestAnimationFrame(() => {\n            if (this.searchInput) {\n                this.searchInput.focus();\n            }\n            this.renderAllCategoriesFrame = window.requestAnimationFrame(() => {\n                this.renderAllCategories();\n            });\n        });\n\n        if (this.emojiPickerContainer) {\n            this.divHeight = this.emojiPickerContainer.offsetHeight;\n        }\n\n        const rootComponent = document.getElementById('root');\n        if (rootComponent) {\n            rootComponent.classList.add('emoji-picker--active');\n        }\n    }\n\n    updateEmojisToShow(divTopOffset) {\n        if (divTopOffset === this.state.divTopOffset) {\n            return;\n        }\n\n        this.setState({divTopOffset});\n        if (this.lastVisibleEmoji) {\n            const difference = this.lastVisibleEmoji.offsetTop - (divTopOffset + EMOJI_CONTAINER_HEIGHT + EMOJI_LAZY_LOAD_BUFFER);\n            if (difference <= 0) {\n                const numToLoad = EMOJI_TO_LOAD_PER_UPDATE + Math.ceil((difference / EMOJI_HEIGHT) * EMOJI_PER_ROW * -1);\n                this.setState((state) => ({\n                    emojisToShow: state.emojisToShow + numToLoad,\n                }));\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.renderAllCategoriesFrame) {\n            window.cancelAnimationFrame(this.renderAllCategoriesFrame);\n        }\n\n        const rootComponent = document.getElementById('root');\n        if (rootComponent) {\n            rootComponent.classList.remove('emoji-picker--active');\n        }\n    }\n\n    renderAllCategories = () => {\n        const categories = this.props.recentEmojis.length ? {...recentEmojiCategory, ...CATEGORIES} : CATEGORIES;\n        this.setState((state) => ({\n            categories: {\n                ...categories,\n                ...state.categories,\n            },\n            renderAllCategories: true,\n        }));\n    }\n\n    loadMoreCustomEmojis = async () => {\n        if (!this.props.customEmojisEnabled || this.loadingMoreEmojis) {\n            return;\n        }\n\n        this.loadingMoreEmojis = true;\n\n        const {data} = await this.props.actions.getCustomEmojis(this.props.customEmojiPage, EMOJIS_PER_PAGE);\n        if (!data) {\n            this.loadingMoreEmojis = false;\n            return;\n        }\n\n        if (data.length < EMOJIS_PER_PAGE) {\n            this.missingPages = false;\n            this.loadingMoreEmojis = false;\n            return;\n        }\n\n        await this.props.actions.incrementEmojiPickerPage();\n\n        this.loadingMoreEmojis = false;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.visible && !prevProps.visible) {\n            this.searchInput.focus();\n        }\n\n        if (!this.missingPages || !this.emojiPickerContainer) {\n            return;\n        }\n\n        const pixelsFromBottom = this.emojiPickerContainer.scrollHeight - this.state.divTopOffset - this.emojiPickerContainer.clientHeight;\n        if (pixelsFromBottom <= LOAD_MORE_AT_PIXELS_FROM_BOTTOM) {\n            this.loadMoreCustomEmojis();\n        }\n    }\n\n    lastVisibleEmojiRef = (lastVisibleEmoji) => {\n        this.lastVisibleEmoji = lastVisibleEmoji;\n    };\n    emojiPickerContainerRef = (emojiPickerContainer) => {\n        this.emojiPickerContainer = emojiPickerContainer;\n    };\n    emojiSearchInput = (input) => {\n        this.searchInput = input;\n    };\n\n    handleCategoryClick = (categoryName) => {\n        this.setState({\n            cursor: [Object.keys(this.state.categories).indexOf(categoryName), 0],\n        });\n        this.updateEmojisToShow(this.state.categories[categoryName].offset);\n        this.emojiPickerContainer.scrollTop = this.state.categories[categoryName].offset;\n        this.searchInput.focus();\n    }\n\n    handleFilterChange = (e) => {\n        e.preventDefault();\n        const filter = filterEmojiSearchInput(e.target.value);\n\n        if (this.props.customEmojisEnabled && filter && filter.trim() !== '') {\n            this.props.actions.searchCustomEmojis(filter);\n        }\n\n        this.setState(() => ({\n            filter,\n            cursor: [0, 0],\n        }));\n    }\n\n    handleItemOver = (categoryIndex, emojiIndex) => {\n        this.setState({\n            cursor: [categoryIndex, emojiIndex],\n        });\n    }\n\n    handleItemClick = (emoji) => {\n        this.props.onEmojiClick(emoji);\n    }\n\n    handleCategoryKeyDown = (e) => {\n        switch (e.key) {\n        case 'ArrowRight':\n            e.preventDefault();\n            this.selectNextEmoji();\n            this.searchInput.focus();\n            break;\n        case 'ArrowLeft':\n            e.preventDefault();\n            this.selectPrevEmoji();\n            this.searchInput.focus();\n            break;\n        case 'ArrowUp':\n            e.preventDefault();\n            this.selectPrevEmoji(EMOJI_PER_ROW);\n            this.searchInput.focus();\n            break;\n        case 'ArrowDown':\n            e.preventDefault();\n            this.selectNextEmoji(EMOJI_PER_ROW);\n            this.searchInput.focus();\n            break;\n        }\n    }\n\n    handleKeyDown = (e) => {\n        switch (e.key) {\n        case 'ArrowRight':\n            e.preventDefault();\n            this.selectNextEmoji();\n            break;\n        case 'ArrowLeft':\n            e.preventDefault();\n            this.selectPrevEmoji();\n            break;\n        case 'ArrowUp':\n            e.preventDefault();\n            this.selectPrevEmoji(EMOJI_PER_ROW);\n            break;\n        case 'ArrowDown':\n            e.preventDefault();\n            this.selectNextEmoji(EMOJI_PER_ROW);\n            break;\n        case 'Enter':\n            e.preventDefault();\n            if (this.getCurrentEmojiByCursor(this.state.cursor)) {\n                this.props.onEmojiClick(this.getCurrentEmojiByCursor(this.state.cursor));\n            }\n            break;\n        }\n    }\n\n    handleScroll = () => {\n        if (this.emojiPickerContainer) {\n            this.updateEmojisToShow(this.emojiPickerContainer.scrollTop);\n        }\n    }\n\n    selectNextEmoji(offset = 1) {\n        const {cursor} = this.state;\n\n        // try moving to next emoji in index\n        let newCursor = [cursor[0], cursor[1] + offset];\n        if (this.getCurrentEmojiByCursor(newCursor)) {\n            this.setState({cursor: newCursor});\n            return;\n        }\n\n        // try moving to next category\n        newCursor = [cursor[0] + 1, 0];\n        if (this.getCurrentEmojiByCursor(newCursor)) {\n            this.setState({cursor: newCursor});\n        }\n    }\n\n    selectPrevEmoji(offset = 1) {\n        const {cursor} = this.state;\n\n        // try moving to prev emoji in index\n        let newCursor = [cursor[0], cursor[1] - offset];\n        if (this.getCurrentEmojiByCursor(newCursor)) {\n            this.setState({cursor: newCursor});\n            return;\n        }\n\n        // try moving to end of prev category\n        if (cursor[0] !== 0) {\n            const newCategory = this.getCategoryByIndex(cursor[0] - 1);\n            const lastVisibleEmojiInNewCategory = this.state.categories[newCategory.name].emojiIds.length - 1;\n            newCursor = [cursor[0] - 1, lastVisibleEmojiInNewCategory];\n            if (this.getCurrentEmojiByCursor(newCursor)) {\n                this.setState({cursor: newCursor});\n            }\n        }\n    }\n\n    getCategoryByIndex(index) {\n        if (this.state.filter && index !== 0) {\n            return null;\n        }\n        return this.getCategoriesByKey(Object.keys(this.state.categories)[index]);\n    }\n\n    getCurrentEmojiByCursor(cursor) {\n        const category = this.getCategoryByIndex(cursor[0]);\n        if (!category) {\n            return null;\n        }\n        return this.getEmojisByCategory(category)[cursor[1]];\n    }\n\n    getCategoriesByKey(key) {\n        return this.state.filter ? {\n            id: CATEGORY_SEARCH_RESULTS,\n            name: CATEGORY_SEARCH_RESULTS,\n        } : this.state.categories[key];\n    }\n\n    sortEmojis(emojis) {\n        const {recentEmojis: recentEmojisProps} = this.props;\n        const recentEmojis = [];\n        const emojisMinusRecent = [];\n\n        Object.values(emojis).forEach((emoji) => {\n            let emojiArray = emojisMinusRecent;\n            for (let i = 0; i < emoji.aliases.length; i++) {\n                if (recentEmojisProps.includes(emoji.aliases[i].toLowerCase())) {\n                    emojiArray = recentEmojis;\n                }\n            }\n\n            emojiArray.push(emoji);\n        });\n\n        const sortEmojisHelper = (a, b) => {\n            return compareEmojis(a, b, this.state.filter);\n        };\n\n        recentEmojis.sort(sortEmojisHelper);\n\n        emojisMinusRecent.sort(sortEmojisHelper);\n\n        return [\n            ...recentEmojis,\n            ...emojisMinusRecent,\n        ];\n    }\n\n    getEmojisByCategory(category) {\n        if (this.state.filter) {\n            const emojis = Object.values(this.state.allEmojis).filter((emoji) => {\n                for (let i = 0; i < emoji.aliases.length; i++) {\n                    if (emoji.aliases[i].toLowerCase().includes(this.state.filter)) {\n                        return true;\n                    }\n                }\n\n                return false;\n            });\n\n            return this.sortEmojis(emojis);\n        }\n        return this.state.categories[category.name].emojiIds.map((emojiId) =>\n            this.state.allEmojis[emojiId]);\n    }\n\n    getCurrentEmojiName() {\n        const emoji = this.getCurrentEmojiByCursor(this.state.cursor);\n        if (!emoji) {\n            return '';\n        }\n\n        return emoji.aliases[0].replace(/_/g, ' ');\n    }\n\n    getCurrentEmojiCategoryName() {\n        const categories = Object.keys(this.state.categories);\n        let currentCategoryName = categories[0];\n\n        for (let i = categories.length - 1; i >= 0; i--) {\n            // go through in reverse so that you get the last category that matches\n            const category = this.state.categories[categories[i]];\n            if (category.offset && this.state.divTopOffset > category.offset - 20) {\n                currentCategoryName = categories[i];\n                break;\n            }\n        }\n        return currentCategoryName;\n    }\n\n    emojiCategories() {\n        const categories = this.props.recentEmojis.length ? {...recentEmojiCategory, ...CATEGORIES} : CATEGORIES;\n        const categoryKeys = Object.keys(categories);\n        const currentCategoryName = this.state.filter ? categoryKeys[0] : this.getCurrentEmojiCategoryName();\n        const emojiPickerCategories = categoryKeys.map((categoryName) => {\n            const category = categories[categoryName];\n\n            return (\n                <EmojiPickerCategory\n                    key={'header-' + category.name}\n                    category={category.name}\n                    icon={\n                        <FormattedMessage\n                            id={category.id}\n                            defaultMessage={category.message}\n                        >\n                            {(title) => (\n                                <i\n                                    className={category.className}\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                    }\n                    onCategoryClick={this.handleCategoryClick}\n                    selected={currentCategoryName === category.name}\n                    enable={!this.state.filter}\n                />\n            );\n        });\n        return (\n            <div\n                id='emojiPickerCategories'\n                className='emoji-picker__categories'\n                onKeyDown={this.handleCategoryKeyDown}\n            >\n                {emojiPickerCategories}\n            </div>\n        );\n    }\n\n    emojiSearch() {\n        return (\n            <div className='emoji-picker__search-container'>\n                <span className='fa fa-search emoji-picker__search-icon'/>\n                <FormattedMessage\n                    id='emoji_picker.search_emoji'\n                    defaultMessage='Search for an emoji'\n                >\n                    {(ariaLabel) => (\n                        <LocalizedInput\n                            id='emojiPickerSearch'\n                            aria-label={ariaLabel}\n                            ref={this.emojiSearchInput}\n                            className='emoji-picker__search'\n                            data-testid='emojiInputSearch'\n                            type='text'\n                            onChange={this.handleFilterChange}\n                            onKeyDown={this.handleKeyDown}\n                            placeholder={{id: t('emoji_picker.search'), defaultMessage: 'Search Emoji'}}\n                        />\n                    )}\n                </FormattedMessage>\n            </div>\n        );\n    }\n\n    emojiCurrentResults() {\n        const {filter} = this.state;\n        const categories = filter ? [CATEGORY_SEARCH_RESULTS] : Object.keys(this.state.categories);\n        let numEmojisLoaded = 0;\n\n        let categoryComponents = [];\n        for (let i = 0; i < categories.length; i++) {\n            const category = this.getCategoriesByKey(categories[i]);\n            const emojis = this.getEmojisByCategory(category);\n            const items = this.emojiCurrentResultsItems(i, emojis, numEmojisLoaded);\n            numEmojisLoaded += items.length;\n            categoryComponents = [...categoryComponents, (\n                <EmojiPickerCategorySection\n                    key={category.id}\n                    categoryName={category.name}\n                    updateCategoryOffset={this.updateCategoryOffset}\n                    role='application'\n                >\n                    {items}\n                </EmojiPickerCategorySection>\n            )];\n        }\n\n        return (\n            <div\n                ref={this.emojiPickerContainerRef}\n                onScroll={this.handleScrollThrottle}\n                className='emoji-picker__items'\n                style={(EMOJI_CONTAINER_STYLE, {overflowY: this.state.renderAllCategories ? 'auto' : 'hidden'})}\n            >\n                <div className='emoji-picker__container'>\n                    {categoryComponents}\n                </div>\n            </div>\n        );\n    }\n    emojiCurrentResultsItems = (categoryIndex, emojis, currentEmojiLoadedCount) => {\n        const {cursor, emojisToShow} = this.state;\n        let numEmojisLoaded = currentEmojiLoadedCount;\n\n        return emojis.map((emoji, emojiIndex) => {\n            numEmojisLoaded++;\n\n            // set ref on first unloaded emoji\n            let ref;\n            if (numEmojisLoaded === emojisToShow) {\n                ref = this.lastVisibleEmojiRef;\n            }\n            if (numEmojisLoaded >= emojisToShow) {\n                return (\n                    <div\n                        key={numEmojisLoaded}\n                        className='emoji-picker__item'\n                        ref={ref}\n                    >\n                        <img\n                            alt={'emoji image'}\n                            src={imgTrans}\n                            className='emojisprite'\n                        />\n                    </div>\n                );\n            }\n            return (\n                <EmojiPickerItem\n                    key={emoji.filename + ':' + emojiIndex}\n                    emoji={emoji}\n                    onItemOver={this.handleItemOver}\n                    onItemClick={this.handleItemClick}\n                    onItemUnmount={emoji}\n                    category={emoji.category}\n                    isSelected={cursor[0] === (categoryIndex) && cursor[1] === emojiIndex}\n                    categoryIndex={categoryIndex}\n                    emojiIndex={emojiIndex}\n                    containerRef={this.emojiPickerContainer}\n                    containerTop={this.state.divTopOffset}\n                    containerBottom={this.state.divTopOffset + this.divHeight}\n                />\n            );\n        });\n    };\n\n    updateCategoryOffset = (categoryName, offset) => {\n        if (categoryName !== CATEGORY_SEARCH_RESULTS) {\n            this.setState((state) => ({\n                categories: {\n                    ...state.categories,\n                    [categoryName]: {\n                        ...state.categories[categoryName],\n                        offset,\n                    },\n                },\n            }));\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className='emoji-picker__inner'\n                role='application'\n            >\n                <div\n                    aria-live='assertive'\n                    className='sr-only'\n                >\n                    <FormattedMessage\n                        id='emoji_picker_item.emoji_aria_label'\n                        defaultMessage='{emojiName} emoji'\n                        values={{\n                            emojiName: this.getCurrentEmojiName(),\n                        }}\n                    />\n                </div>\n                {this.emojiSearch()}\n                {this.emojiCategories()}\n                {this.emojiCurrentResults()}\n                <EmojiPickerPreview emoji={this.getCurrentEmojiByCursor(this.state.cursor)}/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCustomEmojis, searchCustomEmojis} from 'mattermost-redux/actions/emojis';\n\nimport {incrementEmojiPickerPage} from 'actions/emoji_actions.jsx';\nimport {getEmojiMap, getRecentEmojis} from 'selectors/emojis';\n\nimport EmojiPicker from './emoji_picker.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        customEmojisEnabled: state.entities.general.config.EnableCustomEmoji === 'true',\n        customEmojiPage: state.views.emoji.emojiPickerCustomPage,\n        emojiMap: getEmojiMap(state),\n        recentEmojis: getRecentEmojis(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getCustomEmojis,\n            searchCustomEmojis,\n            incrementEmojiPickerPage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiPicker);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport {Tab, Tabs} from 'react-bootstrap';\n\nimport GifPicker from 'components/gif_picker/gif_picker.jsx';\nimport EmojiIcon from 'components/widgets/icons/emoji_icon';\nimport GfycatIcon from 'components/widgets/icons/gfycat_icon';\n\nimport EmojiPickerHeader from './components/emoji_picker_header';\n\nimport EmojiPicker from './';\n\nexport default class EmojiPickerTabs extends PureComponent {\n    static propTypes = {\n        style: PropTypes.object,\n        rightOffset: PropTypes.number,\n        topOffset: PropTypes.number,\n        placement: PropTypes.oneOf(['top', 'bottom', 'left']),\n        customEmojis: PropTypes.object,\n        onEmojiClose: PropTypes.func.isRequired,\n        onEmojiClick: PropTypes.func.isRequired,\n        onGifClick: PropTypes.func,\n        enableGifPicker: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        rightOffset: 0,\n        topOffset: 0,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emojiTabVisible: true,\n        };\n    }\n\n    handleEnterEmojiTab = () => {\n        this.setState({\n            emojiTabVisible: true,\n        });\n    };\n\n    handleExitEmojiTab = () => {\n        this.setState({\n            emojiTabVisible: false,\n        });\n    };\n\n    handleEmojiPickerClose = () => {\n        this.props.onEmojiClose();\n    }\n\n    render() {\n        let pickerStyle;\n        if (this.props.style && !(this.props.style.left === 0 && this.props.style.top === 0)) {\n            if (this.props.placement === 'top' || this.props.placement === 'bottom') {\n                // Only take the top/bottom position passed by React Bootstrap since we want to be right-aligned\n                pickerStyle = {\n                    top: this.props.style.top,\n                    bottom: this.props.style.bottom,\n                    right: this.props.rightOffset,\n                };\n            } else {\n                pickerStyle = {...this.props.style};\n            }\n\n            if (pickerStyle.top) {\n                pickerStyle.top += this.props.topOffset;\n            }\n        }\n\n        let pickerClass = 'emoji-picker';\n        if (this.props.placement === 'bottom') {\n            pickerClass += ' bottom';\n        }\n\n        if (this.props.enableGifPicker && typeof this.props.onGifClick != 'undefined') {\n            return (\n                <Tabs\n                    defaultActiveKey={1}\n                    id='emoji-picker-tabs'\n                    style={pickerStyle}\n                    className={pickerClass}\n                    justified={true}\n                >\n                    <EmojiPickerHeader handleEmojiPickerClose={this.handleEmojiPickerClose}/>\n                    <Tab\n                        eventKey={1}\n                        onEnter={this.handleEnterEmojiTab}\n                        onExit={this.handleExitEmojiTab}\n                        title={<EmojiIcon/>}\n                    >\n                        <EmojiPicker\n                            style={this.props.style}\n                            onEmojiClose={this.props.onEmojiClose}\n                            onEmojiClick={this.props.onEmojiClick}\n                            customEmojis={this.props.customEmojis}\n                            visible={this.state.emojiTabVisible}\n                        />\n                    </Tab>\n                    <Tab\n                        eventKey={2}\n                        title={<GfycatIcon/>}\n                        mountOnEnter={true}\n                        unmountOnExit={true}\n                    >\n                        <GifPicker\n                            onGifClick={this.props.onGifClick}\n                        />\n                    </Tab>\n                </Tabs>\n            );\n        }\n        return (\n            <div\n                id='emojiPicker'\n                style={pickerStyle}\n                className={`a11y__popup ${pickerClass} emoji-picker--single`}\n            >\n                <EmojiPickerHeader handleEmojiPickerClose={this.handleEmojiPickerClose}/>\n                <EmojiPicker\n                    style={this.props.style}\n                    onEmojiClose={this.props.onEmojiClose}\n                    onEmojiClick={this.props.onEmojiClick}\n                    customEmojis={this.props.customEmojis}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay} from 'react-bootstrap';\n\nimport {popOverOverlayPosition} from 'utils/position_utils.tsx';\nimport {Constants} from 'utils/constants';\n\nimport EmojiPickerTabs from './emoji_picker_tabs.jsx';\n\nexport default class EmojiPickerOverlay extends React.PureComponent {\n    // An emoji picker in the center channel is contained within the post list, so it needs space\n    // above for the channel header and below for the post textbox\n    static CENTER_SPACE_REQUIRED_ABOVE = 476;\n    static CENTER_SPACE_REQUIRED_BELOW = 497;\n\n    // An emoji picker in the RHS isn't constrained by the RHS, so it just needs space to fit\n    // the emoji picker itself\n    static RHS_SPACE_REQUIRED_ABOVE = 420;\n    static RHS_SPACE_REQUIRED_BELOW = 420;\n\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        container: PropTypes.func,\n        target: PropTypes.func.isRequired,\n        onEmojiClick: PropTypes.func.isRequired,\n        onGifClick: PropTypes.func,\n        onHide: PropTypes.func.isRequired,\n        topOffset: PropTypes.number,\n        spaceRequiredAbove: PropTypes.number,\n        spaceRequiredBelow: PropTypes.number,\n        enableGifPicker: PropTypes.bool,\n    };\n\n    // Reasonable defaults calculated from from the center channel\n    static defaultProps = {\n        spaceRequiredAbove: EmojiPickerOverlay.CENTER_SPACE_REQUIRED_ABOVE,\n        spaceRequiredBelow: EmojiPickerOverlay.CENTER_SPACE_REQUIRED_BELOW,\n        enableGifPicker: false,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    static emojiPickerPosition(props) {\n        const emojiTrigger = props.target();\n        let rightOffset = Constants.DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n        if (emojiTrigger) {\n            rightOffset = window.innerWidth - emojiTrigger.getBoundingClientRect().left - Constants.DEFAULT_EMOJI_PICKER_LEFT_OFFSET;\n\n            if (rightOffset < Constants.DEFAULT_EMOJI_PICKER_RIGHT_OFFSET) {\n                rightOffset = Constants.DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n            }\n        }\n\n        return rightOffset;\n    }\n\n    static getPlacement(props) {\n        const target = props.target();\n        if (target) {\n            const targetBounds = target.getBoundingClientRect();\n            return popOverOverlayPosition(targetBounds, window.innerHeight, props.spaceRequiredAbove, props.spaceRequiredBelow);\n        }\n\n        return 'top';\n    }\n\n    static getDerivedStateFromProps(props) {\n        return {\n            placement: EmojiPickerOverlay.getPlacement(props),\n            rightOffset: EmojiPickerOverlay.emojiPickerPosition(props),\n        };\n    }\n\n    render() {\n        return (\n            <Overlay\n                show={this.props.show}\n                placement={this.state.placement}\n                rootClose={true}\n                container={this.props.container}\n                onHide={this.props.onHide}\n                target={this.props.target}\n                animation={false}\n            >\n                <EmojiPickerTabs\n                    enableGifPicker={this.props.enableGifPicker}\n                    onEmojiClose={this.props.onHide}\n                    onEmojiClick={this.props.onEmojiClick}\n                    onGifClick={this.props.onGifClick}\n                    rightOffset={this.state.rightOffset}\n                    topOffset={this.props.topOffset}\n                />\n            </Overlay>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\n\nimport {Posts} from 'mattermost-redux/constants';\n\nimport {t} from 'utils/i18n';\nimport {intlShape} from 'utils/react_intl';\n\nimport Markdown from 'components/markdown';\n\nconst typeMessage = {\n    [Posts.POST_TYPES.ADD_TO_CHANNEL]: {\n        id: t('last_users_message.added_to_channel.type'),\n        defaultMessage: 'were **added to the channel** by {actor}.',\n    },\n    [Posts.POST_TYPES.JOIN_CHANNEL]: {\n        id: t('last_users_message.joined_channel.type'),\n        defaultMessage: '**joined the channel**.',\n    },\n    [Posts.POST_TYPES.LEAVE_CHANNEL]: {\n        id: t('last_users_message.left_channel.type'),\n        defaultMessage: '**left the channel**.',\n    },\n    [Posts.POST_TYPES.REMOVE_FROM_CHANNEL]: {\n        id: t('last_users_message.removed_from_channel.type'),\n        defaultMessage: 'were **removed from the channel**.',\n    },\n    [Posts.POST_TYPES.ADD_TO_TEAM]: {\n        id: t('last_users_message.added_to_team.type'),\n        defaultMessage: 'were **added to the team** by {actor}.',\n    },\n    [Posts.POST_TYPES.JOIN_TEAM]: {\n        id: t('last_users_message.joined_team.type'),\n        defaultMessage: '**joined the team**.',\n    },\n    [Posts.POST_TYPES.LEAVE_TEAM]: {\n        id: t('last_users_message.left_team.type'),\n        defaultMessage: '**left the team**.',\n    },\n    [Posts.POST_TYPES.REMOVE_FROM_TEAM]: {\n        id: t('last_users_message.removed_from_team.type'),\n        defaultMessage: 'were **removed from the team**.',\n    },\n};\n\nclass LastUsers extends React.PureComponent {\n    static propTypes = {\n        actor: PropTypes.string,\n        expandedLocale: PropTypes.object.isRequired,\n        formatOptions: PropTypes.object.isRequired,\n        intl: intlShape.isRequired,\n        postType: PropTypes.string.isRequired,\n        usernames: PropTypes.array.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expand: false,\n        };\n    }\n\n    handleOnClick = (e) => {\n        e.preventDefault();\n\n        this.setState({expand: true});\n    }\n\n    renderMessage = (formattedMessage) => {\n        return (\n            <Markdown\n                message={formattedMessage}\n                options={this.props.formatOptions}\n            />\n        );\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const {expand} = this.state;\n        const {\n            actor,\n            expandedLocale,\n            postType,\n            usernames,\n        } = this.props;\n\n        const firstUser = usernames[0];\n        const lastIndex = usernames.length - 1;\n        const lastUser = usernames[lastIndex];\n\n        if (expand) {\n            const formattedMessage = formatMessage(expandedLocale, {\n                users: usernames.slice(0, lastIndex).join(', '),\n                lastUser,\n                actor,\n            });\n\n            return this.renderMessage(formattedMessage);\n        }\n\n        const firstUserMessage = formatMessage(\n            {id: 'last_users_message.first', defaultMessage: '{firstUser} and '},\n            {firstUser}\n        );\n\n        const otherUsersMessage = formatMessage(\n            {id: 'last_users_message.others', defaultMessage: '{numOthers} others '},\n            {numOthers: lastIndex}\n        );\n\n        const actorMessage = formatMessage(\n            {id: typeMessage[postType].id, defaultMessage: typeMessage[postType].defaultMessage},\n            {actor}\n        );\n\n        return (\n            <span>\n                {this.renderMessage(firstUserMessage)}\n                <a onClick={this.handleOnClick}>\n                    {otherUsersMessage}\n                </a>\n                {this.renderMessage(actorMessage)}\n            </span>\n        );\n    }\n}\n\nexport default injectIntl(LastUsers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\n\nimport {Posts} from 'mattermost-redux/constants';\n\nimport {t} from 'utils/i18n';\nimport {intlShape} from 'utils/react_intl';\n\nimport Markdown from 'components/markdown';\n\nimport LastUsers from './last_users';\n\nconst {\n    JOIN_CHANNEL, ADD_TO_CHANNEL, REMOVE_FROM_CHANNEL, LEAVE_CHANNEL,\n    JOIN_TEAM, ADD_TO_TEAM, REMOVE_FROM_TEAM, LEAVE_TEAM,\n} = Posts.POST_TYPES;\n\nconst postTypeMessage = {\n    [JOIN_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.joined_channel.one'),\n            defaultMessage: '{firstUser} **joined the channel**.',\n        },\n        one_you: {\n            id: t('combined_system_message.joined_channel.one_you'),\n            defaultMessage: 'You **joined the channel**.',\n        },\n        two: {\n            id: t('combined_system_message.joined_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} **joined the channel**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.joined_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **joined the channel**.',\n        },\n    },\n    [ADD_TO_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.added_to_channel.one'),\n            defaultMessage: '{firstUser} **added to the channel** by {actor}.',\n        },\n        one_you: {\n            id: t('combined_system_message.added_to_channel.one_you'),\n            defaultMessage: 'You were **added to the channel** by {actor}.',\n        },\n        two: {\n            id: t('combined_system_message.added_to_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} **added to the channel** by {actor}.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.added_to_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **added to the channel** by {actor}.',\n        },\n    },\n    [REMOVE_FROM_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.removed_from_channel.one'),\n            defaultMessage: '{firstUser} was **removed from the channel**.',\n        },\n        one_you: {\n            id: t('combined_system_message.removed_from_channel.one_you'),\n            defaultMessage: 'You were **removed from the channel**.',\n        },\n        two: {\n            id: t('combined_system_message.removed_from_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} were **removed from the channel**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.removed_from_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **removed from the channel**.',\n        },\n    },\n    [LEAVE_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.left_channel.one'),\n            defaultMessage: '{firstUser} **left the channel**.',\n        },\n        one_you: {\n            id: t('combined_system_message.left_channel.one_you'),\n            defaultMessage: 'You **left the channel**.',\n        },\n        two: {\n            id: t('combined_system_message.left_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} **left the channel**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.left_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **left the channel**.',\n        },\n    },\n    [JOIN_TEAM]: {\n        one: {\n            id: t('combined_system_message.joined_team.one'),\n            defaultMessage: '{firstUser} **joined the team**.',\n        },\n        one_you: {\n            id: t('combined_system_message.joined_team.one_you'),\n            defaultMessage: 'You **joined the team**.',\n        },\n        two: {\n            id: t('combined_system_message.joined_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} **joined the team**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.joined_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **joined the team**.',\n        },\n    },\n    [ADD_TO_TEAM]: {\n        one: {\n            id: t('combined_system_message.added_to_team.one'),\n            defaultMessage: '{firstUser} **added to the team** by {actor}.',\n        },\n        one_you: {\n            id: t('combined_system_message.added_to_team.one_you'),\n            defaultMessage: 'You were **added to the team** by {actor}.',\n        },\n        two: {\n            id: t('combined_system_message.added_to_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} **added to the team** by {actor}.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.added_to_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **added to the team** by {actor}.',\n        },\n    },\n    [REMOVE_FROM_TEAM]: {\n        one: {\n            id: t('combined_system_message.removed_from_team.one'),\n            defaultMessage: '{firstUser} was **removed from the team**.',\n        },\n        one_you: {\n            id: t('combined_system_message.removed_from_team.one_you'),\n            defaultMessage: 'You were **removed from the team**.',\n        },\n        two: {\n            id: t('combined_system_message.removed_from_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} were **removed from the team**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.removed_from_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **removed from the team**.',\n        },\n    },\n    [LEAVE_TEAM]: {\n        one: {\n            id: t('combined_system_message.left_team.one'),\n            defaultMessage: '{firstUser} **left the team**.',\n        },\n        one_you: {\n            id: t('combined_system_message.left_team.one_you'),\n            defaultMessage: 'You **left the team**.',\n        },\n        two: {\n            id: t('combined_system_message.left_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} **left the team**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.left_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **left the team**.',\n        },\n    },\n};\n\nclass CombinedSystemMessage extends React.PureComponent {\n    static propTypes = {\n        allUserIds: PropTypes.array.isRequired,\n        allUsernames: PropTypes.array.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        currentUsername: PropTypes.string.isRequired,\n        intl: intlShape.isRequired,\n        messageData: PropTypes.array.isRequired,\n        showJoinLeave: PropTypes.bool.isRequired,\n        userProfiles: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n            getMissingProfilesByUsernames: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        allUserIds: [],\n        allUsernames: [],\n    };\n\n    componentDidMount() {\n        this.loadUserProfiles(this.props.allUserIds, this.props.allUsernames);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {allUserIds, allUsernames} = this.props;\n        if (allUserIds !== prevProps.allUserIds || allUsernames !== prevProps.allUsernames) {\n            this.loadUserProfiles(allUserIds, allUsernames);\n        }\n    }\n\n    loadUserProfiles = (allUserIds, allUsernames) => {\n        if (allUserIds.length > 0) {\n            this.props.actions.getMissingProfilesByIds(allUserIds);\n        }\n\n        if (allUsernames.length > 0) {\n            this.props.actions.getMissingProfilesByUsernames(allUsernames);\n        }\n    }\n\n    getAllUsernames = () => {\n        const {\n            allUserIds,\n            allUsernames,\n            currentUserId,\n            currentUsername,\n            userProfiles,\n        } = this.props;\n        const {formatMessage} = this.props.intl;\n        const usernames = userProfiles.reduce((acc, user) => {\n            acc[user.id] = user.username;\n            acc[user.username] = user.username;\n            return acc;\n        }, {});\n\n        const currentUserDisplayName = formatMessage({id: t('combined_system_message.you'), defaultMessage: 'You'});\n        if (allUserIds.includes(currentUserId)) {\n            usernames[currentUserId] = currentUserDisplayName;\n        } else if (allUsernames.includes(currentUsername)) {\n            usernames[currentUsername] = currentUserDisplayName;\n        }\n\n        return usernames;\n    }\n\n    getUsernamesByIds = (userIds = []) => {\n        const {currentUserId, currentUsername} = this.props;\n        const allUsernames = this.getAllUsernames();\n\n        const {formatMessage} = this.props.intl;\n        const someone = formatMessage({id: t('channel_loader.someone'), defaultMessage: 'Someone'});\n\n        const usernames = userIds.\n            filter((userId) => {\n                return userId !== currentUserId && userId !== currentUsername;\n            }).\n            map((userId) => {\n                return allUsernames[userId] ? `@${allUsernames[userId]}` : someone;\n            }).filter((username) => {\n                return username && username !== '';\n            });\n\n        if (userIds.includes(currentUserId)) {\n            usernames.unshift(allUsernames[currentUserId]);\n        } else if (userIds.includes(currentUsername)) {\n            usernames.unshift(allUsernames[currentUsername]);\n        }\n\n        return usernames;\n    }\n\n    renderFormattedMessage(postType, userIds, actorId) {\n        const {formatMessage} = this.props.intl;\n        const {currentUserId, currentUsername} = this.props;\n        const usernames = this.getUsernamesByIds(userIds);\n        let actor = actorId ? this.getUsernamesByIds([actorId])[0] : '';\n        if (actor && (actorId === currentUserId || actorId === currentUsername)) {\n            actor = actor.toLowerCase();\n        }\n\n        const firstUser = usernames[0];\n        const secondUser = usernames[1];\n        const numOthers = usernames.length - 1;\n\n        const options = {\n            atMentions: true,\n            mentionKeys: [{key: firstUser}, {key: secondUser}, {key: actor}],\n            mentionHighlight: false,\n            singleline: true,\n        };\n\n        if (numOthers > 1) {\n            return (\n                <LastUsers\n                    actor={actor}\n                    expandedLocale={postTypeMessage[postType].many_expanded}\n                    formatOptions={options}\n                    postType={postType}\n                    usernames={usernames}\n                />\n            );\n        }\n\n        let localeHolder;\n        if (numOthers === 0) {\n            localeHolder = postTypeMessage[postType].one;\n\n            if (\n                (userIds[0] === this.props.currentUserId || userIds[0] === this.props.currentUsername) &&\n                postTypeMessage[postType].one_you\n            ) {\n                localeHolder = postTypeMessage[postType].one_you;\n            }\n        } else if (numOthers === 1) {\n            localeHolder = postTypeMessage[postType].two;\n        }\n\n        const formattedMessage = formatMessage(localeHolder, {firstUser, secondUser, actor});\n\n        return (\n            <Markdown\n                message={formattedMessage}\n                options={options}\n            />\n        );\n    }\n\n    renderMessage(postType, userIds, actorId) {\n        return (\n            <React.Fragment key={postType + actorId}>\n                {this.renderFormattedMessage(postType, userIds, actorId)}\n                <br/>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const {\n            currentUserId,\n            messageData,\n        } = this.props;\n\n        const content = [];\n        const removedUserIds = [];\n        for (const message of messageData) {\n            const {\n                postType,\n                actorId,\n            } = message;\n            let userIds = message.userIds;\n\n            if (!this.props.showJoinLeave && actorId !== currentUserId) {\n                const affectsCurrentUser = userIds.indexOf(currentUserId) !== -1;\n\n                if (affectsCurrentUser) {\n                    // Only show the message that the current user was added, etc\n                    userIds = [currentUserId];\n                } else {\n                    // Not something the current user did or was affected by\n                    continue;\n                }\n            }\n\n            if (postType === REMOVE_FROM_CHANNEL) {\n                removedUserIds.push(...userIds);\n                continue;\n            }\n\n            content.push(this.renderMessage(postType, userIds, actorId));\n        }\n\n        if (removedUserIds.length > 0) {\n            const uniqueRemovedUserIds = removedUserIds.filter((id, index, arr) => arr.indexOf(id) === index);\n            content.push(this.renderMessage(REMOVE_FROM_CHANNEL, uniqueRemovedUserIds, currentUserId));\n        }\n\n        return (\n            <React.Fragment>\n                {content}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default injectIntl(CombinedSystemMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMissingProfilesByIds, getMissingProfilesByUsernames} from 'mattermost-redux/actions/users';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser, makeGetProfilesByIdsAndUsernames} from 'mattermost-redux/selectors/entities/users';\n\nimport CombinedSystemMessage from './combined_system_message.jsx';\n\nfunction makeMapStateToProps() {\n    const getProfilesByIdsAndUsernames = makeGetProfilesByIdsAndUsernames();\n\n    return (state, ownProps) => {\n        const currentUser = getCurrentUser(state);\n        const {allUserIds, allUsernames} = ownProps;\n\n        return {\n            currentUserId: currentUser.id,\n            currentUsername: currentUser.username,\n            showJoinLeave: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, Preferences.ADVANCED_FILTER_JOIN_LEAVE, true),\n            userProfiles: getProfilesByIdsAndUsernames(state, {allUserIds, allUsernames}),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n            getMissingProfilesByUsernames,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(CombinedSystemMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {sendAddToChannelEphemeralPost} from 'actions/global_actions.jsx';\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport AtMention from 'components/at_mention';\n\nexport default class PostAddChannelMember extends React.PureComponent {\n    static propTypes = {\n\n        /*\n        * Current user\n        */\n        currentUser: PropTypes.object.isRequired,\n\n        /*\n        * Type of current channel\n        */\n        channelType: PropTypes.string.isRequired,\n\n        /*\n        * ID of ephemeral post (at-mention's \"add to channel\" post)\n        */\n        postId: PropTypes.string.isRequired,\n\n        /*\n        * Ephemeral post (at-mention's \"add to channel\" post)\n        */\n        post: PropTypes.object.isRequired,\n\n        /*\n        * user ids to add to channel\n        */\n        userIds: PropTypes.array.isRequired,\n\n        /*\n        * usernames to add to channel\n        */\n        usernames: PropTypes.array.isRequired,\n\n        noGroupsUsernames: PropTypes.array.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n            * Function to add members to channel\n            */\n            addChannelMember: PropTypes.func.isRequired,\n\n            /*\n            * Function to remove post (ephemeral)\n            */\n            removePost: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleAddChannelMember = () => {\n        const {currentUser, post, userIds, usernames} = this.props;\n\n        if (post && post.channel_id) {\n            let createAt = post.create_at;\n            userIds.forEach((userId, index) => {\n                createAt++;\n                this.props.actions.addChannelMember(post.channel_id, userId);\n                sendAddToChannelEphemeralPost(currentUser, usernames[index], userId, post.channel_id, post.root_id, createAt);\n            });\n\n            this.props.actions.removePost(post);\n        }\n    }\n\n    generateAtMentions(usernames = []) {\n        if (usernames.length === 1) {\n            return (\n                <AtMention mentionName={usernames[0]}/>\n            );\n        } else if (usernames.length > 1) {\n            function andSeparator(key) {\n                return (\n                    <FormattedMessage\n                        key={key}\n                        id={'post_body.check_for_out_of_channel_mentions.link.and'}\n                        defaultMessage={' and '}\n                    />\n                );\n            }\n\n            function commaSeparator(key) {\n                return <span key={key}>{', '}</span>;\n            }\n\n            return (\n                <span>\n                    {\n                        usernames.map((username) => {\n                            return (\n                                <AtMention\n                                    key={username}\n                                    mentionName={username}\n                                />\n                            );\n                        }).reduce((acc, el, idx, arr) => {\n                            if (idx === 0) {\n                                return [el];\n                            } else if (idx === arr.length - 1) {\n                                return [...acc, andSeparator(idx), el];\n                            }\n\n                            return [...acc, commaSeparator(idx), el];\n                        }, [])\n                    }\n                </span>\n            );\n        }\n\n        return '';\n    }\n\n    render() {\n        const {channelType, postId, usernames, noGroupsUsernames} = this.props;\n        if (!postId || !channelType) {\n            return null;\n        }\n\n        let linkId;\n        let linkText;\n        if (channelType === Constants.PRIVATE_CHANNEL) {\n            linkId = t('post_body.check_for_out_of_channel_mentions.link.private');\n            linkText = 'add them to this private channel';\n        } else if (channelType === Constants.OPEN_CHANNEL) {\n            linkId = t('post_body.check_for_out_of_channel_mentions.link.public');\n            linkText = 'add them to the channel';\n        }\n\n        let outOfChannelMessageID;\n        let outOfChannelMessageText;\n        const outOfChannelAtMentions = this.generateAtMentions(usernames);\n        if (usernames.length === 1) {\n            outOfChannelMessageID = t('post_body.check_for_out_of_channel_mentions.message.one');\n            outOfChannelMessageText = 'did not get notified by this mention because they are not in the channel. Would you like to ';\n        } else if (usernames.length > 1) {\n            outOfChannelMessageID = t('post_body.check_for_out_of_channel_mentions.message.multiple');\n            outOfChannelMessageText = 'did not get notified by this mention because they are not in the channel. Would you like to ';\n        }\n\n        let outOfGroupsMessageID;\n        let outOfGroupsMessageText;\n        const outOfGroupsAtMentions = this.generateAtMentions(noGroupsUsernames);\n        if (noGroupsUsernames.length) {\n            outOfGroupsMessageID = t('post_body.check_for_out_of_channel_groups_mentions.message');\n            outOfGroupsMessageText = 'did not get notified by this mention because they are not in the channel. They cannot be added to the channel because they are not a member of the linked groups. To add them to this channel, they must be added to the linked groups.';\n        }\n\n        var outOfChannelMessage = null;\n        var outOfGroupsMessage = null;\n\n        if (usernames.length) {\n            outOfChannelMessage = (\n                <p>\n                    {outOfChannelAtMentions}\n                    {' '}\n                    <FormattedMessage\n                        id={outOfChannelMessageID}\n                        defaultMessage={outOfChannelMessageText}\n                    />\n                    <a\n                        id='add_channel_member_link'\n                        onClick={this.handleAddChannelMember}\n                    >\n                        <FormattedMessage\n                            id={linkId}\n                            defaultMessage={linkText}\n                        />\n                    </a>\n                    <FormattedMessage\n                        id={'post_body.check_for_out_of_channel_mentions.message_last'}\n                        defaultMessage={'? They will have access to all message history.'}\n                    />\n                </p>\n            );\n        }\n\n        if (noGroupsUsernames.length) {\n            outOfGroupsMessage = (\n                <p>\n                    {outOfGroupsAtMentions}\n                    {' '}\n                    <FormattedMessage\n                        id={outOfGroupsMessageID}\n                        defaultMessage={outOfGroupsMessageText}\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <>\n                {outOfChannelMessage}\n                {outOfGroupsMessage}\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {addChannelMember} from 'mattermost-redux/actions/channels';\nimport {removePost} from 'mattermost-redux/actions/posts';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport PostAddChannelMember from './post_add_channel_member.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const post = getPost(state, ownProps.postId) || {};\n    let channelType = '';\n    if (post && post.channel_id) {\n        const channel = getChannel(state, post.channel_id);\n        if (channel && channel.type) {\n            channelType = channel.type;\n        }\n    }\n\n    return {\n        channelType,\n        currentUser: getCurrentUser(state),\n        post,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addChannelMember,\n            removePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostAddChannelMember);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {General, Posts} from 'mattermost-redux/constants';\n\nimport {canManageMembers} from 'utils/channel_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport Markdown from 'components/markdown';\nimport CombinedSystemMessage from 'components/post_view/combined_system_message';\nimport PostAddChannelMember from 'components/post_view/post_add_channel_member';\n\nfunction renderUsername(value) {\n    const username = (value[0] === '@') ? value : `@${value}`;\n\n    const options = {\n        markdown: false,\n    };\n\n    return renderFormattedText(username, options);\n}\n\nfunction renderFormattedText(value, options, post) {\n    return (\n        <Markdown\n            message={value}\n            options={options}\n            postId={post && post.id}\n            postType={post && post.type}\n        />\n    );\n}\n\nfunction renderJoinChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.join_channel.post_and_forget'\n            defaultMessage='{username} joined the channel.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderGuestJoinChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.guest_join_channel.post_and_forget'\n            defaultMessage='{username} joined the channel as a guest.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderLeaveChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.leave.left'\n            defaultMessage='{username} has left the channel.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderAddToChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n    const addedUsername = renderUsername(post.props.addedUsername);\n\n    return (\n        <FormattedMessage\n            id='api.channel.add_member.added'\n            defaultMessage='{addedUsername} added to the channel by {username}.'\n            values={{\n                username,\n                addedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderAddGuestToChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n    const addedUsername = renderUsername(post.props.addedUsername);\n\n    return (\n        <FormattedMessage\n            id='api.channel.add_guest.added'\n            defaultMessage='{addedUsername} added to the channel as a guest by {username}.'\n            values={{\n                username,\n                addedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderRemoveFromChannelMessage(post) {\n    const removedUsername = renderUsername(post.props.removedUsername);\n\n    return (\n        <FormattedMessage\n            id='api.channel.remove_member.removed'\n            defaultMessage='{removedUsername} was removed from the channel'\n            values={{\n                removedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderJoinTeamMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.team.join_team.post_and_forget'\n            defaultMessage='{username} joined the team.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderLeaveTeamMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.team.leave.left'\n            defaultMessage='{username} left the team.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderAddToTeamMessage(post) {\n    const username = renderUsername(post.props.username);\n    const addedUsername = renderUsername(post.props.addedUsername);\n\n    return (\n        <FormattedMessage\n            id='api.team.add_member.added'\n            defaultMessage='{addedUsername} added to the team by {username}.'\n            values={{\n                username,\n                addedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderRemoveFromTeamMessage(post) {\n    const removedUsername = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.team.remove_user_from_team.removed'\n            defaultMessage='{removedUsername} was removed from the team.'\n            values={{\n                removedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderHeaderChangeMessage(post) {\n    if (!post.props.username) {\n        return null;\n    }\n\n    const headerOptions = {\n        singleline: true,\n        channelNamesMap: post.props && post.props.channel_mentions,\n    };\n\n    const username = renderUsername(post.props.username);\n    const oldHeader = post.props.old_header ? renderFormattedText(post.props.old_header, headerOptions, post) : null;\n    const newHeader = post.props.new_header ? renderFormattedText(post.props.new_header, headerOptions, post) : null;\n\n    if (post.props.new_header) {\n        if (post.props.old_header) {\n            return (\n                <FormattedMessage\n                    id='api.channel.post_update_channel_header_message_and_forget.updated_from'\n                    defaultMessage='{username} updated the channel header from: {old} to: {new}'\n                    values={{\n                        username,\n                        old: oldHeader,\n                        new: newHeader,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='api.channel.post_update_channel_header_message_and_forget.updated_to'\n                defaultMessage='{username} updated the channel header to: {new}'\n                values={{\n                    username,\n                    new: newHeader,\n                }}\n            />\n        );\n    } else if (post.props.old_header) {\n        return (\n            <FormattedMessage\n                id='api.channel.post_update_channel_header_message_and_forget.removed'\n                defaultMessage='{username} removed the channel header (was: {old})'\n                values={{\n                    username,\n                    old: oldHeader,\n                }}\n            />\n        );\n    }\n\n    return null;\n}\n\nfunction renderDisplayNameChangeMessage(post) {\n    if (!(post.props.username && post.props.old_displayname && post.props.new_displayname)) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n    const oldDisplayName = post.props.old_displayname;\n    const newDisplayName = post.props.new_displayname;\n\n    return (\n        <FormattedMessage\n            id='api.channel.post_update_channel_displayname_message_and_forget.updated_from'\n            defaultMessage='{username} updated the channel display name from: {old} to: {new}'\n            values={{\n                username,\n                old: oldDisplayName,\n                new: newDisplayName,\n            }}\n        />\n    );\n}\n\nfunction renderConvertChannelToPrivateMessage(post) {\n    if (!(post.props.username)) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.post_convert_channel_to_private.updated_from'\n            defaultMessage='{username} converted the channel from public to private'\n            values={{\n                username,\n            }}\n        />\n    );\n}\n\nfunction renderPurposeChangeMessage(post) {\n    if (!post.props.username) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n    const oldPurpose = post.props.old_purpose;\n    const newPurpose = post.props.new_purpose;\n\n    if (post.props.new_purpose) {\n        if (post.props.old_purpose) {\n            return (\n                <FormattedMessage\n                    id='app.channel.post_update_channel_purpose_message.updated_from'\n                    defaultMessage='{username} updated the channel purpose from: {old} to: {new}'\n                    values={{\n                        username,\n                        old: oldPurpose,\n                        new: newPurpose,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='app.channel.post_update_channel_purpose_message.updated_to'\n                defaultMessage='{username} updated the channel purpose to: {new}'\n                values={{\n                    username,\n                    new: newPurpose,\n                }}\n            />\n        );\n    } else if (post.props.old_purpose) {\n        return (\n            <FormattedMessage\n                id='app.channel.post_update_channel_purpose_message.removed'\n                defaultMessage='{username} removed the channel purpose (was: {old})'\n                values={{\n                    username,\n                    old: oldPurpose,\n                }}\n            />\n        );\n    }\n\n    return null;\n}\n\nfunction renderChannelDeletedMessage(post) {\n    if (!post.props.username) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.delete_channel.archived'\n            defaultMessage='{username} has archived the channel.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderMeMessage(post) {\n    return renderFormattedText((post.props && post.props.message) ? post.props.message : post.message);\n}\n\nconst systemMessageRenderers = {\n    [Posts.POST_TYPES.JOIN_CHANNEL]: renderJoinChannelMessage,\n    [Posts.POST_TYPES.GUEST_JOIN_CHANNEL]: renderGuestJoinChannelMessage,\n    [Posts.POST_TYPES.LEAVE_CHANNEL]: renderLeaveChannelMessage,\n    [Posts.POST_TYPES.ADD_TO_CHANNEL]: renderAddToChannelMessage,\n    [Posts.POST_TYPES.ADD_GUEST_TO_CHANNEL]: renderAddGuestToChannelMessage,\n    [Posts.POST_TYPES.REMOVE_FROM_CHANNEL]: renderRemoveFromChannelMessage,\n    [Posts.POST_TYPES.JOIN_TEAM]: renderJoinTeamMessage,\n    [Posts.POST_TYPES.LEAVE_TEAM]: renderLeaveTeamMessage,\n    [Posts.POST_TYPES.ADD_TO_TEAM]: renderAddToTeamMessage,\n    [Posts.POST_TYPES.REMOVE_FROM_TEAM]: renderRemoveFromTeamMessage,\n    [Posts.POST_TYPES.HEADER_CHANGE]: renderHeaderChangeMessage,\n    [Posts.POST_TYPES.DISPLAYNAME_CHANGE]: renderDisplayNameChangeMessage,\n    [Posts.POST_TYPES.CONVERT_CHANNEL]: renderConvertChannelToPrivateMessage,\n    [Posts.POST_TYPES.PURPOSE_CHANGE]: renderPurposeChangeMessage,\n    [Posts.POST_TYPES.CHANNEL_DELETED]: renderChannelDeletedMessage,\n    [Posts.POST_TYPES.ME]: renderMeMessage,\n};\n\nexport function renderSystemMessage(post, channel) {\n    if (post.props && post.props.add_channel_member) {\n        const isUserCanManageMembers = canManageMembers(channel);\n        const isEphemeral = Utils.isPostEphemeral(post);\n\n        if ((channel.type === General.PRIVATE_CHANNEL || channel.type === General.OPEN_CHANNEL) &&\n            isUserCanManageMembers &&\n            isEphemeral\n        ) {\n            const addMemberProps = post.props.add_channel_member;\n            return (\n                <PostAddChannelMember\n                    postId={addMemberProps.post_id}\n                    userIds={addMemberProps.not_in_channel_user_ids}\n                    noGroupsUsernames={addMemberProps.not_in_groups_usernames}\n                    usernames={addMemberProps.not_in_channel_usernames}\n                />\n            );\n        }\n\n        return null;\n    } else if (systemMessageRenderers[post.type]) {\n        return systemMessageRenderers[post.type](post);\n    } else if (post.type === Posts.POST_TYPES.EPHEMERAL_ADD_TO_CHANNEL) {\n        return renderAddToChannelMessage(post);\n    } else if (post.type === Posts.POST_TYPES.COMBINED_USER_ACTIVITY) {\n        const {allUserIds, allUsernames, messageData} = post.props.user_activity;\n\n        return (\n            <CombinedSystemMessage\n                allUserIds={allUserIds}\n                allUsernames={allUsernames}\n                messageData={messageData}\n            />\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Markdown from 'components/markdown';\n\nimport {renderSystemMessage} from './system_message_helpers.jsx';\n\nexport default class PostMarkdown extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Any extra props that should be passed into the image component\n         */\n        imageProps: PropTypes.object,\n\n        /*\n         * Whether or not this text is part of the RHS\n         */\n        isRHS: PropTypes.bool,\n\n        /*\n         * The post text to be rendered\n         */\n        message: PropTypes.string.isRequired,\n\n        /*\n         * The optional post for which this message is being rendered\n         */\n        post: PropTypes.object,\n        channel: PropTypes.object,\n\n        options: PropTypes.object,\n\n        pluginHooks: PropTypes.arrayOf(PropTypes.object),\n\n        /**\n         * Whether or not to place the LinkTooltip component inside links\n         */\n        hasPluginTooltips: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        isRHS: false,\n        pluginHooks: [],\n        options: {},\n    };\n\n    render() {\n        if (this.props.post) {\n            const renderedSystemMessage = renderSystemMessage(this.props.post, this.props.channel);\n            if (renderedSystemMessage) {\n                return <div>{renderedSystemMessage}</div>;\n            }\n        }\n\n        // Proxy images if we have an image proxy and the server hasn't already rewritten the post's image URLs.\n        const proxyImages = !this.props.post || !this.props.post.message_source || this.props.post.message === this.props.post.message_source;\n        const channelNamesMap = this.props.post && this.props.post.props && this.props.post.props.channel_mentions;\n\n        let {message} = this.props;\n        const {post, options} = this.props;\n\n        this.props.pluginHooks.forEach((o) => {\n            if (o && o.hook && post) {\n                message = o.hook(post, message);\n            }\n        });\n\n        if (post && post.props) {\n            options.mentionHighlight = !post.props.mentionHighlightDisabled;\n        }\n\n        return (\n            <Markdown\n                imageProps={this.props.imageProps}\n                isRHS={this.props.isRHS}\n                message={message}\n                proxyImages={proxyImages}\n                options={options}\n                channelNamesMap={channelNamesMap}\n                hasPluginTooltips={this.props.hasPluginTooltips}\n                imagesMetadata={this.props.post && this.props.post.metadata && this.props.post.metadata.images}\n                postId={this.props.post && this.props.post.id}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\n\nimport PostMarkdown from './post_markdown';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        channel: getChannel(state, ownProps.channelId),\n        pluginHooks: state.plugins.components.MessageWillFormat,\n        hasPluginTooltips: Boolean(state.plugins.components.LinkTooltip),\n    };\n}\n\nexport default connect(mapStateToProps)(PostMarkdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport Suggestion from '../suggestion.jsx';\n\nexport default class AtMentionSuggestion extends Suggestion {\n    render() {\n        const isSelection = this.props.isSelection;\n        const user = this.props.item;\n\n        let username;\n        let description;\n        let icon;\n        if (user.username === 'all') {\n            username = 'all';\n            description = (\n                <FormattedMessage\n                    id='suggestion.mention.all'\n                    defaultMessage='Notifies everyone in this channel'\n                />\n            );\n            icon = (\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='mention__image fa fa-users fa-2x'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            );\n        } else if (user.username === 'channel') {\n            username = 'channel';\n            description = (\n                <FormattedMessage\n                    id='suggestion.mention.channel'\n                    defaultMessage='Notifies everyone in this channel'\n                />\n            );\n            icon = (\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='mention__image fa fa-users fa-2x'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            );\n        } else if (user.username === 'here') {\n            username = 'here';\n            description = (\n                <FormattedMessage\n                    id='suggestion.mention.here'\n                    defaultMessage='Notifies everyone online in this channel'\n                />\n            );\n            icon = (\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='mention__image fa fa-users fa-2x'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            );\n        } else {\n            username = user.username;\n\n            if ((user.first_name || user.last_name) && user.nickname) {\n                description = `${Utils.getFullName(user)} (${user.nickname})`;\n            } else if (user.nickname) {\n                description = `(${user.nickname})`;\n            } else if (user.first_name || user.last_name) {\n                description = `${Utils.getFullName(user)}`;\n            }\n\n            icon = (\n                <Avatar\n                    size='md'\n                    username={user && user.username}\n                    url={Utils.imageURLForUser(user)}\n                />\n            );\n        }\n\n        let youElement = null;\n        if (user.isCurrentUser) {\n            youElement =\n            (<span className='mention__you'>\n                <FormattedMessage\n                    id='suggestion.user.isCurrent'\n                    defaultMessage='(you)'\n                />\n            </span>);\n        }\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                data-testid={`mentionSuggestion_${username}`}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                {icon}\n                <span className='mention__fullname'>\n                    {' '}\n                    {description}\n                </span>\n                <BotBadge\n                    show={Boolean(user.is_bot)}\n                    className='badge-autocomplete'\n                />\n                <span className='mention--align'>\n                    {'@' + username}\n                </span>\n                {youElement}\n                <GuestBadge\n                    show={Utils.isGuest(user)}\n                    className='badge-autocomplete'\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport XRegExp from 'xregexp';\n\nimport {getSuggestionsSplitBy, getSuggestionsSplitByMultiple} from 'mattermost-redux/utils/user_utils';\n\nimport {Constants} from 'utils/constants';\n\nimport Provider from '../provider.jsx';\n\nimport AtMentionSuggestion from './at_mention_suggestion.jsx';\n\n// The AtMentionProvider provides matches for at mentions, including @here, @channel, @all,\n// users in the channel and users not in the channel. It mixes together results from the local\n// store with results fetch from the server.\nexport default class AtMentionProvider extends Provider {\n    constructor(props) {\n        super();\n\n        this.setProps(props);\n\n        this.data = null;\n    }\n\n    // setProps gives the provider additional context for matching pretexts. Ideally this would\n    // just be something akin to a connected component with access to the store itself.\n    setProps({currentUserId, profilesInChannel, profilesNotInChannel, autocompleteUsersInChannel}) {\n        this.currentUserId = currentUserId;\n        this.profilesInChannel = profilesInChannel;\n        this.profilesNotInChannel = profilesNotInChannel;\n        this.autocompleteUsersInChannel = autocompleteUsersInChannel;\n    }\n\n    // specialMentions matches one of @here, @channel or @all, unless using /msg.\n    specialMentions() {\n        if (this.latestPrefix.startsWith('/msg')) {\n            return [];\n        }\n\n        return ['here', 'channel', 'all'].filter((item) =>\n            item.startsWith(this.latestPrefix)\n        ).map((name) => ({\n            username: name,\n            type: Constants.MENTION_SPECIAL,\n        }));\n    }\n\n    // retrieves the parts of the profile that should be checked\n    // against the term\n    getProfileSuggestions(profile) {\n        const profileSuggestions = [];\n        if (!profile) {\n            return profileSuggestions;\n        }\n\n        if (profile.username) {\n            const usernameSuggestions = getSuggestionsSplitByMultiple(profile.username.toLowerCase(), Constants.AUTOCOMPLETE_SPLIT_CHARACTERS);\n            profileSuggestions.push(...usernameSuggestions);\n        }\n        [profile.first_name, profile.last_name, profile.nickname].forEach((property) => {\n            const suggestions = getSuggestionsSplitBy(property.toLowerCase(), ' ');\n            profileSuggestions.push(...suggestions);\n        });\n        profileSuggestions.push(profile.first_name.toLowerCase() + ' ' + profile.last_name.toLowerCase());\n\n        return profileSuggestions;\n    }\n\n    // filterProfile constrains profiles to those matching the latest prefix.\n    filterProfile(profile) {\n        if (!profile) {\n            return false;\n        }\n\n        const prefixLower = this.latestPrefix.toLowerCase();\n        const profileSuggestions = this.getProfileSuggestions(profile);\n\n        return profileSuggestions.some((suggestion) => suggestion.startsWith(prefixLower));\n    }\n\n    // localMembers matches up to 25 local results from the store before the server has responded.\n    localMembers() {\n        const localMembers = this.profilesInChannel.\n            filter((profile) => this.filterProfile(profile)).\n            map((profile) => this.createFromProfile(profile, Constants.MENTION_MEMBERS)).\n            sort((a, b) => a.username.localeCompare(b.username)).\n            splice(0, 25);\n\n        return localMembers;\n    }\n\n    // remoteMembers matches the users listed in the channel by the server.\n    remoteMembers() {\n        if (!this.data) {\n            return [];\n        }\n\n        return (this.data.users || []).\n            filter((profile) => this.filterProfile(profile)).\n            map((profile) => this.createFromProfile(profile, Constants.MENTION_MEMBERS));\n    }\n\n    // remoteNonMembers matches users listed as not in the channel by the server.\n    // listed in the channel from local results.\n    remoteNonMembers() {\n        if (!this.data) {\n            return [];\n        }\n\n        return (this.data.out_of_channel || []).\n            filter((profile) => this.filterProfile(profile)).\n            map((profile) => ({\n                type: Constants.MENTION_NONMEMBERS,\n                ...profile,\n            }));\n    }\n\n    users() {\n        const specialMentions = this.specialMentions();\n\n        const localMembers = this.localMembers();\n\n        const localUserIds = {};\n        localMembers.forEach((item) => {\n            localUserIds[item.id] = true;\n        });\n\n        const remoteMembers = this.remoteMembers().filter((item) => !localUserIds[item.id]);\n\n        // comparator which prioritises users with usernames starting with search term\n        const orderUsers = (a, b) => {\n            const aStartsWith = a.username.startsWith(this.latestPrefix);\n            const bStartsWith = b.username.startsWith(this.latestPrefix);\n\n            if (aStartsWith && bStartsWith) {\n                return a.username.localeCompare(b.username);\n            }\n            if (aStartsWith) {\n                return -1;\n            }\n            if (bStartsWith) {\n                return 1;\n            }\n            return a.username.localeCompare(b.username);\n        };\n\n        // Combine the local and remote members, sorting to mix the results together.\n        const localAndRemoteMembers = localMembers.concat(remoteMembers).sort(orderUsers);\n\n        const remoteNonMembers = this.remoteNonMembers().\n            filter((item) => !localUserIds[item.id]).\n            sort(orderUsers);\n\n        return localAndRemoteMembers.concat(specialMentions).concat(remoteNonMembers);\n    }\n\n    // updateMatches invokes the resultCallback with the metadata for rendering at mentions\n    updateMatches(resultCallback, users) {\n        const mentions = users.map((user) => {\n            if (user.username) {\n                return '@' + user.username;\n            }\n            return '';\n        });\n\n        resultCallback({\n            matchedPretext: `@${this.latestPrefix}`,\n            terms: mentions,\n            items: users,\n            component: AtMentionSuggestion,\n        });\n    }\n\n    handlePretextChanged(pretext, resultCallback) {\n        const captured = XRegExp.cache('(?:^|\\\\W)@([\\\\pL\\\\d\\\\-_. ]*)$', 'i').exec(pretext.toLowerCase());\n        if (!captured) {\n            return false;\n        }\n\n        const prefix = captured[1];\n\n        this.startNewRequest(prefix);\n        this.updateMatches(resultCallback, this.users());\n\n        // If we haven't gotten server-side results in 500 ms, add the loading indicator.\n        let showLoadingIndicator = setTimeout(() => {\n            if (this.shouldCancelDispatch(prefix)) {\n                return;\n            }\n\n            this.updateMatches(resultCallback, this.users().concat([{\n                type: Constants.MENTION_MORE_MEMBERS,\n                loading: true,\n            }]));\n\n            showLoadingIndicator = null;\n        }, 500);\n\n        // Query the server for remote results to add to the local results.\n        this.autocompleteUsersInChannel(prefix).then(({data}) => {\n            if (showLoadingIndicator) {\n                clearTimeout(showLoadingIndicator);\n            }\n\n            if (this.shouldCancelDispatch(prefix)) {\n                return;\n            }\n\n            this.data = data;\n            this.updateMatches(resultCallback, this.users());\n        });\n\n        return true;\n    }\n\n    createFromProfile(profile, type) {\n        if (profile.id === this.currentUserId) {\n            return {\n                type,\n                ...profile,\n                isCurrentUser: true,\n            };\n        }\n\n        return {\n            type,\n            ...profile,\n        };\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport AtMentionProvider from './at_mention_provider.jsx';\n\nexport default AtMentionProvider;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getMyChannels, getMyChannelMemberships} from 'mattermost-redux/selectors/entities/channels';\n\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\n\nimport store from 'stores/redux_store.jsx';\n\nimport {Constants} from 'utils/constants';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass ChannelMentionSuggestion extends Suggestion {\n    render() {\n        const isSelection = this.props.isSelection;\n        const item = this.props.item;\n\n        const channelName = item.channel.display_name;\n        const purpose = item.channel.purpose;\n\n        let className = 'mentions__name no-flex';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const description = '(~' + item.channel.name + ')';\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                <div className='mention__align'>\n                    <span>\n                        {channelName}\n                    </span>\n                    <span className='mention__channelname'>\n                        {' '}\n                        {description}\n                    </span>\n                </div>\n                <div className='mention__purpose'>\n                    {purpose}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class ChannelMentionProvider extends Provider {\n    constructor(channelSearchFunc) {\n        super();\n\n        this.lastPrefixTrimmed = '';\n        this.lastPrefixWithNoResults = '';\n        this.lastCompletedWord = '';\n\n        this.autocompleteChannels = channelSearchFunc;\n    }\n\n    handlePretextChanged(pretext, resultCallback) {\n        this.resetRequest();\n\n        const captured = (/\\B(~([^~\\r\\n]*))$/i).exec(pretext.toLowerCase());\n\n        if (!captured) {\n            // Not a channel mention\n            return false;\n        }\n\n        if (captured.index > 0 && pretext[captured.index - 1] === '~') {\n            // Multiple ~'s in a row so let's return and not show the autocomplete\n            return false;\n        }\n\n        const prefix = captured[2];\n\n        if (this.lastPrefixTrimmed && prefix.trim() === this.lastPrefixTrimmed) {\n            // Don't keep searching if the user keeps typing spaces\n            return true;\n        }\n\n        this.lastPrefixTrimmed = prefix.trim();\n\n        if (this.lastPrefixWithNoResults && prefix.startsWith(this.lastPrefixWithNoResults)) {\n            // Just give up since we know it won't return any results\n            return false;\n        }\n\n        if (this.lastCompletedWord && captured[0].startsWith(this.lastCompletedWord)) {\n            // It appears we're still matching a channel handle that we already completed\n            return false;\n        }\n\n        // Clear the last completed word since we've started to match new text\n        this.lastCompletedWord = '';\n\n        this.startNewRequest(prefix);\n\n        const words = prefix.toLowerCase().split(/\\s+/);\n        const wrappedChannelIds = {};\n        var wrappedChannels = [];\n        getMyChannels(store.getState()).forEach((item) => {\n            if (item.type !== 'O' || item.delete_at > 0) {\n                return;\n            }\n            const nameWords = item.name.toLowerCase().split(/\\s+/).concat(item.display_name.toLowerCase().split(/\\s+/));\n            var matched = true;\n            for (var j = 0; matched && j < words.length; j++) {\n                if (!words[j]) {\n                    continue;\n                }\n                var wordMatched = false;\n                for (var i = 0; i < nameWords.length; i++) {\n                    if (nameWords[i].startsWith(words[j])) {\n                        wordMatched = true;\n                        break;\n                    }\n                }\n                if (!wordMatched) {\n                    matched = false;\n                    break;\n                }\n            }\n            if (!matched) {\n                return;\n            }\n            wrappedChannelIds[item.id] = true;\n            wrappedChannels.push({\n                type: Constants.MENTION_CHANNELS,\n                channel: item,\n            });\n        });\n        wrappedChannels = wrappedChannels.sort((a, b) => {\n            //\n            // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n            //\n            return sortChannelsByTypeAndDisplayName('en', a.channel, b.channel);\n        });\n        const channelMentions = wrappedChannels.map((item) => '~' + item.channel.name);\n        resultCallback({\n            terms: channelMentions.concat([' ']),\n            items: wrappedChannels.concat([{\n                type: Constants.MENTION_MORE_CHANNELS,\n                loading: true,\n            }]),\n            component: ChannelMentionSuggestion,\n            matchedPretext: captured[1],\n        });\n\n        const handleChannels = (channels, withError) => {\n            if (prefix !== this.latestPrefix || this.shouldCancelDispatch(prefix)) {\n                return;\n            }\n\n            const myMembers = getMyChannelMemberships(store.getState());\n\n            if (channels.length === 0 && !withError) {\n                this.lastPrefixWithNoResults = prefix;\n            }\n\n            // Wrap channels in an outer object to avoid overwriting the 'type' property.\n            const wrappedMoreChannels = [];\n            channels.forEach((item) => {\n                if (item.delete_at > 0 && !myMembers[item.id]) {\n                    return;\n                }\n\n                if (myMembers[item.id] && !wrappedChannelIds[item.id]) {\n                    wrappedChannelIds[item.id] = true;\n                    wrappedChannels.push({\n                        type: Constants.MENTION_CHANNELS,\n                        channel: item,\n                    });\n                    return;\n                }\n\n                if (myMembers[item.id] && wrappedChannelIds[item.id]) {\n                    return;\n                }\n\n                if (!myMembers[item.id] && wrappedChannelIds[item.id]) {\n                    delete wrappedChannelIds[item.id];\n                    const idx = wrappedChannels.map((el) => el.channel.id).indexOf(item.id);\n                    if (idx >= 0) {\n                        wrappedChannels.splice(idx, 1);\n                    }\n                }\n\n                wrappedMoreChannels.push({\n                    type: Constants.MENTION_MORE_CHANNELS,\n                    channel: item,\n                });\n            });\n\n            wrappedChannels = wrappedChannels.sort((a, b) => {\n                //\n                // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n                //\n                return sortChannelsByTypeAndDisplayName('en', a.channel, b.channel);\n            });\n\n            const wrapped = wrappedChannels.concat(wrappedMoreChannels);\n            const mentions = wrapped.map((item) => '~' + item.channel.name);\n\n            resultCallback({\n                matchedPretext: captured[1],\n                terms: mentions,\n                items: wrapped,\n                component: ChannelMentionSuggestion,\n            });\n        };\n\n        this.autocompleteChannels(\n            prefix,\n            (channels) => handleChannels(channels, false),\n            () => handleChannels([], true),\n        );\n\n        return true;\n    }\n\n    handleCompleteWord(term) {\n        this.lastCompletedWord = term;\n        this.lastPrefixWithNoResults = '';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport store from 'stores/redux_store.jsx';\n\nimport * as UserAgent from 'utils/user_agent';\n\nimport Suggestion from './suggestion.jsx';\nimport Provider from './provider.jsx';\n\nexport class CommandSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'command';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                <div className='command__title'>\n                    {item.suggestion + ' ' + item.hint}\n                </div>\n                <div className='command__desc'>\n                    {item.description}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class CommandProvider extends Provider {\n    handlePretextChanged(pretext, resultCallback) {\n        if (pretext.startsWith('/')) {\n            const command = pretext.toLowerCase();\n            Client4.getCommandsList(getCurrentTeamId(store.getState())).then(\n                (data) => {\n                    let matches = [];\n                    data.forEach((cmd) => {\n                        if (!cmd.auto_complete) {\n                            return;\n                        }\n\n                        if (cmd.trigger !== 'shortcuts' || !UserAgent.isMobile()) {\n                            if (('/' + cmd.trigger).indexOf(command) === 0) {\n                                const s = '/' + cmd.trigger;\n                                let hint = '';\n                                if (cmd.auto_complete_hint && cmd.auto_complete_hint.length !== 0) {\n                                    hint = cmd.auto_complete_hint;\n                                }\n                                matches.push({\n                                    suggestion: s,\n                                    hint,\n                                    description: cmd.auto_complete_desc,\n                                });\n                            }\n                        }\n                    });\n\n                    matches = matches.sort((a, b) => a.suggestion.localeCompare(b.suggestion));\n\n                    // pull out the suggested commands from the returned data\n                    const terms = matches.map((suggestion) => suggestion.suggestion);\n\n                    resultCallback({\n                        matchedPretext: command,\n                        terms,\n                        items: matches,\n                        component: CommandSuggestion,\n                    });\n                }\n            ).catch(\n                () => {} //eslint-disable-line no-empty-function\n            );\n\n            return true;\n        }\n        return false;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {autocompleteCustomEmojis} from 'mattermost-redux/actions/emojis';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\n\nimport {getEmojiMap, getRecentEmojis} from 'selectors/emojis';\n\nimport store from 'stores/redux_store.jsx';\n\nimport * as Emoticons from 'utils/emoticons';\nimport {compareEmojis} from 'utils/emoji_utils.jsx';\n\nimport Suggestion from './suggestion.jsx';\nimport Provider from './provider.jsx';\n\nexport const MIN_EMOTICON_LENGTH = 2;\nexport const EMOJI_CATEGORY_SUGGESTION_BLACKLIST = ['skintone'];\n\nclass EmoticonSuggestion extends Suggestion {\n    render() {\n        const text = this.props.term;\n        const emoji = this.props.item.emoji;\n\n        let className = 'emoticon-suggestion';\n        if (this.props.isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                <div className='pull-left'>\n                    <img\n                        alt={text}\n                        className='emoticon-suggestion__image'\n                        src={getEmojiImageUrl(emoji)}\n                        title={text}\n                    />\n                </div>\n                <div className='pull-left'>\n                    {text}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class EmoticonProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        // Look for the potential emoticons at the start of the text, after whitespace, and at the start of emoji reaction commands\n        const captured = (/(^|\\s|^\\+|^-)(:([^:\\s]*))$/g).exec(pretext);\n        if (!captured) {\n            return false;\n        }\n\n        const prefix = captured[1];\n        const text = captured[2];\n        const partialName = captured[3];\n\n        if (partialName.length < MIN_EMOTICON_LENGTH) {\n            return false;\n        }\n\n        // Check for text emoticons if this isn't for an emoji reaction\n        if (prefix !== '-' && prefix !== '+') {\n            for (const emoticon of Object.keys(Emoticons.emoticonPatterns)) {\n                if (Emoticons.emoticonPatterns[emoticon].test(text)) {\n                    // Don't show the autocomplete for text emoticons\n                    return false;\n                }\n            }\n        }\n\n        if (store.getState().entities.general.config.EnableCustomEmoji === 'true') {\n            store.dispatch(autocompleteCustomEmojis(partialName)).then(() => this.findAndSuggestEmojis(text, partialName, resultsCallback));\n        } else {\n            this.findAndSuggestEmojis(text, partialName, resultsCallback);\n        }\n\n        return true;\n    }\n\n    formatEmojis(emojis) {\n        return emojis.map((item) => ':' + item.name + ':');\n    }\n\n    // findAndSuggestEmojis uses the provided partialName to match anywhere inside an emoji name.\n    //\n    // For example, typing `:welc` would match both `:welcome:` and `:youre_welcome:` if those\n    // emojis are present in the local store. Note, however, that the server only does prefix\n    // matches, so a query to populate the local store for `:welc` would only return `:welcome:`.\n    // This results in surprising differences between a fresh load of the application, and the\n    // changes to the cache from expanding the cache with emojis found in existing posts.\n    //\n    // For now, this behaviour and difference is by design.\n    // See https://mattermost.atlassian.net/browse/MM-17320.\n    findAndSuggestEmojis(text, partialName, resultsCallback) {\n        const recentMatched = [];\n        const matched = [];\n\n        const emojiMap = getEmojiMap(store.getState());\n        const recentEmojis = getRecentEmojis(store.getState());\n\n        // Check for named emoji\n        for (const [name, emoji] of emojiMap) {\n            if (EMOJI_CATEGORY_SUGGESTION_BLACKLIST.includes(emoji.category)) {\n                continue;\n            }\n\n            if (emoji.aliases) {\n                // This is a system emoji so it may have multiple names\n                for (const alias of emoji.aliases) {\n                    if (alias.indexOf(partialName) !== -1) {\n                        const matchedArray = recentEmojis.includes(alias) || recentEmojis.includes(name) ?\n                            recentMatched :\n                            matched;\n\n                        matchedArray.push({name: alias, emoji});\n                        break;\n                    }\n                }\n            } else if (name.indexOf(partialName) !== -1) {\n                // This is a custom emoji so it only has one name\n                if (emojiMap.hasSystemEmoji(name)) {\n                    // System emojis take precedence over custom ones\n                    continue;\n                }\n\n                const matchedArray = recentEmojis.includes(name) ?\n                    recentMatched :\n                    matched;\n\n                matchedArray.push({name, emoji});\n            }\n        }\n\n        const sortEmojisHelper = (a, b) => {\n            return compareEmojis(a, b, partialName);\n        };\n\n        recentMatched.sort(sortEmojisHelper);\n\n        matched.sort(sortEmojisHelper);\n\n        const terms = [\n            ...this.formatEmojis(recentMatched),\n            ...this.formatEmojis(matched),\n        ];\n\n        const items = [\n            ...recentMatched,\n            ...matched,\n        ];\n\n        // Required to get past the dispatch during dispatch error\n\n        resultsCallback({\n            matchedPretext: text,\n            terms,\n            items,\n            component: EmoticonSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport PostMarkdown from 'components/post_markdown';\nimport AtMentionProvider from 'components/suggestion/at_mention_provider';\nimport ChannelMentionProvider from 'components/suggestion/channel_mention_provider.jsx';\nimport CommandProvider from 'components/suggestion/command_provider.jsx';\nimport EmoticonProvider from 'components/suggestion/emoticon_provider.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class Textbox extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        channelId: PropTypes.string,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        onKeyPress: PropTypes.func.isRequired,\n        onComposition: PropTypes.func,\n        onHeightChange: PropTypes.func,\n        createMessage: PropTypes.string.isRequired,\n        onKeyDown: PropTypes.func,\n        onMouseUp: PropTypes.func,\n        onKeyUp: PropTypes.func,\n        onBlur: PropTypes.func,\n        supportsCommands: PropTypes.bool.isRequired,\n        handlePostError: PropTypes.func,\n        suggestionListStyle: PropTypes.string,\n        emojiEnabled: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        characterLimit: PropTypes.number.isRequired,\n        disabled: PropTypes.bool,\n        badConnection: PropTypes.bool,\n        listenForMentionKeyClick: PropTypes.bool,\n        currentUserId: PropTypes.string.isRequired,\n        preview: PropTypes.bool,\n        profilesInChannel: PropTypes.arrayOf(PropTypes.object).isRequired,\n        profilesNotInChannel: PropTypes.arrayOf(PropTypes.object).isRequired,\n        actions: PropTypes.shape({\n            autocompleteUsersInChannel: PropTypes.func.isRequired,\n            autocompleteChannels: PropTypes.func.isRequired,\n        }),\n    };\n\n    static defaultProps = {\n        supportsCommands: true,\n        isRHS: false,\n        listenForMentionKeyClick: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.suggestionProviders = [\n            new AtMentionProvider({\n                currentUserId: this.props.currentUserId,\n                profilesInChannel: this.props.profilesInChannel,\n                profilesNotInChannel: this.props.profilesNotInChannel,\n                autocompleteUsersInChannel: (prefix) => this.props.actions.autocompleteUsersInChannel(prefix, props.channelId),\n            }),\n            new ChannelMentionProvider(props.actions.autocompleteChannels),\n            new EmoticonProvider(),\n        ];\n\n        if (props.supportsCommands) {\n            this.suggestionProviders.push(new CommandProvider());\n        }\n\n        this.checkMessageLength(props.value);\n        this.wrapper = React.createRef();\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(e);\n    }\n\n    updateSuggestions(prevProps) {\n        if (this.props.channelId !== prevProps.channelId ||\n            this.props.currentUserId !== prevProps.currentUserId ||\n            this.props.profilesInChannel !== prevProps.profilesInChannel ||\n            this.props.profilesNotInChannel !== prevProps.profilesNotInChannel) {\n            // Update channel id for AtMentionProvider.\n            const providers = this.suggestionProviders;\n            for (let i = 0; i < providers.length; i++) {\n                if (providers[i] instanceof AtMentionProvider) {\n                    providers[i].setProps({\n                        currentUserId: this.props.currentUserId,\n                        profilesInChannel: this.props.profilesInChannel,\n                        profilesNotInChannel: this.props.profilesNotInChannel,\n                        autocompleteUsersInChannel: (prefix) => this.props.actions.autocompleteUsersInChannel(prefix, this.props.channelId),\n                    });\n                }\n            }\n        }\n        if (prevProps.value !== this.props.value) {\n            this.checkMessageLength(this.props.value);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (!prevProps.preview && this.props.preview) {\n            this.refs.preview.focus();\n        }\n\n        this.updateSuggestions(prevProps);\n    }\n\n    checkMessageLength = (message) => {\n        if (this.props.handlePostError) {\n            if (message.length > this.props.characterLimit) {\n                const errorMessage = (\n                    <FormattedMessage\n                        id='create_post.error_message'\n                        defaultMessage='Your message is too long. Character count: {length}/{limit}'\n                        values={{\n                            length: message.length,\n                            limit: this.props.characterLimit,\n                        }}\n                    />);\n                this.props.handlePostError(errorMessage);\n            } else {\n                this.props.handlePostError(null);\n            }\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(e);\n        }\n    }\n\n    handleMouseUp = (e) => {\n        if (this.props.onMouseUp) {\n            this.props.onMouseUp(e);\n        }\n    }\n\n    handleKeyUp = (e) => {\n        if (this.props.onKeyUp) {\n            this.props.onKeyUp(e);\n        }\n    }\n\n    handleBlur = (e) => {\n        if (this.props.onBlur) {\n            this.props.onBlur(e);\n        }\n    }\n\n    handleHeightChange = (height, maxHeight) => {\n        if (this.props.onHeightChange) {\n            this.props.onHeightChange(height, maxHeight);\n        }\n    }\n\n    getInputBox = () => {\n        const textbox = this.refs.message.getTextbox();\n        return textbox;\n    }\n\n    focus = () => {\n        const textbox = this.refs.message.getTextbox();\n\n        textbox.focus();\n        Utils.placeCaretAtEnd(textbox);\n\n        // reset character count warning\n        this.checkMessageLength(textbox.value);\n    }\n\n    blur = () => {\n        const textbox = this.refs.message.getTextbox();\n        textbox.blur();\n    };\n\n    recalculateSize = () => {\n        this.refs.message.recalculateSize();\n    }\n\n    render() {\n        let preview = null;\n\n        let textboxClassName = 'form-control custom-textarea';\n        let textWrapperClass = 'textarea-wrapper';\n        let wrapperHeight;\n        if (this.props.emojiEnabled) {\n            textboxClassName += ' custom-textarea--emoji-picker';\n        }\n        if (this.props.badConnection) {\n            textboxClassName += ' bad-connection';\n        }\n        if (this.wrapper.current) {\n            wrapperHeight = this.getInputBox().clientHeight;\n        }\n        if (this.props.preview) {\n            textboxClassName += ' custom-textarea--preview';\n            textWrapperClass += ' textarea-wrapper--preview';\n\n            preview = (\n                <div\n                    tabIndex='0'\n                    ref='preview'\n                    className='form-control custom-textarea textbox-preview-area'\n                    onKeyPress={this.props.onKeyPress}\n                    onKeyDown={this.handleKeyDown}\n                    onBlur={this.handleBlur}\n                >\n                    <PostMarkdown\n                        isRHS={this.props.isRHS}\n                        message={this.props.value}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div\n                ref={this.wrapper}\n                className={textWrapperClass}\n            >\n                <SuggestionBox\n                    id={this.props.id}\n                    ref='message'\n                    className={textboxClassName}\n                    spellCheck='true'\n                    placeholder={this.props.createMessage}\n                    onChange={this.handleChange}\n                    onKeyPress={this.props.onKeyPress}\n                    onKeyDown={this.handleKeyDown}\n                    onMouseUp={this.handleMouseUp}\n                    onKeyUp={this.handleKeyUp}\n                    onComposition={this.props.onComposition}\n                    onBlur={this.handleBlur}\n                    onHeightChange={this.handleHeightChange}\n                    style={{visibility: this.props.preview ? 'hidden' : 'visible'}}\n                    inputComponent={AutosizeTextarea}\n                    listComponent={SuggestionList}\n                    listStyle={this.props.suggestionListStyle}\n                    providers={this.suggestionProviders}\n                    channelId={this.props.channelId}\n                    value={this.props.value}\n                    renderDividers={true}\n                    isRHS={this.props.isRHS}\n                    disabled={this.props.disabled}\n                    contextId={this.props.channelId}\n                    listenForMentionKeyClick={this.props.listenForMentionKeyClick}\n                    wrapperHeight={wrapperHeight}\n                />\n                {preview}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getCurrentUserId, makeGetProfilesInChannel, makeGetProfilesNotInChannel} from 'mattermost-redux/selectors/entities/users';\n\nimport {autocompleteUsersInChannel} from 'actions/views/channel';\nimport {autocompleteChannels} from 'actions/channel_actions';\n\nimport Textbox from './textbox.jsx';\n\nconst makeMapStateToProps = () => {\n    const getProfilesInChannel = makeGetProfilesInChannel();\n    const getProfilesNotInChannel = makeGetProfilesNotInChannel();\n\n    return (state, ownProps) => ({\n        currentUserId: getCurrentUserId(state),\n        profilesInChannel: getProfilesInChannel(state, ownProps.channelId, true),\n        profilesNotInChannel: getProfilesNotInChannel(state, ownProps.channelId, true),\n    });\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        autocompleteUsersInChannel,\n        autocompleteChannels,\n    }, dispatch),\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps, null, {withRef: true})(Textbox);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class TextboxLinks extends React.PureComponent {\n    static propTypes = {\n        showPreview: PropTypes.bool,\n        characterLimit: PropTypes.number.isRequired,\n        previewMessageLink: PropTypes.string,\n        updatePreview: PropTypes.func,\n        message: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        message: '',\n    };\n\n    togglePreview = (e) => {\n        e.preventDefault();\n        this.props.updatePreview(!this.props.showPreview);\n    }\n\n    render() {\n        const hasText = this.props.message && this.props.message.length > 0;\n        let editHeader;\n\n        let helpTextClass = '';\n\n        if (this.props.message && this.props.message.length > this.props.characterLimit) {\n            helpTextClass = 'hidden';\n        }\n\n        if (this.props.previewMessageLink) {\n            editHeader = (\n                <span>\n                    {this.props.previewMessageLink}\n                </span>\n            );\n        } else {\n            editHeader = (\n                <FormattedMessage\n                    id='textbox.edit'\n                    defaultMessage='Edit message'\n                />\n            );\n        }\n\n        let previewLink = null;\n        if (Utils.isFeatureEnabled(PreReleaseFeatures.MARKDOWN_PREVIEW)) {\n            previewLink = (\n                <button\n                    id='previewLink'\n                    onClick={this.togglePreview}\n                    className='style--none textbox-preview-link color--link'\n                >\n                    {this.props.showPreview ? (\n                        editHeader\n                    ) : (\n                        <FormattedMessage\n                            id='textbox.preview'\n                            defaultMessage='Preview'\n                        />\n                    )}\n                </button>\n            );\n        }\n\n        const helpText = (\n            <div\n                id='helpText'\n                style={{visibility: hasText ? 'visible' : 'hidden', opacity: hasText ? '0.45' : '0'}}\n                className='help__format-text'\n            >\n                <b>\n                    <FormattedMessage\n                        id='textbox.bold'\n                        defaultMessage='**bold**'\n                    />\n                </b>\n                <i>\n                    <FormattedMessage\n                        id='textbox.italic'\n                        defaultMessage='_italic_'\n                    />\n                </i>\n                <span>\n                    {'~~'}\n                    <strike>\n                        <FormattedMessage\n                            id='textbox.strike'\n                            defaultMessage='strike'\n                        />\n                    </strike>\n                    {'~~ '}\n                </span>\n                <span>\n                    <FormattedMessage\n                        id='textbox.inlinecode'\n                        defaultMessage='`inline code`'\n                    />\n                </span>\n                <span>\n                    <FormattedMessage\n                        id='textbox.preformatted'\n                        defaultMessage='```preformatted```'\n                    />\n                </span>\n                <span>\n                    <FormattedMessage\n                        id='textbox.quote'\n                        defaultMessage='>quote'\n                    />\n                </span>\n            </div>\n        );\n\n        return (\n            <div className={'help__text ' + helpTextClass}>\n                {helpText}\n                {previewLink}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {splitMessageBasedOnCaretPosition, postMessageOnKeyPress} from 'utils/post_utils.jsx';\n\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\n\nimport DeletePostModal from 'components/delete_post_modal';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport EmojiIcon from 'components/widgets/icons/emoji_icon';\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\nclass EditPostModal extends React.PureComponent {\n    static propTypes = {\n        canEditPost: PropTypes.bool,\n        canDeletePost: PropTypes.bool,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        ctrlSend: PropTypes.bool,\n        config: PropTypes.object.isRequired,\n        intl: intlShape.isRequired,\n        maxPostSize: PropTypes.number.isRequired,\n        editingPost: PropTypes.shape({\n            post: PropTypes.object,\n            postId: PropTypes.string,\n            refocusId: PropTypes.string,\n            commentCount: PropTypes.number,\n            show: PropTypes.bool.isRequired,\n            title: PropTypes.string,\n            isRHS: PropTypes.bool,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            addMessageIntoHistory: PropTypes.func.isRequired,\n            editPost: PropTypes.func.isRequired,\n            hideEditPostModal: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            preview: false,\n            editText: '',\n            caretPosition: ''.length,\n            postError: '',\n            errorClass: null,\n            showEmojiPicker: false,\n            prevShowState: props.editingPost.show,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.editingPost.show && !state.prevShowState) {\n            return {\n                editText: props.editingPost.post.message_source || props.editingPost.post.message,\n                prevShowState: props.editingPost.show,\n            };\n        }\n\n        return null;\n    }\n\n    updatePreview = (newState) => {\n        this.setState({preview: newState});\n    }\n\n    getContainer = () => {\n        return this.refs.editModalBody;\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n        if (!this.state.showEmojiPicker && this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    hideEmojiPicker = () => {\n        this.setState({showEmojiPicker: false});\n        if (this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    handleEmojiClick = (emoji) => {\n        const emojiAlias = emoji && (emoji.name || (emoji.aliases && emoji.aliases[0]));\n\n        if (!emojiAlias) {\n            //Oops.. There went something wrong\n            return;\n        }\n\n        if (this.state.editText === '') {\n            this.setState({editText: ':' + emojiAlias + ': '});\n        } else {\n            const {editText} = this.state;\n            const {firstPiece, lastPiece} = splitMessageBasedOnCaretPosition(this.state.caretPosition, editText);\n\n            // check whether the first piece of the message is empty when cursor\n            // is placed at beginning of message and avoid adding an empty string at the beginning of the message\n            const newMessage = firstPiece === '' ? `:${emojiAlias}: ${lastPiece}` : `${firstPiece} :${emojiAlias}: ${lastPiece}`;\n\n            const newCaretPosition = firstPiece === '' ? `:${emojiAlias}: `.length : `${firstPiece} :${emojiAlias}: `.length;\n\n            const textbox = this.editbox.getInputBox();\n\n            this.setState({\n                editText: newMessage,\n                caretPosition: newCaretPosition,\n            }, () => {\n                Utils.setCaretPosition(textbox, newCaretPosition);\n            });\n        }\n\n        this.setState({showEmojiPicker: false});\n\n        if (this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    handleGifClick = (gif) => {\n        if (this.state.editText === '') {\n            this.setState({editText: gif});\n        } else {\n            const newMessage = ((/\\s+$/).test(this.state.editText)) ? this.state.editText + gif : this.state.editText + ' ' + gif;\n            this.setState({editText: newMessage});\n        }\n        this.setState({showEmojiPicker: false});\n        this.editbox.focus();\n    }\n\n    getEditPostControls = () => {\n        return this.refs.editPostEmoji;\n    }\n\n    handlePostError = (postError) => {\n        if (this.state.postError !== postError) {\n            this.setState({postError});\n        }\n    }\n\n    handleEdit = async () => {\n        if (this.isSaveDisabled()) {\n            return;\n        }\n\n        const {actions, editingPost} = this.props;\n        const updatedPost = {\n            message: this.state.editText,\n            id: editingPost.postId,\n            channel_id: editingPost.post.channel_id,\n        };\n\n        if (this.state.postError) {\n            this.setState({errorClass: 'animation--highlight'});\n            setTimeout(() => {\n                this.setState({errorClass: null});\n            }, Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        if (updatedPost.message === (editingPost.post.message_source || editingPost.post.message)) {\n            // no changes so just close the modal\n            this.handleHide();\n            return;\n        }\n\n        const hasAttachment = editingPost.post.file_ids && editingPost.post.file_ids.length > 0;\n        if (updatedPost.message.trim().length === 0 && !hasAttachment) {\n            this.handleHide(false);\n\n            const deletePostModalData = {\n                ModalId: ModalIdentifiers.DELETE_POST,\n                dialogType: DeletePostModal,\n                dialogProps: {\n                    post: editingPost.post,\n                    commentCount: editingPost.commentCount,\n                    isRHS: editingPost.isRHS,\n                },\n            };\n\n            this.props.actions.openModal(deletePostModalData);\n            return;\n        }\n\n        actions.addMessageIntoHistory(updatedPost.message);\n\n        const data = await actions.editPost(updatedPost);\n        if (data) {\n            window.scrollTo(0, 0);\n        }\n\n        this.handleHide();\n    }\n\n    handleChange = (e) => {\n        const message = e.target.value;\n        this.setState({\n            editText: message,\n        });\n    }\n\n    handleEditKeyPress = (e) => {\n        const {ctrlSend, codeBlockOnCtrlEnter} = this.props;\n\n        const {allowSending, ignoreKeyPress} = postMessageOnKeyPress(e, this.state.editText, ctrlSend, codeBlockOnCtrlEnter, Date.now(), this.lastChannelSwitchAt, this.state.caretPosition);\n\n        if (ignoreKeyPress) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        if (allowSending) {\n            e.preventDefault();\n            this.editbox.blur();\n            this.handleEdit();\n        }\n    }\n\n    handleMouseUpKeyUp = (e) => {\n        const caretPosition = Utils.getCaretPosition(e.target);\n        this.setState({\n            caretPosition,\n        });\n    }\n\n    handleKeyDown = (e) => {\n        if (this.props.ctrlSend && Utils.isKeyPressed(e, KeyCodes.ENTER) && e.ctrlKey === true) {\n            this.handleEdit();\n        } else if (Utils.isKeyPressed(e, KeyCodes.ESCAPE) && !this.state.showEmojiPicker) {\n            this.handleHide();\n        }\n    }\n\n    handleHide = (doRefocus = true) => {\n        this.refocusId = doRefocus ? this.props.editingPost.refocusId : null;\n        this.props.actions.hideEditPostModal();\n    }\n\n    handleEntered = () => {\n        if (this.editbox) {\n            this.editbox.focus();\n            this.editbox.recalculateSize();\n        }\n    }\n\n    handleExit = () => {\n        this.setState({preview: false});\n    }\n\n    handleExited = () => {\n        const refocusId = this.refocusId;\n        if (refocusId) {\n            setTimeout(() => {\n                const element = document.getElementById(refocusId);\n                if (element) {\n                    element.focus();\n                }\n            });\n        }\n\n        this.refocusId = null;\n        this.setState({editText: '', postError: '', errorClass: null, preview: false, showEmojiPicker: false, prevShowState: false});\n    }\n\n    setEditboxRef = (ref) => {\n        if (ref && ref.getWrappedInstance) {\n            this.editbox = ref.getWrappedInstance();\n        }\n\n        if (this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    isSaveDisabled = () => {\n        const post = this.props.editingPost.post;\n        const hasAttachments = post && post.file_ids && post.file_ids.length > 0;\n        if (hasAttachments) {\n            return !this.props.canEditPost;\n        }\n\n        if (this.state.editText !== '') {\n            return !this.props.canEditPost;\n        }\n\n        return !this.props.canDeletePost;\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const errorBoxClass = 'edit-post-footer' + (this.state.postError ? ' has-error' : '');\n        let postError = null;\n        if (this.state.postError) {\n            const postErrorClass = 'post-error' + (this.state.errorClass ? (' ' + this.state.errorClass) : '');\n            postError = (<label className={postErrorClass}>{this.state.postError}</label>);\n        }\n\n        let emojiPicker = null;\n        const emojiButtonAriaLabel = formatMessage({id: 'emoji_picker.emojiPicker', defaultMessage: 'Emoji Picker'}).toLowerCase();\n        if (this.props.config.EnableEmojiPicker === 'true' && !this.state.preview) {\n            emojiPicker = (\n                <div>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        container={this.getContainer}\n                        target={this.getEditPostControls}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClick={this.handleEmojiClick}\n                        onGifClick={this.handleGifClick}\n                        enableGifPicker={this.props.config.EnableGifPicker === 'true'}\n                        topOffset={-20}\n                    />\n                    <button\n                        aria-label={emojiButtonAriaLabel}\n                        id='editPostEmoji'\n                        ref='editPostEmoji'\n                        className='style--none post-action'\n                        onClick={this.toggleEmojiPicker}\n                    >\n                        <EmojiIcon\n                            className='icon icon--emoji'\n\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                id='editPostModal'\n                dialogClassName='a11y__modal edit-modal'\n                show={this.props.editingPost.show}\n                onKeyDown={this.handleKeyDown}\n                onHide={this.handleHide}\n                onEntered={this.handleEntered}\n                onExit={this.handleExit}\n                onExited={this.handleExited}\n                keyboard={false}\n                role='dialog'\n                aria-labelledby='editPostModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editPostModalLabel'\n                    >\n                        <FormattedMessage\n                            id='edit_post.edit'\n                            defaultMessage='Edit {title}'\n                            values={{\n                                title: this.props.editingPost.title,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    bsClass={`modal-body edit-modal-body${this.state.showEmojiPicker ? ' edit-modal-body--add-reaction' : ''}`}\n                    ref='editModalBody'\n                >\n                    <div className='post-create__container'>\n                        <div className='textarea-wrapper'>\n                            <Textbox\n                                tabIndex='0'\n                                onChange={this.handleChange}\n                                onKeyPress={this.handleEditKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                onMouseUp={this.handleMouseUpKeyUp}\n                                onKeyUp={this.handleMouseUpKeyUp}\n                                handlePostError={this.handlePostError}\n                                value={this.state.editText}\n                                channelId={this.props.editingPost.post && this.props.editingPost.post.channel_id}\n                                emojiEnabled={this.props.config.EnableEmojiPicker === 'true'}\n                                createMessage={Utils.localizeMessage('edit_post.editPost', 'Edit the post...')}\n                                supportsCommands={false}\n                                suggestionListStyle='bottom'\n                                id='edit_textbox'\n                                ref={this.setEditboxRef}\n                                characterLimit={this.props.maxPostSize}\n                                preview={this.state.preview}\n                            />\n                            <div className='post-body__actions'>\n                                {emojiPicker}\n                            </div>\n                        </div>\n                        <div className='post-create-footer'>\n                            <TextboxLinks\n                                characterLimit={this.props.maxPostSize}\n                                showPreview={this.state.preview}\n                                ref={this.setTextboxLinksRef}\n                                updatePreview={this.updatePreview}\n                                message={this.state.editText}\n                            />\n                            <div className={errorBoxClass}>\n                                {postError}\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.handleHide}\n                    >\n                        <FormattedMessage\n                            id='edit_post.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        id='editButton'\n                        type='button'\n                        className='btn btn-primary'\n                        disabled={this.isSaveDisabled()}\n                        onClick={this.handleEdit}\n                    >\n                        <FormattedMessage\n                            id='edit_post.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(EditPostModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {addMessageIntoHistory} from 'mattermost-redux/actions/posts';\nimport {Preferences, Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\nimport {hideEditPostModal} from 'actions/post_actions';\nimport {editPost} from 'actions/views/posts';\nimport {getEditingPost} from 'selectors/posts';\nimport Constants from 'utils/constants';\n\nimport EditPostModal from './edit_post_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const editingPost = getEditingPost(state);\n    const currentUserId = getCurrentUserId(state);\n    let canDeletePost = false;\n    let canEditPost = false;\n    if (editingPost && editingPost.post && editingPost.post.user_id === currentUserId) {\n        canDeletePost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.DELETE_POST});\n        canEditPost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.EDIT_POST});\n    } else {\n        canDeletePost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.DELETE_OTHERS_POSTS});\n        canEditPost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.EDIT_OTHERS_POSTS});\n    }\n\n    return {\n        canEditPost,\n        canDeletePost,\n        codeBlockOnCtrlEnter: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', true),\n        ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n        config,\n        editingPost,\n        maxPostSize: parseInt(config.MaxPostSize, 10) || Constants.DEFAULT_CHARACTER_LIMIT,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addMessageIntoHistory,\n            editPost,\n            hideEditPostModal,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport EventEmitter from 'events';\n\nimport Constants from 'utils/constants';\nimport AppDispatcher from '../dispatcher/app_dispatcher.jsx';\n\nconst ActionTypes = Constants.ActionTypes;\n\nclass ModalStoreClass extends EventEmitter {\n    constructor() {\n        super();\n\n        this.dispatchToken = AppDispatcher.register(this.handleEventPayload);\n    }\n\n    addModalListener = (action, callback) => {\n        this.on(action, callback);\n    }\n\n    removeModalListener = (action, callback) => {\n        this.removeListener(action, callback);\n    }\n\n    handleEventPayload = (payload) => {\n        // toggle event handlers should accept a boolean show/hide value and can accept a map of arguments\n        const {type, value, ...args} = payload.action; //eslint-disable-line no-use-before-define\n\n        switch (type) {\n        case ActionTypes.TOGGLE_SHORTCUTS_MODAL:\n        case ActionTypes.TOGGLE_IMPORT_THEME_MODAL:\n        case ActionTypes.TOGGLE_DELETE_POST_MODAL:\n        case ActionTypes.TOGGLE_GET_POST_LINK_MODAL:\n        case ActionTypes.TOGGLE_GET_TEAM_INVITE_LINK_MODAL:\n        case ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL:\n        case ActionTypes.TOGGLE_QUICK_SWITCH_MODAL:\n        case ActionTypes.TOGGLE_CHANNEL_PURPOSE_UPDATE_MODAL:\n        case ActionTypes.TOGGLE_CHANNEL_NAME_UPDATE_MODAL:\n        case ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL:\n            this.emit(type, value, args);\n            break;\n        }\n    }\n}\n\nconst ModalStore = new ModalStoreClass();\nexport default ModalStore;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\n\ntype Props = {\n    show: boolean;\n    onHide: () => void;\n    title: string;\n    helpText?: string;\n    link: string;\n}\n\ntype State = {\n    copiedLink: boolean;\n}\n\nexport default class GetLinkModal extends React.PureComponent<Props, State> {\n    private textAreaRef = React.createRef<HTMLTextAreaElement>();\n    public static defaultProps = {\n        helpText: null,\n    };\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            copiedLink: false,\n        };\n    }\n\n    public onHide = (): void => {\n        this.setState({copiedLink: false});\n        this.props.onHide();\n    }\n\n    public copyLink = (): void => {\n        const textarea = this.textAreaRef.current;\n\n        if (textarea) {\n            textarea.focus();\n            textarea.setSelectionRange(0, this.props.link.length);\n\n            try {\n                this.setState({copiedLink: document.execCommand('copy')});\n            } catch (err) {\n                this.setState({copiedLink: false});\n            }\n        }\n    }\n\n    public render(): JSX.Element {\n        let helpText = null;\n        if (this.props.helpText) {\n            helpText = (\n                <p>\n                    {this.props.helpText}\n                    <br/>\n                    <br/>\n                </p>\n            );\n        }\n\n        let copyLink = null;\n\n        if (document.queryCommandSupported('copy')) {\n            copyLink = (\n                <button\n                    id='linkModalCopyLink'\n                    data-copy-btn='true'\n                    type='button'\n                    className='btn btn-primary pull-left'\n                    onClick={this.copyLink}\n                >\n                    <FormattedMessage\n                        id='get_link.copy'\n                        defaultMessage='Copy Link'\n                    />\n                </button>\n            );\n        }\n\n        const linkText = (\n            <textarea\n                id='linkModalTextArea'\n                className='form-control no-resize min-height'\n                ref={this.textAreaRef}\n                value={this.props.link}\n                onClick={this.copyLink}\n                readOnly={true}\n            />\n        );\n\n        let copyLinkConfirm = null;\n        if (this.state.copiedLink) {\n            copyLinkConfirm = (\n                <p className='alert alert-success alert--confirm'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='get_link.clipboard'\n                        defaultMessage=' Link copied'\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.onHide}\n                role='dialog'\n                aria-labelledby='getLinkModalLabel'\n            >\n                <Modal.Header\n                    id='getLinkModalLabel'\n                    closeButton={true}\n                >\n                    <h4 className='modal-title'>{this.props.title}</h4>\n                </Modal.Header>\n                <Modal.Body>\n                    {helpText}\n                    {linkText}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        id='linkModalCloseButton'\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='get_link.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                    {copyLink}\n                    {copyLinkConfirm}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport GetLinkModal from 'components/get_link_modal';\n\ntype Props = {\n    currentTeamUrl: string;\n}\n\ntype State = {\n    show: boolean;\n    postId?: string;\n}\n\ntype Post = {\n    id: string;\n    message?: string;\n}\n\nexport default class GetPostLinkModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    public componentDidMount(): void {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_GET_POST_LINK_MODAL, this.handleToggle);\n    }\n\n    public componentWillUnmount(): void {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_GET_POST_LINK_MODAL, this.handleToggle);\n    }\n\n    public handleToggle = (value: boolean, args: {post: Post}): void => {\n        const {post, post: {id}} = args;\n        const postId = post && id && typeof id === 'string' && id.length !== 0 ? id : '';\n\n        this.setState({\n            show: value,\n            postId,\n        });\n    }\n\n    private hide = (): void => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    public render(): JSX.Element|null {\n        const {postId, show} = this.state;\n        const {currentTeamUrl} = this.props;\n\n        if (postId && typeof postId === 'string' && postId.length !== 0) {\n            const postUrl = `${currentTeamUrl}/pl/${postId}`;\n\n            return (\n                <GetLinkModal\n                    show={show}\n                    onHide={this.hide}\n                    title={Utils.localizeMessage('get_post_link_modal.title', 'Copy Permalink')}\n                    helpText={Utils.localizeMessage('get_post_link_modal.help', 'The link below allows authorized users to see your post.')}\n                    link={postUrl}\n                />\n            );\n        }\n\n        // Dont show model if ID of post doesnt exists\n        return null;\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport {getSiteURL} from 'utils/url';\n\nimport GetPostLinkModal from './get_post_link_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    const currentTeam = getCurrentTeam(state) || {};\n    const currentTeamUrl = `${getSiteURL()}/${currentTeam.name}`;\n    return {\n        currentTeamUrl,\n    };\n}\n\nexport default connect(mapStateToProps)(GetPostLinkModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport GetLinkModal from 'components/get_link_modal';\n\nexport default class GetPublicLinkModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Public link of the file\n         */\n        link: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /**\n             * An action to get public link\n             */\n            getFilePublicLink: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        link: '',\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            fileId: '',\n        };\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL, this.handleToggle);\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL, this.handleToggle);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.show && !prevState.show) {\n            this.props.actions.getFilePublicLink(this.state.fileId);\n        }\n    }\n\n    handleToggle = (value, args) => {\n        this.setState({\n            show: value,\n            fileId: args.fileId,\n        });\n    }\n\n    onHide = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    render() {\n        return (\n            <GetLinkModal\n                show={this.state.show}\n                onHide={this.onHide}\n                title={Utils.localizeMessage('get_public_link_modal.title', 'Copy Public Link')}\n                helpText={Utils.localizeMessage('get_public_link_modal.help', 'The link below allows anyone to see this file without being registered on this server.')}\n                link={this.props.link}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getFilePublicLink} from 'mattermost-redux/actions/files';\nimport * as Selectors from 'mattermost-redux/selectors/entities/files';\n\nimport GetPublicLinkModal from './get_public_link_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        link: Selectors.getFilePublicLink(state).link,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getFilePublicLink,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GetPublicLinkModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Channel} from 'mattermost-redux/types/channels';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\ntype State = {\n    show: boolean;\n    channel?: Channel;\n};\n\ntype Props = {\n    actions: {\n        leaveChannel: (channelId: any) => any;\n    };\n}\n\nexport default class LeavePrivateChannelModal extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: false\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL, this.handleToggle);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL, this.handleToggle);\n    }\n\n    handleKeyPress = (e: KeyboardEvent) => {\n        if (e.key === 'Enter' && this.state.show) {\n            this.handleSubmit();\n        }\n    };\n\n    handleSubmit = () => {\n        const {actions} = this.props;\n        const {channel} = this.state;\n\n        if (channel) {\n            const channelId = channel.id;\n            actions.leaveChannel(channelId).then((result: {data: boolean}) => {\n                if (result.data) {\n                    this.handleHide();\n                }\n            });\n        }\n    };\n\n    handleToggle = (value: Channel): void => {\n        this.setState({\n            channel: value,\n            show: value !== null,\n        });\n    };\n\n    handleHide = () => {\n        this.setState({\n            show: false\n        });\n    };\n\n    render() {\n        let title;\n        let message;\n        if (this.state.channel && this.state.channel.display_name) {\n            title = (\n                <FormattedMessage\n                    id='leave_private_channel_modal.title'\n                    defaultMessage='Leave Private Channel {channel}'\n                    values={{\n                        channel: <b>{this.state.channel.display_name}</b>,\n                    }}\n                />\n            );\n\n            message = (\n                <FormattedMessage\n                    id='leave_private_channel_modal.message'\n                    defaultMessage='Are you sure you wish to leave the private channel {channel}? You must be re-invited in order to re-join this channel in the future.'\n                    values={{\n                        channel: <b>{this.state.channel.display_name}</b>,\n                    }}\n                />\n            );\n        }\n\n        const buttonClass = 'btn btn-danger';\n        const button = (\n            <FormattedMessage\n                id='leave_private_channel_modal.leave'\n                defaultMessage='Yes, leave channel'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.show}\n                title={title}\n                message={message}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={this.handleSubmit}\n                onCancel={this.handleHide}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {leaveChannel} from 'actions/views/channel';\n\nimport LeavePrivateChannelModal from './leave_private_channel_modal';\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            leaveChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(LeavePrivateChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport {toTitleCase} from 'utils/utils.jsx';\nimport {UserStatuses} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class ResetStatusModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The user's preference for whether their status is automatically reset\n         */\n        autoResetPref: PropTypes.string,\n\n        /*\n         * Props value is used to update currentUserStatus\n         */\n        currentUserStatus: PropTypes.string,\n\n        /*\n         * Props value is used to reset status from status_dropdown\n         */\n        newStatus: PropTypes.string,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onHide: PropTypes.func,\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get and then reset the user's status if needed\n             */\n            autoResetStatus: PropTypes.func.isRequired,\n\n            /*\n             * Function to set the status for a user\n             */\n            setStatus: PropTypes.func.isRequired,\n\n            /*\n             * Function to save user preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n            currentUserStatus: {},\n            newStatus: props.newStatus || 'online',\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.autoResetStatus().then(\n            (status) => {\n                const statusIsManual = status.manual;\n                const autoResetPrefNotSet = this.props.autoResetPref === '';\n\n                this.setState({\n                    currentUserStatus: status, // Set in state until status refactor where we store 'manual' field in redux\n                    show: Boolean(status.status === UserStatuses.OUT_OF_OFFICE || (statusIsManual && autoResetPrefNotSet)),\n                });\n            }\n        );\n    }\n\n    hideModal = () => {\n        this.setState({show: false});\n    };\n\n    onConfirm = (checked) => {\n        this.hideModal();\n\n        const newStatus = {...this.state.currentUserStatus};\n        newStatus.status = this.state.newStatus;\n        this.props.actions.setStatus(newStatus);\n\n        if (checked) {\n            const pref = {category: Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, user_id: newStatus.user_id, name: newStatus.user_id, value: 'true'};\n            this.props.actions.savePreferences(pref.user_id, [pref]);\n        }\n    };\n\n    onCancel = (checked) => {\n        this.hideModal();\n\n        if (checked) {\n            const status = {...this.state.currentUserStatus};\n            const pref = {category: Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, user_id: status.user_id, name: status.user_id, value: 'false'};\n            this.props.actions.savePreferences(pref.user_id, [pref]);\n        }\n    };\n\n    renderModalMessage = () => {\n        if (this.props.currentUserStatus === UserStatuses.OUT_OF_OFFICE) {\n            return (\n                <FormattedMessage\n                    id={`modal.manual_status.auto_responder.message_${this.state.newStatus}`}\n                    defaultMessage='Would you like to switch your status to \"{status}\" and disable Automatic Replies?'\n                    values={{\n                        status: toTitleCase(this.state.newStatus),\n                    }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id={`modal.manual_status.message_${this.state.newStatus}`}\n                defaultMessage='Would you like to switch your status to \"{status}\"?'\n                values={{\n                    status: toTitleCase(this.state.newStatus),\n                }}\n            />\n        );\n    };\n\n    render() {\n        const userStatus = this.state.currentUserStatus.status || '';\n        const userStatusId = 'modal.manual_status.title_' + userStatus;\n        const manualStatusTitle = (\n            <FormattedMessage\n                id={userStatusId}\n                defaultMessage='Your status is set to \"{status}\"'\n                values={{\n                    status: toTitleCase(userStatus),\n                }}\n            />\n        );\n\n        const manualStatusMessage = this.renderModalMessage();\n\n        const manualStatusButton = (\n            <FormattedMessage\n                id={`modal.manual_status.button_${this.state.newStatus}`}\n                defaultMessage='Yes, set my status to \"{status}\"'\n                values={{\n                    status: toTitleCase(this.state.newStatus),\n                }}\n            />\n        );\n        const manualStatusId = 'modal.manual_status.cancel_' + userStatus;\n        const manualStatusCancel = (\n            <FormattedMessage\n                id={manualStatusId}\n                defaultMessage='No, keep it as \"{status}\"'\n                values={{\n                    status: toTitleCase(userStatus),\n                }}\n            />\n        );\n\n        const manualStatusCheckbox = (\n            <FormattedMessage\n                id='modal.manual_status.ask'\n                defaultMessage='Do not ask me again'\n            />\n        );\n\n        const showCheckbox = this.props.currentUserStatus !== UserStatuses.OUT_OF_OFFICE;\n\n        return (\n            <ConfirmModal\n                show={this.state.show}\n                title={manualStatusTitle}\n                message={manualStatusMessage}\n                confirmButtonText={manualStatusButton}\n                onConfirm={this.onConfirm}\n                cancelButtonText={manualStatusCancel}\n                onCancel={this.onCancel}\n                onExited={this.props.onHide}\n                showCheckbox={showCheckbox}\n                checkboxText={manualStatusCheckbox}\n            />\n        );\n    }\n}\n\nt('modal.manual_status.auto_responder.message_');\nt('modal.manual_status.auto_responder.message_away');\nt('modal.manual_status.auto_responder.message_dnd');\nt('modal.manual_status.auto_responder.message_offline');\nt('modal.manual_status.auto_responder.message_online');\nt('modal.manual_status.button_');\nt('modal.manual_status.button_away');\nt('modal.manual_status.button_dnd');\nt('modal.manual_status.button_offline');\nt('modal.manual_status.button_online');\nt('modal.manual_status.cancel_');\nt('modal.manual_status.cancel_away');\nt('modal.manual_status.cancel_dnd');\nt('modal.manual_status.cancel_offline');\nt('modal.manual_status.cancel_ooo');\nt('modal.manual_status.message_');\nt('modal.manual_status.message_away');\nt('modal.manual_status.message_dnd');\nt('modal.manual_status.message_offline');\nt('modal.manual_status.message_online');\nt('modal.manual_status.title_');\nt('modal.manual_status.title_away');\nt('modal.manual_status.title_dnd');\nt('modal.manual_status.title_offline');\nt('modal.manual_status.title_ooo');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {setStatus} from 'mattermost-redux/actions/users';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {autoResetStatus} from 'actions/user_actions.jsx';\n\nimport ResetStatusModal from './reset_status_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const {currentUserId} = state.entities.users;\n    return {\n        autoResetPref: get(state, Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, currentUserId, ''),\n        currentUserStatus: getStatusForUserId(state, currentUserId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            autoResetStatus,\n            setStatus,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetStatusModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {defineMessages, injectIntl} from 'react-intl';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport {t} from 'utils/i18n';\n\nconst allShortcuts = defineMessages({\n    mainHeader: {\n        default: {\n            id: t('shortcuts.header'),\n            defaultMessage: 'Keyboard Shortcuts\\tCtrl|/',\n        },\n        mac: {\n            id: t('shortcuts.header.mac'),\n            defaultMessage: 'Keyboard Shortcuts\\t⌘|/',\n        },\n    },\n    navHeader: {\n        id: t('shortcuts.nav.header'),\n        defaultMessage: 'Navigation',\n    },\n    navPrev: {\n        default: {\n            id: t('shortcuts.nav.prev'),\n            defaultMessage: 'Previous channel:\\tAlt|Up',\n        },\n        mac: {\n            id: t('shortcuts.nav.prev.mac'),\n            defaultMessage: 'Previous channel:\\t⌥|Up',\n        },\n    },\n    navNext: {\n        default: {\n            id: t('shortcuts.nav.next'),\n            defaultMessage: 'Next channel:\\tAlt|Down',\n        },\n        mac: {\n            id: t('shortcuts.nav.next.mac'),\n            defaultMessage: 'Next channel:\\t⌥|Down',\n        },\n    },\n    navUnreadPrev: {\n        default: {\n            id: t('shortcuts.nav.unread_prev'),\n            defaultMessage: 'Previous unread channel:\\tAlt|Shift|Up',\n        },\n        mac: {\n            id: t('shortcuts.nav.unread_prev.mac'),\n            defaultMessage: 'Previous unread channel:\\t⌥|Shift|Up',\n        },\n    },\n    navUnreadNext: {\n        default: {\n            id: t('shortcuts.nav.unread_next'),\n            defaultMessage: 'Next unread channel:\\tAlt|Shift|Down',\n        },\n        mac: {\n            id: t('shortcuts.nav.unread_next.mac'),\n            defaultMessage: 'Next unread channel:\\t⌥|Shift|Down',\n        },\n    },\n    navSwitcher: {\n        default: {\n            id: t('shortcuts.nav.switcher'),\n            defaultMessage: 'Quick channel switcher:\\tCtrl|K',\n        },\n        mac: {\n            id: t('shortcuts.nav.switcher.mac'),\n            defaultMessage: 'Quick channel switcher:\\t⌘|K',\n        },\n    },\n    navDMMenu: {\n        default: {\n            id: t('shortcuts.nav.direct_messages_menu'),\n            defaultMessage: 'Direct messages menu:\\tCtrl|Shift|K',\n        },\n        mac: {\n            id: t('shortcuts.nav.direct_messages_menu.mac'),\n            defaultMessage: 'Direct messages menu:\\t⌘|Shift|K',\n        },\n    },\n    navSettings: {\n        default: {\n            id: t('shortcuts.nav.settings'),\n            defaultMessage: 'Account settings:\\tCtrl|Shift|A',\n        },\n        mac: {\n            id: t('shortcuts.nav.settings.mac'),\n            defaultMessage: 'Account settings:\\t⌘|Shift|A',\n        },\n    },\n    navMentions: {\n        default: {\n            id: t('shortcuts.nav.recent_mentions'),\n            defaultMessage: 'Recent mentions:\\tCtrl|Shift|M',\n        },\n        mac: {\n            id: t('shortcuts.nav.recent_mentions.mac'),\n            defaultMessage: 'Recent mentions:\\t⌘|Shift|M',\n        },\n    },\n    navFocusCenter: {\n        default: {\n            id: t('shortcuts.nav.focus_center'),\n            defaultMessage: 'Set focus to input field:\\tCtrl|Shift|L',\n        },\n        mac: {\n            id: t('shortcuts.nav.focus_center.mac'),\n            defaultMessage: 'Set focus to input field:\\t⌘|Shift|L',\n        },\n    },\n    msgHeader: {\n        id: t('shortcuts.msgs.header'),\n        defaultMessage: 'Messages',\n    },\n    msgInputHeader: {\n        id: t('shortcuts.msgs.input.header'),\n        defaultMessage: 'Works inside an empty input field',\n    },\n    msgEdit: {\n        id: t('shortcuts.msgs.edit'),\n        defaultMessage: 'Edit last message in channel:\\tUp',\n    },\n    msgReply: {\n        id: t('shortcuts.msgs.reply'),\n        defaultMessage: 'Reply to last message in channel:\\tShift|Up',\n    },\n    msgReprintPrev: {\n        default: {\n            id: t('shortcuts.msgs.reprint_prev'),\n            defaultMessage: 'Reprint previous message:\\tCtrl|Up',\n        },\n        mac: {\n            id: t('shortcuts.msgs.reprint_prev.mac'),\n            defaultMessage: 'Reprint previous message:\\t⌘|Up',\n        },\n    },\n    msgReprintNext: {\n        default: {\n            id: t('shortcuts.msgs.reprint_next'),\n            defaultMessage: 'Reprint next message:\\tCtrl|Down',\n        },\n        mac: {\n            id: t('shortcuts.msgs.reprint_next.mac'),\n            defaultMessage: 'Reprint next message:\\t⌘|Down',\n        },\n    },\n    msgCompHeader: {\n        id: t('shortcuts.msgs.comp.header'),\n        defaultMessage: 'Autocomplete',\n    },\n    msgCompUsername: {\n        id: t('shortcuts.msgs.comp.username'),\n        defaultMessage: 'Username:\\t@|[a-z]|Tab',\n    },\n    msgCompChannel: {\n        id: t('shortcuts.msgs.comp.channel'),\n        defaultMessage: 'Channel:\\t~|[a-z]|Tab',\n    },\n    msgCompEmoji: {\n        id: t('shortcuts.msgs.comp.emoji'),\n        defaultMessage: 'Emoji:\\t:|[a-z]|Tab',\n    },\n    filesHeader: {\n        id: t('shortcuts.files.header'),\n        defaultMessage: 'Files',\n    },\n    filesUpload: {\n        default: {\n            id: t('shortcuts.files.upload'),\n            defaultMessage: 'Upload files:\\tCtrl|U',\n        },\n        mac: {\n            id: t('shortcuts.files.upload.mac'),\n            defaultMessage: 'Upload files:\\t⌘|U',\n        },\n    },\n    browserHeader: {\n        id: t('shortcuts.browser.header'),\n        defaultMessage: 'Built-in Browser Commands',\n    },\n    browserChannelPrev: {\n        default: {\n            id: t('shortcuts.browser.channel_prev'),\n            defaultMessage: 'Back in history:\\tAlt|Left',\n        },\n        mac: {\n            id: t('shortcuts.browser.channel_prev.mac'),\n            defaultMessage: 'Back in history:\\t⌘|[',\n        },\n    },\n    browserChannelNext: {\n        default: {\n            id: t('shortcuts.browser.channel_next'),\n            defaultMessage: 'Forward in history:\\tAlt|Right',\n        },\n        mac: {\n            id: t('shortcuts.browser.channel_next.mac'),\n            defaultMessage: 'Forward in history:\\t⌘|]',\n        },\n    },\n    browserFontIncrease: {\n        default: {\n            id: t('shortcuts.browser.font_increase'),\n            defaultMessage: 'Zoom in:\\tCtrl|+',\n        },\n        mac: {\n            id: t('shortcuts.browser.font_increase.mac'),\n            defaultMessage: 'Zoom in:\\t⌘|+',\n        },\n    },\n    browserFontDecrease: {\n        default: {\n            id: t('shortcuts.browser.font_decrease'),\n            defaultMessage: 'Zoom out:\\tCtrl|-',\n        },\n        mac: {\n            id: t('shortcuts.browser.font_decrease.mac'),\n            defaultMessage: 'Zoom out:\\t⌘|-',\n        },\n    },\n    browserInputHeader: {\n        id: t('shortcuts.browser.input.header'),\n        defaultMessage: 'Works inside an input field',\n    },\n    browserHighlightPrev: {\n        id: t('shortcuts.browser.highlight_prev'),\n        defaultMessage: 'Highlight text to the previous line:\\tShift|Up',\n    },\n    browserHighlightNext: {\n        id: t('shortcuts.browser.highlight_next'),\n        defaultMessage: 'Highlight text to the next line:\\tShift|Down',\n    },\n    browserNewline: {\n        id: t('shortcuts.browser.newline'),\n        defaultMessage: 'Create a new line:\\tShift|Enter',\n    },\n    info: {\n        id: t('shortcuts.info'),\n        defaultMessage: 'Begin a message with / for a list of all the commands at your disposal.',\n    },\n});\n\nclass ShortcutsModal extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        isMac: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_SHORTCUTS_MODAL, this.handleToggle);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_SHORTCUTS_MODAL, this.handleToggle);\n    }\n\n    handleToggle = () => {\n        //toggles the state of shortcut dialog\n        this.setState({\n            show: !this.state.show,\n        });\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    getShortcuts() {\n        const {isMac} = this.props;\n        const shortcuts = {};\n        Object.keys(allShortcuts).forEach((s) => {\n            if (isMac && allShortcuts[s].mac) {\n                shortcuts[s] = allShortcuts[s].mac;\n            } else if (!isMac && allShortcuts[s].default) {\n                shortcuts[s] = allShortcuts[s].default;\n            } else {\n                shortcuts[s] = allShortcuts[s];\n            }\n        });\n\n        return shortcuts;\n    }\n\n    render() {\n        const shortcuts = this.getShortcuts();\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal shortcuts-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHide}\n                role='dialog'\n                aria-labelledby='shortcutsModalLabel'\n            >\n                <div className='shortcuts-content'>\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='shortcutsModalLabel'\n                        >\n                            <strong>{renderShortcut(formatMessage(shortcuts.mainHeader))}</strong>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className='row'>\n                            <div className='col-sm-4'>\n                                <div className='section'>\n                                    <div>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.navHeader)}</strong></h4>\n                                        {renderShortcut(formatMessage(shortcuts.navPrev))}\n                                        {renderShortcut(formatMessage(shortcuts.navNext))}\n                                        {renderShortcut(formatMessage(shortcuts.navUnreadPrev))}\n                                        {renderShortcut(formatMessage(shortcuts.navUnreadNext))}\n                                        {renderShortcut(formatMessage(shortcuts.navSwitcher))}\n                                        {renderShortcut(formatMessage(shortcuts.navDMMenu))}\n                                        {renderShortcut(formatMessage(shortcuts.navSettings))}\n                                        {renderShortcut(formatMessage(shortcuts.navMentions))}\n                                        {renderShortcut(formatMessage(shortcuts.navFocusCenter))}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='col-sm-4'>\n                                <div className='section'>\n                                    <div>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.msgHeader)}</strong></h4>\n                                        <span><strong>{formatMessage(shortcuts.msgInputHeader)}</strong></span>\n                                        <div className='subsection'>\n                                            {renderShortcut(formatMessage(shortcuts.msgEdit))}\n                                            {renderShortcut(formatMessage(shortcuts.msgReply))}\n                                            {renderShortcut(formatMessage(shortcuts.msgReprintPrev))}\n                                            {renderShortcut(formatMessage(shortcuts.msgReprintNext))}\n                                        </div>\n                                        <span><strong>{formatMessage(shortcuts.msgCompHeader)}</strong></span>\n                                        <div className='subsection'>\n                                            {renderShortcut(formatMessage(shortcuts.msgCompUsername))}\n                                            {renderShortcut(formatMessage(shortcuts.msgCompChannel))}\n                                            {renderShortcut(formatMessage(shortcuts.msgCompEmoji))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='col-sm-4'>\n                                <div className='section'>\n                                    <div>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.filesHeader)}</strong></h4>\n                                        {renderShortcut(formatMessage(shortcuts.filesUpload))}\n                                    </div>\n                                    <div className='section--lower'>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.browserHeader)}</strong></h4>\n                                        {renderShortcut(formatMessage(shortcuts.browserChannelPrev))}\n                                        {renderShortcut(formatMessage(shortcuts.browserChannelNext))}\n                                        {renderShortcut(formatMessage(shortcuts.browserFontIncrease))}\n                                        {renderShortcut(formatMessage(shortcuts.browserFontDecrease))}\n                                        <span><strong>{formatMessage(shortcuts.browserInputHeader)}</strong></span>\n                                        <div className='subsection'>\n                                            {renderShortcut(formatMessage(shortcuts.browserHighlightPrev))}\n                                            {renderShortcut(formatMessage(shortcuts.browserHighlightNext))}\n                                            {renderShortcut(formatMessage(shortcuts.browserNewline))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='info__label'>{formatMessage(shortcuts.info)}</div>\n                    </Modal.Body>\n                </div>\n            </Modal>\n        );\n    }\n}\n\nfunction renderShortcut(text) {\n    if (!text) {\n        return null;\n    }\n\n    const shortcut = text.split('\\t');\n    const description = <span>{shortcut[0]}</span>;\n\n    let keys = null;\n    if (shortcut.length > 1) {\n        keys = shortcut[1].split('|').map((key) => (\n            <span\n                className='shortcut-key'\n                key={key}\n            >\n                {key}\n            </span>\n        ));\n    }\n\n    return (\n        <div className='shortcut-line'>\n            {description}\n            {keys}\n        </div>\n    );\n}\n\nexport default injectIntl(ShortcutsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport fileOverlayImage from 'images/filesOverlay.png';\nimport overlayLogoImage from 'images/logoWhite.png';\n\ntype Props = {\n    overlayType: string;\n}\n\nconst FileUploadOverlay: React.FC<Props> = (props: Props) => {\n    let overlayClass = 'file-overlay hidden';\n    if (props.overlayType === 'right') {\n        overlayClass += ' right-file-overlay';\n    } else if (props.overlayType === 'center') {\n        overlayClass += ' center-file-overlay';\n    }\n\n    return (\n        <div className={overlayClass}>\n            <div className='overlay__indent'>\n                <div className='overlay__circle'>\n                    <img\n                        className='overlay__files'\n                        src={fileOverlayImage}\n                        alt='Files'\n                    />\n                    <span>\n                        <FormattedMessage\n                            id='generic_icons.upload'\n                            defaultMessage='Upload Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-upload'\n                                    title={title as string}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='upload_overlay.info'\n                            defaultMessage='Drop a file to upload it.'\n                        />\n                    </span>\n                    <img\n                        className='overlay__logo'\n                        src={overlayLogoImage}\n                        width='100'\n                        alt='Logo'\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FileUploadOverlay;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport default class DelayedAction {\n    private action: Function;\n    private timer: number;\n\n    public constructor(action: Function) {\n        this.action = action;\n\n        this.timer = -1;\n\n        // bind fire since it doesn't get passed the correct this value with setTimeout\n        this.fire = this.fire.bind(this);\n    }\n\n    public fire() {\n        this.action();\n\n        this.timer = -1;\n    }\n\n    public fireAfter(timeout: number) {\n        if (this.timer >= 0) {\n            window.clearTimeout(this.timer);\n        }\n\n        this.timer = window.setTimeout(this.fire, timeout);\n    }\n\n    public cancel() {\n        window.clearTimeout(this.timer);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function connectionErrorCount(state) {\n    return state.views.system.websocketConnectionErrorCount;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Client4} from 'mattermost-redux/client';\nimport {unfavoriteChannel} from 'mattermost-redux/actions/channels';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentChannel, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentRelativeTeamUrl, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {IntegrationTypes} from 'mattermost-redux/action_types';\nimport {isFavoriteChannel} from 'mattermost-redux/utils/channel_utils';\n\nimport {openModal} from 'actions/views/modals';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport * as PostActions from 'actions/post_actions.jsx';\n\nimport {isUrlSafe, getSiteURL} from 'utils/url';\nimport {localizeMessage, getUserIdFromChannelName} from 'utils/utils.jsx';\nimport * as UserAgent from 'utils/user_agent';\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {browserHistory} from 'utils/browser_history';\n\nimport UserSettingsModal from 'components/user_settings/modal';\n\nexport function executeCommand(message, args) {\n    return async (dispatch, getState) => {\n        const state = getState();\n\n        let msg = message;\n\n        let cmdLength = msg.indexOf(' ');\n        if (cmdLength < 0) {\n            cmdLength = msg.length;\n        }\n        const cmd = msg.substring(0, cmdLength).toLowerCase();\n        msg = cmd + ' ' + msg.substring(cmdLength, msg.length).trim();\n\n        switch (cmd) {\n        case '/search':\n            dispatch(PostActions.searchForTerm(msg.substring(cmdLength + 1, msg.length)));\n            return {data: true};\n        case '/shortcuts':\n            if (UserAgent.isMobile()) {\n                const error = {message: localizeMessage('create_post.shortcutsNotSupported', 'Keyboard shortcuts are not supported on your device')};\n                return {error};\n            }\n\n            GlobalActions.toggleShortcutsModal();\n            return {data: true};\n        case '/leave': {\n        // /leave command not supported in reply threads.\n            if (args.channel_id && (args.root_id || args.parent_id)) {\n                GlobalActions.sendEphemeralPost('/leave is not supported in reply threads. Use it in the center channel instead.', args.channel_id, args.parent_id);\n                return {data: true};\n            }\n            const channel = getCurrentChannel(state);\n            if (channel.type === Constants.PRIVATE_CHANNEL) {\n                GlobalActions.showLeavePrivateChannelModal(channel);\n                return {data: true};\n            }\n            if (\n                channel.type === Constants.DM_CHANNEL ||\n                channel.type === Constants.GM_CHANNEL\n            ) {\n                let name;\n                let category;\n                if (channel.type === Constants.DM_CHANNEL) {\n                    name = getUserIdFromChannelName(channel);\n                    category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n                } else {\n                    name = channel.id;\n                    category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n                }\n                const currentUserId = getCurrentUserId(state);\n                const currentTeamId = getCurrentTeamId(state);\n                const redirectChannel = getRedirectChannelNameForTeam(state, currentTeamId);\n                const teamUrl = getCurrentRelativeTeamUrl(state);\n                browserHistory.push(`${teamUrl}/channels/${redirectChannel}`);\n\n                dispatch(savePreferences(currentUserId, [{category, name, user_id: currentUserId, value: 'false'}]));\n                if (isFavoriteChannel(channel)) {\n                    dispatch(unfavoriteChannel(channel.id));\n                }\n\n                return {data: true};\n            }\n            break;\n        }\n        case '/settings':\n            dispatch(openModal({modalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal}));\n            return {data: true};\n        case '/collapse':\n        case '/expand':\n            dispatch(PostActions.resetEmbedVisibility());\n        }\n\n        let data;\n        try {\n            data = await Client4.executeCommand(msg, args);\n        } catch (err) {\n            return {error: err};\n        }\n\n        const hasGotoLocation = data.goto_location && isUrlSafe(data.goto_location);\n\n        if (msg.trim() === '/logout') {\n            GlobalActions.emitUserLoggedOutEvent(hasGotoLocation ? data.goto_location : '/');\n            return {data: true};\n        }\n\n        if (data.trigger_id) {\n            dispatch({type: IntegrationTypes.RECEIVED_DIALOG_TRIGGER_ID, data: data.trigger_id});\n        }\n\n        if (hasGotoLocation) {\n            if (data.goto_location.startsWith('/')) {\n                browserHistory.push(data.goto_location);\n            } else if (data.goto_location.startsWith(getSiteURL())) {\n                browserHistory.push(data.goto_location.substr(getSiteURL().length));\n            } else {\n                window.open(data.goto_location);\n            }\n        }\n\n        return {data: true};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function runMessageWillBePostedHooks(originalPost) {\n    return async (dispatch, getState) => {\n        const hooks = getState().plugins.components.MessageWillBePosted;\n        if (!hooks || hooks.length === 0) {\n            return {data: originalPost};\n        }\n\n        let post = originalPost;\n\n        for (const hook of hooks) {\n            const result = await hook.hook(post); // eslint-disable-line no-await-in-loop\n\n            if (result) {\n                if (result.error) {\n                    return {\n                        error: result.error,\n                    };\n                }\n\n                post = result.post;\n            }\n        }\n\n        return {data: post};\n    };\n}\n\nexport function runSlashCommandWillBePostedHooks(originalMessage, originalArgs) {\n    return async (dispatch, getState) => {\n        const hooks = getState().plugins.components.SlashCommandWillBePosted;\n        if (!hooks || hooks.length === 0) {\n            return {data: {message: originalMessage, args: originalArgs}};\n        }\n\n        let message = originalMessage;\n        let args = originalArgs;\n\n        for (const hook of hooks) {\n            const result = await hook.hook(message, args); // eslint-disable-line no-await-in-loop\n\n            if (result) {\n                if (result.error) {\n                    return {\n                        error: result.error,\n                    };\n                }\n\n                message = result.message;\n                args = result.args;\n            }\n        }\n\n        return {data: {message, args}};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    makeGetMessageInHistoryItem,\n    makeGetCommentCountForPost,\n    getPost,\n    getPostIdsInChannel,\n} from 'mattermost-redux/selectors/entities/posts';\nimport {getCustomEmojisByName} from 'mattermost-redux/selectors/entities/emojis';\nimport {\n    removeReaction,\n    addMessageIntoHistory,\n    moveHistoryIndexBack,\n    moveHistoryIndexForward,\n} from 'mattermost-redux/actions/posts';\nimport {Posts} from 'mattermost-redux/constants';\nimport {isPostPendingOrFailed} from 'mattermost-redux/utils/post_utils';\n\nimport * as PostActions from 'actions/post_actions.jsx';\nimport {executeCommand} from 'actions/command';\nimport {runMessageWillBePostedHooks, runSlashCommandWillBePostedHooks} from 'actions/hooks';\nimport {setGlobalItem, actionOnGlobalItemsWithPrefix} from 'actions/storage';\nimport EmojiMap from 'utils/emoji_map';\nimport {getPostDraft} from 'selectors/rhs';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants, StoragePrefixes} from 'utils/constants';\n\nexport function clearCommentDraftUploads() {\n    return actionOnGlobalItemsWithPrefix(StoragePrefixes.COMMENT_DRAFT, (key, value) => {\n        if (value) {\n            return {...value, uploadsInProgress: []};\n        }\n        return value;\n    });\n}\n\nexport function updateCommentDraft(rootId, draft) {\n    return setGlobalItem(`${StoragePrefixes.COMMENT_DRAFT}${rootId}`, draft);\n}\n\nexport function makeOnMoveHistoryIndex(rootId, direction) {\n    const getMessageInHistory = makeGetMessageInHistoryItem(Posts.MESSAGE_TYPES.COMMENT);\n\n    return () => (dispatch, getState) => {\n        const draft = getPostDraft(getState(), StoragePrefixes.COMMENT_DRAFT, rootId);\n        if (draft.message !== '' && draft.message !== getMessageInHistory(getState())) {\n            return;\n        }\n\n        if (direction === -1) {\n            dispatch(moveHistoryIndexBack(Posts.MESSAGE_TYPES.COMMENT));\n        } else if (direction === 1) {\n            dispatch(moveHistoryIndexForward(Posts.MESSAGE_TYPES.COMMENT));\n        }\n\n        const nextMessageInHistory = getMessageInHistory(getState());\n\n        dispatch(updateCommentDraft(rootId, {...draft, message: nextMessageInHistory}));\n    };\n}\n\nexport function submitPost(channelId, rootId, draft) {\n    return async (dispatch, getState) => {\n        const state = getState();\n\n        const userId = getCurrentUserId(state);\n\n        const time = Utils.getTimestamp();\n\n        let post = {\n            file_ids: [],\n            message: draft.message,\n            channel_id: channelId,\n            root_id: rootId,\n            parent_id: rootId,\n            pending_post_id: `${userId}:${time}`,\n            user_id: userId,\n            create_at: time,\n            metadata: {},\n            props: {},\n        };\n\n        const hookResult = await dispatch(runMessageWillBePostedHooks(post));\n        if (hookResult.error) {\n            return {error: hookResult.error};\n        }\n\n        post = hookResult.data;\n\n        return dispatch(PostActions.createPost(post, draft.fileInfos));\n    };\n}\n\nexport function submitReaction(postId, action, emojiName) {\n    return (dispatch) => {\n        if (action === '+') {\n            dispatch(PostActions.addReaction(postId, emojiName));\n        } else if (action === '-') {\n            dispatch(removeReaction(postId, emojiName));\n        }\n    };\n}\n\nexport function submitCommand(channelId, rootId, draft) {\n    return async (dispatch, getState) => {\n        const state = getState();\n\n        const teamId = getCurrentTeamId(state);\n\n        let args = {\n            channel_id: channelId,\n            team_id: teamId,\n            root_id: rootId,\n            parent_id: rootId,\n        };\n\n        let {message} = draft;\n\n        const hookResult = await dispatch(runSlashCommandWillBePostedHooks(message, args));\n        if (hookResult.error) {\n            return {error: hookResult.error};\n        } else if (!hookResult.data.message && !hookResult.data.args) {\n            // do nothing with an empty return from a hook\n            return {};\n        }\n\n        message = hookResult.data.message;\n        args = hookResult.data.args;\n\n        const {error} = await dispatch(executeCommand(message, args));\n\n        if (error) {\n            if (error.sendMessage) {\n                return dispatch(submitPost(channelId, rootId, draft));\n            }\n            throw (error);\n        }\n\n        return {};\n    };\n}\n\nexport function makeOnSubmit(channelId, rootId, latestPostId) {\n    return (options = {}) => async (dispatch, getState) => {\n        const draft = getPostDraft(getState(), StoragePrefixes.COMMENT_DRAFT, rootId);\n        const {message} = draft;\n\n        dispatch(addMessageIntoHistory(message));\n\n        dispatch(updateCommentDraft(rootId, null));\n\n        const isReaction = Utils.REACTION_PATTERN.exec(message);\n\n        const emojis = getCustomEmojisByName(getState());\n        const emojiMap = new EmojiMap(emojis);\n\n        if (isReaction && emojiMap.has(isReaction[2])) {\n            dispatch(submitReaction(latestPostId, isReaction[1], isReaction[2]));\n        } else if (message.indexOf('/') === 0 && !options.ignoreSlash) {\n            await dispatch(submitCommand(channelId, rootId, draft));\n        } else {\n            dispatch(submitPost(channelId, rootId, draft));\n        }\n    };\n}\n\nfunction makeGetCurrentUsersLatestPost(channelId, rootId) {\n    return createSelector(\n        getCurrentUserId,\n        (state) => getPostIdsInChannel(state, channelId),\n        (state) => (id) => getPost(state, id),\n        (userId, postIds, getPostById) => {\n            let lastPost = null;\n\n            if (!postIds) {\n                return lastPost;\n            }\n\n            for (const id of postIds) {\n                const post = getPostById(id) || {};\n\n                // don't edit webhook posts, deleted posts, or system messages\n                if (\n                    post.user_id !== userId ||\n                    (post.props && post.props.from_webhook) ||\n                    post.state === Constants.POST_DELETED ||\n                    (post.type && post.type.startsWith(Constants.SYSTEM_MESSAGE_PREFIX)) ||\n                    isPostPendingOrFailed(post)\n                ) {\n                    continue;\n                }\n\n                if (rootId) {\n                    if (post.root_id === rootId || post.id === rootId) {\n                        lastPost = post;\n                        break;\n                    }\n                } else {\n                    lastPost = post;\n                    break;\n                }\n            }\n\n            return lastPost;\n        },\n    );\n}\n\nexport function makeOnEditLatestPost(channelId, rootId) {\n    const getCurrentUsersLatestPost = makeGetCurrentUsersLatestPost(channelId, rootId);\n    const getCommentCount = makeGetCommentCountForPost();\n\n    return () => (dispatch, getState) => {\n        const state = getState();\n\n        const lastPost = getCurrentUsersLatestPost(state);\n\n        if (!lastPost) {\n            return {data: false};\n        }\n\n        return dispatch(PostActions.setEditingPost(\n            lastPost.id,\n            getCommentCount(state, {post: lastPost}),\n            'reply_textbox',\n            Utils.localizeMessage('create_comment.commentTitle', 'Comment'),\n            true,\n        ));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function parseTable(html: string): HTMLTableElement | null {\n    const el = document.createElement('div');\n    el.innerHTML = html;\n    return el.querySelector('table');\n}\n\nexport function getTable(clipboardData: DataTransfer): HTMLTableElement | boolean {\n    if (Array.from(clipboardData.types).indexOf('text/html') === -1) {\n        return false;\n    }\n\n    const html = clipboardData.getData('text/html');\n\n    if (!(/<table/i).test(html)) {\n        return false;\n    }\n\n    const table = parseTable(html);\n    if (!table) {\n        return false;\n    }\n\n    return table;\n}\n\nexport function getPlainText(clipboardData: DataTransfer): string | boolean {\n    if (Array.from(clipboardData.types).indexOf('text/plain') === -1) {\n        return false;\n    }\n\n    const plainText = clipboardData.getData('text/plain');\n\n    return plainText;\n}\n\nexport function isGitHubCodeBlock(tableClassName: string): boolean {\n    const result = (/\\b(js|blob|diff)-./).test(tableClassName);\n    return result;\n}\n\nfunction columnText(column: Element): string {\n    const noBreakSpace = '\\u00A0';\n    const text = column.textContent == null ?\n        noBreakSpace : column.textContent.trim().replace(/\\|/g, '\\\\|').replace(/\\n/g, ' ');\n    return text;\n}\n\nfunction tableHeaders(row: HTMLTableRowElement): string[] {\n    return Array.from(row.querySelectorAll('td, th')).map(columnText);\n}\n\nexport function formatMarkdownTableMessage(table: HTMLTableElement, message?: string): string {\n    const rows = Array.from(table.querySelectorAll('tr'));\n\n    const headerRow = rows.shift();\n    const headers = headerRow ? tableHeaders(headerRow) : [];\n    const spacers = headers.map(() => '---');\n    const header = `|${headers.join(' | ')}|\\n|${spacers.join(' | ')}|\\n`;\n\n    const body = rows.map((row) => {\n        return `|${Array.from(row.querySelectorAll('td')).map(columnText).join(' | ')}|`;\n    }).join('\\n');\n\n    const formattedTable = `${header}${body}\\n`;\n\n    return message ? `${message}\\n\\n${formattedTable}` : formattedTable;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class AttachmentIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.attach'\n                    defaultMessage='Attachment Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='far fa-paperclip'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport AttachmentIcon from 'components/widgets/icons/attachment_icon';\nimport {trimFilename} from 'utils/file_utils';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class FilenameOverlay extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * File detailed information\n         */\n        fileInfo: PropTypes.object.isRequired,\n\n        /*\n         * Handler for when the thumbnail is clicked passed the index above\n         */\n        handleImageClick: PropTypes.func,\n\n        /*\n         * Display in compact format\n         */\n        compactDisplay: PropTypes.bool,\n\n        /*\n         * If it should display link to download on file name\n         */\n        canDownload: PropTypes.bool,\n\n        /**\n         * Optional children like download icon\n         */\n        children: PropTypes.element,\n\n        /**\n         * Optional class like for icon\n         */\n        iconClass: PropTypes.string,\n    };\n\n    downloadFile(filename, url) {\n        window.postMessage(\n            {\n                type: 'download-file',\n                message: {\n                    filename,\n                    url\n                }\n            },\n            window.location.origin\n        );\n    }\n\n    render() {\n        const {\n            canDownload,\n            children,\n            compactDisplay,\n            fileInfo,\n            handleImageClick,\n            iconClass,\n        } = this.props;\n\n        const fileName = fileInfo.name;\n        const trimmedFilename = trimFilename(fileName);\n\n        let filenameOverlay;\n        if (compactDisplay) {\n            filenameOverlay = (\n                <OverlayTrigger\n                    delayShow={1000}\n                    placement='top'\n                    overlay={<Tooltip id='file-name__tooltip'>{fileName}</Tooltip>}\n                >\n                    <a\n                        id='file-attachment-link'\n                        href='#'\n                        onClick={handleImageClick}\n                        className='post-image__name'\n                        rel='noopener noreferrer'\n                    >\n                        <AttachmentIcon className='icon'/>\n                        {trimmedFilename}\n                    </a>\n                </OverlayTrigger>\n            );\n        } else if (canDownload) {\n            filenameOverlay = (\n                <div className={iconClass || 'post-image__name'}>\n                    <a\n                        onClick={() => this.downloadFile(fileName, getFileDownloadUrl(fileInfo.id))}\n                        href={'#'}\n                        aria-label={localizeMessage('view_image_popover.download', 'Download').toLowerCase()}\n                        download={fileName}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <OverlayTrigger\n                            delayShow={1000}\n                            placement='top'\n                            overlay={\n                                <Tooltip id='file-name__tooltip'>\n                                    {localizeMessage('view_image_popover.download', 'Download').toLowerCase()}\n                                </Tooltip>\n                            }\n                        >\n                            {children || trimmedFilename}\n                        </OverlayTrigger>\n                    </a>\n                </div>\n            );\n        } else {\n            filenameOverlay = (\n                <span className='post-image__name'>\n                    {trimmedFilename}\n                </span>\n            );\n        }\n\n        return (filenameOverlay);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class RemoveIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.remove'\n                defaultMessage='Remove Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-remove'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {ProgressBar} from 'react-bootstrap';\n\nimport FilenameOverlay from 'components/file_attachment/filename_overlay.jsx';\nimport RemoveIcon from 'components/widgets/icons/fa_remove_icon';\nimport {getFileTypeFromMime} from 'utils/file_utils';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class FileProgressPreview extends React.PureComponent {\n    static propTypes = {\n        handleRemove: PropTypes.func.isRequired,\n        clientId: PropTypes.string.isRequired,\n        fileInfo: PropTypes.object,\n    };\n\n    handleRemove = () => {\n        this.props.handleRemove(this.props.clientId);\n    }\n\n    render() {\n        let percent = 0;\n        let fileNameComponent;\n        let previewImage;\n        let progressBar;\n        const {fileInfo, clientId} = this.props;\n\n        if (fileInfo) {\n            percent = fileInfo.percent;\n            const percentTxt = percent && ` (${percent.toFixed(0)}%)`;\n            const fileType = getFileTypeFromMime(fileInfo.type);\n            previewImage = <div className={'file-icon ' + Utils.getIconClassName(fileType)}/>;\n\n            fileNameComponent = (\n                <React.Fragment>\n                    <FilenameOverlay\n                        fileInfo={fileInfo}\n                        index={clientId}\n                        handleImageClick={null}\n                        compactDisplay={false}\n                        canDownload={false}\n                    />\n                    <span className='post-image__uploadingTxt'>\n                        {percent === 100 ? (\n                            <FormattedMessage\n                                id='create_post.fileProcessing'\n                                defaultMessage='Processing...'\n                            />\n                        ) : (\n                            <React.Fragment>\n                                <FormattedMessage\n                                    id='admin.plugin.uploading'\n                                    defaultMessage='Uploading...'\n                                />\n                                <span>{percentTxt}</span>\n                            </React.Fragment>\n                        )}\n                    </span>\n                </React.Fragment>\n            );\n\n            if (percent) {\n                progressBar = (\n                    <ProgressBar\n                        className='post-image__progressBar'\n                        now={percent}\n                        active={percent === 100}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div\n                ref={clientId}\n                key={clientId}\n                className='file-preview post-image__column'\n                data-client-id={clientId}\n            >\n                <div className='post-image__thumbnail'>\n                    {previewImage}\n                </div>\n                <div className='post-image__details'>\n                    <div className='post-image__detail_wrapper'>\n                        <div className='post-image__detail'>\n                            {fileNameComponent}\n                        </div>\n                    </div>\n                    <div>\n                        <a\n                            className='file-preview__remove'\n                            onClick={this.handleRemove}\n                        >\n                            <RemoveIcon/>\n                        </a>\n                    </div>\n                    {progressBar}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getFileThumbnailUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport FilenameOverlay from 'components/file_attachment/filename_overlay.jsx';\nimport RemoveIcon from 'components/widgets/icons/fa_remove_icon';\nimport Constants, {FileTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FileProgressPreview from './file_progress_preview.jsx';\n\nexport default class FilePreview extends React.PureComponent {\n    static propTypes = {\n        enableSVGs: PropTypes.bool.isRequired,\n        onRemove: PropTypes.func.isRequired,\n        fileInfos: PropTypes.arrayOf(PropTypes.object).isRequired,\n        uploadsInProgress: PropTypes.array,\n        uploadsProgressPercent: PropTypes.object,\n    };\n\n    static defaultProps = {\n        fileInfos: [],\n        uploadsInProgress: [],\n        uploadsProgressPercent: {},\n    };\n\n    handleRemove = (id) => {\n        this.props.onRemove(id);\n    }\n\n    render() {\n        const previews = [];\n\n        this.props.fileInfos.forEach((info, idx) => {\n            const type = Utils.getFileType(info.extension);\n\n            let className = 'file-preview post-image__column';\n            let previewImage;\n            if (type === FileTypes.SVG && this.props.enableSVGs) {\n                previewImage = (\n                    <img\n                        alt={'file preview'}\n                        className='post-image normal'\n                        src={getFileUrl(info.id)}\n                    />\n                );\n            } else if (type === FileTypes.IMAGE) {\n                let imageClassName = 'post-image';\n\n                if (info.width < Constants.THUMBNAIL_WIDTH && info.height < Constants.THUMBNAIL_HEIGHT) {\n                    imageClassName += ' small';\n                } else {\n                    imageClassName += ' normal';\n                }\n\n                let thumbnailUrl = getFileThumbnailUrl(info.id);\n                if (Utils.isGIFImage(info.extension) && !info.has_preview_image) {\n                    thumbnailUrl = getFileUrl(info.id);\n                }\n\n                previewImage = (\n                    <div\n                        className={imageClassName}\n                        style={{\n                            backgroundImage: `url(${thumbnailUrl})`,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                );\n            } else {\n                className += ' custom-file';\n                previewImage = <div className={'file-icon ' + Utils.getIconClassName(type)}/>;\n            }\n\n            previews.push(\n                <div\n                    key={info.id}\n                    className={className}\n                >\n                    <div className='post-image__thumbnail'>\n                        {previewImage}\n                    </div>\n                    <div className='post-image__details'>\n                        <div className='post-image__detail_wrapper'>\n                            <div className='post-image__detail'>\n                                <FilenameOverlay\n                                    fileInfo={info}\n                                    index={idx}\n                                    handleImageClick={null}\n                                    compactDisplay={false}\n                                    canDownload={false}\n                                />\n                                <span className='post-image__type'>{info.extension.toUpperCase()}</span>\n                                <span className='post-image__size'>{Utils.fileSizeToString(info.size)}</span>\n                            </div>\n                        </div>\n                        <div>\n                            <a\n                                className='file-preview__remove'\n                                onClick={this.handleRemove.bind(this, info.id)}\n                            >\n                                <RemoveIcon/>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n\n        this.props.uploadsInProgress.forEach((clientId) => {\n            previews.push(\n                <FileProgressPreview\n                    key={clientId}\n                    clientId={clientId}\n                    fileInfo={this.props.uploadsProgressPercent[clientId]}\n                    handleRemove={this.handleRemove}\n                />\n            );\n        });\n\n        return (\n            <div\n                className='file-preview__container'\n                ref='container'\n            >\n                {previews}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport FilePreview from './file_preview';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        enableSVGs: config.EnableSVGs === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(FilePreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\nimport request from 'superagent';\nimport {FileTypes} from 'mattermost-redux/action_types';\nimport {getLogErrorAction} from 'mattermost-redux/actions/errors';\nimport {forceLogoutIfNecessary} from 'mattermost-redux/actions/helpers';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport function uploadFile(file, name, channelId, rootId, clientId) {\n    return (dispatch) => {\n        dispatch({type: FileTypes.UPLOAD_FILES_REQUEST});\n\n        return request.\n            post(Client4.getFilesRoute()).\n            set(Client4.getOptions({method: 'post'}).headers).\n            attach('files', file, name).\n            field('channel_id', channelId).\n            field('client_ids', clientId).\n            accept('application/json');\n    };\n}\n\nexport function handleFileUploadEnd(file, name, channelId, rootId, clientId, {err, res}) {\n    return (dispatch, getState) => {\n        if (err) {\n            let e;\n            if (res && res.body && res.body.id) {\n                e = res.body;\n            } else if (err.status === 0 || !err.status) {\n                e = {message: Utils.localizeMessage('file_upload.generic_error', 'There was a problem uploading your files.')};\n            } else {\n                e = {message: Utils.localizeMessage('channel_loader.unknown_error', 'We received an unexpected status code from the server.') + ' (' + err.status + ')'};\n            }\n\n            forceLogoutIfNecessary(err, dispatch, getState);\n\n            const failure = {\n                type: FileTypes.UPLOAD_FILES_FAILURE,\n                clientIds: [clientId],\n                channelId,\n                rootId,\n                error: err,\n            };\n\n            dispatch(batchActions([failure, getLogErrorAction(err)]));\n            return {error: e};\n        }\n        const data = res.body.file_infos.map((fileInfo, index) => {\n            return {\n                ...fileInfo,\n                clientId: res.body.client_ids[index],\n            };\n        });\n\n        dispatch(batchActions([\n            {\n                type: FileTypes.RECEIVED_UPLOAD_FILES,\n                data,\n                channelId,\n                rootId,\n            },\n            {\n                type: FileTypes.UPLOAD_FILES_SUCCESS,\n            },\n        ]));\n\n        return {data: res.body};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\n\nimport dragster from 'utils/dragster';\nimport Constants from 'utils/constants';\nimport DelayedAction from 'utils/delayed_action';\nimport {t} from 'utils/i18n';\nimport {\n    isIosChrome,\n    isMobileApp,\n} from 'utils/user_agent';\nimport {getTable} from 'utils/paste';\nimport {intlShape} from 'utils/react_intl';\nimport {\n    clearFileInput,\n    cmdOrCtrlPressed,\n    isKeyPressed,\n    generateId,\n    isFileTransfer,\n    isUriDrop,\n    localizeMessage,\n} from 'utils/utils.jsx';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nimport AttachmentIcon from 'components/widgets/icons/attachment_icon';\n\nconst holders = defineMessages({\n    limited: {\n        id: t('file_upload.limited'),\n        defaultMessage: 'Uploads limited to {count, number} files maximum. Please use additional posts for more files.',\n    },\n    filesAbove: {\n        id: t('file_upload.filesAbove'),\n        defaultMessage: 'Files above {max}MB could not be uploaded: {filenames}',\n    },\n    fileAbove: {\n        id: t('file_upload.fileAbove'),\n        defaultMessage: 'File above {max}MB could not be uploaded: {filename}',\n    },\n    zeroBytesFiles: {\n        id: t('file_upload.zeroBytesFiles'),\n        defaultMessage: 'You are uploading empty files: {filenames}',\n    },\n    zeroBytesFile: {\n        id: t('file_upload.zeroBytesFile'),\n        defaultMessage: 'You are uploading an empty file: {filename}',\n    },\n    pasted: {\n        id: t('file_upload.pasted'),\n        defaultMessage: 'Image Pasted at ',\n    },\n    uploadFile: {\n        id: t('file_upload.upload_files'),\n        defaultMessage: 'Upload files',\n    },\n});\n\nconst OVERLAY_TIMEOUT = 500;\n\nconst customStyles = {\n    left: 'inherit',\n    right: 0,\n    bottom: '100%',\n    top: 'auto',\n};\n\nclass FileUpload extends PureComponent {\n    static propTypes = {\n\n        /**\n         * Current channel's ID\n         */\n        currentChannelId: PropTypes.string.isRequired,\n\n        /**\n         * Current root post's ID\n         */\n        rootId: PropTypes.string,\n\n        /**\n         * Number of files to attach\n         */\n        fileCount: PropTypes.number.isRequired,\n\n        /**\n         * Function to get file upload targeted input\n         */\n        getTarget: PropTypes.func.isRequired,\n\n        intl: intlShape.isRequired,\n\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function to be called when file upload input is clicked\n         */\n        onClick: PropTypes.func,\n\n        /**\n         * Function to be called when file upload is complete\n         */\n        onFileUpload: PropTypes.func,\n\n        /**\n         * Function to be called when file upload input's change event is fired\n         */\n        onFileUploadChange: PropTypes.func,\n\n        /**\n         * Function to be called when upload fails\n         */\n        onUploadError: PropTypes.func,\n\n        /**\n         * Function to be called when file upload starts\n         */\n        onUploadStart: PropTypes.func,\n\n        /**\n         * Type of the object which the uploaded file is attached to\n         */\n        postType: PropTypes.string,\n\n        /**\n         * The maximum uploaded file size.\n         */\n        maxFileSize: PropTypes.number,\n\n        /**\n         * Whether or not file upload is allowed.\n         */\n        canUploadFiles: PropTypes.bool.isRequired,\n\n        /**\n         * Plugin file upload methods to be added\n         */\n        pluginFileUploadMethods: PropTypes.arrayOf(PropTypes.object),\n        pluginFilesWillUploadHooks: PropTypes.arrayOf(PropTypes.object),\n\n        /**\n         * Function called when superAgent fires progress event.\n         */\n        onUploadProgress: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to be called to upload file\n             */\n            uploadFile: PropTypes.func.isRequired,\n\n            /**\n             * Function to be called when file is uploaded or failed\n             */\n            handleFileUploadEnd: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        pluginFileUploadMethods: [],\n        pluginFilesWillUploadHooks: [],\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            requests: {},\n            menuOpen: false,\n        };\n        this.fileInput = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.props.postType === 'post') {\n            this.registerDragEvents('.row.main', '.center-file-overlay');\n        } else if (this.props.postType === 'comment') {\n            this.registerDragEvents('.post-right__container', '.right-file-overlay');\n        }\n\n        document.addEventListener('paste', this.pasteUpload);\n        document.addEventListener('keydown', this.keyUpload);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('paste', this.pasteUpload);\n        document.removeEventListener('keydown', this.keyUpload);\n\n        this.unbindDragsterEvents();\n    }\n\n    fileUploadSuccess = (data, channelId, currentRootId) => {\n        if (data) {\n            this.props.onFileUpload(data.file_infos, data.client_ids, channelId, currentRootId);\n\n            const requests = Object.assign({}, this.state.requests);\n            for (var j = 0; j < data.client_ids.length; j++) {\n                Reflect.deleteProperty(requests, data.client_ids[j]);\n            }\n            this.setState({requests});\n        }\n    }\n\n    fileUploadFail = (err, clientId, channelId, currentRootId) => {\n        this.props.onUploadError(err, clientId, channelId, currentRootId);\n    }\n\n    pluginUploadFiles = (files) => {\n        // clear any existing errors\n        this.props.onUploadError(null);\n        this.uploadFiles(files);\n    }\n\n    checkPluginHooksAndUploadFiles = (files) => {\n        // clear any existing errors\n        this.props.onUploadError(null);\n\n        let sortedFiles = Array.from(files).sort((a, b) => a.name.localeCompare(b.name, this.props.locale, {numeric: true}));\n\n        const willUploadHooks = this.props.pluginFilesWillUploadHooks;\n        for (const h of willUploadHooks) {\n            const result = h.hook(sortedFiles, this.pluginUploadFiles);\n\n            // Display an error message if there is one but don't reject the upload\n            if (result.message) {\n                this.props.onUploadError(result.message);\n            }\n\n            sortedFiles = result.files;\n        }\n\n        if (sortedFiles) {\n            this.uploadFiles(sortedFiles);\n        }\n    }\n\n    uploadFiles = (sortedFiles) => {\n        const {currentChannelId, rootId} = this.props;\n\n        const uploadsRemaining = Constants.MAX_UPLOAD_FILES - this.props.fileCount;\n        let numUploads = 0;\n\n        // keep track of how many files have been too large\n        const tooLargeFiles = [];\n        const zeroFiles = [];\n        const clientIds = [];\n\n        for (let i = 0; i < sortedFiles.length && numUploads < uploadsRemaining; i++) {\n            if (sortedFiles[i].size > this.props.maxFileSize) {\n                tooLargeFiles.push(sortedFiles[i]);\n                continue;\n            }\n            if (sortedFiles[i].size === 0) {\n                zeroFiles.push(sortedFiles[i]);\n            }\n\n            // generate a unique id that can be used by other components to refer back to this upload\n            const clientId = generateId();\n\n            const request = this.props.actions.uploadFile(\n                sortedFiles[i],\n                sortedFiles[i].name,\n                currentChannelId,\n                rootId,\n                clientId,\n            );\n\n            request.on('progress', (progressEvent) => {\n                this.props.onUploadProgress({\n                    clientId,\n                    name: sortedFiles[i].name,\n                    percent: progressEvent.percent,\n                    type: sortedFiles[i].type,\n                });\n            });\n\n            request.end((err, res) => {\n                const {error, data} = this.props.actions.handleFileUploadEnd(\n                    sortedFiles[i],\n                    sortedFiles[i].name,\n                    currentChannelId,\n                    rootId,\n                    clientId,\n                    {err, res},\n                );\n\n                if (error) {\n                    this.fileUploadFail(error, clientId, currentChannelId, rootId);\n                } else if (data) {\n                    this.fileUploadSuccess(data, currentChannelId, rootId);\n                }\n            });\n\n            this.setState({requests: {...this.state.requests, [clientId]: request}});\n            clientIds.push(clientId);\n\n            numUploads += 1;\n        }\n\n        this.props.onUploadStart(clientIds, currentChannelId);\n\n        const {formatMessage} = this.props.intl;\n        const errors = [];\n        if (sortedFiles.length > uploadsRemaining) {\n            errors.push(formatMessage(holders.limited, {count: Constants.MAX_UPLOAD_FILES}));\n        }\n\n        if (tooLargeFiles.length > 1) {\n            var tooLargeFilenames = tooLargeFiles.map((file) => file.name).join(', ');\n\n            errors.push(formatMessage(holders.filesAbove, {max: (this.props.maxFileSize / 1048576), filenames: tooLargeFilenames}));\n        } else if (tooLargeFiles.length > 0) {\n            errors.push(formatMessage(holders.fileAbove, {max: (this.props.maxFileSize / 1048576), filename: tooLargeFiles[0].name}));\n        }\n\n        if (zeroFiles.length > 1) {\n            var zeroFilenames = zeroFiles.map((file) => file.name).join(', ');\n\n            errors.push(formatMessage(holders.zeroBytesFiles, {filenames: zeroFilenames}));\n        } else if (zeroFiles.length > 0) {\n            errors.push(formatMessage(holders.zeroBytesFile, {filename: zeroFiles[0].name}));\n        }\n\n        if (errors.length > 0) {\n            this.props.onUploadError(errors.join(', '));\n        }\n    }\n\n    handleChange = (e) => {\n        if (e.target.files.length > 0) {\n            this.checkPluginHooksAndUploadFiles(e.target.files);\n\n            clearFileInput(e.target);\n        }\n\n        this.props.onFileUploadChange();\n    }\n\n    handleDrop = (e) => {\n        if (!this.props.canUploadFiles) {\n            this.props.onUploadError(localizeMessage('file_upload.disabled', 'File attachments are disabled.'));\n            return;\n        }\n\n        this.props.onUploadError(null);\n\n        const items = e.dataTransfer.items || [];\n        const droppedFiles = e.dataTransfer.files;\n        const files = [];\n        Array.from(droppedFiles).forEach((file, index) => {\n            const item = items[index];\n            if (item && item.webkitGetAsEntry && (item.webkitGetAsEntry() === null || item.webkitGetAsEntry().isDirectory)) {\n                return;\n            }\n            files.push(file);\n        });\n\n        const types = e.dataTransfer.types;\n        if (types) {\n            if (isUriDrop(e.dataTransfer)) {\n                return;\n            }\n\n            // For non-IE browsers\n            if (types.includes && !types.includes('Files')) {\n                return;\n            }\n\n            // For IE browsers\n            if (types.contains && !types.contains('Files')) {\n                return;\n            }\n        }\n\n        if (files.length === 0) {\n            this.props.onUploadError(localizeMessage('file_upload.drag_folder', 'Folders cannot be uploaded. Please drag all files separately.'));\n            return;\n        }\n\n        if (files.length) {\n            this.checkPluginHooksAndUploadFiles(files);\n        }\n\n        this.props.onFileUploadChange();\n    }\n\n    registerDragEvents = (containerSelector, overlaySelector) => {\n        const self = this;\n\n        const overlay = document.querySelector(overlaySelector);\n\n        const dragTimeout = new DelayedAction(() => {\n            overlay.classList.add('hidden');\n        });\n\n        let dragsterActions = {};\n        if (this.props.canUploadFiles) {\n            dragsterActions = {\n                enter(e) {\n                    var files = e.detail.dataTransfer;\n                    if (!isUriDrop(files) && isFileTransfer(files)) {\n                        overlay.classList.remove('hidden');\n                    }\n                },\n                leave(e) {\n                    var files = e.detail.dataTransfer;\n\n                    if (!isUriDrop(files) && isFileTransfer(files)) {\n                        overlay.classList.add('hidden');\n                    }\n\n                    dragTimeout.cancel();\n                },\n                over() {\n                    dragTimeout.fireAfter(OVERLAY_TIMEOUT);\n                },\n                drop(e) {\n                    overlay.classList.add('hidden');\n                    dragTimeout.cancel();\n\n                    self.handleDrop(e.detail);\n                },\n            };\n        } else {\n            dragsterActions = {\n                drop(e) {\n                    self.handleDrop(e.detail);\n                },\n            };\n        }\n\n        this.unbindDragsterEvents = dragster(containerSelector, dragsterActions);\n    }\n\n    containsEventTarget = (targetElement, eventTarget) => targetElement && targetElement.contains(eventTarget);\n\n    pasteUpload = (e) => {\n        const {formatMessage} = this.props.intl;\n\n        if (!e.clipboardData || !e.clipboardData.items || getTable(e.clipboardData)) {\n            return;\n        }\n\n        const target = this.props.getTarget();\n        const textarea = ReactDOM.findDOMNode(target);\n        if (!this.containsEventTarget(textarea, e.target)) {\n            return;\n        }\n\n        this.props.onUploadError(null);\n\n        const items = [];\n        for (let i = 0; i < e.clipboardData.items.length; i++) {\n            const item = e.clipboardData.items[i];\n\n            if (item.kind !== 'file') {\n                continue;\n            }\n\n            items.push(item);\n        }\n\n        if (items && items.length > 0) {\n            if (!this.props.canUploadFiles) {\n                this.props.onUploadError(localizeMessage('file_upload.disabled', 'File attachments are disabled.'));\n                return;\n            }\n\n            const files = [];\n\n            for (let i = 0; i < items.length; i++) {\n                const file = items[i].getAsFile();\n                if (!file) {\n                    continue;\n                }\n\n                var d = new Date();\n                let hour = d.getHours();\n                hour = hour < 10 ? `0${hour}` : `${hour}`;\n\n                let minute = d.getMinutes();\n                minute = minute < 10 ? `0${minute}` : `${minute}`;\n\n                var ext = '';\n                if (file.name) {\n                    if (file.name.includes('.')) {\n                        ext = file.name.substr(file.name.lastIndexOf('.'));\n                    }\n                } else if (items[i].type.includes('/')) {\n                    ext = '.' + items[i].type.split('/')[1].toLowerCase();\n                }\n\n                const name = formatMessage(holders.pasted) + d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + ' ' + hour + '-' + minute + ext;\n\n                const newFile = new Blob([file], {type: file.type});\n                newFile.name = name;\n                files.push(newFile);\n            }\n\n            if (files.length > 0) {\n                this.checkPluginHooksAndUploadFiles(files);\n                this.props.onFileUploadChange();\n            }\n        }\n    }\n\n    keyUpload = (e) => {\n        if (cmdOrCtrlPressed(e) && isKeyPressed(e, Constants.KeyCodes.U)) {\n            e.preventDefault();\n\n            if (!this.props.canUploadFiles) {\n                this.props.onUploadError(localizeMessage('file_upload.disabled', 'File attachments are disabled.'));\n                return;\n            }\n            const postTextbox = this.props.postType === 'post' && document.activeElement.id === 'post_textbox';\n            const commentTextbox = this.props.postType === 'comment' && document.activeElement.id === 'reply_textbox';\n            if (postTextbox || commentTextbox) {\n                this.fileInput.current.focus();\n                this.fileInput.current.click();\n            }\n        }\n    }\n\n    cancelUpload = (clientId) => {\n        const requests = Object.assign({}, this.state.requests);\n        const request = requests[clientId];\n\n        if (request) {\n            request.abort();\n\n            Reflect.deleteProperty(requests, clientId);\n            this.setState({requests});\n        }\n    }\n\n    handleMaxUploadReached = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const {onUploadError} = this.props;\n        const {formatMessage} = this.props.intl;\n\n        onUploadError(formatMessage(holders.limited, {count: Constants.MAX_UPLOAD_FILES}));\n    }\n\n    toggleMenu = (open) => {\n        this.setState({menuOpen: open});\n    }\n\n    handleLocalFileUploaded = (e) => {\n        const uploadsRemaining = Constants.MAX_UPLOAD_FILES - this.props.fileCount;\n        if (uploadsRemaining > 0) {\n            if (this.props.onClick) {\n                this.props.onClick();\n            }\n        } else {\n            this.handleMaxUploadReached(e);\n        }\n        this.setState({menuOpen: false});\n    }\n\n    simulateInputClick = () => {\n        this.fileInput.current.click();\n    }\n\n    render() {\n        const isMobile = isMobileApp();\n        const {formatMessage} = this.props.intl;\n        let multiple = true;\n        if (isMobile) {\n            // iOS WebViews don't upload videos properly in multiple mode\n            multiple = false;\n        }\n\n        let accept = '';\n        if (isIosChrome()) {\n            // iOS Chrome can't upload videos at all\n            accept = 'image/*';\n        }\n\n        const uploadsRemaining = Constants.MAX_UPLOAD_FILES - this.props.fileCount;\n\n        let bodyAction;\n        const ariaLabel = formatMessage({id: 'accessibility.button.attachment', defaultMessage: 'attachment'});\n\n        let onClick;\n        if (!isMobile) {\n            onClick = this.simulateInputClick;\n        }\n\n        let onTouchEnd;\n        if (isMobile) {\n            onTouchEnd = this.simulateInputClick;\n        }\n\n        if (this.props.pluginFileUploadMethods.length === 0) {\n            bodyAction = (\n                <div>\n                    <button\n                        type='button'\n                        id='fileUploadButton'\n                        aria-label={ariaLabel}\n                        className='style--none post-action icon icon--attachment'\n                        onClick={onClick}\n                        onTouchEnd={onTouchEnd}\n                    >\n                        <AttachmentIcon/>\n                    </button>\n                    <input\n                        id='fileUploadInput'\n                        tabIndex='-1'\n                        aria-label={formatMessage(holders.uploadFile)}\n                        ref={this.fileInput}\n                        type='file'\n                        onChange={this.handleChange}\n                        onClick={this.handleLocalFileUploaded}\n                        multiple={multiple}\n                        accept={accept}\n                    />\n                </div>\n            );\n        } else {\n            const pluginFileUploadMethods = this.props.pluginFileUploadMethods.map((item) => {\n                return (\n                    <li\n                        key={item.pluginId + '_fileuploadpluginmenuitem'}\n                        onClick={() => {\n                            if (item.action) {\n                                item.action(this.checkPluginHooksAndUploadFiles);\n                            }\n                            this.setState({menuOpen: false});\n                        }}\n                    >\n                        <a href='#'>\n                            <span className='margin-right'>\n                                {item.icon}\n                            </span>\n                            {item.text}\n                        </a>\n                    </li>\n                );\n            });\n            bodyAction = (\n                <div>\n                    <input\n                        tabIndex='-1'\n                        aria-label={formatMessage(holders.uploadFile)}\n                        ref={this.fileInput}\n                        type='file'\n                        className='file-attachment-menu-item-input'\n                        onChange={this.handleChange}\n                        onClick={this.handleLocalFileUploaded}\n                        multiple={multiple}\n                        accept={accept}\n                    />\n                    <MenuWrapper>\n                        <button\n                            type='button'\n                            aria-label={ariaLabel}\n                            className='style--none post-action'\n                        >\n                            <div\n                                id='fileUploadButton'\n                                className='icon icon--attachment'\n                            >\n                                <AttachmentIcon/>\n                            </div>\n                        </button>\n                        <Menu\n                            id='fileUploadOptions'\n                            openLeft={true}\n                            openUp={true}\n                            ariaLabel={formatMessage({id: 'file_upload.menuAriaLabel', defaultMessage: 'Upload type selector'})}\n                            customStyles={customStyles}\n                        >\n                            <li>\n                                <a\n                                    href='#'\n                                    onClick={onClick}\n                                    onTouchEnd={onTouchEnd}\n                                >\n                                    <span className='margin-right'>\n                                        <i className='fa fa-laptop'/>\n                                    </span>\n                                    <FormattedMessage\n                                        id='yourcomputer'\n                                        defaultMessage='Your computer'\n                                    />\n                                </a>\n                            </li>\n                            {pluginFileUploadMethods}\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            );\n        }\n\n        if (!this.props.canUploadFiles) {\n            bodyAction = null;\n        }\n\n        return (\n            <div className={uploadsRemaining <= 0 ? ' style--none btn-file__disabled' : 'style--none'}>\n                {bodyAction}\n            </div>\n        );\n    }\n}\n\nconst wrappedComponent = injectIntl(FileUpload, {forwardRef: true});\nwrappedComponent.displayName = 'injectIntl(FileUpload)';\nexport default wrappedComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\ntype Options = {\n    enter?: (event: CustomEvent) => void;\n    leave?: (event: CustomEvent) => void;\n    over?: (event: CustomEvent) => void;\n    drop?: (event: CustomEvent) => void;\n}\n\nexport default function dragster(query: string, options: Options) {\n    const noop = () => {}; // eslint-disable-line no-empty-function\n\n    const defaults = {\n        enter: noop,\n        leave: noop,\n        over: noop,\n        drop: noop,\n    };\n\n    const settings = Object.assign(defaults, options);\n    const node = document.querySelector(query);\n\n    if (!node) {\n        return noop;\n    }\n\n    let first = false;\n    let second = false;\n\n    const dragenter = (event: Event) => {\n        if (first) {\n            second = true;\n            return;\n        }\n\n        first = true;\n        const enterEvent = new CustomEvent('dragster:enter', {detail: event});\n        node.dispatchEvent(enterEvent);\n\n        event.preventDefault();\n    };\n\n    const dragleave = (event: Event) => {\n        if (second) {\n            second = false;\n        } else if (first) {\n            first = false;\n        }\n        if (!first && !second) {\n            const leaveEvent = new CustomEvent('dragster:leave', {detail: event});\n            node.dispatchEvent(leaveEvent);\n        }\n        event.preventDefault();\n    };\n\n    const dragover = (event: Event) => {\n        const overEvent = new CustomEvent('dragster:over', {detail: event});\n        node.dispatchEvent(overEvent);\n        event.preventDefault();\n    };\n\n    const drop = (event: Event) => {\n        if (second) {\n            second = false;\n        } else if (first) {\n            first = false;\n        }\n        if (!first && !second) {\n            const dropEvent = new CustomEvent('dragster:drop', {detail: event});\n            node.dispatchEvent(dropEvent);\n        }\n        event.preventDefault();\n    };\n\n    node.addEventListener('dragenter', dragenter);\n    node.addEventListener('dragleave', dragleave);\n    node.addEventListener('dragover', dragover);\n    node.addEventListener('drop', drop);\n\n    node.addEventListener('dragster:enter', settings.enter);\n    node.addEventListener('dragster:leave', settings.leave);\n    node.addEventListener('dragster:over', settings.over);\n    node.addEventListener('dragster:drop', settings.drop);\n\n    const unbindEvents = () => {\n        node.removeEventListener('dragenter', dragenter);\n        node.removeEventListener('dragleave', dragleave);\n        node.removeEventListener('dragover', dragover);\n        node.removeEventListener('drop', drop);\n\n        node.removeEventListener('dragster:enter', settings.enter);\n        node.removeEventListener('dragster:leave', settings.leave);\n        node.removeEventListener('dragster:over', settings.over);\n        node.removeEventListener('dragster:drop', settings.drop);\n    };\n\n    return unbindEvents;\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {uploadFile, handleFileUploadEnd} from 'actions/file_actions.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {canUploadFiles} from 'utils/file_utils';\n\nimport FileUpload from './file_upload.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n\n    return {\n        currentChannelId: getCurrentChannelId(state),\n        maxFileSize,\n        canUploadFiles: canUploadFiles(config),\n        locale: getCurrentLocale(state),\n        pluginFileUploadMethods: state.plugins.components.FileUploadMethod,\n        pluginFilesWillUploadHooks: state.plugins.components.FilesWillUploadHook,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            uploadFile,\n            handleFileUploadEnd,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {withRef: true})(FileUpload);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    typingUsers: string[];\n}\n\nexport default class MsgTyping extends React.Component<Props> {\n    private getTypingText = () => {\n        let users: string[] = [];\n        let numUsers = 0;\n        if (this.props.typingUsers) {\n            users = [...this.props.typingUsers];\n            numUsers = users.length;\n        }\n\n        if (numUsers === 0) {\n            return '';\n        }\n        if (numUsers === 1) {\n            return (\n                <FormattedMessage\n                    id='msg_typing.isTyping'\n                    defaultMessage='{user} is typing...'\n                    values={{\n                        user: users[0],\n                    }}\n                />\n            );\n        }\n        const last = users.pop();\n        return (\n            <FormattedMessage\n                id='msg_typing.areTyping'\n                defaultMessage='{users} and {last} are typing...'\n                values={{\n                    users: (users.join(', ')),\n                    last,\n                }}\n            />\n        );\n    }\n\n    public render() {\n        return (\n            <span className='msg-typing'>{this.getTypingText()}</span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {makeGetUsersTypingByChannelAndPost} from 'mattermost-redux/selectors/entities/typing';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport MsgTyping from './msg_typing';\n\ntype Props = {\n    channelId: string;\n    postId: string;\n};\n\nfunction makeMapStateToProps() {\n    const getUsersTypingByChannelAndPost = makeGetUsersTypingByChannelAndPost();\n\n    return function mapStateToProps(state: GlobalState, ownProps: Props) {\n        const typingUsers = getUsersTypingByChannelAndPost(state, {channelId: ownProps.channelId, postId: ownProps.postId});\n\n        return {\n            typingUsers,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(MsgTyping);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    show: boolean;\n    onHide: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport default class PostDeletedModal extends React.Component<Props> {\n    public shouldComponentUpdate(nextProps: Props): boolean {\n        return nextProps.show !== this.props.show;\n    }\n\n    public render(): JSX.Element {\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.props.onHide}\n                role='dialog'\n                aria-labelledby='postDeletedModalLabel'\n                data-testid='postDeletedModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='postDeletedModalLabel'\n                    >\n                        <FormattedMessage\n                            id='post_delete.notPosted'\n                            defaultMessage='Comment could not be posted'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        <FormattedMessage\n                            id='post_delete.someone'\n                            defaultMessage='Someone deleted the message on which you tried to post a comment.'\n                        />\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        autoFocus={true}\n                        onClick={this.props.onHide}\n                        data-testid='postDeletedModalOkButton'\n                    >\n                        <FormattedMessage\n                            id='post_delete.okay'\n                            defaultMessage='Okay'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactFragment} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isErrorInvalidSlashCommand} from 'utils/post_utils.jsx';\n\ninterface ErrorMessage {\n    message: string | ReactFragment;\n}\n\ninterface MessageSubmitErrorProps {\n    error: ErrorMessage;\n    handleSubmit: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\n    submittedMessage?: string;\n}\n\nclass MessageSubmitError extends React.PureComponent<MessageSubmitErrorProps, {}> {\n    public renderSlashCommandError = (): string | ReactFragment => {\n        if (!this.props.submittedMessage) {\n            return this.props.error.message;\n        }\n\n        const command = this.props.submittedMessage.split(' ')[0];\n        return (\n            <React.Fragment>\n                <FormattedMessage\n                    id='message_submit_error.invalidCommand'\n                    defaultMessage=\"Command with a trigger of ''{command}'' not found. \"\n                    values={{\n                        command,\n                    }}\n                />\n                <a\n                    href='#'\n                    onClick={this.props.handleSubmit}\n                >\n                    <FormattedMessage\n                        id='message_submit_error.sendAsMessageLink'\n                        defaultMessage='Click here to send as a message.'\n                    />\n                </a>\n            </React.Fragment>\n        );\n    }\n\n    public render(): JSX.Element | null {\n        const error = this.props.error;\n\n        if (!error) {\n            return null;\n        }\n\n        let errorContent = error.message;\n        if (isErrorInvalidSlashCommand(error)) {\n            errorContent = this.renderSlashCommandError();\n        }\n\n        return (\n            <div className='has-error'>\n                <label className='control-label'>\n                    {errorContent}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default MessageSubmitError;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\n\nimport {sortFileInfos} from 'mattermost-redux/utils/file_utils';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nimport Constants from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport {containsAtChannel, postMessageOnKeyPress, shouldFocusMainTextbox, isErrorInvalidSlashCommand, splitMessageBasedOnCaretPosition} from 'utils/post_utils.jsx';\nimport {getTable, getPlainText, formatMarkdownTableMessage, isGitHubCodeBlock} from 'utils/paste';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport FilePreview from 'components/file_preview';\nimport FileUpload from 'components/file_upload';\nimport MsgTyping from 'components/msg_typing';\nimport PostDeletedModal from 'components/post_deleted_modal';\nimport EmojiIcon from 'components/widgets/icons/emoji_icon';\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport MessageSubmitError from 'components/message_submit_error';\n\nclass CreateComment extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The channel for which this comment is a part of\n         */\n        channelId: PropTypes.string.isRequired,\n\n        /**\n         * The number of channel members\n         */\n        channelMembersCount: PropTypes.number.isRequired,\n\n        /**\n         * The id of the parent post\n         */\n        rootId: PropTypes.string.isRequired,\n\n        /**\n         * True if the root message was deleted\n         */\n        rootDeleted: PropTypes.bool.isRequired,\n\n        /**\n         * The current history message selected\n         */\n        messageInHistory: PropTypes.string,\n\n        /**\n         * The current draft of the comment\n         */\n        draft: PropTypes.shape({\n            message: PropTypes.string.isRequired,\n            uploadsInProgress: PropTypes.array.isRequired,\n            fileInfos: PropTypes.array.isRequired,\n        }).isRequired,\n\n        /**\n         * Whether the submit button is enabled\n         */\n        enableAddButton: PropTypes.bool.isRequired,\n\n        /**\n         * Force message submission on CTRL/CMD + ENTER\n         */\n        codeBlockOnCtrlEnter: PropTypes.bool,\n\n        /**\n         * Set to force form submission on CTRL/CMD + ENTER instead of ENTER\n         */\n        ctrlSend: PropTypes.bool,\n\n        /**\n         * The id of the latest post in this channel\n         */\n        latestPostId: PropTypes.string,\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Create post error id\n         */\n        createPostErrorId: PropTypes.string,\n\n        /**\n         * Called to clear file uploads in progress\n         */\n        clearCommentDraftUploads: PropTypes.func.isRequired,\n\n        intl: intlShape.isRequired,\n\n        /**\n         * Called when comment draft needs to be updated\n         */\n        onUpdateCommentDraft: PropTypes.func.isRequired,\n\n        /**\n         * Called when comment draft needs to be updated for an specific root ID\n         */\n        updateCommentDraftWithRootId: PropTypes.func.isRequired,\n\n        /**\n         * Called when submitting the comment\n         */\n        onSubmit: PropTypes.func.isRequired,\n\n        /**\n         * Called when resetting comment message history index\n         */\n        onResetHistoryIndex: PropTypes.func.isRequired,\n\n        /**\n         * Called when navigating back through comment message history\n         */\n        onMoveHistoryIndexBack: PropTypes.func.isRequired,\n\n        /**\n         * Called when navigating forward through comment message history\n         */\n        onMoveHistoryIndexForward: PropTypes.func.isRequired,\n\n        /**\n         * Called to initiate editing the user's latest post\n         */\n        onEditLatestPost: PropTypes.func.isRequired,\n\n        /**\n         * Function to get the users timezones in the channel\n         */\n        getChannelTimezones: PropTypes.func.isRequired,\n\n        /**\n         * Reset state of createPost request\n         */\n        resetCreatePostRequest: PropTypes.func.isRequired,\n\n        /**\n         * Set if channel is read only\n         */\n        readOnlyChannel: PropTypes.bool,\n\n        /**\n         * Set if @channel should warn in this channel.\n         */\n        enableConfirmNotificationsToChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Set if the emoji picker is enabled.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Set if the gif picker is enabled.\n         */\n        enableGifPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Set if the connection may be bad to warn user\n         */\n        badConnection: PropTypes.bool.isRequired,\n\n        /**\n         * The maximum length of a post\n         */\n        maxPostSize: PropTypes.number.isRequired,\n        rhsExpanded: PropTypes.bool.isRequired,\n\n        /**\n         * To check if the timezones are enable on the server.\n         */\n        isTimezoneEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * The last time, if any, when the selected post changed. Will be 0 if no post selected.\n         */\n        selectedPostFocussedAt: PropTypes.number.isRequired,\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let updatedState = {\n            createPostErrorId: props.createPostErrorId,\n            rootId: props.rootId,\n            messageInHistory: props.messageInHistory,\n            draft: state.draft || {...props.draft, caretPosition: props.draft.message.length, uploadsInProgress: []},\n        };\n\n        const rootChanged = props.rootId !== state.rootId;\n        const messageInHistoryChanged = props.messageInHistory !== state.messageInHistory;\n        if (rootChanged || messageInHistoryChanged) {\n            updatedState = {...updatedState, draft: {...props.draft, uploadsInProgress: rootChanged ? [] : props.draft.uploadsInProgress}};\n        }\n\n        if (props.createPostErrorId === 'api.post.create_post.root_id.app_error' && props.createPostErrorId !== state.createPostErrorId) {\n            updatedState = {...updatedState, showPostDeletedModal: true};\n        }\n\n        return updatedState;\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showPostDeletedModal: false,\n            showConfirmModal: false,\n            showEmojiPicker: false,\n            showPreview: false,\n            channelTimezoneCount: 0,\n            uploadsProgressPercent: {},\n            renderScrollbar: false,\n            suggestionListStyle: 'top',\n        };\n\n        this.lastBlurAt = 0;\n        this.draftsForPost = {};\n        this.doInitialScrollToBottom = false;\n    }\n\n    componentDidMount() {\n        this.props.clearCommentDraftUploads();\n        this.props.onResetHistoryIndex();\n        this.focusTextbox();\n        document.addEventListener('paste', this.pasteHandler);\n        document.addEventListener('keydown', this.focusTextboxIfNecessary);\n\n        // When draft.message is not empty, set doInitialScrollToBottom to true so that\n        // on next component update, the actual this.scrollToBottom() will be called.\n        // This is made so that the this.scrollToBottom() will be called only once.\n        if (this.props.draft.message !== '') {\n            this.doInitialScrollToBottom = true;\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.resetCreatePostRequest();\n        document.removeEventListener('paste', this.pasteHandler);\n        document.removeEventListener('keydown', this.focusTextboxIfNecessary);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.draft.uploadsInProgress.length < this.state.draft.uploadsInProgress.length) {\n            this.scrollToBottom();\n        }\n\n        // Focus on textbox when emoji picker is closed\n        if (prevState.showEmojiPicker && !this.state.showEmojiPicker) {\n            this.focusTextbox();\n        }\n\n        // Focus on textbox when returned from preview mode\n        if (prevState.showPreview && !this.state.showPreview) {\n            this.focusTextbox();\n        }\n\n        if (prevProps.rootId !== this.props.rootId || prevProps.selectedPostFocussedAt !== this.props.selectedPostFocussedAt) {\n            this.focusTextbox();\n        }\n\n        if (this.doInitialScrollToBottom) {\n            this.scrollToBottom();\n            this.doInitialScrollToBottom = false;\n        }\n    }\n\n    updatePreview = (newState) => {\n        this.setState({showPreview: newState});\n    }\n\n    focusTextboxIfNecessary = (e) => {\n        // Should only focus if RHS is expanded\n        if (!this.props.rhsExpanded) {\n            return;\n        }\n\n        // Bit of a hack to not steal focus from the channel switch modal if it's open\n        // This is a special case as the channel switch modal does not enforce focus like\n        // most modals do\n        if (document.getElementsByClassName('channel-switch-modal').length) {\n            return;\n        }\n\n        if (shouldFocusMainTextbox(e, document.activeElement)) {\n            this.focusTextbox();\n        }\n    }\n\n    pasteHandler = (e) => {\n        if (!e.clipboardData || !e.clipboardData.items || e.target.id !== 'reply_textbox') {\n            return;\n        }\n\n        const table = getTable(e.clipboardData);\n        if (!table) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const {draft} = this.state;\n        let message = '';\n        if (isGitHubCodeBlock(table.className)) {\n            message = '```\\n' + getPlainText(e.clipboardData) + '\\n```';\n        } else {\n            message = formatMarkdownTableMessage(table, draft.message.trim());\n        }\n\n        const updatedDraft = {...draft, message};\n\n        this.props.onUpdateCommentDraft(updatedDraft);\n        this.setState({draft: updatedDraft});\n    }\n\n    handleNotifyAllConfirmation = (e) => {\n        this.hideNotifyAllModal();\n        this.doSubmit(e);\n    }\n\n    hideNotifyAllModal = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    showNotifyAllModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n    }\n\n    hideEmojiPicker = () => {\n        this.setState({showEmojiPicker: false});\n    }\n\n    handleEmojiClick = (emoji) => {\n        const emojiAlias = emoji.name || emoji.aliases[0];\n\n        if (!emojiAlias) {\n            //Oops.. There went something wrong\n            return;\n        }\n\n        const {draft} = this.state;\n\n        let newMessage = '';\n        if (draft.message === '') {\n            newMessage = `:${emojiAlias}: `;\n        } else {\n            const {draft: {message}} = this.state;\n            const {firstPiece, lastPiece} = splitMessageBasedOnCaretPosition(this.state.caretPosition, message);\n\n            // check whether the first piece of the message is empty when cursor is placed at beginning of message and avoid adding an empty string at the beginning of the message\n            newMessage = firstPiece === '' ? `:${emojiAlias}: ${lastPiece} ` : `${firstPiece} :${emojiAlias}: ${lastPiece} `;\n\n            const newCaretPosition = firstPiece === '' ? `:${emojiAlias}: `.length : `${firstPiece} :${emojiAlias}: `.length;\n\n            const textbox = this.refs.textbox.getWrappedInstance().getInputBox();\n\n            this.setState({\n                caretPosition: newCaretPosition,\n            }, () => {\n                Utils.setCaretPosition(textbox, newCaretPosition);\n            });\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            message: newMessage,\n        };\n\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        this.setState({\n            showEmojiPicker: false,\n            draft: modifiedDraft,\n        });\n    }\n\n    handleGifClick = (gif) => {\n        const {draft} = this.state;\n\n        let newMessage = '';\n        if (draft.message === '') {\n            newMessage = gif;\n        } else if ((/\\s+$/).test(draft.message)) {\n            // Check whether there is already a blank at the end of the current message\n            newMessage = `${draft.message}${gif} `;\n        } else {\n            newMessage = `${draft.message} ${gif} `;\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            message: newMessage,\n        };\n\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        this.setState({\n            showEmojiPicker: false,\n            draft: modifiedDraft,\n        });\n\n        this.focusTextbox();\n    }\n\n    handlePostError = (postError) => {\n        this.setState({postError});\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n        this.updatePreview(false);\n\n        const membersCount = this.props.channelMembersCount;\n        const notificationsToChannel = this.props.enableConfirmNotificationsToChannel;\n        if (notificationsToChannel &&\n            membersCount > Constants.NOTIFY_ALL_MEMBERS &&\n            containsAtChannel(this.state.draft.message)) {\n            if (this.props.isTimezoneEnabled) {\n                const {data} = await this.props.getChannelTimezones(this.props.channelId);\n                if (data) {\n                    this.setState({channelTimezoneCount: data.length});\n                } else {\n                    this.setState({channelTimezoneCount: 0});\n                }\n            }\n            this.showNotifyAllModal();\n            return;\n        }\n\n        await this.doSubmit(e);\n    }\n\n    doSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const {draft} = this.state;\n        const enableAddButton = this.shouldEnableAddButton();\n\n        if (!enableAddButton) {\n            return;\n        }\n\n        if (draft.uploadsInProgress.length > 0) {\n            return;\n        }\n\n        if (this.state.postError) {\n            this.setState({errorClass: 'animation--highlight'});\n            setTimeout(() => {\n                this.setState({errorClass: null});\n            }, Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        if (this.props.rootDeleted) {\n            this.showPostDeletedModal();\n            return;\n        }\n\n        const fasterThanHumanWillClick = 150;\n        const forceFocus = (Date.now() - this.lastBlurAt < fasterThanHumanWillClick);\n        this.focusTextbox(forceFocus);\n\n        const serverError = this.state.serverError;\n        let ignoreSlash = false;\n        if (isErrorInvalidSlashCommand(serverError) && draft.message === serverError.submittedMessage) {\n            ignoreSlash = true;\n        }\n\n        const options = {ignoreSlash};\n\n        try {\n            await this.props.onSubmit(options);\n\n            this.setState({\n                postError: null,\n                serverError: null,\n            });\n        } catch (err) {\n            if (isErrorInvalidSlashCommand(err)) {\n                this.props.onUpdateCommentDraft(draft);\n            }\n            err.submittedMessage = draft.message;\n            this.setState({serverError: err});\n            return;\n        }\n\n        this.setState({draft: {...this.props.draft, uploadsInProgress: []}});\n    }\n\n    commentMsgKeyPress = (e) => {\n        const {\n            ctrlSend,\n            codeBlockOnCtrlEnter,\n        } = this.props;\n\n        const {allowSending, withClosedCodeBlock, message} = postMessageOnKeyPress(e, this.state.draft.message, ctrlSend, codeBlockOnCtrlEnter, 0, 0, this.state.caretPosition);\n\n        if (allowSending) {\n            e.persist();\n            if (this.refs.textbox) {\n                this.refs.textbox.getWrappedInstance().blur();\n            }\n\n            if (withClosedCodeBlock && message) {\n                const {draft} = this.state;\n                const updatedDraft = {...draft, message};\n                this.props.onUpdateCommentDraft(updatedDraft);\n                this.setState({draft: updatedDraft}, () => this.handleSubmit(e));\n                this.draftsForPost[this.props.rootId] = updatedDraft;\n            } else {\n                this.handleSubmit(e);\n            }\n\n            this.updatePreview(false);\n            setTimeout(() => {\n                this.focusTextbox();\n            });\n        }\n\n        this.emitTypingEvent();\n    }\n\n    emitTypingEvent = () => {\n        const {channelId, rootId} = this.props;\n        GlobalActions.emitLocalUserTypingEvent(channelId, rootId);\n    }\n\n    scrollToBottom = () => {\n        const $el = $('.post-right__scroll');\n        if ($el[0]) {\n            $el.parent().scrollTop($el[0].scrollHeight);\n        }\n    }\n\n    handleChange = (e) => {\n        const message = e.target.value;\n\n        let serverError = this.state.serverError;\n        if (isErrorInvalidSlashCommand(serverError)) {\n            serverError = null;\n        }\n\n        const {draft} = this.state;\n        const updatedDraft = {...draft, message};\n        this.props.onUpdateCommentDraft(updatedDraft);\n        this.setState({draft: updatedDraft, serverError}, () => {\n            this.scrollToBottom();\n        });\n        this.draftsForPost[this.props.rootId] = updatedDraft;\n    }\n\n    handleMouseUpKeyUp = (e) => {\n        const caretPosition = Utils.getCaretPosition(e.target);\n        this.setState({\n            caretPosition,\n        });\n    }\n\n    handleKeyDown = (e) => {\n        if (\n            (this.props.ctrlSend || this.props.codeBlockOnCtrlEnter) &&\n            Utils.isKeyPressed(e, Constants.KeyCodes.ENTER) &&\n            (e.ctrlKey || e.metaKey)\n        ) {\n            this.updatePreview(false);\n            this.commentMsgKeyPress(e);\n            return;\n        }\n\n        const {draft} = this.state;\n        const {message} = draft;\n\n        if (!e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.UP) && message === '') {\n            e.preventDefault();\n            if (this.refs.textbox) {\n                this.refs.textbox.getWrappedInstance().blur();\n            }\n\n            const {data: canEditNow} = this.props.onEditLatestPost();\n            if (!canEditNow) {\n                this.focusTextbox(true);\n            }\n        }\n\n        if ((e.ctrlKey || e.metaKey) && !e.altKey && !e.shiftKey) {\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.UP)) {\n                e.preventDefault();\n                this.props.onMoveHistoryIndexBack();\n            } else if (Utils.isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n                e.preventDefault();\n                this.props.onMoveHistoryIndexForward();\n            }\n        }\n    }\n\n    handleFileUploadChange = () => {\n        this.focusTextbox();\n    }\n\n    handleUploadStart = (clientIds) => {\n        const {draft} = this.state;\n        const uploadsInProgress = [...draft.uploadsInProgress, ...clientIds];\n\n        const modifiedDraft = {\n            ...draft,\n            uploadsInProgress,\n        };\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.setState({draft: modifiedDraft});\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        // this is a bit redundant with the code that sets focus when the file input is clicked,\n        // but this also resets the focus after a drag and drop\n        this.focusTextbox();\n    }\n\n    handleUploadProgress = ({clientId, name, percent, type}) => {\n        const uploadsProgressPercent = {...this.state.uploadsProgressPercent, [clientId]: {percent, name, type}};\n        this.setState({uploadsProgressPercent});\n    }\n\n    handleFileUploadComplete = (fileInfos, clientIds, channelId, rootId) => {\n        const draft = this.draftsForPost[rootId];\n        const uploadsInProgress = [...draft.uploadsInProgress];\n        const newFileInfos = sortFileInfos([...draft.fileInfos, ...fileInfos], this.props.locale);\n\n        // remove each finished file from uploads\n        for (let i = 0; i < clientIds.length; i++) {\n            const index = uploadsInProgress.indexOf(clientIds[i]);\n\n            if (index !== -1) {\n                uploadsInProgress.splice(index, 1);\n            }\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            fileInfos: newFileInfos,\n            uploadsInProgress,\n        };\n        this.props.updateCommentDraftWithRootId(rootId, modifiedDraft);\n        this.draftsForPost[rootId] = modifiedDraft;\n        if (this.props.rootId === rootId) {\n            this.setState({draft: modifiedDraft});\n        }\n    }\n\n    handleUploadError = (err, clientId = -1, currentChannelId, rootId = -1) => {\n        if (clientId !== -1) {\n            const draft = {...this.draftsForPost[rootId]};\n            const uploadsInProgress = [...draft.uploadsInProgress];\n\n            const index = uploadsInProgress.indexOf(clientId);\n            if (index !== -1) {\n                uploadsInProgress.splice(index, 1);\n            }\n\n            const modifiedDraft = {\n                ...draft,\n                uploadsInProgress,\n            };\n            this.props.updateCommentDraftWithRootId(rootId, modifiedDraft);\n            this.draftsForPost[rootId] = modifiedDraft;\n            if (this.props.rootId === rootId) {\n                this.setState({draft: modifiedDraft});\n            }\n        }\n\n        let serverError = err;\n        if (err && typeof err === 'string') {\n            serverError = new Error(err);\n        }\n\n        this.setState({serverError}, () => {\n            if (serverError) {\n                this.scrollToBottom();\n            }\n        });\n    }\n\n    removePreview = (id) => {\n        const {draft} = this.state;\n        const fileInfos = [...draft.fileInfos];\n        const uploadsInProgress = [...draft.uploadsInProgress];\n\n        // Clear previous errors\n        this.handleUploadError(null);\n\n        // id can either be the id of an uploaded file or the client id of an in progress upload\n        let index = fileInfos.findIndex((info) => info.id === id);\n        if (index === -1) {\n            index = uploadsInProgress.indexOf(id);\n\n            if (index !== -1) {\n                uploadsInProgress.splice(index, 1);\n\n                if (this.refs.fileUpload && this.refs.fileUpload.getWrappedInstance()) {\n                    this.refs.fileUpload.getWrappedInstance().cancelUpload(id);\n                }\n            }\n        } else {\n            fileInfos.splice(index, 1);\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            fileInfos,\n            uploadsInProgress,\n        };\n\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.setState({draft: modifiedDraft});\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        this.handleFileUploadChange();\n    }\n\n    getFileCount = () => {\n        const {\n            draft: {\n                fileInfos,\n                uploadsInProgress,\n            },\n        } = this.state;\n        return fileInfos.length + uploadsInProgress.length;\n    }\n\n    getFileUploadTarget = () => {\n        return this.refs.textbox.getWrappedInstance();\n    }\n\n    getCreateCommentControls = () => {\n        return this.refs.createCommentControls;\n    }\n\n    shouldEnableAddButton = () => {\n        if (this.props.enableAddButton) {\n            return true;\n        }\n\n        return isErrorInvalidSlashCommand(this.state.serverError);\n    }\n\n    focusTextbox = (keepFocus = false) => {\n        if (this.refs.textbox && (keepFocus || !UserAgent.isMobile())) {\n            this.refs.textbox.getWrappedInstance().focus();\n        }\n    }\n\n    showPostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: true,\n        });\n    }\n\n    hidePostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: false,\n        });\n\n        this.props.resetCreatePostRequest();\n    }\n\n    handleBlur = () => {\n        this.lastBlurAt = Date.now();\n    }\n\n    handleHeightChange = (height, maxHeight) => {\n        this.setState({renderScrollbar: height > maxHeight});\n    }\n\n    render() {\n        const {draft} = this.state;\n        const {readOnlyChannel} = this.props;\n        const {formatMessage} = this.props.intl;\n        const enableAddButton = this.shouldEnableAddButton();\n        const {renderScrollbar} = this.state;\n        const ariaLabelReplyInput = Utils.localizeMessage('accessibility.sections.rhsFooter', 'reply input region');\n\n        const notifyAllTitle = (\n            <FormattedMessage\n                id='notify_all.title.confirm'\n                defaultMessage='Confirm sending notifications to entire channel'\n            />\n        );\n\n        const notifyAllConfirm = (\n            <FormattedMessage\n                id='notify_all.confirm'\n                defaultMessage='Confirm'\n            />\n        );\n\n        let notifyAllMessage = '';\n        if (this.state.channelTimezoneCount && this.props.isTimezoneEnabled) {\n            notifyAllMessage = (\n                <FormattedMarkdownMessage\n                    id='notify_all.question_timezone'\n                    defaultMessage='By using @all or @channel you are about to send notifications to **{totalMembers} people** in **{timezones, number} {timezones, plural, one {timezone} other {timezones}}**. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: this.props.channelMembersCount - 1,\n                        timezones: this.state.channelTimezoneCount,\n                    }}\n                />\n            );\n        } else {\n            notifyAllMessage = (\n                <FormattedMessage\n                    id='notify_all.question'\n                    defaultMessage='By using @all or @channel you are about to send notifications to {totalMembers} people. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: this.props.channelMembersCount - 1,\n                    }}\n                />\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <MessageSubmitError\n                    id='postServerError'\n                    error={this.state.serverError}\n                    submittedMessage={this.state.serverError.submittedMessage}\n                    handleSubmit={this.handleSubmit}\n                />\n            );\n        }\n\n        let postError = null;\n        if (this.state.postError) {\n            const postErrorClass = 'post-error' + (this.state.errorClass ? (' ' + this.state.errorClass) : '');\n            postError = <label className={postErrorClass}>{this.state.postError}</label>;\n        }\n\n        let preview = null;\n        if (!readOnlyChannel && (draft.fileInfos.length > 0 || draft.uploadsInProgress.length > 0)) {\n            preview = (\n                <FilePreview\n                    fileInfos={draft.fileInfos}\n                    onRemove={this.removePreview}\n                    uploadsInProgress={draft.uploadsInProgress}\n                    uploadsProgressPercent={this.state.uploadsProgressPercent}\n                    ref='preview'\n                />\n            );\n        }\n\n        let uploadsInProgressText = null;\n        if (draft.uploadsInProgress.length > 0) {\n            uploadsInProgressText = (\n                <span className='post-right-comments-upload-in-progress'>\n                    {draft.uploadsInProgress.length === 1 ? (\n                        <FormattedMessage\n                            id='create_comment.file'\n                            defaultMessage='File uploading'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='create_comment.files'\n                            defaultMessage='Files uploading'\n                        />\n                    )}\n                </span>\n            );\n        }\n\n        let addButtonClass = 'btn btn-primary comment-btn';\n        if (!enableAddButton) {\n            addButtonClass += ' disabled';\n        }\n\n        let fileUpload;\n        if (!readOnlyChannel && !this.state.showPreview) {\n            fileUpload = (\n                <FileUpload\n                    ref='fileUpload'\n                    fileCount={this.getFileCount()}\n                    getTarget={this.getFileUploadTarget}\n                    onFileUploadChange={this.handleFileUploadChange}\n                    onUploadStart={this.handleUploadStart}\n                    onFileUpload={this.handleFileUploadComplete}\n                    onUploadError={this.handleUploadError}\n                    onUploadProgress={this.handleUploadProgress}\n                    rootId={this.props.rootId}\n                    postType='comment'\n                />\n            );\n        }\n\n        let emojiPicker = null;\n        const emojiButtonAriaLabel = formatMessage({id: 'emoji_picker.emojiPicker', defaultMessage: 'Emoji Picker'}).toLowerCase();\n\n        if (this.props.enableEmojiPicker && !readOnlyChannel && !this.state.showPreview) {\n            emojiPicker = (\n                <div>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        target={this.getCreateCommentControls}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClose={this.hideEmojiPicker}\n                        onEmojiClick={this.handleEmojiClick}\n                        onGifClick={this.handleGifClick}\n                        enableGifPicker={this.props.enableGifPicker}\n                        topOffset={55}\n                    />\n                    <button\n                        aria-label={emojiButtonAriaLabel}\n                        type='button'\n                        onClick={this.toggleEmojiPicker}\n                        className='style--none emoji-picker__container post-action'\n                    >\n                        <EmojiIcon className={'icon icon--emoji emoji-rhs ' + (this.state.showEmojiPicker ? 'active' : '')}/>\n                    </button>\n                </div>\n            );\n        }\n\n        let createMessage;\n        if (readOnlyChannel) {\n            createMessage = Utils.localizeMessage('create_post.read_only', 'This channel is read-only. Only members with permission can post here.');\n        } else {\n            createMessage = Utils.localizeMessage('create_comment.addComment', 'Add a comment...');\n        }\n\n        let scrollbarClass = '';\n        if (renderScrollbar) {\n            scrollbarClass = ' scroll';\n        }\n\n        const textboxRef = this.refs.textbox;\n        if (textboxRef) {\n            const textboxPosTop = textboxRef.getWrappedInstance().getInputBox().getBoundingClientRect().top;\n            if (textboxPosTop < Constants.SUGGESTION_LIST_SPACE_RHS) {\n                this.setState({suggestionListStyle: 'bottom'});\n            } else {\n                this.setState({suggestionListStyle: 'top'});\n            }\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div\n                    role='application'\n                    id='rhsFooter'\n                    aria-label={ariaLabelReplyInput}\n                    tabIndex='-1'\n                    className={`post-create a11y__region${scrollbarClass}`}\n                    data-a11y-sort-order='4'\n                >\n                    <div\n                        id={this.props.rootId}\n                        className='post-create-body comment-create-body'\n                    >\n                        <div className='post-body__cell'>\n                            <Textbox\n                                onChange={this.handleChange}\n                                onKeyPress={this.commentMsgKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                onMouseUp={this.handleMouseUpKeyUp}\n                                onKeyUp={this.handleMouseUpKeyUp}\n                                onComposition={this.emitTypingEvent}\n                                onHeightChange={this.handleHeightChange}\n                                handlePostError={this.handlePostError}\n                                value={readOnlyChannel ? '' : draft.message}\n                                onBlur={this.handleBlur}\n                                createMessage={createMessage}\n                                emojiEnabled={this.props.enableEmojiPicker}\n                                initialText=''\n                                channelId={this.props.channelId}\n                                isRHS={true}\n                                popoverMentionKeyClick={true}\n                                id='reply_textbox'\n                                ref='textbox'\n                                disabled={readOnlyChannel}\n                                characterLimit={this.props.maxPostSize}\n                                preview={this.state.showPreview}\n                                suggestionListStyle={this.state.suggestionListStyle}\n                                badConnection={this.props.badConnection}\n                                listenForMentionKeyClick={true}\n                            />\n                            <span\n                                ref='createCommentControls'\n                                className='post-body__actions'\n                            >\n                                {fileUpload}\n                                {emojiPicker}\n                            </span>\n                        </div>\n                    </div>\n                    <div\n                        className='post-create-footer'\n                    >\n                        <div className='d-flex justify-content-between'>\n                            <div className='col'>\n                                <MsgTyping\n                                    channelId={this.props.channelId}\n                                    postId={this.props.rootId}\n                                />\n                                {postError}\n                            </div>\n                            <div className='col col-auto'>\n                                <TextboxLinks\n                                    characterLimit={this.props.maxPostSize}\n                                    showPreview={this.state.showPreview}\n                                    updatePreview={this.updatePreview}\n                                    message={readOnlyChannel ? '' : this.state.message}\n                                />\n                            </div>\n                        </div>\n                        <div className='text-right margin-top'>\n                            {uploadsInProgressText}\n                            <input\n                                type='button'\n                                disabled={!enableAddButton}\n                                id='addCommentButton'\n                                className={addButtonClass}\n                                value={formatMessage({id: 'create_comment.comment', defaultMessage: 'Add Comment'})}\n                                onClick={this.handleSubmit}\n                            />\n                            {preview}\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n                <PostDeletedModal\n                    show={this.state.showPostDeletedModal}\n                    onHide={this.hidePostDeletedModal}\n                />\n                <ConfirmModal\n                    title={notifyAllTitle}\n                    message={notifyAllMessage}\n                    confirmButtonText={notifyAllConfirm}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleNotifyAllConfirmation}\n                    onCancel={this.hideNotifyAllModal}\n                />\n            </form>\n        );\n    }\n}\n\nexport default injectIntl(CreateComment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getAllChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {makeGetMessageInHistoryItem} from 'mattermost-redux/selectors/entities/posts';\nimport {resetCreatePostRequest, resetHistoryIndex} from 'mattermost-redux/actions/posts';\nimport {getChannelTimezones} from 'mattermost-redux/actions/channels';\nimport {Preferences, Posts} from 'mattermost-redux/constants';\n\nimport {connectionErrorCount} from 'selectors/views/system';\n\nimport {Constants, StoragePrefixes} from 'utils/constants';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport {\n    clearCommentDraftUploads,\n    updateCommentDraft,\n    makeOnMoveHistoryIndex,\n    makeOnSubmit,\n    makeOnEditLatestPost,\n} from 'actions/views/create_comment';\nimport {getPostDraft, getIsRhsExpanded, getSelectedPostFocussedAt} from 'selectors/rhs';\n\nimport CreateComment from './create_comment.jsx';\n\nfunction makeMapStateToProps() {\n    const getMessageInHistoryItem = makeGetMessageInHistoryItem(Posts.MESSAGE_TYPES.COMMENT);\n\n    return (state, ownProps) => {\n        const err = state.requests.posts.createPost.error || {};\n\n        const draft = getPostDraft(state, StoragePrefixes.COMMENT_DRAFT, ownProps.rootId);\n        const enableAddButton = draft.message.trim().length !== 0 || draft.fileInfos.length !== 0;\n\n        const channelMembersCount = getAllChannelStats(state)[ownProps.channelId] ? getAllChannelStats(state)[ownProps.channelId].member_count : 1;\n        const messageInHistory = getMessageInHistoryItem(state);\n\n        const channel = state.entities.channels.channels[ownProps.channelId] || {};\n\n        const config = getConfig(state);\n        const enableConfirmNotificationsToChannel = config.EnableConfirmNotificationsToChannel === 'true';\n        const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n        const enableGifPicker = config.EnableGifPicker === 'true';\n        const badConnection = connectionErrorCount(state) > 1;\n        const isTimezoneEnabled = config.ExperimentalTimezone === 'true';\n\n        return {\n            draft,\n            messageInHistory,\n            enableAddButton,\n            channelMembersCount,\n            codeBlockOnCtrlEnter: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', true),\n            ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n            createPostErrorId: err.server_error_id,\n            readOnlyChannel: !isCurrentUserSystemAdmin(state) && config.ExperimentalTownSquareIsReadOnly === 'true' && channel.name === Constants.DEFAULT_CHANNEL,\n            enableConfirmNotificationsToChannel,\n            enableEmojiPicker,\n            enableGifPicker,\n            locale: getCurrentLocale(state),\n            maxPostSize: parseInt(config.MaxPostSize, 10) || Constants.DEFAULT_CHARACTER_LIMIT,\n            rhsExpanded: getIsRhsExpanded(state),\n            badConnection,\n            isTimezoneEnabled,\n            selectedPostFocussedAt: getSelectedPostFocussedAt(state),\n        };\n    };\n}\n\nfunction makeOnUpdateCommentDraft(rootId) {\n    return (draft) => updateCommentDraft(rootId, draft);\n}\n\nfunction makeMapDispatchToProps() {\n    let onUpdateCommentDraft;\n    let onSubmit;\n    let onMoveHistoryIndexBack;\n    let onMoveHistoryIndexForward;\n    let onEditLatestPost;\n\n    function onResetHistoryIndex() {\n        return resetHistoryIndex(Posts.MESSAGE_TYPES.COMMENT);\n    }\n\n    let rootId;\n    let channelId;\n    let latestPostId;\n\n    return (dispatch, ownProps) => {\n        if (rootId !== ownProps.rootId) {\n            onUpdateCommentDraft = makeOnUpdateCommentDraft(ownProps.rootId);\n            onMoveHistoryIndexBack = makeOnMoveHistoryIndex(ownProps.rootId, -1);\n            onMoveHistoryIndexForward = makeOnMoveHistoryIndex(ownProps.rootId, 1);\n        }\n\n        if (rootId !== ownProps.rootId || channelId !== ownProps.channelId) {\n            onEditLatestPost = makeOnEditLatestPost(ownProps.channelId, ownProps.rootId);\n        }\n\n        if (rootId !== ownProps.rootId || channelId !== ownProps.channelId || latestPostId !== ownProps.latestPostId) {\n            onSubmit = makeOnSubmit(ownProps.channelId, ownProps.rootId, ownProps.latestPostId);\n        }\n\n        rootId = ownProps.rootId;\n        channelId = ownProps.channelId;\n        latestPostId = ownProps.latestPostId;\n\n        return bindActionCreators({\n            clearCommentDraftUploads,\n            onUpdateCommentDraft,\n            updateCommentDraftWithRootId: updateCommentDraft,\n            onSubmit,\n            onResetHistoryIndex,\n            onMoveHistoryIndexBack,\n            onMoveHistoryIndexForward,\n            onEditLatestPost,\n            resetCreatePostRequest,\n            getChannelTimezones,\n        }, dispatch);\n    };\n}\n\nexport default connect(makeMapStateToProps, makeMapDispatchToProps)(CreateComment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {\n    FormattedMessage,\n    injectIntl,\n    IntlShape,\n} from 'react-intl';\nimport moment from 'moment-timezone';\n\ntype Props = {\n    timeZone?: string;\n    value: number | Date;\n    children?(val: string): React.ReactElement | null;\n    intl: IntlShape;\n}\n\nclass RecentDate extends React.PureComponent<Props> {\n    public render() {\n        const {value, timeZone} = this.props;\n        const date = new Date(value);\n\n        if (isToday(date)) {\n            return (\n                <FormattedMessage\n                    id='date_separator.today'\n                    defaultMessage='Today'\n                />\n            );\n        } else if (isYesterday(date)) {\n            return (\n                <FormattedMessage\n                    id='date_separator.yesterday'\n                    defaultMessage='Yesterday'\n                />\n            );\n        }\n\n        const options = {\n            timeZone,\n            weekday: 'short',\n            month: 'short',\n            day: '2-digit',\n            year: 'numeric'\n        };\n        const formattedDate = this.props.intl.formatDate(value, options);\n\n        // On error, `formatDate` returns unformatted date or value string like in the case of (react-intl) unsupported timezone.\n        // Therefore, use react-intl by default or moment-timezone for unsupported timezone.\n        if (formattedDate !== String(date) && formattedDate !== String(value)) {\n            return formattedDate;\n        }\n\n        const momentDate = value ? moment(value) : moment();\n\n        if (timeZone) {\n            momentDate.tz(timeZone);\n        }\n\n        return momentDate.format('ddd, MMM D, YYYY');\n    }\n}\n\nexport function isSameDay(a: Date, b: Date) {\n    return a.getDate() === b.getDate() && a.getMonth() === b.getMonth() && a.getFullYear() === b.getFullYear();\n}\n\nexport function isToday(date: Date) {\n    const now = new Date();\n\n    return isSameDay(date, now);\n}\n\nexport function isYesterday(date: Date) {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    return isSameDay(date, yesterday);\n}\n\nexport default injectIntl(RecentDate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport './separator.scss';\n\nexport default class BasicSeparator extends React.PureComponent<React.PropsWithChildren<{}>> {\n    public render() {\n        const {children} = this.props;\n        return (\n            <div\n                data-testid='basicSeparator'\n                className='Separator BasicSeparator'\n            >\n                <hr className='separator__hr'/>\n                {children && (\n                    <div className='separator__text'>\n                        {children}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport RecentDate from 'components/recent_date';\n\nimport BasicSeparator from 'components/widgets/separator/basic-separator';\n\nexport default class DateSeparator extends React.PureComponent {\n    static propTypes = {\n        date: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.instanceOf(Date),\n        ]).isRequired,\n        timeZone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n    }\n\n    render() {\n        const {\n            date,\n            enableTimezone,\n            timeZone,\n        } = this.props;\n        const timezoneProps = enableTimezone && timeZone ? {timeZone} : {};\n\n        return (\n            <BasicSeparator>\n                <RecentDate\n                    {...timezoneProps}\n                    value={date}\n                    weekday='short'\n                    month='short'\n                    day='2-digit'\n                    year='numeric'\n                />\n            </BasicSeparator>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {areTimezonesEnabledAndSupported} from 'selectors/general';\n\nimport DateSeparator from './date_separator';\n\nfunction mapStateToProps(state, props) {\n    const currentUserId = getCurrentUserId(state);\n\n    let userTimezone;\n    if (props.userTimezone) {\n        userTimezone = props.userTimezone;\n    } else {\n        userTimezone = getUserTimezone(state, currentUserId);\n    }\n\n    return {\n        enableTimezone: areTimezonesEnabledAndSupported(state),\n        timeZone: getUserCurrentTimezone(userTimezone),\n    };\n}\n\nexport default connect(mapStateToProps)(DateSeparator);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport RecentDate from 'components/recent_date';\n\nexport default class FloatingTimestamp extends React.PureComponent {\n    static propTypes = {\n        isScrolling: PropTypes.bool.isRequired,\n        isMobile: PropTypes.bool,\n        createAt: PropTypes.oneOfType([\n            PropTypes.instanceOf(Date),\n            PropTypes.number,\n        ]).isRequired,\n        isRhsPost: PropTypes.bool,\n        stylesOverride: PropTypes.object,\n    }\n\n    render() {\n        if (!this.props.isMobile) {\n            return null;\n        }\n\n        if (this.props.createAt === 0) {\n            return null;\n        }\n\n        const dateString = (\n            <RecentDate\n                value={this.props.createAt}\n                weekday='short'\n                day='2-digit'\n                month='short'\n                year='numeric'\n            />\n        );\n\n        let className = 'post-list__timestamp';\n        if (this.props.isScrolling) {\n            className += ' scrolling';\n        }\n\n        if (this.props.isRhsPost) {\n            className += ' rhs';\n        }\n\n        return (\n            <div\n                className={className}\n                style={this.props.stylesOverride}\n                data-testid='floatingTimestamp'\n            >\n                <div>\n                    <span>{dateString}</span>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport * as PostListUtils from 'mattermost-redux/utils/post_list';\n\nimport FloatingTimestamp from './floating_timestamp';\n\nfunction mapStateToProps(state, ownProps) {\n    let postId = ownProps.postId;\n    if (PostListUtils.isCombinedUserActivityPost(postId)) {\n        const combinedIds = PostListUtils.getPostIdsForCombinedUserActivityPost(postId);\n\n        postId = combinedIds[combinedIds.length - 1];\n    }\n\n    const post = getPost(state, postId);\n\n    return {\n        createAt: post ? post.create_at : 0,\n    };\n}\n\nexport default connect(mapStateToProps)(FloatingTimestamp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class ChannelPermissionGate extends React.Component {\n    static defaultProps = {\n        invert: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Channel to check the permission\n         */\n        channelId: PropTypes.string,\n\n        /**\n         * Team to check the permission\n         */\n        teamId: PropTypes.string,\n\n        /**\n         * Permissions enough to pass the gate (binary OR)\n         */\n        permissions: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Has permission\n         */\n        hasPermission: PropTypes.bool.isRequired,\n\n        /**\n         * Invert the permission (used for else)\n         */\n        invert: PropTypes.bool.isRequired,\n\n        /**\n         * Content protected by the permissions gate\n         */\n        children: PropTypes.node.isRequired,\n    };\n\n    render() {\n        if (this.props.hasPermission && !this.props.invert) {\n            return this.props.children;\n        }\n        if (!this.props.hasPermission && this.props.invert) {\n            return this.props.children;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport ChannelPermissionGate from './channel_permission_gate.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    if (!ownProps.channelId || ownProps.teamId === null || typeof ownProps.teamId === 'undefined') {\n        return {hasPermission: false};\n    }\n\n    for (const permission of ownProps.permissions) {\n        if (haveIChannelPermission(state, {channel: ownProps.channelId, team: ownProps.teamId, permission})) {\n            return {hasPermission: true};\n        }\n    }\n\n    return {hasPermission: false};\n}\n\nexport default connect(mapStateToProps)(ChannelPermissionGate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport {showGetPostLinkModal} from 'actions/global_actions.jsx';\nimport {Locations, ModalIdentifiers, Constants} from 'utils/constants';\nimport DeletePostModal from 'components/delete_post_modal';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport DelayedAction from 'utils/delayed_action';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\n\nimport Pluggable from 'plugins/pluggable';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nconst MENU_BOTTOM_MARGIN = 80;\n\nexport const PLUGGABLE_COMPONENT = 'PostDropdownMenuItem';\n\nexport default class DotMenu extends React.PureComponent {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n        teamId: PropTypes.string,\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT, Locations.SEARCH]).isRequired,\n        commentCount: PropTypes.number,\n        isFlagged: PropTypes.bool,\n        handleCommentClick: PropTypes.func,\n        handleDropdownOpened: PropTypes.func,\n        handleAddReactionClick: PropTypes.func,\n        isReadOnly: PropTypes.bool,\n        pluginMenuItems: PropTypes.arrayOf(PropTypes.object),\n        isLicensed: PropTypes.bool.isRequired,\n        postEditTimeLimit: PropTypes.string.isRequired,\n        enableEmojiPicker: PropTypes.bool.isRequired,\n        channelIsArchived: PropTypes.bool.isRequired,\n\n        /*\n         * Components for overriding provided by plugins\n         */\n        components: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function flag the post\n             */\n            flagPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to unflag the post\n             */\n            unflagPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to set the editing post\n             */\n            setEditingPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to pin the post\n             */\n            pinPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to unpin the post\n             */\n            unpinPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to open a modal\n             */\n            openModal: PropTypes.func.isRequired,\n\n            /*\n             * Function to set the unread mark at given post\n             */\n            markPostAsUnread: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        post: {},\n        commentCount: 0,\n        isFlagged: false,\n        isReadOnly: false,\n        pluginMenuItems: [],\n        location: Locations.CENTER,\n        enableEmojiPicker: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.editDisableAction = new DelayedAction(this.handleEditDisable);\n\n        this.state = {\n            openUp: false,\n            width: 0,\n        };\n\n        this.buttonRef = React.createRef();\n    }\n\n    disableCanEditPostByTime() {\n        const {post, isLicensed, postEditTimeLimit} = this.props;\n        const canEdit = PostUtils.canEditPost(post);\n\n        if (canEdit && isLicensed) {\n            if (String(postEditTimeLimit) !== String(Constants.UNSET_POST_EDIT_TIME_LIMIT)) {\n                const milliseconds = 1000;\n                const timeLeft = (post.create_at + (postEditTimeLimit * milliseconds)) - Utils.getTimestamp();\n                if (timeLeft > 0) {\n                    this.editDisableAction.fireAfter(timeLeft + milliseconds);\n                }\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.disableCanEditPostByTime();\n    }\n\n    static getDerivedStateFromProps(props) {\n        return {\n            canDelete: PostUtils.canDeletePost(props.post) && !props.isReadOnly,\n            canEdit: PostUtils.canEditPost(props.post) && !props.isReadOnly,\n        };\n    }\n\n    componentWillUnmount() {\n        this.editDisableAction.cancel();\n    }\n\n    handleEditDisable = () => {\n        this.setState({canEdit: false});\n    }\n\n    handleFlagMenuItemActivated = () => {\n        if (this.props.isFlagged) {\n            this.props.actions.unflagPost(this.props.post.id);\n        } else {\n            this.props.actions.flagPost(this.props.post.id);\n        }\n    }\n\n    // listen to clicks/taps on add reaction menu item and pass to parent handler\n    handleAddReactionMenuItemActivated = (e) => {\n        e.preventDefault();\n\n        // to be safe, make sure the handler function has been defined\n        if (this.props.handleAddReactionClick) {\n            this.props.handleAddReactionClick();\n        }\n    }\n\n    handlePermalinkMenuItemActivated = (e) => {\n        e.preventDefault();\n        showGetPostLinkModal(this.props.post);\n    }\n\n    handlePinMenuItemActivated = () => {\n        if (this.props.post.is_pinned) {\n            this.props.actions.unpinPost(this.props.post.id);\n        } else {\n            this.props.actions.pinPost(this.props.post.id);\n        }\n    }\n\n    handleUnreadMenuItemActivated = (e) => {\n        e.preventDefault();\n        this.props.actions.markPostAsUnread(this.props.post);\n    }\n\n    handleDeleteMenuItemActivated = (e) => {\n        e.preventDefault();\n\n        const deletePostModalData = {\n            ModalId: ModalIdentifiers.DELETE_POST,\n            dialogType: DeletePostModal,\n            dialogProps: {\n                post: this.props.post,\n                commentCount: this.props.commentCount,\n                isRHS: this.props.location === Locations.RHS_ROOT || this.props.location === Locations.RHS_COMMENT,\n            },\n        };\n\n        this.props.actions.openModal(deletePostModalData);\n    }\n\n    handleEditMenuItemActivated = () => {\n        this.props.actions.setEditingPost(\n            this.props.post.id,\n            this.props.commentCount,\n            this.props.location === Locations.CENTER ? 'post_textbox' : 'reply_textbox',\n            this.props.post.root_id ? Utils.localizeMessage('rhs_comment.comment', 'Comment') : Utils.localizeMessage('create_post.post', 'Post'),\n            this.props.location === Locations.RHS_ROOT || this.props.location === Locations.RHS_COMMENT,\n        );\n    }\n\n    tooltip = (\n        <Tooltip\n            id='dotmenu-icon-tooltip'\n            className='hidden-xs'\n        >\n            <FormattedMessage\n                id='post_info.dot_menu.tooltip.more_actions'\n                defaultMessage='More Actions'\n            />\n        </Tooltip>\n    )\n\n    refCallback = (menuRef) => {\n        if (menuRef) {\n            const rect = menuRef.rect();\n            const buttonRect = this.buttonRef.current.getBoundingClientRect();\n            const y = typeof buttonRect.y === 'undefined' ? buttonRect.top : buttonRect.y;\n            const windowHeight = window.innerHeight;\n\n            const totalSpace = windowHeight - MENU_BOTTOM_MARGIN;\n            const spaceOnTop = y - Constants.CHANNEL_HEADER_HEIGHT;\n            const spaceOnBottom = (totalSpace - (spaceOnTop + Constants.POST_AREA_HEIGHT));\n\n            this.setState({\n                openUp: (spaceOnTop > spaceOnBottom),\n                width: rect.width,\n            });\n        }\n    }\n\n    renderDivider = (suffix) => {\n        return (\n            <li\n                id={`divider_post_${this.props.post.id}_${suffix}`}\n                className='MenuItem__divider'\n                role='menuitem'\n            />\n        );\n    }\n\n    render() {\n        const isSystemMessage = PostUtils.isSystemMessage(this.props.post);\n        const isMobile = Utils.isMobile();\n\n        const pluginItems = this.props.pluginMenuItems.\n            filter((item) => {\n                return item.filter ? item.filter(this.props.post.id) : item;\n            }).\n            map((item) => {\n                if (item.subMenu) {\n                    return (\n                        <Menu.ItemSubMenu\n                            key={item.id + '_pluginmenuitem'}\n                            id={item.text.id}\n                            postId={this.props.post.id}\n                            text={item.text}\n                            subMenu={item.subMenu}\n                            action={item.action}\n                            xOffset={this.state.width}\n                            root={true}\n                        />\n                    );\n                }\n                return (\n                    <Menu.ItemAction\n                        key={item.id + '_pluginmenuitem'}\n                        text={item.text}\n                        onClick={() => {\n                            if (item.action) {\n                                item.action(this.props.post.id);\n                            }\n                        }}\n                    />\n                );\n            });\n\n        if (!this.state.canDelete && !this.state.canEdit && pluginItems.length === 0 && isSystemMessage) {\n            return null;\n        }\n\n        return (\n            <MenuWrapper onToggle={this.props.handleDropdownOpened}>\n                <OverlayTrigger\n                    className='hidden-xs'\n                    delayShow={500}\n                    placement='top'\n                    overlay={this.tooltip}\n                    rootClose={true}\n                >\n                    <button\n                        ref={this.buttonRef}\n                        id={`${this.props.location}_button_${this.props.post.id}`}\n                        aria-label={Utils.localizeMessage('post_info.dot_menu.tooltip.more_actions', 'More Actions').toLowerCase()}\n                        className='post__dropdown color--link style--none'\n                        type='button'\n                        aria-expanded='false'\n                    />\n                </OverlayTrigger>\n                <Menu\n                    id={`${this.props.location}_dropdown_${this.props.post.id}`}\n                    openLeft={true}\n                    openUp={this.state.openUp}\n                    ref={this.refCallback}\n                    ariaLabel={Utils.localizeMessage('post_info.menuAriaLabel', 'Post extra options')}\n                >\n                    <Menu.ItemAction\n                        show={!isSystemMessage && this.props.location === Locations.CENTER}\n                        text={Utils.localizeMessage('post_info.reply', 'Reply')}\n                        onClick={this.props.handleCommentClick}\n                    />\n                    <ChannelPermissionGate\n                        channelId={this.props.post.channel_id}\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.ADD_REACTION]}\n                    >\n                        <Menu.ItemAction\n                            show={isMobile && !isSystemMessage && !this.props.isReadOnly && this.props.enableEmojiPicker}\n                            text={Utils.localizeMessage('rhs_root.mobile.add_reaction', 'Add Reaction')}\n                            onClick={this.handleAddReactionMenuItemActivated}\n                        />\n                    </ChannelPermissionGate>\n                    <Menu.ItemAction\n                        id={`unread_post_${this.props.post.id}`}\n                        show={!isSystemMessage && !this.props.channelIsArchived && this.props.location !== Locations.SEARCH}\n                        text={Utils.localizeMessage('post_info.unread', 'Mark as Unread')}\n                        onClick={this.handleUnreadMenuItemActivated}\n                    />\n                    <Menu.ItemAction\n                        id={`permalink_${this.props.post.id}`}\n                        show={!isSystemMessage}\n                        text={Utils.localizeMessage('post_info.permalink', 'Permalink')}\n                        onClick={this.handlePermalinkMenuItemActivated}\n                    />\n                    <Menu.ItemAction\n                        show={isMobile && !isSystemMessage && this.props.isFlagged}\n                        text={Utils.localizeMessage('rhs_root.mobile.unflag', 'Unflag')}\n                        onClick={this.handleFlagMenuItemActivated}\n                    />\n                    <Menu.ItemAction\n                        show={isMobile && !isSystemMessage && !this.props.isFlagged}\n                        text={Utils.localizeMessage('rhs_root.mobile.flag', 'Flag')}\n                        onClick={this.handleFlagMenuItemActivated}\n                    />\n                    <Menu.ItemAction\n                        id={`unpin_post_${this.props.post.id}`}\n                        show={!isSystemMessage && !this.props.isReadOnly && this.props.post.is_pinned}\n                        text={Utils.localizeMessage('post_info.unpin', 'Unpin')}\n                        onClick={this.handlePinMenuItemActivated}\n                    />\n                    <Menu.ItemAction\n                        id={`pin_post_${this.props.post.id}`}\n                        show={!isSystemMessage && !this.props.isReadOnly && !this.props.post.is_pinned}\n                        text={Utils.localizeMessage('post_info.pin', 'Pin')}\n                        onClick={this.handlePinMenuItemActivated}\n                    />\n                    {!isSystemMessage && (this.state.canEdit || this.state.canDelete) && this.renderDivider('edit')}\n                    <Menu.ItemAction\n                        id={`edit_post_${this.props.post.id}`}\n                        show={this.state.canEdit}\n                        text={Utils.localizeMessage('post_info.edit', 'Edit')}\n                        onClick={this.handleEditMenuItemActivated}\n                    />\n                    <Menu.ItemAction\n                        id={`delete_post_${this.props.post.id}`}\n                        show={this.state.canDelete}\n                        text={Utils.localizeMessage('post_info.del', 'Delete')}\n                        onClick={this.handleDeleteMenuItemActivated}\n                        isDangerous={true}\n                    />\n                    {(pluginItems.length > 0 || this.props.components[PLUGGABLE_COMPONENT]) && this.renderDivider('plugins')}\n                    {pluginItems}\n                    <Pluggable\n                        postId={this.props.post.id}\n                        pluggableName={PLUGGABLE_COMPONENT}\n                    />\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {openModal} from 'actions/views/modals';\nimport {\n    flagPost,\n    unflagPost,\n    pinPost,\n    unpinPost,\n    setEditingPost,\n    markPostAsUnread,\n} from 'actions/post_actions.jsx';\n\nimport {isArchivedChannel} from 'utils/channel_utils';\n\nimport DotMenu from './dot_menu.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const channel = getChannel(state, ownProps.post.channel_id);\n\n    return {\n        channelIsArchived: isArchivedChannel(channel),\n        components: state.plugins.components,\n        postEditTimeLimit: getConfig(state).PostEditTimeLimit,\n        isLicensed: getLicense(state).IsLicensed === 'true',\n        teamId: getCurrentTeamId(state),\n        pluginMenuItems: state.plugins.components.PostDropdownMenu,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            flagPost,\n            unflagPost,\n            setEditingPost,\n            pinPost,\n            unpinPost,\n            openModal,\n            markPostAsUnread,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DotMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DownloadIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.download'\n                    defaultMessage='Download Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='40px'\n                            height='40px'\n                            viewBox='0 0 42 42'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='inherit'\n                                strokeWidth='1'\n                                fill='none'\n                                fillRule='evenodd'\n                            >\n                                <g transform='translate(-986.000000, -1142.000000)'>\n                                    <g transform='translate(50.000000, 1034.000000)'>\n                                        <g transform='translate(539.000000, 54.000000)'>\n                                            <g transform='translate(398.000000, 55.000000)'>\n                                                <g\n                                                    transform='translate(11.000000, 11.000000)'\n                                                    fillRule='nonzero'\n                                                    fill='inherit'\n                                                >\n                                                    <path d='M8.7345,14.1405 C8.74725,14.1525 8.763,14.15775 8.7765,14.16825 C8.802,14.18775 8.82675,14.20875 8.85675,14.22075 C8.9025,14.24025 8.95125,14.25 9,14.25 C9.04875,14.25 9.0975,14.24025 9.14325,14.22075 C9.18975,14.20125 9.23175,14.17275 9.267,14.1375 L13.764,9.6405 C13.91025,9.49425 13.91025,9.2565 13.764,9.11025 C13.61775,8.964 13.38,8.964 13.23375,9.11025 L9.375,12.969 L9.375,0.375 C9.375,0.168 9.207,0 9,0 C8.793,0 8.625,0.168 8.625,0.375 L8.625,12.9705 L4.76475,9.11025 C4.6185,8.964 4.38075,8.964 4.2345,9.11025 C4.08825,9.2565 4.08825,9.49425 4.2345,9.6405 L8.7345,14.1405 Z M17.25,13.5 C17.043,13.5 16.875,13.668 16.875,13.875 L16.875,17.25 L1.125,17.25 L1.125,13.875 C1.125,13.668 0.957,13.5 0.75,13.5 C0.543,13.5 0.375,13.668 0.375,13.875 L0.375,17.625 C0.375,17.832 0.543,18 0.75,18 L17.25,18 C17.457,18 17.625,17.832 17.625,17.625 L17.625,13.875 C17.625,13.668 17.457,13.5 17.25,13.5 Z'/>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getFileThumbnailUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport Constants, {FileTypes} from 'utils/constants';\nimport {\n    getFileType,\n    getIconClassName,\n    isGIFImage,\n} from 'utils/utils.jsx';\n\nexport default class FileThumbnail extends React.PureComponent {\n    static propTypes = {\n        enableSVGs: PropTypes.bool.isRequired,\n        fileInfo: PropTypes.object.isRequired,\n    }\n\n    render() {\n        const {fileInfo} = this.props;\n        const type = getFileType(fileInfo.extension);\n\n        let thumbnail;\n        if (type === FileTypes.IMAGE) {\n            let className = 'post-image';\n\n            if (fileInfo.width < Constants.THUMBNAIL_WIDTH && fileInfo.height < Constants.THUMBNAIL_HEIGHT) {\n                className += ' small';\n            } else {\n                className += ' normal';\n            }\n\n            let thumbnailUrl = getFileThumbnailUrl(fileInfo.id);\n            if (isGIFImage(fileInfo.extension) && !fileInfo.has_preview_image) {\n                thumbnailUrl = getFileUrl(fileInfo.id);\n            }\n\n            return (\n                <div\n                    className={className}\n                    style={{\n                        backgroundImage: `url(${thumbnailUrl})`,\n                        backgroundSize: 'cover',\n                    }}\n                />\n            );\n        } else if (fileInfo.extension === FileTypes.SVG && this.props.enableSVGs) {\n            thumbnail = (\n                <img\n                    alt={'file thumbnail image'}\n                    className='post-image normal'\n                    src={getFileUrl(fileInfo.id)}\n                />\n            );\n        } else {\n            thumbnail = <div className={'file-icon ' + getIconClassName(type)}/>;\n        }\n\n        return thumbnail;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport FileThumbnail from './file_thumbnail';\n\nfunction mapStateToProps(state) {\n    return {\n        enableSVGs: getConfig(state).EnableSVGs === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(FileThumbnail);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getFileThumbnailUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport {FileTypes} from 'utils/constants';\nimport {\n    trimFilename,\n} from 'utils/file_utils';\nimport {\n    fileSizeToString,\n    getFileType,\n    loadImage,\n    localizeMessage,\n} from 'utils/utils.jsx';\n\nimport DownloadIcon from 'components/widgets/icons/download_icon';\n\nimport FilenameOverlay from './filename_overlay.jsx';\nimport FileThumbnail from './file_thumbnail';\n\nexport default class FileAttachment extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * File detailed information\n         */\n        fileInfo: PropTypes.object.isRequired,\n\n        /*\n         * The index of this attachment preview in the parent FileAttachmentList\n         */\n        index: PropTypes.number.isRequired,\n\n        /*\n         * Handler for when the thumbnail is clicked passed the index above\n         */\n        handleImageClick: PropTypes.func,\n\n        /*\n         * Display in compact format\n         */\n        compactDisplay: PropTypes.bool,\n\n        canDownloadFiles: PropTypes.bool,\n        enableSVGs: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loaded: getFileType(props.fileInfo.extension) !== FileTypes.IMAGE,\n            fileInfo: props.fileInfo,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.loadFiles();\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.fileInfo.id !== prevState.fileInfo.id) {\n            const extension = nextProps.fileInfo.extension;\n\n            return {\n                loaded: getFileType(extension) !== FileTypes.IMAGE && !(nextProps.enableSVGs && extension === FileTypes.SVG),\n                fileInfo: nextProps.fileInfo,\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.state.loaded && this.props.fileInfo.id !== prevProps.fileInfo.id) {\n            this.loadFiles();\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    loadFiles = () => {\n        const fileInfo = this.props.fileInfo;\n        const fileType = getFileType(fileInfo.extension);\n\n        if (fileType === FileTypes.IMAGE) {\n            const thumbnailUrl = getFileThumbnailUrl(fileInfo.id);\n\n            loadImage(thumbnailUrl, this.handleImageLoaded);\n        } else if (fileInfo.extension === FileTypes.SVG && this.props.enableSVGs) {\n            loadImage(getFileUrl(fileInfo.id), this.handleImageLoaded);\n        }\n    }\n\n    handleImageLoaded = () => {\n        if (this.mounted) {\n            this.setState({\n                loaded: true,\n            });\n        }\n    }\n\n    onAttachmentClick = (e) => {\n        e.preventDefault();\n        e.target.blur();\n        if (this.props.handleImageClick) {\n            this.props.handleImageClick(this.props.index);\n        }\n    }\n\n    render() {\n        const {\n            compactDisplay,\n            fileInfo,\n        } = this.props;\n\n        const trimmedFilename = trimFilename(fileInfo.name);\n        let fileThumbnail;\n        let fileDetail;\n        const ariaLabelImage = `${localizeMessage('file_attachment.thumbnail', 'file thumbnail')} ${fileInfo.name}`.toLowerCase();\n\n        if (!compactDisplay) {\n            fileThumbnail = (\n                <a\n                    aria-label={ariaLabelImage}\n                    className='post-image__thumbnail'\n                    href='#'\n                    onClick={this.onAttachmentClick}\n                >\n                    {this.state.loaded ? (\n                        <FileThumbnail fileInfo={fileInfo}/>\n                    ) : (\n                        <div className='post-image__load'/>\n                    )}\n                </a>\n            );\n\n            fileDetail = (\n                <div\n                    className='post-image__detail_wrapper'\n                    onClick={this.onAttachmentClick}\n                >\n                    <div className='post-image__detail'>\n                        <span className={'post-image__name'}>\n                            {trimmedFilename}\n                        </span>\n                        <span className='post-image__type'>{fileInfo.extension.toUpperCase()}</span>\n                        <span className='post-image__size'>{fileSizeToString(fileInfo.size)}</span>\n                    </div>\n                </div>\n            );\n        }\n\n        let filenameOverlay;\n        if (this.props.canDownloadFiles) {\n            filenameOverlay = (\n                <FilenameOverlay\n                    fileInfo={fileInfo}\n                    compactDisplay={compactDisplay}\n                    canDownload={this.props.canDownloadFiles}\n                    handleImageClick={this.onAttachmentClick}\n                    iconClass={'post-image__download'}\n                >\n                    <DownloadIcon/>\n                </FilenameOverlay>\n            );\n        }\n\n        return (\n            <div className='post-image__column'>\n                {fileThumbnail}\n                <div className='post-image__details'>\n                    {fileDetail}\n                    {filenameOverlay}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {canDownloadFiles} from 'utils/file_utils.jsx';\n\nimport FileAttachment from './file_attachment.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n        enableSVGs: config.EnableSVGs === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(FileAttachment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getFilePreviewUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport SizeAwareImage from 'components/size_aware_image';\nimport {FileTypes} from 'utils/constants';\nimport {\n    getFileType,\n} from 'utils/utils';\n\nimport ViewImageModal from 'components/view_image';\n\nconst PREVIEW_IMAGE_MIN_DIMENSION = 50;\n\nexport default class SingleImageView extends React.PureComponent {\n    static propTypes = {\n        postId: PropTypes.string.isRequired,\n        fileInfo: PropTypes.object.isRequired,\n        isRhsOpen: PropTypes.bool.isRequired,\n        compactDisplay: PropTypes.bool,\n        isEmbedVisible: PropTypes.bool,\n        actions: PropTypes.shape({\n            toggleEmbedVisibility: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        fileInfo: {},\n        compactDisplay: false\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            showPreviewModal: false,\n            dimensions: {\n                width: props.fileInfo.width,\n                height: props.fileInfo.height,\n            },\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if ((props.fileInfo.width !== state.dimensions.width) || props.fileInfo.height !== state.dimensions.height) {\n            return {\n                dimensions: {\n                    width: props.fileInfo.width,\n                    height: props.fileInfo.height,\n                },\n            };\n        }\n        return null;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    imageLoaded = () => {\n        if (this.mounted) {\n            this.setState({loaded: true});\n        }\n    }\n\n    handleImageClick = (e) => {\n        e.preventDefault();\n        this.setState({showPreviewModal: true});\n    }\n\n    showPreviewModal = () => {\n        this.setState({showPreviewModal: false});\n    }\n\n    toggleEmbedVisibility = () => {\n        this.props.actions.toggleEmbedVisibility(this.props.postId);\n    }\n\n    render() {\n        const {fileInfo, compactDisplay} = this.props;\n        const {\n            loaded,\n        } = this.state;\n\n        const {has_preview_image: hasPreviewImage, id} = fileInfo;\n        const fileURL = getFileUrl(id);\n        const previewURL = hasPreviewImage ? getFilePreviewUrl(id) : fileURL;\n\n        const previewHeight = fileInfo.height;\n        const previewWidth = fileInfo.width;\n\n        let minPreviewClass = '';\n        if (\n            previewWidth < PREVIEW_IMAGE_MIN_DIMENSION ||\n            previewHeight < PREVIEW_IMAGE_MIN_DIMENSION\n        ) {\n            minPreviewClass = 'min-preview ';\n\n            if (previewHeight > previewWidth) {\n                minPreviewClass += 'min-preview--portrait ';\n            }\n        }\n\n        // Add compact display class to image class if in compact mode\n        if (compactDisplay) {\n            minPreviewClass += ' compact-display';\n        }\n\n        const toggle = (\n            <button\n                key='toggle'\n                className='style--none post__embed-visibility color--link'\n                data-expanded={this.props.isEmbedVisible}\n                aria-label='Toggle Embed Visibility'\n                onClick={this.toggleEmbedVisibility}\n            />\n        );\n\n        let imageNameClass = 'image-name';\n        if (compactDisplay) {\n            imageNameClass += ' compact-display';\n        }\n\n        const fileHeader = (\n            <div\n                data-testid='image-name'\n                className={imageNameClass}\n            >\n                {toggle}\n                <div\n                    onClick={this.handleImageClick}\n                >\n                    {fileInfo.name}\n                </div>\n            </div>\n        );\n\n        let viewImageModal;\n        let fadeInClass = '';\n\n        const fileType = getFileType(fileInfo.extension);\n        let styleIfSvgWithDimensions = {};\n        let imageContainerStyle = {};\n        let svgClass = '';\n        if (fileType === FileTypes.SVG) {\n            svgClass = 'svg';\n            if (this.state.dimensions.height) {\n                styleIfSvgWithDimensions = {\n                    width: '100%',\n                };\n            } else {\n                imageContainerStyle = {\n                    height: 350,\n                    maxWidth: '100%',\n                };\n            }\n        }\n\n        if (loaded) {\n            viewImageModal = (\n                <ViewImageModal\n                    show={this.state.showPreviewModal}\n                    onModalDismissed={this.showPreviewModal}\n                    fileInfos={[fileInfo]}\n                    postId={this.props.postId}\n                />\n            );\n\n            fadeInClass = 'image-fade-in';\n        }\n\n        return (\n            <div\n                className={`${'file-view--single'}`}\n            >\n                <div\n                    className='file__image'\n                >\n                    {fileHeader}\n                    {this.props.isEmbedVisible &&\n                    <div\n                        className='image-container'\n                        style={imageContainerStyle}\n                    >\n                        <div\n                            className={`image-loaded ${fadeInClass} ${svgClass}`}\n                            style={styleIfSvgWithDimensions}\n                        >\n                            <SizeAwareImage\n                                onClick={this.handleImageClick}\n                                className={minPreviewClass}\n                                src={previewURL}\n                                dimensions={this.state.dimensions}\n                                fileInfo={this.props.fileInfo}\n                                onImageLoaded={this.imageLoaded}\n                                showLoader={this.props.isEmbedVisible}\n                                handleSmallImageContainer={true}\n                            />\n                        </div>\n                    </div>\n                    }\n                    {viewImageModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {toggleEmbedVisibility} from 'actions/post_actions';\n\nimport {getIsRhsOpen} from 'selectors/rhs';\n\nimport SingleImageView from 'components/single_image_view/single_image_view.jsx';\n\nfunction mapStateToProps(state) {\n    const isRhsOpen = getIsRhsOpen(state);\n\n    return {\n        isRhsOpen,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            toggleEmbedVisibility,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleImageView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {sortFileInfos} from 'mattermost-redux/utils/file_utils';\n\nimport {FileTypes} from 'utils/constants';\nimport {getFileType} from 'utils/utils';\n\nimport FileAttachment from 'components/file_attachment';\nimport SingleImageView from 'components/single_image_view';\nimport ViewImageModal from 'components/view_image';\n\nexport default class FileAttachmentList extends React.Component {\n    static propTypes = {\n\n        /*\n         * The post the files are attached to\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The number of files attached to the post\n         */\n        fileCount: PropTypes.number.isRequired,\n\n        /*\n         * Sorted array of metadata for each file attached to the post\n         */\n        fileInfos: PropTypes.arrayOf(PropTypes.object),\n\n        compactDisplay: PropTypes.bool,\n        enableSVGs: PropTypes.bool,\n        isEmbedVisible: PropTypes.bool,\n        locale: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showPreviewModal: false, startImgIndex: 0};\n    }\n\n    handleImageClick = (indexClicked) => {\n        this.setState({showPreviewModal: true, startImgIndex: indexClicked});\n    }\n\n    hidePreviewModal = () => {\n        this.setState({showPreviewModal: false});\n    }\n\n    render() {\n        const {\n            compactDisplay,\n            enableSVGs,\n            fileInfos,\n            fileCount,\n            locale,\n        } = this.props;\n\n        if (fileInfos && fileInfos.length === 1) {\n            const fileType = getFileType(fileInfos[0].extension);\n\n            if (fileType === FileTypes.IMAGE || (fileType === FileTypes.SVG && enableSVGs)) {\n                return (\n                    <SingleImageView\n                        fileInfo={fileInfos[0]}\n                        isEmbedVisible={this.props.isEmbedVisible}\n                        postId={this.props.post.id}\n                        compactDisplay={compactDisplay}\n                    />\n                );\n            }\n        } else if (fileCount === 1 && this.props.isEmbedVisible) {\n            return (\n                <div style={style.minHeightPlaceholder}/>\n            );\n        }\n\n        const sortedFileInfos = sortFileInfos(fileInfos, locale);\n        const postFiles = [];\n        if (sortedFileInfos && sortedFileInfos.length > 0) {\n            for (let i = 0; i < sortedFileInfos.length; i++) {\n                const fileInfo = sortedFileInfos[i];\n                postFiles.push(\n                    <FileAttachment\n                        key={fileInfo.id}\n                        fileInfo={sortedFileInfos[i]}\n                        index={i}\n                        handleImageClick={this.handleImageClick}\n                        compactDisplay={compactDisplay}\n                    />\n                );\n            }\n        } else if (fileCount > 0) {\n            for (let i = 0; i < fileCount; i++) {\n                // Add a placeholder to avoid pop-in once we get the file infos for this post\n                postFiles.push(\n                    <div\n                        key={`fileCount-${i}`}\n                        className='post-image__column post-image__column--placeholder'\n                    />\n                );\n            }\n        }\n\n        return (\n            <React.Fragment>\n                <div\n                    data-testid='fileAttachmentList'\n                    className='post-image__columns clearfix'\n                >\n                    {postFiles}\n                </div>\n                <ViewImageModal\n                    show={this.state.showPreviewModal}\n                    onModalDismissed={this.hidePreviewModal}\n                    startIndex={this.state.startImgIndex}\n                    fileInfos={sortedFileInfos}\n                    postId={this.props.post.id}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nconst style = {\n    minHeightPlaceholder: {minHeight: '385px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {makeGetFilesForPost} from 'mattermost-redux/selectors/entities/files';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport FileAttachmentList from './file_attachment_list.jsx';\n\nfunction makeMapStateToProps() {\n    const selectFilesForPost = makeGetFilesForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        const postId = ownProps.post ? ownProps.post.id : '';\n        const fileInfos = selectFilesForPost(state, postId);\n\n        let fileCount = 0;\n        if (ownProps.post.metadata && ownProps.post.metadata.files) {\n            fileCount = (ownProps.post.metadata.files || []).length;\n        } else if (ownProps.post.file_ids) {\n            fileCount = ownProps.post.file_ids.length;\n        } else if (ownProps.post.filenames) {\n            fileCount = ownProps.post.filenames.length;\n        }\n\n        return {\n            enableSVGs: getConfig(state).EnableSVGs === 'true',\n            fileInfos,\n            fileCount,\n            isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n            locale: getCurrentLocale(state),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(FileAttachmentList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ProfilePicture from 'components/profile_picture';\nimport MattermostLogo from 'components/widgets/icons/mattermost_logo';\n\nimport Constants, {UserStatuses} from 'utils/constants';\nimport * as PostUtils from 'utils/post_utils';\nimport * as Utils from 'utils/utils';\n\nexport default class PostProfilePicture extends React.PureComponent {\n    static propTypes = {\n        compactDisplay: PropTypes.bool.isRequired,\n        enablePostIconOverride: PropTypes.bool.isRequired,\n        hasImageProxy: PropTypes.bool.isRequired,\n        isBusy: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        post: PropTypes.object.isRequired,\n        status: PropTypes.string,\n        user: PropTypes.object,\n        isBot: PropTypes.bool,\n        postIconOverrideURL: PropTypes.string,\n    };\n\n    static defaultProps = {\n        status: UserStatuses.OFFLINE,\n    };\n\n    getProfilePictureURL = () => {\n        const {post, user} = this.props;\n\n        if (user && user.id === post.user_id) {\n            return Utils.imageURLForUser(user);\n        } else if (post.user_id) {\n            return Utils.imageURLForUser(post.user_id);\n        }\n\n        return '';\n    };\n\n    getStatus = (fromAutoResponder, fromWebhook, user) => {\n        if (fromAutoResponder || fromWebhook || (user && user.is_bot)) {\n            return '';\n        }\n\n        return this.props.status;\n    };\n\n    getPostIconURL = (defaultURL, fromAutoResponder, fromWebhook) => {\n        const {enablePostIconOverride, hasImageProxy, post} = this.props;\n        const postProps = post.props;\n        let postIconOverrideURL = '';\n        let useUserIcon = '';\n        if (postProps) {\n            postIconOverrideURL = postProps.override_icon_url;\n            useUserIcon = postProps.use_user_icon;\n        }\n\n        if (this.props.compactDisplay) {\n            return '';\n        }\n\n        if (!fromAutoResponder && fromWebhook && !useUserIcon && enablePostIconOverride) {\n            if (postIconOverrideURL && postIconOverrideURL !== '') {\n                return PostUtils.getImageSrc(postIconOverrideURL, hasImageProxy);\n            }\n\n            return Constants.DEFAULT_WEBHOOK_LOGO;\n        }\n\n        return defaultURL;\n    };\n\n    render() {\n        const {\n            compactDisplay,\n            isBusy,\n            isRHS,\n            post,\n            user,\n            isBot,\n        } = this.props;\n\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromWebhook = PostUtils.isFromWebhook(post);\n\n        if (isSystemMessage && !compactDisplay && !fromWebhook && !isBot) {\n            return <MattermostLogo className='icon'/>;\n        }\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n\n        const hasMention = !fromAutoResponder && !fromWebhook;\n        const profileSrc = this.getProfilePictureURL();\n        const src = this.getPostIconURL(profileSrc, fromAutoResponder, fromWebhook);\n\n        const overrideIconEmoji = post.props ? post.props.override_icon_emoji : '';\n        const isEmoji = typeof overrideIconEmoji == 'string' && overrideIconEmoji !== '';\n        const status = this.getStatus(fromAutoResponder, fromWebhook, user);\n\n        return (\n            <ProfilePicture\n                hasMention={hasMention}\n                isBusy={isBusy}\n                isRHS={isRHS}\n                size='lg'\n                src={src}\n                profileSrc={profileSrc}\n                isEmoji={isEmoji}\n                status={status}\n                userId={user ? user.id : null}\n                username={user ? user.username : null}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport PostProfilePicture from './post_profile_picture';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const user = getUser(state, ownProps.userId);\n\n    return {\n        enablePostIconOverride: config.EnablePostIconOverride === 'true',\n        hasImageProxy: config.HasImageProxy === 'true',\n        status: getStatusForUserId(state, ownProps.userId),\n        isBot: Boolean(user && user.is_bot),\n        user,\n    };\n}\n\nexport default connect(mapStateToProps)(PostProfilePicture);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class FailedPostOptions extends React.PureComponent {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            createPost: PropTypes.func.isRequired,\n            removePost: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    retryPost = (e) => {\n        e.preventDefault();\n\n        const post = {...this.props.post};\n        Reflect.deleteProperty(post, 'id');\n        this.props.actions.createPost(post);\n    }\n\n    cancelPost = (e) => {\n        e.preventDefault();\n\n        this.props.actions.removePost(this.props.post);\n    }\n\n    render() {\n        return (\n            <span className='pending-post-actions'>\n                <a\n                    className='post-retry'\n                    href='#'\n                    onClick={this.retryPost}\n                >\n                    <FormattedMessage\n                        id='pending_post_actions.retry'\n                        defaultMessage='Retry'\n                    />\n                </a>\n                {' - '}\n                <a\n                    className='post-cancel'\n                    href='#'\n                    onClick={this.cancelPost}\n                >\n                    <FormattedMessage\n                        id='pending_post_actions.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </a>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {removePost} from 'mattermost-redux/actions/posts';\n\nimport {createPost} from 'actions/post_actions.jsx';\n\nimport FailedPostOptions from './failed_post_options.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createPost,\n            removePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(FailedPostOptions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class FlagIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.flag'\n                    defaultMessage='Flag Icon'\n                >\n                    {(title) => (\n                        <i className=\"far fa-flag\" title={title}/>\n                        // <svg\n                        //     width='14px'\n                        //     height='14px'\n                        //     viewBox='0 0 16 16'\n                        //     role='img'\n                        //     aria-label={ariaLabel}\n                        // >\n                        //     <g\n                        //         stroke='none'\n                        //         strokeWidth='1'\n                        //         fill='inherit'\n                        //         fillRule='evenodd'\n                        //     >\n                        //         <g\n                        //             transform='translate(-1106.000000, -33.000000)'\n                        //             fillRule='nonzero'\n                        //             fill='inherit'\n                        //         >\n                        //             <g>\n                        //                 <g transform='translate(1096.000000, 22.000000)'>\n                        //                     <g transform='translate(10.000000, 11.000000)'>\n                        //                         <path d='M8,1 L2,1 C2,0.447 1.553,0 1,0 C0.447,0 0,0.447 0,1 L0,15.5 C0,15.776 0.224,16 0.5,16 L1.5,16 C1.776,16 2,15.776 2,15.5 L2,11 L7,11 L7,12 C7,12.553 7.447,13 8,13 L15,13 C15.553,13 16,12.553 16,12 L16,4 C16,3.447 15.553,3 15,3 L9,3 L9,2 C9,1.447 8.553,1 8,1 Z M9,11 L9,9.5 C9,9.224 8.776,9 8.5,9 L2,9 L2,3 L7,3 L7,4.5 C7,4.776 7.224,5 7.5,5 L14,5 L14,11 L9,11 Z'/>\n                        //                     </g>\n                        //                 </g>\n                        //             </g>\n                        //         </g>\n                        //     </g>\n                        // </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class FlagIconFilled extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.flagged'\n                    defaultMessage='Flagged Icon'\n                >\n                    {(title) => (\n                        <i className=\"fas fa-flag\" title={title}/>\n                        // <svg\n                        //     width='16px'\n                        //     height='16px'\n                        //     viewBox='0 0 16 16'\n                        //     role='img'\n                        //     aria-label={ariaLabel}\n                        // >\n                        //     <g\n                        //         stroke='none'\n                        //         strokeWidth='1'\n                        //         fill='inherit'\n                        //         fillRule='evenodd'\n                        //     >\n                        //         <g\n                        //             transform='translate(-1073.000000, -33.000000)'\n                        //             fillRule='nonzero'\n                        //             fill='inherit'\n                        //         >\n                        //             <g transform='translate(-1.000000, 0.000000)'>\n                        //                 <g transform='translate(1064.000000, 22.000000)'>\n                        //                     <g transform='translate(10.000000, 11.000000)'>\n                        //                         <path d='M8,1 L2,1 C2,0.447 1.553,0 1,0 C0.447,0 0,0.447 0,1 L0,15.5 C0,15.776 0.224,16 0.5,16 L1.5,16 C1.776,16 2,15.776 2,15.5 L2,11 L7,11 L7,12 C7,12.553 7.447,13 8,13 L15,13 C15.553,13 16,12.553 16,12 L16,4 C16,3.447 15.553,3 15,3 L9,3 L9,2 C9,1.447 8.553,1 8,1 Z'/>\n                        //                     </g>\n                        //                 </g>\n                        //             </g>\n                        //         </g>\n                        //     </g>\n                        // </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport FlagIcon from 'components/widgets/icons/flag_icon';\nimport FlagIconFilled from 'components/widgets/icons/flag_icon_filled';\nimport Constants, {Locations, A11yCustomEventTypes} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nexport default class PostFlagIcon extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT, Locations.SEARCH]).isRequired,\n        postId: PropTypes.string.isRequired,\n        isFlagged: PropTypes.bool.isRequired,\n        isEphemeral: PropTypes.bool,\n        actions: PropTypes.shape({\n            flagPost: PropTypes.func.isRequired,\n            unflagPost: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        isEphemeral: false,\n        location: Locations.CENTER,\n    };\n\n    constructor() {\n        super();\n\n        this.buttonRef = React.createRef();\n\n        this.state = {\n            a11yActive: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.buttonRef.current) {\n            this.buttonRef.current.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.buttonRef.current.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n    componentWillUnmount() {\n        if (this.buttonRef.current) {\n            this.buttonRef.current.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.buttonRef.current.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.a11yActive && this.buttonRef.current) {\n            this.buttonRef.current.dispatchEvent(new Event(A11yCustomEventTypes.UPDATE));\n        }\n    }\n\n    handlePress = (e) => {\n        e.preventDefault();\n\n        const {\n            actions,\n            isFlagged,\n            postId,\n        } = this.props;\n\n        if (isFlagged) {\n            actions.unflagPost(postId);\n        } else {\n            actions.flagPost(postId);\n        }\n    }\n\n    handleA11yActivateEvent = () => {\n        this.setState({a11yActive: true});\n    }\n\n    handleA11yDeactivateEvent = () => {\n        this.setState({a11yActive: false});\n    }\n\n    render() {\n        if (this.props.isEphemeral) {\n            return null;\n        }\n\n        const isFlagged = this.props.isFlagged;\n\n        const flagVisible = isFlagged ? 'visible' : '';\n\n        let flagIcon;\n        if (isFlagged) {\n            flagIcon = <FlagIconFilled className='icon'/>;\n        } else {\n            flagIcon = <FlagIcon className='icon'/>;\n        }\n\n        return (\n            <button\n                ref={this.buttonRef}\n                id={`${this.props.location}_flagIcon_${this.props.postId}`}\n                aria-label={isFlagged ? localizeMessage('flag_post.unflag', 'Unflag').toLowerCase() : localizeMessage('flag_post.flag', 'Flag for follow up').toLowerCase()}\n                className={'style--none flag-icon__container ' + flagVisible}\n                onClick={this.handlePress}\n            >\n                <OverlayTrigger\n                    key={'flagtooltipkey' + flagVisible}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip id='flagTooltip'>\n                            <FormattedMessage\n                                id={isFlagged ? t('flag_post.unflag') : t('flag_post.flag')}\n                                defaultMessage={isFlagged ? 'Unflag' : 'Flag for follow up'}\n                            />\n                        </Tooltip>\n                    }\n                >\n                    {flagIcon}\n                </OverlayTrigger>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {flagPost, unflagPost} from 'actions/post_actions.jsx';\n\nimport PostFlagIcon from './post_flag_icon';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            flagPost,\n            unflagPost,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(PostFlagIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {isMobile} from 'utils/user_agent';\nimport {Locations} from 'utils/constants';\nimport {isMobile as isMobileView} from 'utils/utils.jsx';\nimport LocalDateTime from 'components/local_date_time';\n\nexport default class PostTime extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * If true, time will be rendered as a permalink to the post\n         */\n        isPermalink: PropTypes.bool.isRequired,\n\n        /*\n         * The time to display\n         */\n        eventTime: PropTypes.number.isRequired,\n\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT, Locations.SEARCH]).isRequired,\n\n        /*\n         * The post id of posting being rendered\n         */\n        postId: PropTypes.string,\n        teamUrl: PropTypes.string,\n    };\n\n    static defaultProps = {\n        eventTime: 0,\n        location: Locations.CENTER,\n    };\n\n    handleClick = () => {\n        if (isMobileView()) {\n            GlobalActions.emitCloseRightHandSide();\n        }\n    };\n\n    render() {\n        const localDateTime = (\n            <LocalDateTime\n                eventTime={this.props.eventTime}\n            />\n        );\n        if (isMobile() || !this.props.isPermalink) {\n            return (\n                <div\n                    role='presentation'\n                    className='post__permalink'\n                >\n                    {localDateTime}\n                </div>\n            );\n        }\n\n        const {\n            location,\n            postId,\n            teamUrl,\n        } = this.props;\n\n        return (\n            <Link\n                id={`${location}_time_${postId}`}\n                to={`${teamUrl}/pl/${postId}`}\n                className='post__permalink'\n                onClick={this.handleClick}\n            >\n                {localDateTime}\n            </Link>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\n\nimport PostTime from './post_time.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        teamUrl: getCurrentRelativeTeamUrl(state),\n    };\n}\n\nexport default connect(mapStateToProps)(PostTime);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport {Locations} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport EmojiIcon from 'components/widgets/icons/emoji_icon';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\n\nconst TOP_OFFSET = -7;\n\nexport default class PostReaction extends React.PureComponent {\n    static propTypes = {\n        channelId: PropTypes.string,\n        postId: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        getDotMenuRef: PropTypes.func.isRequired,\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT]).isRequired,\n        showEmojiPicker: PropTypes.bool.isRequired,\n        toggleEmojiPicker: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            addReaction: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        location: Locations.CENTER,\n        showEmojiPicker: false,\n    };\n\n    handleAddEmoji = (emoji) => {\n        this.setState({showEmojiPicker: false});\n        const emojiName = emoji.name || emoji.aliases[0];\n        this.props.actions.addReaction(this.props.postId, emojiName);\n        this.props.toggleEmojiPicker();\n    };\n\n    render() {\n        const {\n            channelId,\n            location,\n            postId,\n            showEmojiPicker,\n            teamId,\n        } = this.props;\n\n        let spaceRequiredAbove;\n        let spaceRequiredBelow;\n        if (location === Locations.RHS_ROOT || location === Locations.RHS_COMMENT) {\n            spaceRequiredAbove = EmojiPickerOverlay.RHS_SPACE_REQUIRED_ABOVE;\n            spaceRequiredBelow = EmojiPickerOverlay.RHS_SPACE_REQUIRED_BELOW;\n        }\n\n        return (\n            <ChannelPermissionGate\n                channelId={channelId}\n                teamId={teamId}\n                permissions={[Permissions.ADD_REACTION]}\n            >\n                <div>\n                    <EmojiPickerOverlay\n                        show={showEmojiPicker}\n                        target={this.props.getDotMenuRef}\n                        onHide={this.props.toggleEmojiPicker}\n                        onEmojiClose={this.props.toggleEmojiPicker}\n                        onEmojiClick={this.handleAddEmoji}\n                        topOffset={TOP_OFFSET}\n                        spaceRequiredAbove={spaceRequiredAbove}\n                        n={true}\n                        spaceRequiredBelow={spaceRequiredBelow}\n                    />\n                    <OverlayTrigger\n                        className='hidden-xs'\n                        delayShow={500}\n                        placement='top'\n                        overlay={\n                            <Tooltip\n                                id='reaction-icon-tooltip'\n                                className='hidden-xs'\n                            >\n                                <FormattedMessage\n                                    id='post_info.tooltip.add_reactions'\n                                    defaultMessage='Add Reaction'\n                                />\n                            </Tooltip>\n                        }\n                    >\n                        <button\n                            id={`${location}_reaction_${postId}`}\n                            aria-label={localizeMessage('post_info.tooltip.add_reactions', 'Add Reaction').toLowerCase()}\n                            className='reacticon__container color--link style--none'\n                            onClick={this.props.toggleEmojiPicker}\n                        >\n                            <EmojiIcon className='icon icon--emoji'/>\n                        </button>\n                    </OverlayTrigger>\n                </div>\n            </ChannelPermissionGate>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {addReaction} from 'actions/post_actions.jsx';\n\nimport PostReaction from './post_reaction';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addReaction,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(PostReaction);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class Reaction extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the reaction for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The user id of the logged in user\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /*\n         * The name of the emoji for the reaction\n         */\n        emojiName: PropTypes.string.isRequired,\n\n        /*\n         * The number of reactions to this post for this emoji\n         */\n        reactionCount: PropTypes.number.isRequired,\n\n        /*\n         * Array of users who reacted to this post\n         */\n        profiles: PropTypes.array.isRequired,\n\n        /*\n         * The number of users not in the profile list who have reacted with this emoji\n         */\n        otherUsersCount: PropTypes.number.isRequired,\n\n        /*\n         * Array of reactions by user\n         */\n        reactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * True if the user has the permission to add a reaction in this channel\n         */\n        canAddReaction: PropTypes.bool.isRequired,\n\n        /*\n         * True if user has the permission to remove his own reactions in this channel\n         */\n        canRemoveReaction: PropTypes.bool.isRequired,\n\n        /*\n         * The URL of the emoji image\n         */\n        emojiImageUrl: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to add a reaction to a post\n             */\n            addReaction: PropTypes.func.isRequired,\n\n            /*\n             * Function to get non-loaded profiles by id\n             */\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n\n            /*\n             * Function to remove a reaction from a post\n             */\n            removeReaction: PropTypes.func.isRequired,\n        }),\n    }\n\n    handleAddReaction = (e) => {\n        e.preventDefault();\n        const {actions, post, emojiName} = this.props;\n        actions.addReaction(post.id, emojiName);\n    }\n\n    handleRemoveReaction = (e) => {\n        e.preventDefault();\n        this.props.actions.removeReaction(this.props.post.id, this.props.emojiName);\n    }\n\n    loadMissingProfiles = async () => {\n        const ids = this.props.reactions.map((reaction) => reaction.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    getSortedUsers = (getDisplayName) => {\n        // Sort users by who reacted first with \"you\" being first if the current user reacted\n        let currentUserReacted = false;\n        const sortedReactions = this.props.reactions.sort((a, b) => a.create_at - b.create_at);\n        const users = sortedReactions.reduce((accumulator, current) => {\n            if (current.user_id === this.props.currentUserId) {\n                currentUserReacted = true;\n            } else {\n                const user = this.props.profiles.find((u) => u.id === current.user_id);\n                if (user) {\n                    accumulator.push(getDisplayName(user));\n                }\n            }\n            return accumulator;\n        }, []);\n\n        if (currentUserReacted) {\n            users.unshift(Utils.localizeMessage('reaction.you', 'You'));\n        }\n\n        return {currentUserReacted, users};\n    }\n\n    render() {\n        if (!this.props.emojiImageUrl) {\n            return null;\n        }\n\n        const {currentUserReacted, users} = this.getSortedUsers(Utils.getDisplayNameByUser);\n\n        const otherUsersCount = this.props.otherUsersCount;\n        let names;\n        if (otherUsersCount > 0) {\n            if (users.length > 0) {\n                names = (\n                    <FormattedMessage\n                        id='reaction.usersAndOthersReacted'\n                        defaultMessage='{users} and {otherUsers, number} other {otherUsers, plural, one {user} other {users}}'\n                        values={{\n                            users: users.join(', '),\n                            otherUsers: otherUsersCount,\n                        }}\n                    />\n                );\n            } else {\n                names = (\n                    <FormattedMessage\n                        id='reaction.othersReacted'\n                        defaultMessage='{otherUsers, number} {otherUsers, plural, one {user} other {users}}'\n                        values={{\n                            otherUsers: otherUsersCount,\n                        }}\n                    />\n                );\n            }\n        } else if (users.length > 1) {\n            names = (\n                <FormattedMessage\n                    id='reaction.usersReacted'\n                    defaultMessage='{users} and {lastUser}'\n                    values={{\n                        users: users.slice(0, -1).join(', '),\n                        lastUser: users[users.length - 1],\n                    }}\n                />\n            );\n        } else {\n            names = users[0];\n        }\n\n        let reactionVerb;\n        if (users.length + otherUsersCount > 1) {\n            if (currentUserReacted) {\n                reactionVerb = (\n                    <FormattedMessage\n                        id='reaction.reactionVerb.youAndUsers'\n                        defaultMessage='reacted'\n                    />\n                );\n            } else {\n                reactionVerb = (\n                    <FormattedMessage\n                        id='reaction.reactionVerb.users'\n                        defaultMessage='reacted'\n                    />\n                );\n            }\n        } else if (currentUserReacted) {\n            reactionVerb = (\n                <FormattedMessage\n                    id='reaction.reactionVerb.you'\n                    defaultMessage='reacted'\n                />\n            );\n        } else {\n            reactionVerb = (\n                <FormattedMessage\n                    id='reaction.reactionVerb.user'\n                    defaultMessage='reacted'\n                />\n            );\n        }\n\n        const tooltip = (\n            <FormattedMessage\n                id='reaction.reacted'\n                defaultMessage='{users} {reactionVerb} with {emoji}'\n                values={{\n                    users: <b>{names}</b>,\n                    reactionVerb,\n                    emoji: <b>{':' + this.props.emojiName + ':'}</b>,\n                }}\n            />\n        );\n\n        let handleClick;\n        let clickTooltip;\n        let className = 'post-reaction';\n        const emojiNameWithSpaces = this.props.emojiName.replace(/_/g, ' ');\n        let ariaLabelEmoji = `${Utils.localizeMessage('reaction.reactWidth.ariaLabel', 'react with')} ${emojiNameWithSpaces}`;\n        if (currentUserReacted) {\n            if (this.props.canRemoveReaction) {\n                handleClick = this.handleRemoveReaction;\n                ariaLabelEmoji = `${Utils.localizeMessage('reaction.removeReact.ariaLabel', 'remove reaction')} ${emojiNameWithSpaces}`;\n                clickTooltip = (\n                    <FormattedMessage\n                        id='reaction.clickToRemove'\n                        defaultMessage='(click to remove)'\n                    />\n                );\n            } else {\n                className += ' post-reaction--read-only';\n            }\n\n            className += ' post-reaction--current-user';\n        } else if (!currentUserReacted && this.props.canAddReaction) {\n            handleClick = this.handleAddReaction;\n            clickTooltip = (\n                <FormattedMessage\n                    id='reaction.clickToAdd'\n                    defaultMessage='(click to add)'\n                />\n            );\n        } else {\n            className += ' post-reaction--read-only';\n        }\n\n        return (\n            <button\n                id={`postReaction-${this.props.post.id}-${this.props.emojiName}`}\n                aria-label={ariaLabelEmoji}\n                className={`style--none ${className}`}\n                onClick={handleClick}\n            >\n                <OverlayTrigger\n                    delayShow={500}\n                    placement='top'\n                    shouldUpdatePosition={true}\n                    overlay={\n                        <Tooltip id={`${this.props.post.id}-${this.props.emojiName}-reaction`}>\n                            {tooltip}\n                            <br/>\n                            {clickTooltip}\n                        </Tooltip>\n                    }\n                    onEnter={this.loadMissingProfiles}\n                >\n                    <span className='d-flex align-items-center'>\n                        <span\n                            className='post-reaction__emoji emoticon'\n                            style={{backgroundImage: 'url(' + this.props.emojiImageUrl + ')'}}\n                        />\n                        <span\n                            className='post-reaction__count'\n                        >\n                            {this.props.reactionCount}\n                        </span>\n                    </span>\n                </OverlayTrigger>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {removeReaction} from 'mattermost-redux/actions/posts';\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, makeGetProfilesForReactions, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCustomEmojisByName} from 'mattermost-redux/selectors/entities/emojis';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport Constants from 'mattermost-redux/constants/general';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {addReaction} from 'actions/post_actions.jsx';\n\nimport * as Emoji from 'utils/emoji.jsx';\n\nimport Reaction from './reaction.jsx';\n\nfunction makeMapStateToProps() {\n    const getProfilesForReactions = makeGetProfilesForReactions();\n\n    return function mapStateToProps(state, ownProps) {\n        const config = getConfig(state);\n        const license = getLicense(state);\n        const me = getCurrentUser(state);\n\n        const profiles = getProfilesForReactions(state, ownProps.reactions);\n        let emoji;\n        if (Emoji.EmojiIndicesByAlias.has(ownProps.emojiName)) {\n            emoji = Emoji.Emojis[Emoji.EmojiIndicesByAlias.get(ownProps.emojiName)];\n        } else {\n            const emojis = getCustomEmojisByName(state);\n            emoji = emojis.get(ownProps.emojiName);\n        }\n\n        let emojiImageUrl = '';\n        if (emoji) {\n            emojiImageUrl = getEmojiImageUrl(emoji);\n        }\n        const channel = getChannel(state, ownProps.post.channel_id) || {};\n        const channelIsArchived = channel.delete_at !== 0;\n        const teamId = channel.team_id;\n\n        let canAddReaction = false;\n        let canRemoveReaction = false;\n\n        if (!channelIsArchived) {\n            canAddReaction = checkReactionAction(state, teamId, ownProps.post.channel_id, channel.name, config, license, me, Permissions.REMOVE_REACTION);\n            canRemoveReaction = checkReactionAction(state, teamId, ownProps.post.channel_id, channel.name, config, license, me, Permissions.ADD_REACTION);\n        }\n\n        return {\n            profiles,\n            otherUsersCount: ownProps.reactions.length - profiles.length,\n            currentUserId: getCurrentUserId(state),\n            reactionCount: ownProps.reactions.length,\n            canAddReaction,\n            canRemoveReaction,\n            emojiImageUrl,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addReaction,\n            removeReaction,\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nfunction checkReactionAction(state, teamId, channelId, channelName, config, license, user, permission) {\n    if (!haveIChannelPermission(state, {team: teamId, channel: channelId, permission})) {\n        return false;\n    }\n\n    if (channelName === Constants.DEFAULT_CHANNEL && config.ExperimentalTownSquareIsReadOnly === 'true' && license.IsLicensed === 'true' && !user.roles.includes('system_admin')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Reaction);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport Constants from 'utils/constants';\nimport Reaction from 'components/post_view/reaction';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst DEFAULT_EMOJI_PICKER_RIGHT_OFFSET = 15;\nconst EMOJI_PICKER_WIDTH_OFFSET = 260;\n\nexport default class ReactionList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render reactions for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The id of the team which belongs the post\n         */\n        teamId: PropTypes.string,\n\n        /**\n         * The reactions to render\n         */\n        reactions: PropTypes.object,\n\n        /**\n         * Whether to show the emoji picker.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to add a reaction to the post\n             */\n            addReaction: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showEmojiPicker: false,\n        };\n    }\n\n    getTarget = () => {\n        return this.refs.addReactionButton;\n    }\n\n    handleEmojiClick = (emoji) => {\n        this.setState({showEmojiPicker: false});\n        const emojiName = emoji.name || emoji.aliases[0];\n        this.props.actions.addReaction(this.props.post.id, emojiName);\n    }\n\n    hideEmojiPicker = () => {\n        this.setState({showEmojiPicker: false});\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n    }\n\n    render() {\n        const reactionsByName = new Map();\n        const emojiNames = [];\n\n        if (this.props.reactions) {\n            for (const reaction of Object.values(this.props.reactions)) {\n                const emojiName = reaction.emoji_name;\n\n                if (reactionsByName.has(emojiName)) {\n                    reactionsByName.get(emojiName).push(reaction);\n                } else {\n                    emojiNames.push(emojiName);\n                    reactionsByName.set(emojiName, [reaction]);\n                }\n            }\n        }\n\n        if (reactionsByName.size === 0) {\n            return null;\n        }\n\n        const reactions = emojiNames.map((emojiName) => {\n            return (\n                <Reaction\n                    key={emojiName}\n                    post={this.props.post}\n                    emojiName={emojiName}\n                    reactions={reactionsByName.get(emojiName) || []}\n                />\n            );\n        });\n\n        const addReactionButton = this.getTarget();\n        let rightOffset = DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n        if (addReactionButton) {\n            rightOffset = window.innerWidth - addReactionButton.getBoundingClientRect().right - EMOJI_PICKER_WIDTH_OFFSET;\n\n            if (rightOffset < 0) {\n                rightOffset = DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n            }\n        }\n\n        let emojiPicker = null;\n        if (this.props.enableEmojiPicker) {\n            const addReactionTooltip = (\n                <Tooltip id='addReactionTooltip'>\n                    <FormattedMessage\n                        id='reaction_list.addReactionTooltip'\n                        defaultMessage='Add reaction'\n                    />\n                </Tooltip>\n            );\n\n            emojiPicker = (\n                <span className='emoji-picker__container'>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        target={this.getTarget}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClose={this.hideEmojiPicker}\n                        onEmojiClick={this.handleEmojiClick}\n                        rightOffset={rightOffset}\n                        topOffset={-5}\n                    />\n                    <OverlayTrigger\n                        placement='top'\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        overlay={addReactionTooltip}\n                    >\n                        <ChannelPermissionGate\n                            channelId={this.props.post.channel_id}\n                            teamId={this.props.teamId}\n                            permissions={[Permissions.ADD_REACTION]}\n                        >\n                            <button\n                                aria-label={localizeMessage('reaction.add.ariaLabel', 'add reaction')}\n                                className='style--none post-reaction'\n                                onClick={this.toggleEmojiPicker}\n                            >\n                                <span\n                                    id={`addReaction-${this.props.post.id}`}\n                                    className='post-reaction__add'\n                                    ref='addReactionButton'\n                                >\n                                    {'+'}\n                                </span>\n                            </button>\n                        </ChannelPermissionGate>\n                    </OverlayTrigger>\n                </span>\n            );\n        }\n\n        let addReactionClassName = 'post-add-reaction';\n        if (this.state.showEmojiPicker) {\n            addReactionClassName += ' post-add-reaction-emoji-picker-open';\n        }\n\n        return (\n            <div\n                aria-label={localizeMessage('reaction.container.ariaLabel', 'reactions')}\n                className='post-reaction-list'\n            >\n                {reactions}\n                <div className={addReactionClassName}>\n                    {emojiPicker}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {makeGetReactionsForPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {addReaction} from 'actions/post_actions.jsx';\n\nimport ReactionList from './reaction_list.jsx';\n\nfunction makeMapStateToProps() {\n    const getReactionsForPost = makeGetReactionsForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        const config = getConfig(state);\n        const enableEmojiPicker = config.EnableEmojiPicker === 'true' && !ownProps.isReadOnly;\n\n        const channel = getChannel(state, ownProps.post.channel_id) || {};\n        const teamId = channel.team_id;\n\n        return {\n            teamId,\n            reactions: getReactionsForPost(state, ownProps.post.id),\n            enableEmojiPicker,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addReaction,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(ReactionList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MAX_POST_HEIGHT = 600;\nconst MAX_ATTACHMENT_TEXT_HEIGHT = 200;\nconst MARGIN_CHANGE_FOR_COMPACT_POST = 22;\n\nexport default class ShowMore extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        checkOverflow: PropTypes.number,\n        isAttachmentText: PropTypes.bool,\n        isRHSExpanded: PropTypes.bool.isRequired,\n        isRHSOpen: PropTypes.bool.isRequired,\n        text: PropTypes.string,\n        compactDisplay: PropTypes.bool.isRequired,\n    }\n    constructor(props) {\n        super(props);\n        this.maxHeight = this.props.isAttachmentText ? MAX_ATTACHMENT_TEXT_HEIGHT : MAX_POST_HEIGHT;\n        this.state = {\n            isCollapsed: true,\n            isOverflow: false,\n        };\n    }\n\n    componentDidMount() {\n        this.checkTextOverflow();\n\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            this.props.text !== prevProps.text ||\n            this.props.isRHSExpanded !== prevProps.isRHSExpanded ||\n            this.props.isRHSOpen !== prevProps.isRHSOpen ||\n            this.props.checkOverflow !== prevProps.checkOverflow\n        ) {\n            this.checkTextOverflow();\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.overflowRef) {\n            window.cancelAnimationFrame(this.overflowRef);\n        }\n    }\n\n    toggleCollapse = (e) => {\n        e.preventDefault();\n        this.setState((prevState) => {\n            return {\n                isCollapsed: !prevState.isCollapsed,\n            };\n        });\n    };\n\n    checkTextOverflow = () => {\n        if (this.overflowRef) {\n            window.cancelAnimationFrame(this.overflowRef);\n        }\n        this.overflowRef = window.requestAnimationFrame(() => {\n            const textContainer = this.refs.textContainer;\n            let isOverflow = false;\n\n            if (textContainer && textContainer.scrollHeight > this.maxHeight) {\n                isOverflow = true;\n            }\n\n            if (isOverflow !== this.state.isOverflow) {\n                this.setState({\n                    isOverflow,\n                });\n            }\n        });\n    };\n\n    handleResize = () => {\n        this.checkTextOverflow();\n    };\n\n    render() {\n        const {\n            isCollapsed,\n            isOverflow,\n        } = this.state;\n\n        const {\n            children,\n            isAttachmentText,\n            compactDisplay,\n        } = this.props;\n\n        let className = 'post-message';\n        let collapsedMaxHeightStyle;\n        if (isCollapsed) {\n            collapsedMaxHeightStyle = this.maxHeight;\n            className += ' post-message--collapsed';\n        } else {\n            className += ' post-message--expanded';\n        }\n\n        let collapseGradientClass = 'post-collapse__gradient';\n        let collapseShowMoreClass = 'post-collapse__show-more';\n        if (isAttachmentText) {\n            collapseGradientClass = 'post-attachment-collapse__gradient';\n            collapseShowMoreClass = 'post-attachment-collapse__show-more';\n        }\n\n        let attachmentTextOverflow = null;\n        if (isOverflow) {\n            if (!isAttachmentText && isCollapsed && compactDisplay) {\n                collapsedMaxHeightStyle -= MARGIN_CHANGE_FOR_COMPACT_POST;\n            }\n\n            let showIcon = 'fa fa-angle-up';\n            let showText = localizeMessage('post_info.message.show_less', 'Show Less');\n            if (isCollapsed) {\n                showIcon = 'fa fa-angle-down';\n                showText = localizeMessage('post_info.message.show_more', 'Show More');\n            }\n\n            attachmentTextOverflow = (\n                <div className='post-collapse'>\n                    <div\n                        id='collapseGradient'\n                        className={collapseGradientClass}\n                    />\n                    <div className={collapseShowMoreClass}>\n                        <div className='post-collapse__show-more-line'/>\n                        <button\n                            id='showMoreButton'\n                            className='post-collapse__show-more-button'\n                            onClick={this.toggleCollapse}\n                        >\n                            <span className={showIcon}/>\n                            {showText}\n                        </button>\n                        <div className='post-collapse__show-more-line'/>\n                    </div>\n                </div>\n            );\n\n            className += ' post-message--overflow';\n        }\n\n        return (\n            <div className={className}>\n                <div\n                    style={{maxHeight: collapsedMaxHeightStyle}}\n                    className='post-message__text-container'\n                    ref='textContainer'\n                >\n                    {children}\n                </div>\n                {attachmentTextOverflow}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getIsRhsExpanded, getIsRhsOpen} from 'selectors/rhs';\nimport {Preferences} from 'utils/constants';\n\nimport ShowMore from './show_more';\n\nfunction mapStateToProps(state) {\n    return {\n        isRHSExpanded: getIsRhsExpanded(state),\n        isRHSOpen: getIsRhsOpen(state),\n        compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n    };\n}\n\nexport default connect(mapStateToProps)(ShowMore);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Markdown from 'components/markdown';\n\nexport default class ActionButton extends React.PureComponent {\n    static propTypes = {\n        action: PropTypes.object.isRequired,\n        handleAction: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n    }\n\n    render() {\n        const {action, handleAction, disabled} = this.props;\n        return (\n            <button\n                data-action-id={action.id}\n                data-action-cookie={action.cookie}\n                disabled={disabled}\n                key={action.id}\n                onClick={handleAction}\n            >\n                <Markdown\n                    message={action.name}\n                    options={{\n                        mentionHighlight: false,\n                        markdown: false,\n                        autolinkedUrlSchemes: [],\n                    }}\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst PostContext = React.createContext({\n\n    // Post component event handler that should be\n    // called when any child component opens/closes a\n    // popup type component.\n    handlePopupOpened: null,\n});\n\nexport default PostContext;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MenuActionProvider from 'components/suggestion/menu_action_provider';\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport GenericChannelProvider from 'components/suggestion/generic_channel_provider.jsx';\nimport AutocompleteSelector from 'components/autocomplete_selector';\nimport PostContext from 'components/post_view/post_context';\n\nexport default class ActionMenu extends React.PureComponent {\n    static propTypes = {\n        postId: PropTypes.string.isRequired,\n        action: PropTypes.object.isRequired,\n        selected: PropTypes.object,\n        disabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            autocompleteChannels: PropTypes.func.isRequired,\n            selectAttachmentMenuAction: PropTypes.func.isRequired,\n            autocompleteUsers: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const action = props.action;\n        this.providers = [];\n        if (action) {\n            if (action.data_source === 'users') {\n                this.providers = [new GenericUserProvider(props.actions.autocompleteUsers)];\n            } else if (action.data_source === 'channels') {\n                this.providers = [new GenericChannelProvider(props.actions.autocompleteChannels)];\n            } else if (action.options) {\n                this.providers = [new MenuActionProvider(action.options)];\n            }\n        }\n\n        let selected;\n        let value = '';\n\n        if (action.default_option && action.options) {\n            selected = action.options.find((option) => option.value === action.default_option);\n            value = selected ? selected.text : '';\n        }\n\n        this.state = {\n            selected,\n            value,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.selected && props.selected !== state.selected) {\n            return {\n                value: props.selected.text,\n                selected: props.selected,\n            };\n        }\n\n        return null;\n    }\n\n    handleSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        const {action} = this.props;\n\n        let value = '';\n        let text = '';\n        if (action.data_source === 'users') {\n            text = selected.username;\n            value = selected.id;\n        } else if (action.data_source === 'channels') {\n            text = selected.display_name;\n            value = selected.id;\n        } else {\n            text = selected.text;\n            value = selected.value;\n        }\n\n        this.props.actions.selectAttachmentMenuAction(this.props.postId, this.props.action.id, this.props.action.cookie, this.props.action.data_source, text, value);\n\n        this.setState({value: text});\n    }\n\n    render() {\n        const {action, disabled} = this.props;\n\n        return (\n            <PostContext.Consumer>\n                {({handlePopupOpened}) => (\n                    <AutocompleteSelector\n                        providers={this.providers}\n                        onSelected={this.handleSelected}\n                        placeholder={action.name}\n                        inputClassName='post-attachment-dropdown'\n                        value={this.state.value}\n                        toggleFocus={handlePopupOpened}\n                        disabled={disabled}\n                    />\n                )}\n            </PostContext.Consumer>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {autocompleteChannels} from 'actions/channel_actions';\nimport {autocompleteUsers} from 'actions/user_actions';\nimport {selectAttachmentMenuAction} from 'actions/views/posts';\n\nimport ActionMenu from './action_menu.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const actions = state.views.posts.menuActions[ownProps.postId];\n    const selected = actions && actions[ownProps.action && ownProps.action.id];\n\n    return {\n        selected,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            selectAttachmentMenuAction,\n            autocompleteChannels,\n            autocompleteUsers,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getScheme} from 'utils/url';\n\nimport RemoveMarkdown from './remove_markdown';\n\nexport default class LinkOnlyRenderer extends RemoveMarkdown {\n    public link(href: string, title: string, text: string) {\n        let outHref = href;\n\n        if (!getScheme(href)) {\n            outHref = `http://${outHref}`;\n        }\n\n        let output = `<a class=\"theme markdown__link\" href=\"${outHref}\" target=\"_blank\"`;\n\n        if (title) {\n            output += ' title=\"' + title + '\"';\n        }\n\n        output += `>${text}</a>`;\n\n        return output;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport truncate from 'lodash/truncate';\n\nimport {isUrlSafe} from 'utils/url';\nimport {handleFormattedTextClick} from 'utils/utils';\nimport {Constants} from 'utils/constants';\n\nimport ExternalImage from 'components/external_image';\nimport Markdown from 'components/markdown';\nimport ShowMore from 'components/post_view/show_more';\nimport SizeAwareImage from 'components/size_aware_image';\n\nimport ActionButton from '../action_button';\nimport ActionMenu from '../action_menu';\nimport LinkOnlyRenderer from 'utils/markdown/link_only_renderer';\n\nexport default class MessageAttachment extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post id\n         */\n        postId: PropTypes.string.isRequired,\n\n        /**\n         * The attachment to render\n         */\n        attachment: PropTypes.object.isRequired,\n\n        /**\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        /**\n         * images object for dimensions\n         */\n        imagesMetadata: PropTypes.object,\n\n        actions: PropTypes.shape({\n            doPostActionWithCookie: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checkOverflow: 0,\n        };\n\n        this.imageProps = {\n            onImageLoaded: this.handleHeightReceived,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    handleHeightReceivedForThumbUrl = ({height}) => {\n        const {attachment} = this.props;\n        if (!this.props.imagesMetadata || (this.props.imagesMetadata && !this.props.imagesMetadata[attachment.thumb_url])) {\n            this.handleHeightReceived(height);\n        }\n    }\n\n    handleHeightReceivedForImageUrl = ({height}) => {\n        const {attachment} = this.props;\n        if (!this.props.imagesMetadata || (this.props.imagesMetadata && !this.props.imagesMetadata[attachment.image_url])) {\n            this.handleHeightReceived(height);\n        }\n    }\n\n    handleHeightReceived = (height) => {\n        if (!this.mounted) {\n            return;\n        }\n\n        if (height > 0) {\n            // Increment checkOverflow to indicate change in height\n            // and recompute textContainer height at ShowMore component\n            // and see whether overflow text of show more/less is necessary or not.\n            this.setState((prevState) => {\n                return {checkOverflow: prevState.checkOverflow + 1};\n            });\n        }\n    };\n\n    renderPostActions = () => {\n        const actions = this.props.attachment.actions;\n        if (!actions || !actions.length) {\n            return '';\n        }\n\n        const content = [];\n\n        actions.forEach((action) => {\n            if (!action.id || !action.name) {\n                return;\n            }\n\n            switch (action.type) {\n            case 'select':\n                content.push(\n                    <ActionMenu\n                        key={action.id}\n                        postId={this.props.postId}\n                        action={action}\n                        disabled={action.disabled}\n                    />\n                );\n                break;\n            case 'button':\n            default:\n                content.push(\n                    <ActionButton\n                        key={action.id}\n                        action={action}\n                        disabled={action.disabled}\n                        handleAction={this.handleAction}\n                    />\n                );\n                break;\n            }\n        });\n\n        return (\n            <div\n                className='attachment-actions'\n            >\n                {content}\n            </div>\n        );\n    };\n\n    handleAction = (e) => {\n        e.preventDefault();\n        const actionId = e.currentTarget.getAttribute('data-action-id');\n        const actionCookie = e.currentTarget.getAttribute('data-action-cookie');\n\n        this.props.actions.doPostActionWithCookie(this.props.postId, actionId, actionCookie);\n    };\n\n    getFieldsTable = () => {\n        const fields = this.props.attachment.fields;\n        if (!fields || !fields.length) {\n            return '';\n        }\n\n        const fieldTables = [];\n\n        let headerCols = [];\n        let bodyCols = [];\n        let rowPos = 0;\n        let lastWasLong = false;\n        let nrTables = 0;\n        const markdown = {markdown: false, mentionHighlight: false};\n\n        fields.forEach((field, i) => {\n            if (rowPos === 2 || !(field.short === true) || lastWasLong) {\n                fieldTables.push(\n                    <table\n                        className='attachment-fields'\n                        key={'attachment__table__' + nrTables}\n                    >\n                        <thead>\n                            <tr>\n                                {headerCols}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                {bodyCols}\n                            </tr>\n                        </tbody>\n                    </table>\n                );\n                headerCols = [];\n                bodyCols = [];\n                rowPos = 0;\n                nrTables += 1;\n                lastWasLong = false;\n            }\n            headerCols.push(\n                <th\n                    className='attachment-field__caption'\n                    key={'attachment__field-caption-' + i + '__' + nrTables}\n                    width='50%'\n                >\n                    <Markdown\n                        message={field.title}\n                        options={markdown}\n                    />\n                </th>\n            );\n\n            bodyCols.push(\n                <td\n                    className='attachment-field'\n                    key={'attachment__field-' + i + '__' + nrTables}\n                >\n                    <Markdown message={field.value}/>\n                </td>\n            );\n            rowPos += 1;\n            lastWasLong = !(field.short === true);\n        });\n        if (headerCols.length > 0) { // Flush last fields\n            fieldTables.push(\n                <table\n                    className='attachment-fields'\n                    key={'attachment__table__' + nrTables}\n                >\n                    <thead>\n                        <tr>\n                            {headerCols}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            {bodyCols}\n                        </tr>\n                    </tbody>\n                </table>\n            );\n        }\n        return (\n            <div>\n                {fieldTables}\n            </div>\n        );\n    };\n\n    render() {\n        const {attachment, options} = this.props;\n        let preTextClass = '';\n\n        let preText;\n        if (attachment.pretext) {\n            preTextClass = 'attachment--pretext';\n            preText = (\n                <div className='attachment__thumb-pretext'>\n                    <Markdown message={attachment.pretext}/>\n                </div>\n            );\n        }\n\n        let author = [];\n        if (attachment.author_name || attachment.author_icon) {\n            if (attachment.author_icon) {\n                author.push(\n                    <ExternalImage\n                        key={'attachment__author-icon'}\n                        src={attachment.author_icon}\n                        imageMetadata={this.props.imagesMetadata[attachment.author_icon]}\n                    >\n                        {(iconUrl) => (\n                            <img\n                                alt={'attachment author icon'}\n                                className='attachment__author-icon'\n                                src={iconUrl}\n                                height='14'\n                                width='14'\n                            />\n                        )}\n                    </ExternalImage>\n                );\n            }\n            if (attachment.author_name) {\n                author.push(\n                    <span\n                        className='attachment__author-name'\n                        key={'attachment__author-name'}\n                    >\n                        {attachment.author_name}\n                    </span>\n                );\n            }\n        }\n        if (attachment.author_link && isUrlSafe(attachment.author_link)) {\n            author = (\n                <a\n                    href={attachment.author_link}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    {author}\n                </a>\n            );\n        }\n\n        let title;\n        if (attachment.title) {\n            if (attachment.title_link && isUrlSafe(attachment.title_link)) {\n                title = (\n                    <h1 className='attachment__title'>\n                        <a\n                            className='attachment__title-link'\n                            href={attachment.title_link}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {attachment.title}\n                        </a>\n                    </h1>\n                );\n            } else {\n                title = (\n                    <h1 className='attachment__title'>\n                        <Markdown\n                            message={attachment.title}\n                            options={{\n                                mentionHighlight: false,\n                                renderer: new LinkOnlyRenderer(),\n                                autolinkedUrlSchemes: [],\n                            }}\n                        />\n                    </h1>\n                );\n            }\n        }\n\n        let attachmentText;\n        if (attachment.text) {\n            attachmentText = (\n                <ShowMore\n                    checkOverflow={this.state.checkOverflow}\n                    isAttachmentText={true}\n                    text={attachment.text}\n                >\n                    <Markdown\n                        message={attachment.text || ''}\n                        options={options}\n                        imageProps={this.imageProps}\n                    />\n                </ShowMore>\n            );\n        }\n\n        let image;\n        if (attachment.image_url) {\n            const imageMetadata = this.props.imagesMetadata[attachment.image_url];\n\n            image = (\n                <div className='attachment__image-container'>\n                    <ExternalImage\n                        src={attachment.image_url}\n                        imageMetadata={imageMetadata}\n                    >\n                        {(imageUrl) => (\n                            <SizeAwareImage\n                                className='attachment__image'\n                                onImageLoaded={this.handleHeightReceivedForImageUrl}\n                                src={imageUrl}\n                                dimensions={imageMetadata}\n                            />\n                        )}\n                    </ExternalImage>\n                </div>\n            );\n        }\n\n        let footer;\n        if (attachment.footer) {\n            let footerIcon;\n            if (attachment.footer_icon) {\n                const footerIconMetadata = this.props.imagesMetadata[attachment.footer_icon];\n\n                footerIcon = (\n                    <ExternalImage\n                        src={attachment.footer_icon}\n                        imageMetadata={footerIconMetadata}\n                    >\n                        {(footerIconUrl) => (\n                            <img\n                                alt={'attachment footer icon'}\n                                className='attachment__footer-icon'\n                                src={footerIconUrl}\n                                height='16'\n                                width='16'\n                            />\n                        )}\n                    </ExternalImage>\n                );\n            }\n\n            footer = (\n                <div className='attachment__footer-container'>\n                    {footerIcon}\n                    <span>{truncate(attachment.footer, {length: Constants.MAX_ATTACHMENT_FOOTER_LENGTH, omission: '…'})}</span>\n                </div>\n            );\n        }\n\n        let thumb;\n        if (attachment.thumb_url) {\n            const thumbMetadata = this.props.imagesMetadata[attachment.thumb_url];\n\n            thumb = (\n                <div className='attachment__thumb-container'>\n                    <ExternalImage\n                        src={attachment.thumb_url}\n                        imageMetadata={thumbMetadata}\n                    >\n                        {(thumbUrl) => (\n                            <SizeAwareImage\n                                onImageLoaded={this.handleHeightReceivedForThumbUrl}\n                                src={thumbUrl}\n                                dimensions={thumbMetadata}\n                            />\n                        )}\n                    </ExternalImage>\n                </div>\n            );\n        }\n\n        const fields = this.getFieldsTable();\n        const actions = this.renderPostActions();\n\n        let useBorderStyle;\n        if (attachment.color && attachment.color[0] === '#') {\n            useBorderStyle = {borderLeftColor: attachment.color};\n        }\n\n        return (\n            <div\n                className={'attachment ' + preTextClass}\n                ref='attachment'\n            >\n                {preText}\n                <div className='attachment__content'>\n                    <div\n                        className={useBorderStyle ? 'clearfix attachment__container' : 'clearfix attachment__container attachment__container--' + attachment.color}\n                        style={useBorderStyle}\n                    >\n                        {author}\n                        {title}\n                        <div>\n                            <div\n                                className={thumb ? 'attachment__body' : 'attachment__body attachment__body--no_thumb'}\n                                onClick={handleFormattedTextClick}\n                            >\n                                {attachmentText}\n                                {image}\n                                {fields}\n                                {footer}\n                                {actions}\n                            </div>\n                            {thumb}\n                            <div style={style.footer}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    footer: {clear: 'both'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {doPostActionWithCookie} from 'mattermost-redux/actions/posts';\n\nimport MessageAttachment from './message_attachment';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            doPostActionWithCookie,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(MessageAttachment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MessageAttachment from './message_attachment';\n\nexport default class MessageAttachmentList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post id\n         */\n        postId: PropTypes.string.isRequired,\n\n        /**\n         * Array of attachments to render\n         */\n        attachments: PropTypes.array.isRequired,\n\n        /**\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        /**\n         * Images object used for creating placeholders to prevent scroll popup\n         */\n        imagesMetadata: PropTypes.object,\n    }\n\n    static defaultProps = {\n        imagesMetadata: {},\n    }\n\n    render() {\n        const content = [];\n        this.props.attachments.forEach((attachment, i) => {\n            content.push(\n                <MessageAttachment\n                    attachment={attachment}\n                    postId={this.props.postId}\n                    key={'att_' + i}\n                    options={this.props.options}\n                    imagesMetadata={this.props.imagesMetadata}\n                />\n            );\n        });\n\n        return (\n            <div\n                id={`messageAttachmentList_${this.props.postId}`}\n                className='attachment__list'\n            >\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getDistanceBW2Points(point1, point2, xAttr = 'x', yAttr = 'y') {\n    return Math.sqrt(Math.pow(point1[xAttr] - point2[xAttr], 2) + Math.pow(point1[yAttr] - point2[yAttr], 2));\n}\n\n/**\n  * Funtion to return nearest point of given pivot point.\n  * It return two points one nearest and other nearest but having both coorditanes smaller than the given point's coordinates.\n  */\nexport function getNearestPoint(pivotPoint, points, xAttr = 'x', yAttr = 'y') {\n    var nearestPoint = {};\n    for (const point of points) {\n        if (typeof nearestPoint[xAttr] === 'undefined' || typeof nearestPoint[yAttr] === 'undefined') {\n            nearestPoint = point;\n        } else if (getDistanceBW2Points(point, pivotPoint, xAttr, yAttr) < getDistanceBW2Points(nearestPoint, pivotPoint, xAttr, yAttr)) {\n        // Check for bestImage\n            nearestPoint = point;\n        }\n    }\n    return nearestPoint;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ExternalImage from 'components/external_image';\nimport SizeAwareImage from 'components/size_aware_image';\n\nimport {PostTypes} from 'utils/constants';\nimport {useSafeUrl} from 'utils/url';\nimport {isSystemMessage} from 'utils/post_utils.jsx';\n\nimport {getNearestPoint} from './get_nearest_point';\n\nconst DIMENSIONS_NEAREST_POINT_IMAGE = {\n    height: 80,\n    width: 80,\n};\n\nexport default class PostAttachmentOpenGraph extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The link to display the open graph data for\n         */\n        link: PropTypes.string.isRequired,\n\n        /**\n         * The ID of the current user\n         */\n        currentUserId: PropTypes.string,\n\n        /**\n         * The post where this link is included\n         */\n        post: PropTypes.object,\n\n        /**\n         * The open graph data to render\n         */\n        openGraphData: PropTypes.object,\n\n        /**\n         * Whether or not the server has link previews enabled.\n         */\n        enableLinkPreviews: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the user has link previews enabled.\n         */\n        previewEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the image in the OpenGraph preview has been collapsed.\n         */\n        isEmbedVisible: PropTypes.bool,\n\n        toggleEmbedVisibility: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            editPost: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    getImageMetadata = (imageUrl) => {\n        if (!imageUrl) {\n            return null;\n        }\n\n        const imagesMetadata = this.props.post.metadata.images;\n        if (!imagesMetadata) {\n            return null;\n        }\n\n        return imagesMetadata[imageUrl];\n    }\n\n    isLargeImage = (dimensions) => {\n        if (!dimensions) {\n            return false;\n        }\n\n        const {height, width} = dimensions;\n\n        const largeImageMinRatio = 16 / 9;\n        const largeImageMinWidth = 150;\n\n        const imageRatio = width / height;\n\n        return width >= largeImageMinWidth && imageRatio >= largeImageMinRatio;\n    }\n\n    renderImageToggle() {\n        return (\n            <button\n                className={'style--none post__embed-visibility color--link'}\n                data-expanded={this.props.isEmbedVisible}\n                aria-label='Toggle Embed Visibility'\n                onClick={this.props.toggleEmbedVisibility}\n            />\n        );\n    }\n\n    renderLargeImage(imageUrl, imageMetadata) {\n        if (!this.props.isEmbedVisible) {\n            return null;\n        }\n\n        return (\n            <ExternalImage\n                src={imageUrl}\n                imageMetadata={imageMetadata}\n            >\n                {(safeImageUrl) => (\n                    <SizeAwareImage\n                        className='attachment__image attachment__image--opengraph large_image'\n                        src={safeImageUrl}\n                        dimensions={imageMetadata}\n                    />\n                )}\n            </ExternalImage>\n        );\n    }\n\n    renderSmallImage(imageUrl, imageMetadata) {\n        if (!this.props.isEmbedVisible) {\n            return null;\n        }\n\n        return (\n            <div className='attachment__image__container--opengraph'>\n                <ExternalImage\n                    src={imageUrl}\n                    imageMetadata={imageMetadata}\n                >\n                    {(safeImageUrl) => (\n                        <SizeAwareImage\n                            className='attachment__image attachment__image--opengraph'\n                            src={safeImageUrl}\n                            dimensions={imageMetadata}\n                        />\n                    )}\n                </ExternalImage>\n            </div>\n        );\n    }\n\n    truncateText(text) {\n        const maxLength = 300;\n        const ellipsis = '...';\n\n        if (text && text.length > maxLength) {\n            return text.substring(0, maxLength - ellipsis.length) + ellipsis;\n        }\n        return text;\n    }\n\n    handleRemovePreview = async () => {\n        const props = Object.assign({}, this.props.post.props);\n        props[PostTypes.REMOVE_LINK_PREVIEW] = 'true';\n\n        const patchedPost = ({\n            id: this.props.post.id,\n            props,\n        });\n\n        return this.props.actions.editPost(patchedPost);\n    }\n\n    hasPreviewBeenRemoved() {\n        const {post} = this.props;\n\n        if (!post || !post.props) {\n            return false;\n        }\n\n        return post.props[PostTypes.REMOVE_LINK_PREVIEW] === 'true';\n    }\n\n    render() {\n        if (!this.props.previewEnabled || !this.props.enableLinkPreviews) {\n            return null;\n        }\n\n        if (!this.props.post || isSystemMessage(this.props.post)) {\n            return null;\n        }\n\n        if (this.hasPreviewBeenRemoved()) {\n            return null;\n        }\n\n        const data = this.props.openGraphData;\n        if (!data) {\n            return null;\n        }\n\n        const imageUrl = getBestImageUrl(data, this.props.post.metadata.images);\n        const imageMetadata = this.getImageMetadata(imageUrl);\n        const hasLargeImage = this.isLargeImage(imageMetadata);\n\n        let removePreviewButton;\n        if (this.props.currentUserId === this.props.post.user_id) {\n            removePreviewButton = (\n                <button\n                    type='button'\n                    className='btn-close'\n                    aria-label='Close'\n                    onClick={this.handleRemovePreview}\n                    data-testid='removeLinkPreviewButton'\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                </button>\n            );\n        }\n\n        let body;\n        if (data.description || imageUrl) {\n            body = (\n                <div className={'attachment__body attachment__body--opengraph'}>\n                    <div>\n                        {this.truncateText(data.description)}\n                        {' '}\n                        {imageUrl && hasLargeImage && this.renderImageToggle()}\n                    </div>\n                    {(imageUrl && hasLargeImage) && this.renderLargeImage(imageUrl, imageMetadata)}\n                </div>\n            );\n        }\n\n        return (\n            <div className='attachment attachment--opengraph'>\n                <div className='attachment__content'>\n                    <div className={'clearfix attachment__container attachment__container--opengraph'}>\n                        <div className={'attachment__body__wrap attachment__body__wrap--opengraph'}>\n                            <span className='sitename'>{this.truncateText(data.site_name)}</span>\n                            {removePreviewButton}\n                            <h1 className={'attachment__title attachment__title--opengraph' + (data.title ? '' : ' is-url')}>\n                                <a\n                                    className='attachment__title-link attachment__title-link--opengraph'\n                                    href={useSafeUrl(data.url || this.props.link)}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    title={data.title || data.url || this.props.link}\n                                >\n                                    {this.truncateText(data.title || data.url || this.props.link)}\n                                </a>\n                            </h1>\n                            {body}\n                        </div>\n                        {(imageUrl && !hasLargeImage) && this.renderSmallImage(imageUrl, imageMetadata)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function getBestImageUrl(openGraphData, imagesMetadata) {\n    if (!openGraphData || !openGraphData.images || openGraphData.images.length === 0) {\n        return null;\n    }\n\n    // Get the dimensions from the post metadata if they weren't provided by the website as part of the OpenGraph data\n    const images = openGraphData.images.map((image) => {\n        const imageUrl = image.secure_url || image.url;\n\n        if ((image.width && image.height) || !(imagesMetadata && imagesMetadata[imageUrl])) {\n            // The image already includes dimensions or we don't have the missing dimensions\n            return image;\n        }\n\n        return {\n            ...image,\n            height: image.height || imagesMetadata[imageUrl].height,\n            width: image.width || imagesMetadata[imageUrl].width,\n        };\n    });\n\n    const bestImage = getNearestPoint(DIMENSIONS_NEAREST_POINT_IMAGE, images, 'width', 'height');\n    return bestImage.secure_url || bestImage.url;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOpenGraphMetadataForUrl} from 'mattermost-redux/selectors/entities/posts';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {editPost} from 'actions/views/posts';\n\nimport {Preferences} from 'utils/constants';\n\nimport PostAttachmentOpenGraph from './post_attachment_opengraph.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        enableLinkPreviews: true,\n        openGraphData: getOpenGraphMetadataForUrl(state, ownProps.postId, ownProps.link),\n        //previewEnabled: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, true),\n        previewEnabled: true\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            editPost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostAttachmentOpenGraph);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ExternalImage from 'components/external_image';\nimport SizeAwareImage from 'components/size_aware_image';\nimport ViewImageModal from 'components/view_image';\n\nexport default class PostImage extends React.PureComponent {\n    static propTypes = {\n        imageMetadata: PropTypes.object.isRequired,\n        link: PropTypes.string.isRequired,\n        post: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n        };\n    }\n\n    showModal = (e) => {\n        e.preventDefault();\n\n        this.setState({showModal: true});\n    }\n\n    hideModal = () => {\n        this.setState({showModal: false});\n    }\n\n    render() {\n        return (\n            <div className='post__embed-container'>\n                <ExternalImage\n                    src={this.props.link}\n                    imageMetadata={this.props.imageMetadata}\n                >\n                    {(safeLink) => (\n                        <React.Fragment>\n                            <SizeAwareImage\n                                className='img-div attachment__image cursor--pointer'\n                                src={safeLink}\n                                dimensions={this.props.imageMetadata}\n                                showLoader={true}\n                                onClick={this.showModal}\n                            />\n                            <ViewImageModal\n                                show={this.state.showModal}\n                                onModalDismissed={this.hideModal}\n                                post={this.props.post}\n                                startIndex={0}\n                                fileInfos={[{\n                                    has_preview_image: false,\n                                    link: safeLink,\n                                    extension: this.props.imageMetadata.format,\n                                }]}\n                            />\n                        </React.Fragment>\n                    )}\n                </ExternalImage>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PostImage from './post_image.jsx';\n\nexport default PostImage;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport const ytRegex = /(?:http|https):\\/\\/(?:www\\.|m\\.)?(?:(?:youtube\\.com\\/(?:(?:v\\/)|(?:(?:watch|embed\\/watch)(?:\\/|.*v=))|(?:embed\\/)|(?:user\\/[^/]+\\/u\\/[0-9]\\/)))|(?:youtu\\.be\\/))([^#&?]*)/;\n\nexport function handleYoutubeTime(link) {\n    const timeRegex = /[\\\\?&](t|time|start|time_continue)=([0-9]+h)?([0-9]+m)?([0-9]+s?)/;\n\n    const time = link.match(timeRegex);\n    if (!time?.[0]) {\n        return '';\n    }\n\n    const hours = time[2]?.match(/([0-9]+)h/) ?? null;\n    const minutes = time[3]?.match(/([0-9]+)m/) ?? null;\n    const seconds = time[4]?.match(/([0-9]+)s?/) ?? null;\n\n    let startSeconds = 0;\n\n    if (hours?.[1]) {\n        startSeconds += parseInt(hours[1], 10) * 3600;\n    }\n\n    if (minutes?.[1]) {\n        startSeconds += parseInt(minutes[1], 10) * 60;\n    }\n\n    if (seconds?.[1]) {\n        startSeconds += parseInt(seconds[1], 10);\n    }\n\n    return `&start=${startSeconds}`;\n}\n\nexport function getVideoId(link) {\n    const match = link.trim().match(ytRegex);\n    if (!match || match[1].length !== 11) {\n        return null;\n    }\n\n    return match[1];\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getVideoId, ytRegex, handleYoutubeTime} from 'utils/youtube';\n\nimport ExternalImage from 'components/external_image';\n\nexport default class YoutubeVideo extends React.PureComponent {\n    static propTypes = {\n        link: PropTypes.string.isRequired,\n        show: PropTypes.bool.isRequired,\n        metadata: PropTypes.object,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            playing: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!props.show && state.playing) {\n            return {playing: false};\n        }\n        return null;\n    }\n\n    play = () => {\n        this.setState({playing: true});\n    }\n\n    stop = () => {\n        this.setState({playing: false});\n    }\n\n    render() {\n        const {metadata, link} = this.props;\n\n        const videoId = getVideoId(link);\n        const time = handleYoutubeTime(link);\n\n        const header = (\n            <h4>\n                <span className='video-type'>{'YouTube - '}</span>\n                <span className='video-title'>\n                    <a\n                        href={this.props.link}\n                        target='blank'\n                        rel='noopener noreferrer'\n                    >\n                        {metadata.title}\n                    </a>\n                </span>\n            </h4>\n        );\n\n        let content;\n\n        if (this.state.playing) {\n            content = (\n                <iframe\n                    src={'https://www.youtube.com/embed/' + videoId + '?autoplay=1&autohide=1&border=0&wmode=opaque&fs=1&enablejsapi=1' + time}\n                    width='480px'\n                    height='360px'\n                    type='text/html'\n                    frameBorder='0'\n                    allowFullScreen='allowfullscreen'\n                />\n            );\n        } else {\n            const image = metadata.images[0];\n\n            content = (\n                <div className='embed-responsive video-div__placeholder'>\n                    <div className='video-thumbnail__container'>\n                        <ExternalImage src={image.secure_url || image.url}>\n                            {(safeUrl) => (\n                                <img\n                                    src={safeUrl}\n                                    alt='youtube video thumbnail'\n                                    className='video-thumbnail'\n                                />\n                            )}\n                        </ExternalImage>\n                        <div className='block'>\n                            <span className='play-button'><span/></span>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='post__embed-container'\n            >\n                <div>\n                    {header}\n                    <div\n                        className='video-div embed-responsive-item'\n                        onClick={this.play}\n                    >\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    static isYoutubeLink(link) {\n        return link.trim().match(ytRegex);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOpenGraphMetadataForUrl} from 'mattermost-redux/selectors/entities/posts';\n\nimport YoutubeVideo from './youtube_video';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    return {\n        currentChannelId: getCurrentChannelId(state),\n        googleDeveloperKey: config.GoogleDeveloperKey,\n        hasImageProxy: config.HasImageProxy === 'true',\n        metadata: getOpenGraphMetadataForUrl(state, ownProps.postId, ownProps.link),\n    };\n}\n\nexport default connect(mapStateToProps)(YoutubeVideo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MessageAttachmentList from 'components/post_view/message_attachments/message_attachment_list';\nimport PostAttachmentOpenGraph from 'components/post_view/post_attachment_opengraph';\nimport PostImage from 'components/post_view/post_image';\nimport YoutubeVideo from 'components/youtube_video';\n\nexport default class PostBodyAdditionalContent extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render the content of\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * Plugin post will render embed\n         */\n        pluginPostWillRenderEmbedComponents: PropTypes.arrayOf(PropTypes.object),\n\n        /**\n         * The post's message\n         */\n        children: PropTypes.element,\n\n        /**\n         * Flag passed down to PostBodyAdditionalContent for determining if post embed is visible\n         */\n        isEmbedVisible: PropTypes.bool,\n\n        /**\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        actions: PropTypes.shape({\n            toggleEmbedVisibility: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    toggleEmbedVisibility = () => {\n        this.props.actions.toggleEmbedVisibility(this.props.post.id);\n    }\n\n    getEmbed = () => {\n        const {metadata} = this.props.post;\n        if (!metadata || !metadata.embeds || metadata.embeds.length === 0) {\n            return null;\n        }\n\n        return metadata.embeds[0];\n    }\n\n    isEmbedToggleable = (embed) => {\n        const postWillRenderEmbedComponents = this.props.pluginPostWillRenderEmbedComponents || [];\n        for (const c of postWillRenderEmbedComponents) {\n            if (c.match(embed)) {\n                return Boolean(c.toggleable);\n            }\n        }\n\n        return embed.type === 'image' || (embed.type === 'opengraph' && YoutubeVideo.isYoutubeLink(embed.url));\n    }\n\n    renderEmbed = (embed) => {\n        const postWillRenderEmbedComponents = this.props.pluginPostWillRenderEmbedComponents || [];\n        for (const c of postWillRenderEmbedComponents) {\n            if (c.match(embed)) {\n                const Component = c.component;\n                return this.props.isEmbedVisible && <Component embed={embed}/>;\n            }\n        }\n\n        switch (embed.type) {\n        case 'image':\n            if (!this.props.isEmbedVisible) {\n                return null;\n            }\n\n            return (\n                <PostImage\n                    imageMetadata={this.props.post.metadata.images[embed.url]}\n                    link={embed.url}\n                    post={this.props.post}\n                />\n            );\n\n        case 'message_attachment': {\n            let attachments = [];\n            if (this.props.post.props && this.props.post.props.attachments) {\n                attachments = this.props.post.props.attachments;\n            }\n\n            return (\n                <MessageAttachmentList\n                    attachments={attachments}\n                    postId={this.props.post.id}\n                    options={this.props.options}\n                    imagesMetadata={this.props.post.metadata.images}\n                />\n            );\n        }\n\n        case 'opengraph':\n            if (YoutubeVideo.isYoutubeLink(embed.url)) {\n                if (!this.props.isEmbedVisible) {\n                    return null;\n                }\n\n                return (\n                    <YoutubeVideo\n                        postId={this.props.post.id}\n                        link={embed.url}\n                        show={this.props.isEmbedVisible}\n                    />\n                );\n            }\n\n            return (\n                <PostAttachmentOpenGraph\n                    postId={this.props.post.id}\n                    link={embed.url}\n                    isEmbedVisible={this.props.isEmbedVisible}\n                    post={this.props.post}\n                    toggleEmbedVisibility={this.toggleEmbedVisibility}\n                />\n            );\n\n        default:\n            return null;\n        }\n    }\n\n    renderToggle = (prependToggle) => {\n        return (\n            <button\n                key='toggle'\n                className={`style--none post__embed-visibility color--link ${prependToggle ? 'pull-left' : ''}`}\n                data-expanded={this.props.isEmbedVisible}\n                aria-label='Toggle Embed Visibility'\n                onClick={this.toggleEmbedVisibility}\n            />\n        );\n    }\n\n    render() {\n        const embed = this.getEmbed();\n\n        if (embed) {\n            const toggleable = this.isEmbedToggleable(embed);\n            const prependToggle = (/^\\s*https?:\\/\\/.*$/).test(this.props.post.message);\n\n            return (\n                <div>\n                    {(toggleable && prependToggle) && this.renderToggle(true)}\n                    {this.props.children}\n                    {(toggleable && !prependToggle) && this.renderToggle(false)}\n                    {this.renderEmbed(embed)}\n                </div>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {toggleEmbedVisibility} from 'actions/post_actions';\n\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport PostBodyAdditionalContent from './post_body_additional_content';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n        pluginPostWillRenderEmbedComponents: state.plugins.components.PostWillRenderEmbedComponent,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            toggleEmbedVisibility,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostBodyAdditionalContent);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport * as PostUtils from 'utils/post_utils';\nimport * as Utils from 'utils/utils';\n\nimport PostMarkdown from 'components/post_markdown';\nimport Pluggable from 'plugins/pluggable';\nimport ShowMore from 'components/post_view/show_more';\n\nexport default class PostMessageView extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the message for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * Set to enable Markdown formatting\n         */\n        enableFormatting: PropTypes.bool,\n\n        /*\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        /**\n         * Set to render post body compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Flags if the post_message_view is for the RHS (Reply).\n         */\n        isRHS: PropTypes.bool,\n\n        /**\n         * Whether or not the RHS is visible\n         */\n        isRHSOpen: PropTypes.bool,\n\n        /**\n         * Whether or not the RHS is expanded\n         */\n        isRHSExpanded: PropTypes.bool,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n\n        /*\n         * Post type components from plugins\n         */\n        pluginPostTypes: PropTypes.object,\n    };\n\n    static defaultProps = {\n        options: {},\n        isRHS: false,\n        pluginPostTypes: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            collapse: true,\n            hasOverflow: false,\n            checkOverflow: 0,\n        };\n\n        this.imageProps = {\n            onImageLoaded: this.handleHeightReceived,\n        };\n    }\n\n    handleHeightReceived = (height) => {\n        if (height > 0) {\n            // Increment checkOverflow to indicate change in height\n            // and recompute textContainer height at ShowMore component\n            // and see whether overflow text of show more/less is necessary or not.\n            this.setState((prevState) => {\n                return {checkOverflow: prevState.checkOverflow + 1};\n            });\n        }\n    };\n\n    renderDeletedPost() {\n        return (\n            <p>\n                <FormattedMessage\n                    id='post_body.deleted'\n                    defaultMessage='(message deleted)'\n                />\n            </p>\n        );\n    }\n\n    renderEditedIndicator() {\n        if (!PostUtils.isEdited(this.props.post)) {\n            return null;\n        }\n\n        return (\n            <span\n                id={`postEdited_${this.props.post.id}`}\n                className='post-edited__indicator'\n            >\n                <FormattedMessage\n                    id='post_message_view.edited'\n                    defaultMessage='(edited)'\n                />\n            </span>\n        );\n    }\n\n    render() {\n        const {\n            post,\n            enableFormatting,\n            options,\n            pluginPostTypes,\n            compactDisplay,\n            isRHS,\n            theme,\n        } = this.props;\n\n        if (post.state === Posts.POST_DELETED) {\n            return this.renderDeletedPost();\n        }\n\n        if (!enableFormatting) {\n            return <span>{post.message}</span>;\n        }\n\n        const postType = post.props && post.props.type ? post.props.type : post.type;\n\n        if (pluginPostTypes.hasOwnProperty(postType)) {\n            const PluginComponent = pluginPostTypes[postType].component;\n            return (\n                <PluginComponent\n                    post={post}\n                    compactDisplay={compactDisplay}\n                    isRHS={isRHS}\n                    theme={theme}\n                />\n            );\n        }\n\n        let message = post.message;\n        const isEphemeral = Utils.isPostEphemeral(post);\n        if (compactDisplay && isEphemeral) {\n            const visibleMessage = Utils.localizeMessage('post_info.message.visible.compact', ' (Only visible to you)');\n            message = message.concat(visibleMessage);\n        }\n\n        const id = isRHS ? `rhsPostMessageText_${post.id}` : `postMessageText_${post.id}`;\n\n        return (\n            <ShowMore\n                checkOverflow={this.state.checkOverflow}\n                text={message}\n            >\n                <div\n                    aria-readonly='true'\n                    tabIndex='0'\n                    id={id}\n                    className='post-message__text'\n                    onClick={Utils.handleFormattedTextClick}\n                >\n                    <PostMarkdown\n                        message={message}\n                        imageProps={this.imageProps}\n                        isRHS={isRHS}\n                        options={options}\n                        post={post}\n                        channelId={post.channel_id}\n                    />\n                </div>\n                {this.renderEditedIndicator()}\n                <Pluggable\n                    pluggableName='PostMessageAttachment'\n                    postId={post.id}\n                    onHeightChange={this.handleHeightReceived}\n                />\n            </ShowMore>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getTheme, getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getIsRhsExpanded, getIsRhsOpen} from 'selectors/rhs';\n\nimport PostMessageView from './post_message_view.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        enableFormatting: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', true),\n        isRHSExpanded: getIsRhsExpanded(state),\n        isRHSOpen: getIsRhsOpen(state),\n        pluginPostTypes: state.plugins.postTypes,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(PostMessageView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport PostBodyAdditionalContent from 'components/post_view/post_body_additional_content';\nimport PostMessageView from 'components/post_view/post_message_view';\n\nexport default function MessageWithAdditionalContent({post, previewCollapsed, previewEnabled, isEmbedVisible, pluginPostTypes}) {\n    const hasPlugin = post.type && pluginPostTypes.hasOwnProperty(post.type);\n    let msg;\n    const messageWrapper = (\n        <PostMessageView\n            post={post}\n            isRHS={true}\n            hasMention={true}\n        />\n    );\n    if (post.state === Posts.POST_DELETED || hasPlugin) {\n        msg = messageWrapper;\n    } else {\n        msg = (\n            <PostBodyAdditionalContent\n                post={post}\n                previewCollapsed={previewCollapsed}\n                previewEnabled={previewEnabled}\n                isEmbedVisible={isEmbedVisible}\n            >\n                {messageWrapper}\n            </PostBodyAdditionalContent>\n        );\n    }\n    return msg;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class InfoSmallIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.info'\n                    defaultMessage='Info Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            className='svg-text-color'\n                            aria-label={ariaLabel}\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            version='1.1'\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-1015.000000, -516.000000)'\n                                    fill='inherit'\n                                >\n                                    <path d='M1027,540 C1020.37258,540 1015,534.627417 1015,528 C1015,521.372583 1020.37258,516 1027,516 C1033.62742,516 1039,521.372583 1039,528 C1039,534.627417 1033.62742,540 1027,540 Z M1027,527 C1025.89543,527 1025,527.895431 1025,529 L1025,533 C1025,534.104569 1025.89543,535 1027,535 C1028.10457,535 1029,534.104569 1029,533 L1029,529 C1029,527.895431 1028.10457,527 1027,527 Z M1027,525 C1028.10457,525 1029,524.104569 1029,523 C1029,521.895431 1028.10457,521 1027,521 C1025.89543,521 1025,521.895431 1025,523 C1025,524.104569 1025.89543,525 1027,525 Z'/>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nimport {imageURLForUser, isMobile, isGuest} from 'utils/utils.jsx';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport ProfilePopover from 'components/profile_popover';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\n\nconst colors = [\n    '#7cb305',\n    '#faad14',\n    '#9013FE',\n    '#1890ff',\n    '#389e0d',\n    '#08979c',\n    '#722ed1',\n    '#eb2f96',\n    '#fa8c16',\n    '#fa541c',\n    '#f5222d',\n];\nexport default class UserProfile extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bgColor: [\n                '#1B5E20',\n                '#7cb305',\n                '#311B92',\n                '#673AB7',\n                '#01579B',\n                '#1890ff',\n                '#006064',\n                '#009688',\n                '#880E4F',\n                '#eb2f96',\n                '#fa8c16',\n                '#f5222d',\n                '#BF360C',\n            ],\n            selectedColor: '',\n        };\n    }\n    static propTypes = {\n        disablePopover: PropTypes.bool,\n        displayName: PropTypes.string,\n        hasMention: PropTypes.bool,\n        hideStatus: PropTypes.bool,\n        isBusy: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        overwriteName: PropTypes.node,\n        user: PropTypes.object,\n        userId: PropTypes.string,\n    };\n\n    static defaultProps = {\n        disablePopover: false,\n        hasMention: false,\n        hideStatus: false,\n        isRHS: false,\n        overwriteImage: '',\n        overwriteName: '',\n    };\n    hideProfilePopover = () => {\n        if (this.overlay) {\n            this.overlay.hide();\n        }\n    };\n\n    setOverlaynRef = (ref) => {\n        this.overlay = ref;\n    };\n\n    componentDidMount = () => {\n        var item = this.state.bgColor[Math.floor(Math.random() * this.state.bgColor.length)];\n        this.setState({\n            selectedColor: item,\n        });\n    };\n\n    _getRandomColor = () => {\n        var item = this.state.bgColor[Math.floor(Math.random() * this.state.bgColor.length)];\n        this.setState({\n            selectedColor: item,\n        });\n    };\n\n    render() {\n        const {\n            disablePopover,\n            displayName,\n            isBusy,\n            isRHS,\n            hasMention,\n            hideStatus,\n            overwriteName,\n            user,\n            userId,\n        } = this.props;\n\n        const name = overwriteName || displayName || '...';\n        if (disablePopover) {\n            return <div className='user-popover'>{name}</div>;\n        }\n\n        let placement = 'right';\n        if (isRHS && !isMobile()) {\n            placement = 'left';\n        }\n\n        let profileImg = '';\n        if (user) {\n            profileImg = imageURLForUser(user);\n        }\n        return (\n            <React.Fragment>\n                <OverlayTrigger\n                    ref={this.setOverlaynRef}\n                    trigger='click'\n                    placement={placement}\n                    rootClose={true}\n                    overlay={\n                        <ProfilePopover\n                            className='user-profile-popover'\n                            userId={userId}\n                            src={profileImg}\n                            isBusy={isBusy}\n                            hide={this.hideProfilePopover}\n                            hideStatus={hideStatus}\n                            isRHS={isRHS}\n                            hasMention={hasMention}\n                        />\n                    }\n                >\n                    <button\n                        aria-label={name.toLowerCase()}\n                        className='user-popover style--none'\n                        style={{color: this.state.selectedColor}}\n                    >\n                        {name}\n                    </button>\n                </OverlayTrigger>\n                <BotBadge\n                    show={Boolean(user && user.is_bot)}\n                    className='badge-popoverlist'\n                />\n                <GuestBadge\n                    show={Boolean(user && isGuest(user))}\n                    className='badge-popoverlist'\n                />\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUser, makeGetDisplayName} from 'mattermost-redux/selectors/entities/users';\n\nimport UserProfile from './user_profile';\n\nfunction makeMapStateToProps() {\n    const getDisplayName = makeGetDisplayName();\n\n    return (state, ownProps) => {\n        return {\n            displayName: getDisplayName(state, ownProps.userId),\n            user: getUser(state, ownProps.userId),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(UserProfile);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\nimport {Posts} from 'mattermost-redux/constants/index';\nimport {\n    isPostEphemeral,\n    isPostPendingOrFailed,\n} from 'mattermost-redux/utils/post_utils';\n\nimport Constants, {Locations, A11yCustomEventTypes} from 'utils/constants';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport {isMobile} from 'utils/utils.jsx';\nimport DotMenu from 'components/dot_menu';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport FailedPostOptions from 'components/post_view/failed_post_options';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport PostTime from 'components/post_view/post_time';\nimport PostReaction from 'components/post_view/post_reaction';\nimport ReactionList from 'components/post_view/reaction_list';\nimport MessageWithAdditionalContent from 'components/message_with_additional_content';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport Badge from 'components/widgets/badges/badge';\nimport InfoSmallIcon from 'components/widgets/icons/info_small_icon';\n\nimport UserProfile from 'components/user_profile';\n\nclass RhsComment extends React.PureComponent {\n    static propTypes = {\n        post: PropTypes.object,\n        teamId: PropTypes.string.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        compactDisplay: PropTypes.bool,\n        author: PropTypes.string,\n        reactions: PropTypes.object,\n        isFlagged: PropTypes.bool,\n        isBusy: PropTypes.bool,\n        removePost: PropTypes.func.isRequired,\n        previewCollapsed: PropTypes.string.isRequired,\n        previewEnabled: PropTypes.bool.isRequired,\n        isEmbedVisible: PropTypes.bool,\n        enableEmojiPicker: PropTypes.bool.isRequired,\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n        isReadOnly: PropTypes.bool.isRequired,\n        pluginPostTypes: PropTypes.object,\n        channelIsArchived: PropTypes.bool.isRequired,\n        isConsecutivePost: PropTypes.bool,\n        handleCardClick: PropTypes.func,\n        a11yIndex: PropTypes.number,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n            markPostAsUnread: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.postRef = React.createRef();\n\n        this.state = {\n            showEmojiPicker: false,\n            dropdownOpened: false,\n            alt: false,\n            hover: false,\n            a11yActive: false,\n            currentAriaLabel: '',\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleAlt);\n        document.addEventListener('keyup', this.handleAlt);\n\n        if (this.postRef.current) {\n            this.postRef.current.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.postRef.current.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleAlt);\n        document.removeEventListener('keyup', this.handleAlt);\n\n        if (this.postRef.current) {\n            this.postRef.current.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.postRef.current.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.a11yActive) {\n            this.postRef.current.dispatchEvent(new Event(A11yCustomEventTypes.UPDATE));\n        }\n    }\n\n    removePost = () => {\n        this.props.removePost(this.props.post);\n    };\n\n    createRemovePostButton = () => {\n        return (\n            <button\n                className='post__remove theme color--link style--none'\n                type='button'\n                onClick={this.removePost}\n            >\n                {'×'}\n            </button>\n        );\n    };\n\n    renderPostTime = () => {\n        const post = this.props.post;\n\n        const isPermalink = !(Posts.POST_DELETED === post.state || isPostPendingOrFailed(post));\n\n        return (\n            <PostTime\n                isPermalink={isPermalink}\n                eventTime={post.create_at}\n                postId={post.id}\n                location={Locations.RHS_COMMENT}\n            />\n        );\n    };\n\n    toggleEmojiPicker = () => {\n        const showEmojiPicker = !this.state.showEmojiPicker;\n\n        this.setState({\n            showEmojiPicker,\n        });\n    };\n\n    getClassName = (post, isSystemMessage) => {\n        let className = 'post post--thread same--root post--comment';\n\n        if (this.props.currentUserId === post.user_id) {\n            className += ' current--user';\n        }\n\n        if (isSystemMessage) {\n            className += ' post--system';\n        }\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (post.is_pinned) {\n            className += ' post--pinned';\n        }\n\n        if (this.state.dropdownOpened || this.state.showEmojiPicker) {\n            className += ' post--hovered';\n        }\n\n        if (this.props.isConsecutivePost) {\n            className += ' same--user';\n        }\n\n        if (this.state.alt && !this.props.channelIsArchived) {\n            className += ' cursor--pointer';\n        }\n\n        return className;\n    };\n\n    handleAlt = (e) => {\n        if (this.state.alt !== e.altKey) {\n            this.setState({alt: e.altKey});\n        }\n    }\n\n    handleDropdownOpened = (isOpened) => {\n        this.setState({\n            dropdownOpened: isOpened,\n        });\n    };\n\n    getDotMenuRef = () => {\n        return this.refs.dotMenu;\n    };\n\n    setHover = () => {\n        this.setState({hover: true});\n    }\n\n    unsetHover = () => {\n        this.setState({hover: false});\n    }\n\n    handleA11yActivateEvent = () => {\n        this.setState({a11yActive: true});\n    }\n\n    handleA11yDeactivateEvent = () => {\n        this.setState({a11yActive: false});\n    }\n\n    handlePostClick = (e) => {\n        if (this.props.channelIsArchived) {\n            return;\n        }\n\n        if (e.altKey) {\n            this.props.actions.markPostAsUnread(this.props.post);\n        }\n    }\n\n    handlePostFocus = () => {\n        const {post, author, reactions, isFlagged} = this.props;\n        this.setState({currentAriaLabel: PostUtils.createAriaLabelForPost(post, author, isFlagged, reactions, this.props.intl)});\n    }\n\n    render() {\n        const {post, isConsecutivePost, isReadOnly, channelIsArchived} = this.props;\n\n        const isPostDeleted = post && post.state === Posts.POST_DELETED;\n        const isEphemeral = isPostEphemeral(post);\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n\n        let botIndicator;\n        let profilePicture;\n        let visibleMessage;\n\n        let userProfile = null;\n        if (this.props.compactDisplay || isMobile()) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    hasMention={true}\n                />\n            );\n        }\n\n        if (!isConsecutivePost) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    hasMention={true}\n                />\n            );\n\n            profilePicture = (\n                <PostProfilePicture\n                    compactDisplay={this.props.compactDisplay}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    post={post}\n                    userId={post.user_id}\n                />\n            );\n\n            if (post.props && post.props.from_webhook) {\n                if (post.props.override_username && this.props.enablePostUsernameOverride) {\n                    userProfile = (\n                        <UserProfile\n                            userId={post.user_id}\n                            hideStatus={true}\n                            overwriteName={post.props.override_username}\n                            disablePopover={true}\n                        />\n                    );\n                } else {\n                    userProfile = (\n                        <UserProfile\n                            userId={post.user_id}\n                            hideStatus={true}\n                            disablePopover={true}\n                        />\n                    );\n                }\n\n                botIndicator = (<BotBadge className='col col__name'/>);\n            } else if (fromAutoResponder) {\n                userProfile = (\n                    <span className='auto-responder'>\n                        <UserProfile\n                            userId={post.user_id}\n                            hideStatus={true}\n                            isBusy={this.props.isBusy}\n                            isRHS={true}\n                            hasMention={true}\n                        />\n                    </span>\n                );\n                botIndicator = (\n                    <Badge className='col col__name'>\n                        <FormattedMessage\n                            id='post_info.auto_responder'\n                            defaultMessage='AUTOMATIC REPLY'\n                        />\n                    </Badge>\n                );\n            } else if (isSystemMessage) {\n                userProfile = (\n                    <UserProfile\n                        overwriteName={\n                            <FormattedMessage\n                                id='post_info.system'\n                                defaultMessage='System'\n                            />\n                        }\n                        overwriteImage={Constants.SYSTEM_MESSAGE_PROFILE_IMAGE}\n                        disablePopover={true}\n                    />\n                );\n\n                visibleMessage = (\n                    <span className='post__visibility'>\n                        <FormattedMessage\n                            id='post_info.message.visible'\n                            defaultMessage='(Only visible to you)'\n                        />\n                    </span>\n                );\n            }\n        }\n\n        let failedPostOptions;\n        let postClass = '';\n\n        if (post.failed) {\n            postClass += ' post-failed';\n            failedPostOptions = <FailedPostOptions post={this.props.post}/>;\n        }\n\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let fileAttachment = null;\n        if (post.file_ids && post.file_ids.length > 0) {\n            fileAttachment = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        let postReaction;\n        if (!isReadOnly && !isEphemeral && !post.failed && !isSystemMessage && this.props.enableEmojiPicker && !channelIsArchived) {\n            postReaction = (\n                <PostReaction\n                    channelId={post.channel_id}\n                    postId={post.id}\n                    teamId={this.props.teamId}\n                    getDotMenuRef={this.getDotMenuRef}\n                    location={Locations.RHS_COMMENT}\n                    showEmojiPicker={this.state.showEmojiPicker}\n                    toggleEmojiPicker={this.toggleEmojiPicker}\n                />\n            );\n        }\n\n        let options;\n        if (isEphemeral) {\n            options = (\n                <div className='col col__remove'>\n                    {this.createRemovePostButton()}\n                </div>\n            );\n        } else if (isPostDeleted) {\n            options = null;\n        } else if (!isSystemMessage && (isMobile() || this.state.hover || this.state.a11yActive || this.state.dropdownOpened || this.state.showEmojiPicker)) {\n            const dotMenu = (\n                <DotMenu\n                    post={this.props.post}\n                    location={Locations.RHS_COMMENT}\n                    isFlagged={this.props.isFlagged}\n                    handleDropdownOpened={this.handleDropdownOpened}\n                    handleAddReactionClick={this.toggleEmojiPicker}\n                    isReadOnly={isReadOnly || channelIsArchived}\n                    enableEmojiPicker={this.props.enableEmojiPicker}\n                />\n            );\n\n            options = (\n                <div\n                    ref='dotMenu'\n                    className='col col__reply'\n                >\n                    {dotMenu}\n                    {postReaction}\n                </div>\n            );\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        let flagIcon = null;\n        if (this.state.hover || this.state.a11yActive || this.state.dropdownOpened || this.state.showEmojiPicker || this.props.isFlagged) {\n            flagIcon = (\n                <PostFlagIcon\n                    location={Locations.RHS_COMMENT}\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                    isEphemeral={isEphemeral}\n                />\n            );\n        }\n        const postTime = this.renderPostTime();\n\n        let postInfoIcon;\n        if (post.props && post.props.card) {\n            postInfoIcon = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip>\n                            <FormattedMessage\n                                id='post_info.info.view_additional_info'\n                                defaultMessage='View additional info'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <button\n                        className='card-icon__container icon--show style--none'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.props.handleCardClick(this.props.post);\n                        }}\n                    >\n                        <InfoSmallIcon\n                            className='icon icon__info'\n                            aria-hidden='true'\n                        />\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        return (\n            <div\n                role='listitem'\n                ref={this.postRef}\n                id={'rhsPost_' + post.id}\n                tabIndex='-1'\n                className={`a11y__section ${this.getClassName(post, isSystemMessage)}`}\n                onClick={this.handlePostClick}\n                onMouseOver={this.setHover}\n                onMouseLeave={this.unsetHover}\n                aria-label={this.state.currentAriaLabel}\n                onFocus={this.handlePostFocus}\n                data-a11y-sort-order={this.props.a11yIndex}\n            >\n                <div\n                    role='application'\n                    className='post__content'\n                >\n                    <div className='post__img'>\n                        {profilePicture}\n                    </div>\n                    <div>\n                        <div className='post__header'>\n                            <div className='col col__name'>\n                                {userProfile}\n                                {botIndicator}\n                            </div>\n                            <div className='col'>\n                                {postTime}\n                                {pinnedBadge}\n                                {postInfoIcon}\n                                {flagIcon}\n                                {visibleMessage}\n                            </div>\n                            {options}\n                        </div>\n                        <div className='post__body' >\n                            <div className={postClass}>\n                                {failedPostOptions}\n                                <MessageWithAdditionalContent\n                                    post={post}\n                                    previewCollapsed={this.props.previewCollapsed}\n                                    previewEnabled={this.props.previewEnabled}\n                                    isEmbedVisible={this.props.isEmbedVisible}\n                                    pluginPostTypes={this.props.pluginPostTypes}\n                                />\n                            </div>\n                            {fileAttachment}\n                            <ReactionList\n                                post={post}\n                                isReadOnly={isReadOnly || channelIsArchived}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(RhsComment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {isChannelReadOnlyById} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {makeGetReactionsForPost, getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {makeGetDisplayName} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {isSystemMessage} from 'mattermost-redux/utils/post_utils';\n\nimport {markPostAsUnread} from 'actions/post_actions.jsx';\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport {Preferences} from 'utils/constants';\n\nimport RhsComment from './rhs_comment.jsx';\n\nfunction isConsecutivePost(state, ownProps) {\n    const post = ownProps.post;\n    const previousPost = ownProps.previousPostId && getPost(state, ownProps.previousPostId);\n\n    let consecutivePost = false;\n\n    if (previousPost) {\n        const postFromWebhook = Boolean(post.props && post.props.from_webhook);\n        const prevPostFromWebhook = Boolean(previousPost.props && previousPost.props.from_webhook);\n        if (previousPost && previousPost.user_id === post.user_id &&\n            post.create_at - previousPost.create_at <= Posts.POST_COLLAPSE_TIMEOUT &&\n            !postFromWebhook && !prevPostFromWebhook &&\n            !isSystemMessage(post) && !isSystemMessage(previousPost) &&\n            (previousPost.root_id === post.root_id || previousPost.id === post.root_id)) {\n            // The last post and this post were made by the same user within some time\n            consecutivePost = true;\n        }\n    }\n    return consecutivePost;\n}\n\nfunction mapStateToProps(state, ownProps) {\n    const getReactionsForPost = makeGetReactionsForPost();\n    const getDisplayName = makeGetDisplayName();\n\n    const config = getConfig(state);\n    const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const teamId = ownProps.teamId || getCurrentTeamId(state);\n    const channel = state.entities.channels.channels[ownProps.post.channel_id];\n\n    return {\n        author: getDisplayName(state, ownProps.post.user_id),\n        reactions: getReactionsForPost(state, ownProps.post.id),\n        enableEmojiPicker,\n        enablePostUsernameOverride,\n        isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n        isReadOnly: isChannelReadOnlyById(state, ownProps.post.channel_id),\n        teamId,\n        pluginPostTypes: state.plugins.postTypes,\n        channelIsArchived: isArchivedChannel(channel),\n        isConsecutivePost: isConsecutivePost(state, ownProps),\n        isFlagged: get(state, Preferences.CATEGORY_FLAGGED_POST, ownProps.post.id, null) != null,\n        compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            markPostAsUnread,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RhsComment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport Constants, {RHSStates} from 'utils/constants';\n\nexport default class RhsHeaderPost extends React.Component {\n    static propTypes = {\n        previousRhsState: PropTypes.oneOf(\n            Object.values(RHSStates)\n        ),\n        actions: PropTypes.shape({\n            showMentions: PropTypes.func,\n            showSearchResults: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            showPinnedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func,\n            toggleRhsExpanded: PropTypes.func,\n        }),\n    };\n\n    handleBack = (e) => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.MENTION:\n            this.props.actions.showMentions();\n            break;\n        case RHSStates.FLAG:\n            this.props.actions.showFlaggedPosts();\n            break;\n        case RHSStates.PIN:\n            this.props.actions.showPinnedPosts();\n            break;\n        default:\n            break;\n        }\n    }\n\n    render() {\n        let back;\n        const closeSidebarTooltip = (\n            <Tooltip id='closeSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.closeSidebarTooltip'\n                    defaultMessage='Close Sidebar'\n                />\n            </Tooltip>\n        );\n\n        let backToResultsTooltip;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToResultsTooltip'\n                        defaultMessage='Back to Search Results'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.FLAG:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToFlaggedTooltip'\n                        defaultMessage='Back to Flagged Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.PIN:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToPinnedTooltip'\n                        defaultMessage='Back to Pinned Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        }\n\n        const expandSidebarTooltip = (\n            <Tooltip id='expandSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const shrinkSidebarTooltip = (\n            <Tooltip id='shrinkSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.shrinkSidebarTooltip'\n                    defaultMessage='Shrink Sidebar'\n                />\n            </Tooltip>\n        );\n\n        if (backToResultsTooltip) {\n            back = (\n                <a\n                    href='#'\n                    onClick={this.handleBack}\n                    className='sidebar--right__back'\n                >\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        overlay={backToResultsTooltip}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.back'\n                            defaultMessage='Back Icon'\n                        >\n                            {(ariaLabel) => (\n                                <i\n                                    className='fa fa-angle-left'\n                                    aria-label={ariaLabel}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </OverlayTrigger>\n                </a>\n            );\n        }\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>\n                    {back}\n                    <FormattedMessage\n                        id='rhs_header.details'\n                        defaultMessage='Message Details'\n                    />\n                </span>\n                <div className='pull-right'>\n                    <button\n                        type='button'\n                        className='sidebar--right__expand'\n                        aria-label='Expand'\n                        onClick={this.props.actions.toggleRhsExpanded}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={expandSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandSidebarTooltip.icon'\n                                defaultMessage='Expand Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-expand'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={shrinkSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandTooltip.icon'\n                                defaultMessage='Shrink Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-compress'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                    <button\n                        id='rhsCloseButton'\n                        type='button'\n                        className='sidebar--right__close'\n                        aria-label='Close'\n                        onClick={this.props.actions.closeRightHandSide}\n                    >\n\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={closeSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.closeTooltip.icon'\n                                defaultMessage='Close Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-sign-out'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\n\nimport RhsHeaderPost from './rhs_header_post.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            showSearchResults,\n            showMentions,\n            showFlaggedPosts,\n            showPinnedPosts,\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RhsHeaderPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\nimport {Posts} from 'mattermost-redux/constants';\nimport * as ReduxPostUtils from 'mattermost-redux/utils/post_utils';\n\nimport Constants, {Locations} from 'utils/constants';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport DotMenu from 'components/dot_menu';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport ReactionList from 'components/post_view/reaction_list';\nimport PostTime from 'components/post_view/post_time';\nimport PostReaction from 'components/post_view/post_reaction';\nimport MessageWithAdditionalContent from 'components/message_with_additional_content';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport InfoSmallIcon from 'components/widgets/icons/info_small_icon';\n\nimport UserProfile from 'components/user_profile';\n\nclass RhsRootPost extends React.PureComponent {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n        teamId: PropTypes.string.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        compactDisplay: PropTypes.bool,\n        commentCount: PropTypes.number.isRequired,\n        author: PropTypes.string,\n        reactions: PropTypes.object,\n        isFlagged: PropTypes.bool,\n        previewCollapsed: PropTypes.string,\n        previewEnabled: PropTypes.bool,\n        isBusy: PropTypes.bool,\n        isEmbedVisible: PropTypes.bool,\n        enableEmojiPicker: PropTypes.bool.isRequired,\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n        isReadOnly: PropTypes.bool.isRequired,\n        pluginPostTypes: PropTypes.object,\n        channelIsArchived: PropTypes.bool.isRequired,\n        channelType: PropTypes.string,\n        channelDisplayName: PropTypes.string,\n        handleCardClick: PropTypes.func.isRequired,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n            markPostAsUnread: PropTypes.func.isRequired,\n        }),\n    };\n\n    static defaultProps = {\n        commentCount: 0,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            alt: false,\n            showEmojiPicker: false,\n            testStateObj: true,\n            dropdownOpened: false,\n            currentAriaLabel: '',\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleAlt);\n        document.addEventListener('keyup', this.handleAlt);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleAlt);\n        document.removeEventListener('keyup', this.handleAlt);\n    }\n\n    renderPostTime = (isEphemeral) => {\n        const post = this.props.post;\n\n        if (post.type === Constants.PostTypes.FAKE_PARENT_DELETED) {\n            return null;\n        }\n\n        const isPermalink = !(isEphemeral ||\n            Posts.POST_DELETED === post.state ||\n            ReduxPostUtils.isPostPendingOrFailed(post));\n\n        return (\n            <PostTime\n                isPermalink={isPermalink}\n                eventTime={post.create_at}\n                postId={post.id}\n                location={Locations.RHS_ROOT}\n            />\n        );\n    };\n\n    toggleEmojiPicker = () => {\n        const showEmojiPicker = !this.state.showEmojiPicker;\n\n        this.setState({\n            showEmojiPicker,\n        });\n    };\n\n    getClassName = (post, isSystemMessage) => {\n        let className = 'post post--root post--thread';\n        if (this.props.currentUserId === post.user_id) {\n            className += ' current--user';\n        }\n\n        if (isSystemMessage) {\n            className += ' post--system';\n        }\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (post.is_pinned) {\n            className += ' post--pinned';\n        }\n\n        if (this.state.dropdownOpened || this.state.showEmojiPicker) {\n            className += ' post--hovered';\n        }\n\n        if (this.state.alt && !this.props.channelIsArchived) {\n            className += ' cursor--pointer';\n        }\n\n        return className;\n    };\n\n    handleAlt = (e) => {\n        if (this.state.alt !== e.altKey) {\n            this.setState({alt: e.altKey});\n        }\n    }\n\n    handleDropdownOpened = (isOpened) => {\n        this.setState({\n            dropdownOpened: isOpened,\n        });\n    };\n\n    handlePostClick = (e) => {\n        if (this.props.channelIsArchived) {\n            return;\n        }\n\n        if (e.altKey) {\n            this.props.actions.markPostAsUnread(this.props.post);\n        }\n    }\n\n    handlePostFocus = () => {\n        const {post, author, reactions, isFlagged} = this.props;\n        this.setState({currentAriaLabel: PostUtils.createAriaLabelForPost(post, author, isFlagged, reactions, this.props.intl)});\n    }\n\n    getDotMenuRef = () => {\n        return this.refs.dotMenu;\n    };\n\n    render() {\n        const {post, isReadOnly, teamId, channelIsArchived, channelType, channelDisplayName} = this.props;\n\n        const isPostDeleted = post && post.state === Posts.POST_DELETED;\n        const isEphemeral = Utils.isPostEphemeral(post);\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n\n        let channelName;\n        if (channelType === 'D') {\n            channelName = (\n                <FormattedMessage\n                    id='rhs_root.direct'\n                    defaultMessage='Direct Message'\n                />\n            );\n        } else {\n            channelName = channelDisplayName;\n        }\n\n        let postReaction;\n        if (!isReadOnly && !isEphemeral && !post.failed && !isSystemMessage && this.props.enableEmojiPicker && !channelIsArchived) {\n            postReaction = (\n                <PostReaction\n                    channelId={post.channel_id}\n                    postId={post.id}\n                    teamId={teamId}\n                    getDotMenuRef={this.getDotMenuRef}\n                    location={Locations.RHS_ROOT}\n                    showEmojiPicker={this.state.showEmojiPicker}\n                    toggleEmojiPicker={this.toggleEmojiPicker}\n                />\n            );\n        }\n\n        let fileAttachment = null;\n        if (post.file_ids && post.file_ids.length > 0) {\n            fileAttachment = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        let userProfile;\n        let botIndicator;\n        if (isSystemMessage) {\n            userProfile = (\n                <UserProfile\n                    overwriteName={\n                        <FormattedMessage\n                            id='post_info.system'\n                            defaultMessage='System'\n                        />\n                    }\n                    overwriteImage={Constants.SYSTEM_MESSAGE_PROFILE_IMAGE}\n                    disablePopover={true}\n                />\n            );\n        } else if (post.props && post.props.from_webhook) {\n            if (post.props.override_username && this.props.enablePostUsernameOverride) {\n                userProfile = (\n                    <UserProfile\n                        key={post.user_id}\n                        userId={post.user_id}\n                        hideStatus={true}\n                        overwriteName={post.props.override_username}\n                        disablePopover={true}\n                    />\n                );\n            } else {\n                userProfile = (\n                    <UserProfile\n                        key={post.user_id}\n                        userId={post.user_id}\n                        hideStatus={true}\n                        disablePopover={true}\n                    />\n                );\n            }\n\n            botIndicator = <BotBadge/>;\n        } else {\n            userProfile = (\n                <UserProfile\n                    key={post.user_id}\n                    userId={post.user_id}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    hasMention={true}\n                />\n            );\n        }\n\n        let postClass = '';\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        const dotMenu = (\n            <DotMenu\n                post={this.props.post}\n                location={Locations.RHS_ROOT}\n                isFlagged={this.props.isFlagged}\n                handleDropdownOpened={this.handleDropdownOpened}\n                handleAddReactionClick={this.toggleEmojiPicker}\n                commentCount={this.props.commentCount}\n                isReadOnly={isReadOnly || channelIsArchived}\n                enableEmojiPicker={this.props.enableEmojiPicker}\n            />\n        );\n\n        let dotMenuContainer;\n        if (!isPostDeleted && this.props.post.type !== Constants.PostTypes.FAKE_PARENT_DELETED) {\n            dotMenuContainer = (\n                <div\n                    ref='dotMenu'\n                    className='col col__reply'\n                >\n                    {dotMenu}\n                    {postReaction}\n                </div>\n            );\n        }\n\n        let postFlagIcon;\n        const showFlagIcon = !isEphemeral && !post.failed && !isSystemMessage;\n        if (showFlagIcon) {\n            postFlagIcon = (\n                <PostFlagIcon\n                    location={Locations.RHS_ROOT}\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                />\n            );\n        }\n\n        let postInfoIcon;\n        if (this.props.post.props && this.props.post.props.card) {\n            postInfoIcon = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip>\n                            <FormattedMessage\n                                id='post_info.info.view_additional_info'\n                                defaultMessage='View additional info'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <button\n                        className='card-icon__container icon--show style--none'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.props.handleCardClick(this.props.post);\n                        }}\n                    >\n                        <InfoSmallIcon\n                            className='icon icon__info'\n                            aria-hidden='true'\n                        />\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        return (\n            <div\n                role='listitem'\n                id={'rhsPost_' + post.id}\n                tabIndex='-1'\n                className={`thread__root a11y__section ${this.getClassName(post, isSystemMessage)}`}\n                aria-label={this.state.currentAriaLabel}\n                onClick={this.handlePostClick}\n                onFocus={this.handlePostFocus}\n                data-a11y-sort-order='0'\n            >\n                <div className='post-right-channel__name'>{channelName}</div>\n                <div\n                    role='application'\n                    className='post__content'\n                >\n                    <div className='post__img'>\n                        <PostProfilePicture\n                            compactDisplay={this.props.compactDisplay}\n                            isBusy={this.props.isBusy}\n                            isRHS={true}\n                            post={post}\n                            userId={post.user_id}\n                        />\n                    </div>\n                    <div>\n                        <div className='post__header'>\n                            <div className='col__name'>\n                                {userProfile}\n                                {botIndicator}\n                            </div>\n                            <div className='col'>\n                                {this.renderPostTime(isEphemeral)}\n                                {pinnedBadge}\n                                {postInfoIcon}\n                                {postFlagIcon}\n                            </div>\n                            {dotMenuContainer}\n                        </div>\n                        <div className='post__body'>\n                            <div className={postClass}>\n                                <MessageWithAdditionalContent\n                                    post={post}\n                                    previewCollapsed={this.props.previewCollapsed}\n                                    previewEnabled={this.props.previewEnabled}\n                                    isEmbedVisible={this.props.isEmbedVisible}\n                                    pluginPostTypes={this.props.pluginPostTypes}\n                                />\n                            </div>\n                            {fileAttachment}\n                            <ReactionList\n                                post={post}\n                                isReadOnly={isReadOnly || channelIsArchived}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(RhsRootPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {isChannelReadOnlyById, getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {makeGetReactionsForPost} from 'mattermost-redux/selectors/entities/posts';\nimport {makeGetDisplayName} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {markPostAsUnread} from 'actions/post_actions.jsx';\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport {Preferences} from 'utils/constants';\n\nimport RhsRootPost from './rhs_root_post.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const getReactionsForPost = makeGetReactionsForPost();\n    const getDisplayName = makeGetDisplayName();\n\n    const config = getConfig(state);\n    const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const teamId = ownProps.teamId || getCurrentTeamId(state);\n    const channel = getChannel(state, ownProps.post.channel_id) || {};\n\n    return {\n        author: getDisplayName(state, ownProps.post.user_id),\n        reactions: getReactionsForPost(state, ownProps.post.id),\n        enableEmojiPicker,\n        enablePostUsernameOverride,\n        isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n        isReadOnly: isChannelReadOnlyById(state, ownProps.post.channel_id),\n        teamId,\n        pluginPostTypes: state.plugins.postTypes,\n        channelIsArchived: isArchivedChannel(channel),\n        channelType: channel.type,\n        channelDisplayName: channel.display_name,\n        isFlagged: get(state, Preferences.CATEGORY_FLAGGED_POST, ownProps.post.id, null) != null,\n        compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            markPostAsUnread,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RhsRootPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport Constants from 'utils/constants';\nimport DelayedAction from 'utils/delayed_action';\nimport * as Utils from 'utils/utils.jsx';\nimport * as UserAgent from 'utils/user_agent';\nimport CreateComment from 'components/create_comment';\nimport DateSeparator from 'components/post_view/date_separator';\nimport FloatingTimestamp from 'components/post_view/floating_timestamp';\nimport RhsComment from 'components/rhs_comment';\nimport RhsHeaderPost from 'components/rhs_header_post';\nimport RhsRootPost from 'components/rhs_root_post';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal() {\n    return (<div/>);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport default class RhsThread extends React.Component {\n    static propTypes = {\n        posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n        channel: PropTypes.object.isRequired,\n        selected: PropTypes.object.isRequired,\n        previousRhsState: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        previewCollapsed: PropTypes.string.isRequired,\n        previewEnabled: PropTypes.bool.isRequired,\n        socketConnectionStatus: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            removePost: PropTypes.func.isRequired,\n            selectPostCard: PropTypes.func.isRequired,\n            getPostThread: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let updatedState = {selected: props.selected};\n        if (state.selected && props.selected && state.selected.id !== props.selected.id) {\n            updatedState = {...updatedState, openTime: (new Date()).getTime()};\n        }\n        return updatedState;\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n\n        const openTime = (new Date()).getTime();\n\n        this.state = {\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n            isScrolling: false,\n            topRhsPostId: 0,\n            openTime,\n        };\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n        window.addEventListener('resize', this.handleResize);\n        if (this.props.posts.length < (Utils.getRootPost(this.props.posts).reply_count + 1)) {\n            this.props.actions.getPostThread(this.props.selected.id, true);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    componentDidUpdate(prevProps) {\n        const prevPostsArray = prevProps.posts || [];\n        const curPostsArray = this.props.posts || [];\n\n        if (this.props.socketConnectionStatus && !prevProps.socketConnectionStatus) {\n            this.props.actions.getPostThread(this.props.selected.id);\n        }\n\n        if (prevPostsArray.length >= curPostsArray.length) {\n            return;\n        }\n\n        const curLastPost = curPostsArray[0];\n\n        if (curLastPost.user_id === this.props.currentUserId) {\n            this.scrollToBottom();\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState.postsArray, this.props.posts)) {\n            return true;\n        }\n\n        if (!Utils.areObjectsEqual(nextState.selected, this.props.selected)) {\n            return true;\n        }\n\n        if (nextProps.previewEnabled !== this.props.previewEnabled) {\n            return true;\n        }\n\n        if (nextState.isBusy !== this.state.isBusy) {\n            return true;\n        }\n\n        if (nextState.isScrolling !== this.state.isScrolling) {\n            return true;\n        }\n\n        if (nextState.topRhsPostId !== this.state.topRhsPostId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleResize = () => {\n        this.setState({\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n        });\n\n        if (UserAgent.isMobile() && document.activeElement.id === 'reply_textbox') {\n            this.scrollToBottom();\n        }\n    }\n\n    handleCardClick = (post) => {\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPostCard(post);\n    }\n\n    handleCardClickPost = (post) => {\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPostCard(post);\n    }\n\n    onBusy = (isBusy) => {\n        this.setState({isBusy});\n    }\n\n    filterPosts = (posts, selected, openTime) => {\n        const postsArray = [];\n\n        posts.forEach((cpost) => {\n            // Do not show empherals created before sidebar has been opened\n            if (cpost.type === 'system_ephemeral' && cpost.create_at < openTime) {\n                return;\n            }\n\n            if (cpost.root_id === selected.id) {\n                postsArray.unshift(cpost);\n            }\n        });\n\n        return postsArray;\n    }\n\n    scrollToBottom = () => {\n        if ($('.post-right__scroll')[0]) {\n            $('.post-right__scroll').parent().scrollTop($('.post-right__scroll')[0].scrollHeight);\n        }\n    }\n\n    updateFloatingTimestamp = () => {\n        // skip this in non-mobile view since that's when the timestamp is visible\n        if (!Utils.isMobile()) {\n            return;\n        }\n\n        if (this.props.posts) {\n            const childNodes = this.refs.rhspostlist.childNodes;\n            const viewPort = this.refs.rhspostlist.getBoundingClientRect();\n            let topRhsPostId = '';\n            const offset = 100;\n\n            // determine the top rhs comment assuming that childNodes and postsArray are of same length\n            for (let i = 0; i < childNodes.length; i++) {\n                if ((childNodes[i].offsetTop + viewPort.top) - offset > 0) {\n                    topRhsPostId = this.props.posts[i].id;\n                    break;\n                }\n            }\n\n            if (topRhsPostId !== this.state.topRhsPostId) {\n                this.setState({\n                    topRhsPostId,\n                });\n            }\n        }\n    }\n\n    handleScroll = () => {\n        this.updateFloatingTimestamp();\n\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n    }\n\n    handleScrollStop = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    }\n\n    render() {\n        if (this.props.posts == null || this.props.selected == null) {\n            return (\n                <div/>\n            );\n        }\n\n        const postsArray = this.filterPosts(this.props.posts, this.props.selected, this.state.openTime);\n        const {selected, currentUserId} = this.props;\n\n        let createAt = selected.create_at;\n        if (!createAt && this.props.posts.length > 0) {\n            createAt = this.props.posts[this.props.posts.length - 1].create_at;\n        }\n        const rootPostDay = Utils.getDateForUnixTicks(createAt);\n        let previousPostDay = rootPostDay;\n\n        const commentsLists = [];\n        const postsLength = postsArray.length;\n        let a11yIndex = 1;\n        for (let i = 0; i < postsLength; i++) {\n            const comPost = postsArray[i];\n            const previousPostId = i > 0 ? postsArray[i - 1].id : '';\n\n            const currentPostDay = Utils.getDateForUnixTicks(comPost.create_at);\n            if (currentPostDay.toDateString() !== previousPostDay.toDateString()) {\n                previousPostDay = currentPostDay;\n                commentsLists.push(\n                    <DateSeparator\n                        key={currentPostDay}\n                        date={currentPostDay}\n                    />);\n            }\n\n            const keyPrefix = comPost.id ? comPost.id : comPost.pending_post_id;\n\n            commentsLists.push(\n                <RhsComment\n                    key={keyPrefix + 'commentKey'}\n                    ref={comPost.id}\n                    post={comPost}\n                    previousPostId={previousPostId}\n                    teamId={this.props.channel.team_id}\n                    currentUserId={currentUserId}\n                    isBusy={this.state.isBusy}\n                    removePost={this.props.actions.removePost}\n                    previewCollapsed={this.props.previewCollapsed}\n                    previewEnabled={this.props.previewEnabled}\n                    handleCardClick={this.handleCardClickPost}\n                    a11yIndex={a11yIndex++}\n                />\n            );\n        }\n\n        let createComment;\n        const isFakeDeletedPost = selected.type === Constants.PostTypes.FAKE_PARENT_DELETED;\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        if (!isFakeDeletedPost) {\n            if (channelIsArchived) {\n                createComment = (\n                    <div className='channel-archived-warning'>\n                        <FormattedMarkdownMessage\n                            id='archivedChannelMessage'\n                            defaultMessage='You are viewing an **archived channel**. New messages cannot be posted.'\n                        />\n                    </div>\n                );\n            } else {\n                createComment = (\n                    <div className='post-create__container'>\n                        <CreateComment\n                            channelId={selected.channel_id}\n                            rootId={selected.id}\n                            rootDeleted={selected.state === Posts.POST_DELETED}\n                            latestPostId={postsLength > 0 ? postsArray[postsLength - 1].id : selected.id}\n                        />\n                    </div>\n                );\n            }\n        }\n\n        if (this.props.channel.type === Constants.DM_CHANNEL) {\n            const teammate = Utils.getDirectTeammate(this.props.channel.id);\n            if (teammate && teammate.delete_at) {\n                createComment = (\n                    <div\n                        className='post-create-message'\n                    >\n                        <FormattedMessage\n                            id='create_post.deactivated'\n                            defaultMessage='You are viewing an archived channel with a deactivated user.'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div\n                id='rhsContainer'\n                className='sidebar-right__body'\n            >\n                <FloatingTimestamp\n                    isScrolling={this.state.isScrolling}\n                    isMobile={Utils.isMobile()}\n                    postId={this.state.topRhsPostId}\n                    isRhsPost={true}\n                />\n                <RhsHeaderPost\n                    previousRhsState={this.props.previousRhsState}\n                />\n                <Scrollbars\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div className='post-right__scroll'>\n                        <div\n                            role='application'\n                            id='rhsContent'\n                            aria-label={Utils.localizeMessage('accessibility.sections.rhsContent', 'message details complimentary region')}\n                            className='post-right__content a11y__region'\n                            data-a11y-sort-order='3'\n                            data-a11y-focus-child={true}\n                            data-a11y-order-reversed={true}\n                        >\n                            {!isFakeDeletedPost && <DateSeparator date={rootPostDay}/>}\n                            <RhsRootPost\n                                ref={selected.id}\n                                post={selected}\n                                commentCount={postsLength}\n                                teamId={this.props.channel.team_id}\n                                currentUserId={this.props.currentUserId}\n                                previewCollapsed={this.props.previewCollapsed}\n                                previewEnabled={this.props.previewEnabled}\n                                isBusy={this.state.isBusy}\n                                handleCardClick={this.handleCardClick}\n                            />\n                            {isFakeDeletedPost && rootPostDay && <DateSeparator date={rootPostDay}/>}\n                            <div\n                                ref='rhspostlist'\n                                className='post-right-comments-container'\n                                id='rhsPostList'\n                            >\n                                {commentsLists}\n                            </div>\n                        </div>\n                        {createComment}\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {makeGetPostsForThread} from 'mattermost-redux/selectors/entities/posts';\nimport {get, getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {removePost, getPostThread} from 'mattermost-redux/actions/posts';\n\nimport {Preferences} from 'utils/constants';\nimport {getSelectedPost} from 'selectors/rhs.jsx';\nimport {getSocketStatus} from 'selectors/views/websocket';\nimport {selectPostCard} from 'actions/views/rhs';\n\nimport RhsThread from './rhs_thread.jsx';\n\nfunction makeMapStateToProps() {\n    const getPostsForThread = makeGetPostsForThread();\n\n    return function mapStateToProps(state) {\n        const selected = getSelectedPost(state);\n        const socketStatus = getSocketStatus(state);\n\n        let channel = null;\n        let posts = [];\n        if (selected) {\n            posts = getPostsForThread(state, {rootId: selected.id});\n            channel = getChannel(state, selected.channel_id);\n        }\n\n        const previewCollapsed = get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT);\n\n        return {\n            selected,\n            channel,\n            posts,\n            socketConnectionStatus: socketStatus.connected,\n            previewCollapsed,\n            previewEnabled: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removePost,\n            selectPostCard,\n            getPostThread,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(RhsThread);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport Constants, {RHSStates} from 'utils/constants';\n\nexport default class RhsCardHeader extends React.Component {\n    static propTypes = {\n        previousRhsState: PropTypes.oneOf(Object.values(RHSStates)),\n        actions: PropTypes.shape({\n            showMentions: PropTypes.func,\n            showSearchResults: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            showPinnedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func,\n            toggleRhsExpanded: PropTypes.func.isRequired,\n        }),\n    };\n\n    handleBack = (e) => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.MENTION:\n            this.props.actions.showMentions();\n            break;\n        case RHSStates.FLAG:\n            this.props.actions.showFlaggedPosts();\n            break;\n        case RHSStates.PIN:\n            this.props.actions.showPinnedPosts();\n            break;\n        default:\n            break;\n        }\n    }\n\n    render() {\n        let back;\n        let backToResultsTooltip;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToResultsTooltip'\n                        defaultMessage='Back to Search Results'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.FLAG:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToFlaggedTooltip'\n                        defaultMessage='Back to Flagged Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.PIN:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToPinnedTooltip'\n                        defaultMessage='Back to Pinned Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        }\n\n        const closeSidebarTooltip = (\n            <Tooltip id='closeSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.closeSidebarTooltip'\n                    defaultMessage='Close Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const expandSidebarTooltip = (\n            <Tooltip id='expandSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const shrinkSidebarTooltip = (\n            <Tooltip id='shrinkSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.shrinkSidebarTooltip'\n                    defaultMessage='Shrink Sidebar'\n                />\n            </Tooltip>\n        );\n\n        if (backToResultsTooltip) {\n            back = (\n                <a\n                    href='#'\n                    onClick={this.handleBack}\n                    className='sidebar--right__back'\n                >\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        overlay={backToResultsTooltip}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.back'\n                            defaultMessage='Back Icon'\n                        >\n                            {(ariaLabel) => (\n                                <i\n                                    className='fa fa-angle-left'\n                                    aria-label={ariaLabel}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </OverlayTrigger>\n                </a>\n            );\n        }\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>\n                    {back}\n                    <FormattedMessage\n                        id='search_header.title5'\n                        defaultMessage='Extra information'\n                    />\n                </span>\n                <div className='pull-right'>\n                    <button\n                        type='button'\n                        className='sidebar--right__expand'\n                        aria-label='Expand'\n                        onClick={this.props.actions.toggleRhsExpanded}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={expandSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandSidebarTooltip.icon'\n                                defaultMessage='Expand Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-expand'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={shrinkSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandTooltip.icon'\n                                defaultMessage='Shrink Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-compress'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                    <button\n                        type='button'\n                        className='sidebar--right__close'\n                        aria-label='Close'\n                        onClick={this.props.actions.closeRightHandSide}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={closeSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.closeTooltip.icon'\n                                defaultMessage='Close Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-sign-out'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\n\nimport RshCardHeader from './rhs_card_header.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            showMentions,\n            showSearchResults,\n            showFlaggedPosts,\n            showPinnedPosts,\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RshCardHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport DelayedAction from 'utils/delayed_action';\nimport Constants, {RHSStates} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport RhsCardHeader from 'components/rhs_card_header';\nimport Markdown from 'components/markdown';\nimport UserProfile from 'components/user_profile';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport default class RhsCard extends React.Component {\n    static propTypes = {\n        selected: PropTypes.object,\n        pluginPostCardTypes: PropTypes.object,\n        previousRhsState: PropTypes.oneOf(Object.values(RHSStates)),\n        enablePostUsernameOverride: PropTypes.bool,\n        teamUrl: PropTypes.string,\n    }\n\n    static defaultProps = {\n        pluginPostCardTypes: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n\n        this.state = {\n            isScrolling: false,\n            topRhsPostCreateAt: 0,\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState.selected, this.props.selected)) {\n            return true;\n        }\n        if (nextState.isScrolling !== this.state.isScrolling) {\n            return true;\n        }\n        return false;\n    }\n\n    handleScroll = () => {\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n    }\n\n    handleScrollStop = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    }\n\n    handleClick = () => {\n        if (Utils.isMobile()) {\n            GlobalActions.emitCloseRightHandSide();\n        }\n    };\n\n    render() {\n        if (this.props.selected == null) {\n            return (<div/>);\n        }\n\n        const {selected, pluginPostCardTypes, teamUrl} = this.props;\n        const postType = selected.type;\n        let content = null;\n        if (pluginPostCardTypes.hasOwnProperty(postType)) {\n            const PluginComponent = pluginPostCardTypes[postType].component;\n            content = <PluginComponent post={selected}/>;\n        }\n\n        if (!content) {\n            content = (\n                <div className='info-card'>\n                    <Markdown message={selected.props && selected.props.card}/>\n                </div>\n            );\n        }\n\n        let user = (\n            <UserProfile\n                userId={selected.user_id}\n                hideStatus={true}\n                disablePopover={true}\n            />\n        );\n        if (selected.props.override_username && this.props.enablePostUsernameOverride) {\n            user = (\n                <UserProfile\n                    userId={selected.user_id}\n                    hideStatus={true}\n                    disablePopover={true}\n                    overwriteName={selected.props.override_username}\n                />\n            );\n        }\n        const avatar = (\n            <PostProfilePicture\n                compactDisplay={false}\n                post={selected}\n                userId={selected.user_id}\n            />\n        );\n\n        return (\n            <div className='sidebar-right__body sidebar-right__card'>\n                <RhsCardHeader previousRhsState={this.props.previousRhsState}/>\n                <Scrollbars\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div className='post-right__scroll'>\n                        {content}\n                        <div className='d-flex post-card--info'>\n                            <div className='post-card--post-by overflow--ellipsis'>\n                                <FormattedMessage\n                                    id='rhs_card.message_by'\n                                    defaultMessage='Message by {avatar} {user}'\n                                    values={{user, avatar}}\n                                />\n                            </div>\n                            <div className='post-card--view-post'>\n                                <Link\n                                    to={`${teamUrl}/pl/${selected.id}`}\n                                    className='post__permalink'\n                                    onClick={this.handleClick}\n                                >\n                                    <FormattedMessage\n                                        id='rhs_card.jump'\n                                        defaultMessage='Jump'\n                                    />\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getSelectedPostCard} from 'selectors/rhs.jsx';\n\nimport RhsCard from './rhs_card.jsx';\n\nfunction mapStateToProps(state) {\n    const selected = getSelectedPostCard(state);\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    return {\n        enablePostUsernameOverride,\n        selected,\n        pluginPostCardTypes: state.plugins.postCardTypes,\n        teamUrl: getCurrentRelativeTeamUrl(state),\n    };\n}\n\nexport default connect(mapStateToProps)(RhsCard);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SelectIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.select'\n                defaultMessage='Select Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa fa-plus-square'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\n\nimport Constants from 'utils/constants';\nimport SelectIcon from 'components/widgets/icons/fa_select_icon';\nimport BotBadge from 'components/widgets/badges/bot_badge';\n\nimport {getDirectTeammate} from 'utils/utils.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nfunction itemToName(item) {\n    if (item.type === Constants.DM_CHANNEL) {\n        return '@' + item.display_name;\n    }\n    if (item.type === Constants.GM_CHANNEL) {\n        return '@' + item.display_name.replace(/ /g, '');\n    }\n    if (item.type === Constants.OPEN_CHANNEL || item.type === Constants.PRIVATE_CHANNEL) {\n        return item.display_name + ' (~' + item.name + ')';\n    }\n    return item.name;\n}\n\nfunction itemToTerm(item) {\n    if (item.type === Constants.DM_CHANNEL) {\n        return '@' + item.display_name;\n    }\n    if (item.type === Constants.GM_CHANNEL) {\n        return '@' + item.display_name.replace(/ /g, '');\n    }\n    if (item.type === Constants.OPEN_CHANNEL || item.type === Constants.PRIVATE_CHANNEL) {\n        return item.name;\n    }\n    return item.name;\n}\n\nclass SearchChannelSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'search-autocomplete__item';\n        if (isSelection) {\n            className += ' selected a11y--focused';\n        }\n\n        const name = itemToName(item);\n\n        let tag = null;\n        if (item.type === Constants.DM_CHANNEL) {\n            const teammate = getDirectTeammate(item.id);\n            tag = (\n                <BotBadge\n                    show={Boolean(teammate && teammate.is_bot)}\n                    className='badge-popoverlist'\n                />\n            );\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                onMouseMove={this.handleMouseMove}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                <SelectIcon/>\n                <span\n                    data-testid='listItem'\n                    className='search-autocomplete__name'\n                >\n                    {name}\n                </span>\n                {tag}\n            </div>\n        );\n    }\n}\n\nexport default class SearchChannelProvider extends Provider {\n    constructor(channelSearchFunc) {\n        super();\n        this.autocompleteChannelsForSearch = channelSearchFunc;\n    }\n\n    handlePretextChanged(pretext, resultsCallback) {\n        const captured = (/\\b(?:in|channel):\\s*(\\S*)$/i).exec(pretext.toLowerCase());\n        if (captured) {\n            const channelPrefix = captured[1];\n\n            this.startNewRequest(channelPrefix);\n\n            this.autocompleteChannelsForSearch(\n                channelPrefix,\n                (data) => {\n                    if (this.shouldCancelDispatch(channelPrefix)) {\n                        return;\n                    }\n\n                    //\n                    // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n                    //\n                    const channels = data.sort(sortChannelsByTypeAndDisplayName.bind(null, 'en'));\n                    const channelNames = channels.map(itemToTerm);\n\n                    resultsCallback({\n                        matchedPretext: channelPrefix,\n                        terms: channelNames,\n                        items: channels,\n                        component: SearchChannelSuggestion,\n                    });\n                },\n            );\n        }\n\n        return Boolean(captured);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\n\nimport Popover from 'components/widgets/popover';\n\nimport SuggestionList from './suggestion_list.jsx';\n\nexport default class SearchSuggestionList extends SuggestionList {\n    static propTypes = {\n        ...SuggestionList.propTypes,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.itemRefs = new Map();\n        this.popoverRef = React.createRef();\n        this.suggestionReadOut = React.createRef();\n    }\n\n    generateLabel(item) {\n        if (item.username) {\n            this.currentLabel = item.username;\n            if ((item.first_name || item.last_name) && item.nickname) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name} ${item.nickname}`;\n            } else if (item.nickname) {\n                this.currentLabel += ` ${item.nickname}`;\n            } else if (item.first_name || item.last_name) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name}`;\n            }\n        } else if (item.type === Constants.DM_CHANNEL || item.type === Constants.GM_CHANNEL) {\n            this.currentLabel = item.display_name;\n        } else {\n            this.currentLabel = item.name;\n        }\n\n        if (this.currentLabel) {\n            this.currentLabel = this.currentLabel.toLowerCase();\n        }\n\n        this.announceLabel();\n    }\n\n    getContent = () => {\n        return $(ReactDOM.findDOMNode(this.popoverRef.current)).find('.popover-content');\n    }\n\n    renderChannelDivider(type) {\n        let text;\n        if (type === Constants.OPEN_CHANNEL) {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.public'\n                    defaultMessage='Public Channels'\n                />\n            );\n        } else if (type === Constants.PRIVATE_CHANNEL) {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.private'\n                    defaultMessage='Private Channels'\n                />\n            );\n        } else {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.direct'\n                    defaultMessage='Direct Messages'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={type + '-divider'}\n                className='search-autocomplete__divider'\n            >\n                <span>{text}</span>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.items.length === 0) {\n            return null;\n        }\n\n        const items = [];\n        for (let i = 0; i < this.props.items.length; i++) {\n            const item = this.props.items[i];\n            const term = this.props.terms[i];\n            const isSelection = term === this.props.selection;\n\n            // ReactComponent names need to be upper case when used in JSX\n            const Component = this.props.components[i];\n\n            // temporary hack to add dividers between public and private channels in the search suggestion list\n            if (this.props.renderDividers) {\n                if (i === 0 || item.type !== this.props.items[i - 1].type) {\n                    if (item.type === Constants.OPEN_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.OPEN_CHANNEL));\n                    } else if (item.type === Constants.PRIVATE_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.PRIVATE_CHANNEL));\n                    } else if (i === 0 || this.props.items[i - 1].type === Constants.OPEN_CHANNEL || this.props.items[i - 1].type === Constants.PRIVATE_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.DM_CHANNEL));\n                    }\n                }\n            }\n\n            if (isSelection) {\n                this.currentItem = item;\n            }\n\n            items.push(\n                <Component\n                    key={term}\n                    ref={(ref) => this.itemRefs.set(term, ref)}\n                    item={item}\n                    term={term}\n                    matchedPretext={this.props.matchedPretext[i]}\n                    isSelection={isSelection}\n                    onClick={this.props.onCompleteWord}\n                    onMouseMove={this.props.onItemHover}\n                />,\n            );\n        }\n\n        return (\n            <Popover\n                ref={this.popoverRef}\n                id='search-autocomplete__popover'\n                className='search-help-popover autocomplete visible'\n                placement='bottom'\n            >\n                <div\n                    ref={this.suggestionReadOut}\n                    aria-live='polite'\n                    className='hidden-label'\n                />\n                {items}\n            </Popover>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Popover from 'components/widgets/popover';\n\nexport default class SuggestionDate extends React.PureComponent {\n    static propTypes = {\n        onCompleteWord: PropTypes.func.isRequired,\n        items: PropTypes.array.isRequired,\n        terms: PropTypes.array.isRequired,\n        components: PropTypes.array.isRequired,\n        matchedPretext: PropTypes.array.isRequired,\n    };\n\n    render() {\n        if (this.props.items.length === 0) {\n            return null;\n        }\n\n        const item = this.props.items[0];\n        const term = this.props.terms[0];\n\n        // ReactComponent names need to be upper case when used in JSX\n        const Component = this.props.components[0];\n\n        const itemComponent = (\n            <Component\n                key={term}\n                ref={term}\n                item={item}\n                term={term}\n                matchedPretext={this.props.matchedPretext[0]}\n                isSelection={false}\n                onClick={this.props.onCompleteWord}\n            />\n        );\n\n        return (\n            <Popover\n                id='search-autocomplete__popover'\n                className='search-help-popover autocomplete visible'\n                placement='bottom'\n            >\n                {itemComponent}\n            </Popover>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport SelectIcon from 'components/widgets/icons/fa_select_icon';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass SearchUserSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'search-autocomplete__item';\n        if (isSelection) {\n            className += ' selected a11y--focused';\n        }\n\n        const username = item.username;\n        let description = '';\n\n        if ((item.first_name || item.last_name) && item.nickname) {\n            description = `${Utils.getFullName(item)} (${item.nickname})`;\n        } else if (item.nickname) {\n            description = `(${item.nickname})`;\n        } else if (item.first_name || item.last_name) {\n            description = `${Utils.getFullName(item)}`;\n        }\n\n        return (\n            <div\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                {...Suggestion.baseProps}\n            >\n                <SelectIcon/>\n                <Avatar\n                    size='md'\n                    username={username}\n                    url={Utils.imageURLForUser(item)}\n                />\n                <div className='mention--align'>\n                    <span>\n                        {username}\n                    </span>\n                    <BotBadge\n                        show={Boolean(item.is_bot)}\n                        className='badge-autocomplete'\n                    />\n                    <span className='mention__fullname'>\n                        {' '}\n                        {description}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class SearchUserProvider extends Provider {\n    constructor(userSearchFunc) {\n        super();\n        this.autocompleteUsersInTeam = userSearchFunc;\n    }\n\n    handlePretextChanged(pretext, resultsCallback) {\n        const captured = (/\\bfrom:\\s*(\\S*)$/i).exec(pretext.toLowerCase());\n\n        this.doAutocomplete(captured, resultsCallback);\n\n        return Boolean(captured);\n    }\n\n    async doAutocomplete(captured, resultsCallback) {\n        if (!captured) {\n            return;\n        }\n\n        const usernamePrefix = captured[1];\n\n        this.startNewRequest(usernamePrefix);\n\n        const data = await this.autocompleteUsersInTeam(usernamePrefix);\n\n        if (this.shouldCancelDispatch(usernamePrefix)) {\n            return;\n        }\n\n        const users = Object.assign([], data.users);\n        const mentions = users.map((user) => user.username);\n\n        resultsCallback({\n            matchedPretext: usernamePrefix,\n            terms: mentions,\n            items: users,\n            component: SearchUserSuggestion,\n        });\n    }\n\n    allowDividers() {\n        return false;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport DayPicker from 'react-day-picker';\n\nimport Suggestion from '../suggestion.jsx';\n\nimport 'react-day-picker/lib/style.css';\n\nexport default class SearchDateSuggestion extends Suggestion {\n    handleDayClick = (day) => {\n        const dayString = day.toISOString().split('T')[0];\n        this.props.onClick(dayString, this.props.matchedPretext);\n    }\n\n    render() {\n        let modifiers;\n        if (this.props.currentDate) {\n            modifiers = {\n                today: this.props.currentDate,\n            };\n        }\n        return (\n            <DayPicker\n                onDayClick={this.handleDayClick}\n                showOutsideDays={true}\n                modifiers={modifiers}\n                ref={(node) => {\n                    this.node = node;\n                }}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {getCurrentDateForTimezone} from 'utils/timezone';\nimport {areTimezonesEnabledAndSupported} from 'selectors/general';\n\nimport SearchDateSuggestion from './search_date_suggestion.jsx';\n\nfunction mapStateToProps(state) {\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n\n    const enableTimezone = areTimezonesEnabledAndSupported(state);\n\n    let currentDate;\n    if (enableTimezone) {\n        if (userTimezone.useAutomaticTimezone) {\n            currentDate = getCurrentDateForTimezone(userTimezone.automaticTimezone);\n        } else {\n            currentDate = getCurrentDateForTimezone(userTimezone.manualTimezone);\n        }\n    }\n\n    return {\n        currentDate,\n    };\n}\n\nexport default connect(mapStateToProps)(SearchDateSuggestion);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport Provider from './provider.jsx';\nimport SearchDateSuggestion from './search_date_suggestion';\n\nexport default class SearchDateProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        const captured = (/\\b(?:on|before|after):\\s*(\\S*)$/i).exec(pretext.toLowerCase());\n        if (captured) {\n            const datePrefix = captured[1];\n\n            this.startNewRequest(datePrefix);\n\n            const dates = Object.assign([], [{label: 'Selected Date', date: datePrefix}]);\n            const terms = dates.map((date) => date.date);\n\n            resultsCallback({\n                matchedPretext: datePrefix,\n                terms,\n                items: dates,\n                component: SearchDateSuggestion,\n            });\n        }\n\n        return Boolean(captured);\n    }\n\n    allowDividers() {\n        return false;\n    }\n\n    presentationType() {\n        return 'date';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default function HeaderIconWrapper({\n    iconComponent,\n    ariaLabel,\n    buttonClass,\n    buttonId,\n    onClick,\n    tooltipKey,\n    tooltipText,\n}) {\n    const toolTips = {\n        flaggedPosts: {\n            class: 'text-nowrap',\n            id: 'flaggedTooltip',\n            messageID: t('channel_header.flagged'),\n            message: 'Flagged Posts',\n        },\n        pinnedPosts: {\n            class: '',\n            id: 'pinnedPostTooltip',\n            messageID: t('channel_header.pinnedPosts'),\n            message: 'Pinned Posts',\n        },\n        recentMentions: {\n            class: '',\n            id: 'recentMentionsTooltip',\n            messageID: t('channel_header.recentMentions'),\n            message: 'Recent Mentions',\n        },\n        search: {\n            class: '',\n            id: 'searchTooltip',\n            messageID: t('channel_header.search'),\n            message: 'Search',\n        },\n        videoCall: {\n            class: 'text-nowrap',\n            id: 'videoCallTooltip',\n            messageID: t('channel_header.videocall'),\n            message: 'Video Conference',\n        }\n    };\n\n    function getTooltip(key) {\n        if (toolTips[key] == null) {\n            return null;\n        }\n\n        return (\n            <Tooltip\n                id={toolTips[key].id}\n                className={toolTips[key].class}\n            >\n                <FormattedMessage\n                    id={toolTips[key].messageID}\n                    defaultMessage={toolTips[key].message}\n                />\n            </Tooltip>\n        );\n    }\n\n    let tooltip;\n    if (tooltipKey === 'plugin' && tooltipText) {\n        tooltip = (\n            <Tooltip\n                id='pluginTooltip'\n                className=''\n            >\n                <span>{tooltipText}</span>\n            </Tooltip>\n        );\n    } else {\n        tooltip = getTooltip(tooltipKey);\n    }\n\n    let ariaLabelText;\n    if (ariaLabel) {\n        ariaLabelText = `${localizeMessage(toolTips[tooltipKey].messageID, toolTips[tooltipKey].message)}`;\n    }\n\n    if (tooltip) {\n        return (\n            <div className='flex-child'>\n                <OverlayTrigger\n                    trigger={['hover']}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={tooltip}\n                >\n                    <button\n                        id={buttonId}\n                        aria-label={ariaLabelText}\n                        className={buttonClass || 'channel-header__icon style--none'}\n                        onClick={onClick}\n                    >\n                        {iconComponent}\n                    </button>\n                </OverlayTrigger>\n            </div>\n        );\n    }\n\n    return (\n        <div className='flex-child'>\n            <button\n                id={buttonId}\n                className={buttonClass || 'channel-header__icon style--none'}\n                onClick={onClick}\n            >\n                {iconComponent}\n            </button>\n        </div>\n    );\n}\n\nHeaderIconWrapper.propTypes = {\n    ariaLabel: PropTypes.bool,\n    buttonClass: PropTypes.string,\n    buttonId: PropTypes.string.isRequired,\n    iconComponent: PropTypes.element.isRequired,\n    onClick: PropTypes.func.isRequired,\n    tooltipKey: PropTypes.string,\n    tooltipText: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\ntype Props = {\n    withTitle?: boolean;\n}\n\nexport default class SearchHint extends PureComponent<Props> {\n    public render() {\n        return (\n            <React.Fragment>\n                {this.props.withTitle &&\n                <h4>\n                    <FormattedMessage\n                        id='search_bar.usage.title'\n                        defaultMessage='Search Options'\n                    />\n                </h4>\n                }\n                <FormattedMarkdownMessage\n                    id='search_bar.usage.tips'\n                    defaultMessage='* Use **\"quotation marks\"** to search for phrases\\n* Use **from:** to find posts from specific users\\n * Use **in:** to find posts in specific channels\\n* Use **on:** to find posts on a specific date\\n* Use **before:** to find posts before a specific date\\n* Use **after:** to find posts after a specific date\\n* Use **dash** \"-\" to exclude search terms and modifiers'\n                />\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MentionsIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.mention'\n                    defaultMessage='Mention Icon'\n                >\n                    {(title) => (\n                        <i className=\"fas fa-comment-lines\" title={title}></i>\n                        // <svg\n                        //     width='14px'\n                        //     height='14px'\n                        //     viewBox='0 0 20 20'\n                        //     version='1.1'\n                        //     role='img'\n                        //     aria-label={ariaLabel}\n                        // >\n                        //     <g\n                        //         stroke='none'\n                        //         strokeWidth='1'\n                        //         fill='inherit'\n                        //         fillRule='evenodd'\n                        //     >\n                        //         <g\n                        //             transform='translate(-1057.000000, -31.000000)'\n                        //             fill='inherit'\n                        //         >\n                        //             <g>\n                        //                 <g transform='translate(1049.000000, 22.000000)'>\n                        //                     <path d='M17.4296875,15.8867188 C15.9882812,15.8867188 15.1210938,17.0351562 15.1210938,18.96875 C15.1210938,20.8789062 15.9882812,22.0507812 17.4179688,22.0507812 C18.8945312,22.0507812 19.84375,20.8554688 19.84375,18.96875 C19.84375,17.0820312 18.90625,15.8867188 17.4296875,15.8867188 Z M17.8398438,9.125 C23.3242188,9.125 27.25,12.59375 27.25,17.7734375 C27.25,21.5117188 25.5625,23.9609375 22.7734375,23.9609375 C21.4023438,23.9609375 20.265625,23.1992188 20.078125,22.0390625 L19.9609375,22.0390625 C19.46875,23.2226562 18.4140625,23.8789062 17.0429688,23.8789062 C14.6054687,23.8789062 12.9648438,21.8867188 12.9648438,18.9101562 C12.9648438,16.0625 14.6171875,14.09375 16.9960938,14.09375 C18.25,14.09375 19.3632812,14.7382812 19.8085938,15.7460938 L19.9375,15.7460938 L19.9375,14.328125 L21.9179688,14.328125 L21.9179688,20.984375 C21.9179688,21.7578125 22.328125,22.2851562 23.171875,22.2851562 C24.4726562,22.2851562 25.421875,20.6679688 25.421875,17.8320312 C25.421875,13.5664062 22.2929688,10.7421875 17.7109375,10.7421875 C13.1640625,10.7421875 9.90625,14.140625 9.90625,18.96875 C9.90625,24.1367188 13.3515625,27.0429688 18.109375,27.0429688 C19.5625,27.0429688 21.0507812,26.84375 21.7773438,26.5390625 L21.7773438,28.15625 C20.78125,28.484375 19.4570312,28.671875 18.0273438,28.671875 C12.2382812,28.671875 8.078125,25.109375 8.078125,18.8984375 C8.078125,13.0625 12.0859375,9.125 17.8398438,9.125 Z'/>\n                        //                 </g>\n                        //             </g>\n                        //         </g>\n                        //     </g>\n                        // </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SearchChannelProvider from 'components/suggestion/search_channel_provider.jsx';\nimport SearchSuggestionList from 'components/suggestion/search_suggestion_list.jsx';\nimport SuggestionDate from 'components/suggestion/suggestion_date.jsx';\nimport SearchUserProvider from 'components/suggestion/search_user_provider.jsx';\nimport SearchDateProvider from 'components/suggestion/search_date_provider.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport HeaderIconWrapper from 'components/channel_header/components/header_icon_wrapper';\nimport SearchHint from 'components/search_hint/search_hint';\nimport FlagIcon from 'components/widgets/icons/flag_icon';\nimport FlagIconFilled from 'components/widgets/icons/flag_icon_filled';\nimport MentionsIcon from 'components/widgets/icons/mentions_icon';\nimport SearchIcon from 'components/widgets/icons/search_icon';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport Popover from 'components/widgets/popover';\n\nconst {KeyCodes} = Constants;\n\nexport default class SearchBar extends React.Component {\n    static propTypes = {\n        isSearchingTerm: PropTypes.bool,\n        searchTerms: PropTypes.string,\n        isMentionSearch: PropTypes.bool,\n        isFlaggedPosts: PropTypes.bool,\n        showMentionFlagBtns: PropTypes.bool,\n        isFocus: PropTypes.bool,\n        isSideBarRight: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateSearchTerms: PropTypes.func,\n            showSearchResults: PropTypes.func,\n            showMentions: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func,\n            autocompleteChannelsForSearch: PropTypes.func.isRequired,\n            autocompleteUsersInTeam: PropTypes.func.isRequired,\n        }),\n    };\n\n    static defaultProps = {\n        showMentionFlagBtns: true,\n        isFocus: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            focused: false,\n        };\n\n        this.suggestionProviders = [\n            new SearchDateProvider(),\n            new SearchChannelProvider(props.actions.autocompleteChannelsForSearch),\n            new SearchUserProvider(props.actions.autocompleteUsersInTeam),\n        ];\n    }\n\n    componentDidMount() {\n        if (Utils.isMobile()) {\n            setTimeout(() => {\n                const element = document.querySelector('.app__body .sidebar--menu');\n                if (element) {\n                    element.classList.remove('visible');\n                }\n            });\n        }\n    }\n\n    handleClose = () => {\n        this.props.actions.closeRightHandSide();\n    }\n\n    handleKeyDown = (e) => {\n        if (Utils.isKeyPressed(e, KeyCodes.ESCAPE)) {\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    }\n\n    handleChange = (e) => {\n        var term = e.target.value;\n        this.props.actions.updateSearchTerms(term);\n    }\n\n    handleUserBlur = () => {\n        // add time out so that the pinned and member buttons are clickable\n        // when focus is released from the search box.\n        setTimeout(() => {\n            this.setState({focused: false});\n        }, 200);\n    }\n\n    handleClear = () => {\n        this.props.actions.updateSearchTerms('');\n    }\n\n    handleUserFocus = () => {\n        this.setState({focused: true});\n    }\n\n    handleSearch = async (terms) => {\n        if (terms.length) {\n            const {error} = await this.props.actions.showSearchResults();\n\n            if (!error) {\n                this.handleSearchOnSuccess();\n            }\n        }\n    }\n\n    handleSearchOnSuccess = () => {\n        if (Utils.isMobile() && this.search) {\n            this.search.value = '';\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const terms = this.props.searchTerms.trim();\n\n        if (terms.length === 0) {\n            return;\n        }\n\n        this.handleSearch(terms);\n\n        this.search.blur();\n    }\n\n    searchMentions = (e) => {\n        e.preventDefault();\n        if (this.props.isMentionSearch) {\n            // Close\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showMentions();\n        }\n    }\n\n    getFlagged = (e) => {\n        e.preventDefault();\n        if (this.props.isFlaggedPosts) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showFlaggedPosts();\n        }\n    }\n\n    renderHintPopover() {\n        if (Utils.isMobile()) {\n            return null;\n        }\n\n        let helpClass = 'search-help-popover';\n        if (!this.props.searchTerms && this.state.focused) {\n            helpClass += ' visible';\n        }\n\n        return (\n            <Popover\n                id={this.props.isSideBarRight ? 'sbr-searchbar-help-popup' : 'searchbar-help-popup'}\n                placement='bottom'\n                className={helpClass}\n            >\n                <SearchHint withTitle={true}/>\n            </Popover>\n        );\n    }\n\n    getSearch = (node) => {\n        this.search = node;\n    }\n\n    render() {\n        let mentionBtn;\n        let flagBtn;\n        if (this.props.showMentionFlagBtns) {\n            var mentionBtnClass = this.props.isMentionSearch ? 'active' : '';\n\n            mentionBtn = (\n                <HeaderIconWrapper\n                    iconComponent={\n                        <MentionsIcon\n                            className='icon icon__mentions'\n                            aria-hidden='true'\n                        />\n                    }\n                    ariaLabel={true}\n                    buttonClass={'channel-header__icon style--none ' + mentionBtnClass}\n                    buttonId={this.props.isSideBarRight ? 'sbrChannelHeaderMentionButton' : 'channelHeaderMentionButton'}\n                    onClick={this.searchMentions}\n                    tooltipKey={'recentMentions'}\n                />\n            );\n\n            var flagBtnClass = this.props.isFlaggedPosts ? 'active' : '';\n\n            flagBtn = (\n                <HeaderIconWrapper\n                    iconComponent={\n                        <FlagIconFilled className='icon icon__flag'/>\n                    }\n                    ariaLabel={true}\n                    buttonClass={'channel-header__icon style--none ' + flagBtnClass}\n                    buttonId={this.props.isSideBarRight ? 'sbrChannelHeaderFlagButton' : 'channelHeaderFlagButton'}\n                    onClick={this.getFlagged}\n                    tooltipKey={'flaggedPosts'}\n                />\n            );\n        }\n\n        const showClear = !this.props.isSearchingTerm && this.props.searchTerms && this.props.searchTerms.trim() !== '';\n\n        let searchFormClass = 'search__form';\n        if (this.state.focused) {\n            searchFormClass += ' focused';\n        }\n\n        const searchClearTooltip = (\n            <Tooltip id='searchClearTooltip'>\n                <FormattedMessage\n                    id='search_bar.clear'\n                    defaultMessage='Clear search query'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <div className='sidebar-right__table'>\n                <div className='sidebar-collapse__container'>\n                    <div\n                        id={this.props.isSideBarRight ? 'sbrSidebarCollapse' : 'sidebarCollapse'}\n                        className='sidebar-collapse'\n                        onClick={this.handleClose}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.back'\n                            defaultMessage='Back Icon'\n                        >\n                            {(title) => (\n                                <span\n                                    className='fa fa-2x fa-angle-left'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </div>\n                </div>\n                <div\n                    id={this.props.isSideBarRight ? 'sbrSearchFormContainer' : 'searchFormContainer'}\n                    className='search-form__container'\n                >\n                    <form\n                        role='application'\n                        className={searchFormClass}\n                        onSubmit={this.handleSubmit}\n                        style={style.searchForm}\n                        autoComplete='off'\n                    >\n                        <SearchIcon\n                            className='search__icon'\n                            aria-hidden='true'\n                        />\n                        <SuggestionBox\n                            ref={this.getSearch}\n                            id={this.props.isSideBarRight ? 'sbrSearchBox' : 'searchBox'}\n                            tabIndex='0'\n                            className='search-bar a11y__region'\n                            data-a11y-sort-order='8'\n                            aria-describedby={this.props.isSideBarRight ? 'sbr-searchbar-help-popup' : 'searchbar-help-popup'}\n                            aria-label={Utils.localizeMessage('search_bar.search', 'Search')}\n                            placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                            value={this.props.searchTerms}\n                            onFocus={this.handleUserFocus}\n                            onBlur={this.handleUserBlur}\n                            onChange={this.handleChange}\n                            onKeyDown={this.handleKeyDown}\n                            listComponent={SearchSuggestionList}\n                            dateComponent={SuggestionDate}\n                            providers={this.suggestionProviders}\n                            type='search'\n                            autoFocus={this.props.isFocus && this.props.searchTerms === ''}\n                            delayInputUpdate={true}\n                            renderDividers={true}\n                        />\n                        {showClear &&\n                            <div\n                                id={this.props.isSideBarRight ? 'sbrSearchClearButton' : 'searchClearButton'}\n                                className='sidebar__search-clear visible'\n                                onClick={this.handleClear}\n                            >\n                                <OverlayTrigger\n                                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                                    placement='bottom'\n                                    overlay={searchClearTooltip}\n                                >\n                                    <span\n                                        className='sidebar__search-clear-x'\n                                        aria-hidden='true'\n                                    >\n                                        {'×'}\n                                    </span>\n                                </OverlayTrigger>\n                            </div>}\n                        {this.props.isSearchingTerm && <LoadingSpinner/>}\n                        {this.renderHintPopover()}\n                    </form>\n                </div>\n                {mentionBtn}\n                {flagBtn}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    searchForm: {overflow: 'visible'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    updateSearchTerms,\n    showSearchResults,\n    showMentions,\n    showFlaggedPosts,\n    closeRightHandSide,\n} from 'actions/views/rhs';\nimport {autocompleteChannelsForSearch} from 'actions/channel_actions';\nimport {autocompleteUsersInTeam} from 'actions/user_actions';\nimport {getRhsState, getSearchTerms, getIsSearchingTerm} from 'selectors/rhs';\nimport {RHSStates} from 'utils/constants';\n\nimport SearchBar from './search_bar.jsx';\n\nfunction mapStateToProps(state) {\n    const rhsState = getRhsState(state);\n\n    return {\n        isSearchingTerm: getIsSearchingTerm(state),\n        searchTerms: getSearchTerms(state),\n        isMentionSearch: rhsState === RHSStates.MENTION,\n        isFlaggedPosts: rhsState === RHSStates.FLAG,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateSearchTerms,\n            showSearchResults,\n            showMentions,\n            showFlaggedPosts,\n            closeRightHandSide,\n            autocompleteChannelsForSearch,\n            autocompleteUsersInTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport Constants from 'utils/constants';\n\nexport default class SearchResultsHeader extends React.Component {\n    static propTypes = {\n        children: PropTypes.element,\n        actions: PropTypes.shape({\n            closeRightHandSide: PropTypes.func,\n            toggleRhsExpanded: PropTypes.func.isRequired,\n        }),\n    };\n\n    render() {\n        const closeSidebarTooltip = (\n            <Tooltip id='closeSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.closeSidebarTooltip'\n                    defaultMessage='Close Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const expandSidebarTooltip = (\n            <Tooltip id='expandSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const shrinkSidebarTooltip = (\n            <Tooltip id='shrinkSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.shrinkSidebarTooltip'\n                    defaultMessage='Shrink Sidebar'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>{this.props.children}</span>\n                <div className='pull-right'>\n                    <button\n                        type='button'\n                        className='sidebar--right__expand'\n                        aria-label='Expand'\n                        onClick={this.props.actions.toggleRhsExpanded}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={expandSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandSidebarTooltip.icon'\n                                defaultMessage='Expand Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-expand'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={shrinkSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandTooltip.icon'\n                                defaultMessage='Shrink Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-compress'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                    <button\n                        id='searchResultsCloseButton'\n                        type='button'\n                        className='sidebar--right__close'\n                        aria-label='Close'\n                        onClick={this.props.actions.closeRightHandSide}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={closeSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.closeTooltip.icon'\n                                defaultMessage='Close Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-sign-out'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\n\nimport SearchResultsHeader from './search_results_header.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(SearchResultsHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ReplyIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.reply'\n                    defaultMessage='Reply Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fa fa-reply'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\n// const style = {\n//     enableBackground: 'new -158 242 18 18',\n// };\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport ReplyIcon from 'components/widgets/icons/reply_icon';\n\ntype Props = {\n    location: 'CENTER' | 'SEARCH';\n    handleCommentClick: React.EventHandler<React.MouseEvent>;\n    searchStyle: string;\n    commentCount: number;\n    postId?: string;\n    extraClass: string;\n}\n\nexport default class CommentIcon extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        location: 'CENTER',\n        searchStyle: '',\n        commentCount: 0,\n        extraClass: '',\n    }\n\n    public render(): JSX.Element {\n        let commentCountSpan: JSX.Element | null = null;\n        let iconStyle = 'comment-icon__container';\n        if (this.props.commentCount > 0) {\n            iconStyle += ' icon--show';\n            commentCountSpan = (\n                <span className='comment-count'>\n                    {this.props.commentCount}\n                </span>\n            );\n        } else if (this.props.searchStyle !== '') {\n            iconStyle = iconStyle + ' ' + this.props.searchStyle;\n        }\n\n        const tooltip = (\n            <Tooltip\n                id='comment-icon-tooltip'\n                className='hidden-xs'\n            >\n                <FormattedMessage\n                    id='post_info.comment_icon.tooltip.reply'\n                    defaultMessage='Reply'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <OverlayTrigger\n                delayShow={500}\n                placement='top'\n                overlay={tooltip}\n            >\n                <button\n                    id={`${this.props.location}_commentIcon_${this.props.postId}`}\n                    aria-label={localizeMessage('post_info.comment_icon.tooltip.reply', 'Reply').toLowerCase()}\n                    className={iconStyle + ' color--link style--none ' + this.props.extraClass}\n                    onClick={this.props.handleCommentClick}\n                >\n                    <span className='d-flex'>\n                        <ReplyIcon className='comment-icon'/>\n                        {commentCountSpan}\n                    </span>\n                </button>\n            </OverlayTrigger>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Posts} from 'mattermost-redux/constants/index';\nimport * as ReduxPostUtils from 'mattermost-redux/utils/post_utils';\nimport {Tooltip} from 'react-bootstrap';\n\nimport PostMessageContainer from 'components/post_view/post_message_view';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport CommentIcon from 'components/common/comment_icon';\nimport DotMenu from 'components/dot_menu';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport UserProfile from 'components/user_profile';\nimport DateSeparator from 'components/post_view/date_separator';\nimport PostBodyAdditionalContent from 'components/post_view/post_body_additional_content';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport PostTime from 'components/post_view/post_time';\nimport {browserHistory} from 'utils/browser_history';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport InfoSmallIcon from 'components/widgets/icons/info_small_icon';\n\nimport Constants, {Locations} from 'utils/constants';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\n\nclass SearchResultsItem extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        *  Data used for rendering post\n        */\n        post: PropTypes.object,\n\n        /**\n         * The function to create an aria-label\n         */\n        createAriaLabel: PropTypes.func,\n\n        /**\n        * An array of strings in this post that were matched by the search\n        */\n        matches: PropTypes.array,\n\n        channelId: PropTypes.string,\n        channelName: PropTypes.string,\n        channelType: PropTypes.string,\n        channelIsArchived: PropTypes.bool,\n\n        /**\n        *  Flag for determining result display setting\n        */\n        compactDisplay: PropTypes.bool,\n\n        /**\n        *  Flag for highlighting mentions\n        */\n        isMentionSearch: PropTypes.bool,\n\n        /**\n        *  Flag for highlighting search term\n        */\n        term: PropTypes.string,\n\n        /**\n        *  Flag for determining result flag state\n        */\n        isFlagged: PropTypes.bool,\n\n        /**\n        *  Data used creating URl for jump to post\n        */\n        currentTeamName: PropTypes.string,\n\n        /**\n        *  Data used for delete in DotMenu\n        */\n        commentCountForPost: PropTypes.number,\n\n        /**\n         * Whether post username overrides are to be respected.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Is the search results item from a bot.\n         */\n        isBot: PropTypes.bool.isRequired,\n\n        a11yIndex: PropTypes.number,\n\n        /**\n        *  Function used for closing LHS\n        */\n        actions: PropTypes.shape({\n            closeRightHandSide: PropTypes.func.isRequired,\n            selectPost: PropTypes.func.isRequired,\n            selectPostCard: PropTypes.func.isRequired,\n            setRhsExpanded: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * react-intl helper object\n         */\n        intl: intlShape.isRequired,\n    };\n\n    static defaultProps = {\n        isBot: false,\n        channelIsArchived: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dropdownOpened: false,\n        };\n    }\n\n    handleFocusRHSClick = (e) => {\n        e.preventDefault();\n        this.props.actions.selectPost(this.props.post);\n    };\n\n    handleJumpClick = (e) => {\n        e.preventDefault();\n        if (Utils.isMobile()) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        this.props.actions.setRhsExpanded(false);\n        browserHistory.push(`/${this.props.currentTeamName}/pl/${this.props.post.id}`);\n    };\n\n    handleCardClick = (post) => {\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPostCard(post);\n    }\n\n    handleDropdownOpened = (isOpened) => {\n        this.setState({\n            dropdownOpened: isOpened,\n        });\n    };\n\n    renderPostTime = () => {\n        const post = this.props.post;\n\n        const isPermalink = !(Posts.POST_DELETED === post.state ||\n            ReduxPostUtils.isPostPendingOrFailed(post));\n\n        return (\n            <PostTime\n                isPermalink={isPermalink}\n                eventTime={post.create_at}\n                postId={post.id}\n                location={Locations.SEARCH}\n            />\n        );\n    };\n\n    getClassName = () => {\n        let className = 'post post--thread';\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (this.state.dropdownOpened) {\n            className += ' post--hovered';\n        }\n\n        return className;\n    };\n\n    handleSearchItemFocus = () => {\n        this.setState({currentAriaLabel: `${this.getChannelName()}, ${this.props.createAriaLabel(this.props.intl)}`});\n    }\n\n    getChannelName = () => {\n        const {channelId, channelType} = this.props;\n        let {channelName} = this.props;\n\n        if (channelType === Constants.DM_CHANNEL) {\n            channelName = this.props.intl.formatMessage({\n                id: 'search_item.direct',\n                defaultMessage: 'Direct Message (with {username})',\n            }, {\n                username: Utils.getDisplayNameByUser(Utils.getDirectTeammate(channelId)),\n            });\n        }\n\n        return channelName;\n    }\n\n    render() {\n        const {post, channelIsArchived} = this.props;\n        const channelName = this.getChannelName();\n\n        let overrideUsername;\n        let disableProfilePopover = false;\n        if (post.props &&\n            post.props.from_webhook &&\n            post.props.override_username &&\n            this.props.enablePostUsernameOverride) {\n            overrideUsername = post.props.override_username;\n            disableProfilePopover = true;\n        }\n\n        const profilePic = (\n            <PostProfilePicture\n                compactDisplay={this.props.compactDisplay}\n                post={post}\n                userId={post.user_id}\n            />\n        );\n\n        const profilePicContainer = (<div className='post__img'>{profilePic}</div>);\n\n        let postClass = '';\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let fileAttachment = null;\n        if (post.file_ids && post.file_ids.length > 0) {\n            fileAttachment = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        let message;\n        let flagContent;\n        let postInfoIcon;\n        let rhsControls;\n        if (post.state === Constants.POST_DELETED || post.state === Posts.POST_DELETED) {\n            message = (\n                <p>\n                    <FormattedMessage\n                        id='post_body.deleted'\n                        defaultMessage='(message deleted)'\n                    />\n                </p>\n            );\n        } else {\n            flagContent = (\n                <PostFlagIcon\n                    location={Locations.SEARCH}\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                />\n            );\n\n            if (post.props && post.props.card) {\n                postInfoIcon = (\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        overlay={\n                            <Tooltip>\n                                <FormattedMessage\n                                    id='post_info.info.view_additional_info'\n                                    defaultMessage='View additional info'\n                                />\n                            </Tooltip>\n                        }\n                    >\n                        <button\n                            className='card-icon__container icon--show style--none'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.handleCardClick(this.props.post);\n                            }}\n                        >\n                            <InfoSmallIcon\n                                className='icon icon__info'\n                                aria-hidden='true'\n                            />\n                        </button>\n                    </OverlayTrigger>\n                );\n            }\n\n            rhsControls = (\n                <div className='col__controls col__reply'>\n                    <DotMenu\n                        post={post}\n                        location={Locations.SEARCH}\n                        isFlagged={this.props.isFlagged}\n                        handleDropdownOpened={this.handleDropdownOpened}\n                        commentCount={this.props.commentCountForPost}\n                        isReadOnly={channelIsArchived || null}\n                    />\n                    <CommentIcon\n                        location={Locations.SEARCH}\n                        handleCommentClick={this.handleFocusRHSClick}\n                        postId={post.id}\n                        searchStyle={'search-item__comment'}\n                    />\n                    <a\n                        href='#'\n                        onClick={this.handleJumpClick}\n                        className='search-item__jump'\n                    >\n                        <FormattedMessage\n                            id='search_item.jump'\n                            defaultMessage='Jump'\n                        />\n                    </a>\n                </div>\n            );\n\n            message = (\n                <PostBodyAdditionalContent\n                    post={post}\n                    options={{\n                        searchTerm: this.props.term,\n                        searchMatches: this.props.matches,\n                    }}\n                >\n                    <PostMessageContainer\n                        post={post}\n                        options={{\n                            searchTerm: this.props.term,\n                            searchMatches: this.props.matches,\n                            mentionHighlight: this.props.isMentionSearch,\n                        }}\n                        isRHS={true}\n                    />\n                </PostBodyAdditionalContent>\n            );\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        const currentPostDay = Utils.getDateForUnixTicks(post.create_at);\n\n        return (\n            <div\n                data-testid='search-item-container'\n                className='search-item__container'\n            >\n                <DateSeparator date={currentPostDay}/>\n                <div\n                    className={`a11y__section ${this.getClassName()}`}\n                    aria-label={this.state.currentAriaLabel}\n                    onFocus={this.handleSearchItemFocus}\n                    data-a11y-sort-order={this.props.a11yIndex}\n                >\n                    <div\n                        className='search-channel__name'\n                        aria-hidden='true'\n                    >\n                        {channelName}\n                        {channelIsArchived &&\n                            <span className='search-channel__archived'>\n                                <ArchiveIcon className='icon icon__archive channel-header-archived-icon svg-text-color'/>\n                                <FormattedMessage\n                                    id='search_item.channelArchived'\n                                    defaultMessage='Archived'\n                                />\n                            </span>\n                        }\n                    </div>\n                    <div\n                        role='application'\n                        className='post__content'\n                    >\n                        {profilePicContainer}\n                        <div>\n                            <div className='post__header'>\n                                <div className='col col__name'>\n                                    <UserProfile\n                                        userId={post.user_id}\n                                        overwriteName={overrideUsername}\n                                        disablePopover={disableProfilePopover}\n                                        isRHS={true}\n                                    />\n                                    <BotBadge show={Boolean(post.props && post.props.from_webhook && !this.props.isBot)}/>\n                                </div>\n                                <div className='col'>\n                                    {this.renderPostTime()}\n                                    {pinnedBadge}\n                                    {postInfoIcon}\n                                    {flagContent}\n                                </div>\n                                {rhsControls}\n                            </div>\n                            <div className='search-item-snippet post__body'>\n                                <div className={postClass}>\n                                    {message}\n                                    {fileAttachment}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SearchResultsItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {makeGetCommentCountForPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getMyPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {isPostFlagged} from 'mattermost-redux/utils/post_utils';\n\nimport {\n    closeRightHandSide,\n    selectPostFromRightHandSideSearch,\n    selectPostCardFromRightHandSideSearch,\n    setRhsExpanded,\n} from 'actions/views/rhs';\n\nimport {makeCreateAriaLabelForPost} from 'utils/post_utils.jsx';\n\nimport SearchResultsItem from './search_results_item.jsx';\n\nfunction mapStateToProps() {\n    const createAriaLabelForPost = makeCreateAriaLabelForPost();\n    const getCommentCountForPost = makeGetCommentCountForPost();\n\n    return (state, ownProps) => {\n        const config = getConfig(state);\n        const preferences = getMyPreferences(state);\n        const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n        const {post} = ownProps;\n        const user = getUser(state, post.user_id);\n        const channel = getChannel(state, post.channel_id) || {delete_at: 0};\n\n        return {\n            createAriaLabel: createAriaLabelForPost(state, post),\n            channelId: channel.id,\n            channelName: channel.display_name,\n            channelType: channel.type,\n            channelIsArchived: channel.delete_at !== 0,\n            currentTeamName: getCurrentTeam(state).name,\n            commentCountForPost: getCommentCountForPost(state, {post}),\n            enablePostUsernameOverride,\n            isFlagged: isPostFlagged(post.id, preferences),\n            isBot: user ? user.is_bot : false,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeRightHandSide,\n            selectPost: selectPostFromRightHandSideSearch,\n            selectPostCard: selectPostCardFromRightHandSideSearch,\n            setRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResultsItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DataRetentionHint extends PureComponent {\n    static propTypes = {\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <li>\n                <FormattedMessage\n                    id='search_results.usage.dataRetention'\n                    defaultMessage='Only messages posted in the last {days} days are returned. Contact your System Administrator for more detail.'\n                    values={{\n                        days: this.props.dataRetentionMessageRetentionDays,\n                    }}\n                />\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport FlagIcon from 'components/widgets/icons/flag_icon';\n\nimport DataRetentionHint from './data_retention_hint';\n\nexport default class FlagPostSearchHint extends PureComponent {\n    static propTypes = {\n        dataRetentionEnableMessageDeletion: PropTypes.bool,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ul>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usageFlag1'\n                            defaultMessage=\"You haven't flagged any messages yet.\"\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usageFlag2'\n                            defaultMessage='You can add a flag to messages and comments by clicking the {flagIcon} icon next to the timestamp.'\n                            values={{\n                                flagIcon: <FlagIcon className='usage__icon'/>,\n                            }}\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usageFlag4'\n                            defaultMessage='Flags are a way to mark messages for follow up. Your flags are personal, and cannot be seen by other users.'\n                        />\n                    </li>\n                    {this.props.dataRetentionEnableMessageDeletion &&\n                        <DataRetentionHint dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}/>\n                    }\n                </ul>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport DataRetentionHint from './data_retention_hint';\n\nexport default class PinPostSearchHint extends PureComponent {\n    static propTypes = {\n        dataRetentionEnableMessageDeletion: PropTypes.bool,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h4 id='noResultsMessage'>\n                    <FormattedMessage\n                        id='search_results.noResults'\n                        defaultMessage='No results found. Try again?'\n                    />\n                </h4>\n                <ul>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.noResults.partialPhraseSuggestion'\n                            defaultMessage='If you&#39;re searching a partial phrase (ex. searching \"rea\", looking for \"reach\" or \"reaction\"), append a * to your search term.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.noResults.stopWordsSuggestion'\n                            defaultMessage='Two letter searches and common words like \"this\", \"a\" and \"is\" won&#39;t appear in search results due to the excessive results returned.'\n                        />\n                    </li>\n                    {this.props.dataRetentionEnableMessageDeletion &&\n                        <DataRetentionHint dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}/>\n                    }\n                </ul>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport DataRetentionHint from './data_retention_hint';\n\nexport default class PinPostSearchHint extends PureComponent {\n    static propTypes = {\n        dataRetentionEnableMessageDeletion: PropTypes.bool,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ul>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin1'\n                            defaultMessage='There are no pinned messages yet.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin2'\n                            defaultMessage='All members of this channel can pin important or useful messages.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin3'\n                            defaultMessage='Pinned messages are visible to all channel members.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin4'\n                            defaultMessage={'To pin a message: Go to the message that you want to pin and click [...] > \"Pin to channel\".'}\n                        />\n                    </li>\n                    {this.props.dataRetentionEnableMessageDeletion &&\n                        <DataRetentionHint dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}/>\n                    }\n                </ul>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\n\nimport {injectIntl} from 'react-intl';\n\nimport {debounce} from 'mattermost-redux/actions/helpers';\n\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SearchResultsHeader from 'components/search_results_header';\nimport SearchResultsItem from 'components/search_results_item';\nimport SearchHint from 'components/search_hint/search_hint';\nimport FlagPostSearchHint from 'components/search_hint/flag_post_search_hint';\nimport NoResultSearchHint from 'components/search_hint/no_result_search_hint';\nimport PinPostSearchHint from 'components/search_hint/pin_post_search_hint';\nimport LoadingSpinner from 'components/widgets/loading/loading_wrapper';\n\nconst GET_MORE_BUFFER = 30;\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport function shouldRenderFromPropsAndState(props, nextProps, state, nextState) {\n    // Shallow compare for all props except 'results'\n    for (const key in nextProps) {\n        if (!nextProps.hasOwnProperty(key) || key === 'results') {\n            continue;\n        }\n\n        if (nextProps[key] !== props[key]) {\n            return true;\n        }\n    }\n\n    // Shallow compare state\n    for (const key in nextState) {\n        if (!nextState.hasOwnProperty(key)) {\n            continue;\n        }\n\n        if (nextState[key] !== state[key]) {\n            return true;\n        }\n    }\n\n    // Here we do a slightly deeper compare on 'results' because it is frequently a new\n    // array but without any actual changes\n    const results = props.results;\n    const nextResults = nextProps.results;\n\n    if (results.length !== nextResults.length) {\n        return true;\n    }\n\n    for (let i = 0; i < results.length; i++) {\n        // Only need a shallow compare on each post\n        if (results[i] !== nextResults[i]) {\n            return true;\n        }\n    }\n\n    return false;\n}\nclass SearchResults extends React.Component {\n    static propTypes = {\n        results: PropTypes.array,\n        matches: PropTypes.object,\n        currentUser: PropTypes.object,\n        searchTerms: PropTypes.string,\n        isSearchingTerm: PropTypes.bool,\n        isSearchingFlaggedPost: PropTypes.bool,\n        isSearchingPinnedPost: PropTypes.bool,\n        isSearchGettingMore: PropTypes.bool,\n        isSearchAtEnd: PropTypes.bool,\n        compactDisplay: PropTypes.bool,\n        isMentionSearch: PropTypes.bool,\n        isFlaggedPosts: PropTypes.bool,\n        isPinnedPosts: PropTypes.bool,\n        isCard: PropTypes.bool,\n        channelDisplayName: PropTypes.string.isRequired,\n        dataRetentionEnableMessageDeletion: PropTypes.bool.isRequired,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n        isOpened: PropTypes.bool,\n        actions: PropTypes.shape({\n            getMorePostsForSearch: PropTypes.func.isRequired,\n        }),\n        intl: intlShape.isRequired,\n    };\n\n    static defaultProps = {\n        matches: {},\n        currentUser: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n        };\n    }\n\n    componentDidMount() {\n        this.scrollToTop();\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return shouldRenderFromPropsAndState(this.props, nextProps, this.state, nextState);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.searchTerms !== prevProps.searchTerms) {\n            this.scrollToTop();\n        }\n    }\n\n    handleResize = () => {\n        this.setState({\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n        });\n    }\n\n    scrollToTop = () => {\n        this.refs.scrollbars.scrollToTop();\n    }\n\n    handleScroll = () => {\n        if (!this.props.isFlaggedPosts && !this.props.isPinnedPosts && !this.props.isSearchingTerm && !this.props.isSearchGettingMore) {\n            const scrollHeight = this.refs.scrollbars.getScrollHeight();\n            const scrollTop = this.refs.scrollbars.getScrollTop();\n            const clientHeight = this.refs.scrollbars.getClientHeight();\n            if ((scrollTop + clientHeight + GET_MORE_BUFFER) >= scrollHeight) {\n                this.loadMorePosts();\n            }\n        }\n    }\n\n    loadMorePosts = debounce(() => {\n        this.props.actions.getMorePostsForSearch();\n    }, 100);\n\n    render() {\n        const results = this.props.results;\n        const noResults = (!results || results.length === 0);\n        const searchTerms = this.props.searchTerms;\n\n        let ctls = null;\n        let loadingMorePostsComponent = null;\n\n        if (\n            this.props.isSearchingTerm ||\n            this.props.isSearchingFlaggedPost ||\n            this.props.isSearchingPinnedPost ||\n            !this.props.isOpened\n        ) {\n            ctls = (\n                <div className='sidebar--right__subheader a11y__section'>\n                    <div className='sidebar--right__loading'>\n                        <LoadingSpinner text={Utils.localizeMessage('search_header.loading', 'Searching')}/>\n                    </div>\n                </div>\n            );\n        } else if (this.props.isFlaggedPosts && noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader a11y__section'>\n                    <FlagPostSearchHint\n                        dataRetentionEnableMessageDeletion={this.props.dataRetentionEnableMessageDeletion}\n                        dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}\n                    />\n                </div>\n            );\n        } else if (this.props.isPinnedPosts && noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader a11y__section'>\n                    <PinPostSearchHint\n                        dataRetentionEnableMessageDeletion={this.props.dataRetentionEnableMessageDeletion}\n                        dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}\n                    />\n                </div>\n            );\n        } else if (!searchTerms && noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader a11y__section'>\n                    <SearchHint/>\n                </div>\n            );\n        } else if (noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader a11y__section'>\n                    <NoResultSearchHint\n                        dataRetentionEnableMessageDeletion={this.props.dataRetentionEnableMessageDeletion}\n                        dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}\n                    />\n                </div>\n            );\n        } else {\n            let sortedResults;\n            if (this.props.isPinnedPosts) {\n                sortedResults = [...results];\n                sortedResults.sort((postA, postB) => postB.create_at - postA.create_at);\n            } else {\n                sortedResults = results;\n            }\n\n            ctls = sortedResults.map((post, index) => {\n                return (\n                    <SearchResultsItem\n                        key={post.id}\n                        compactDisplay={this.props.compactDisplay}\n                        post={post}\n                        matches={this.props.matches[post.id]}\n                        term={(!this.props.isFlaggedPosts && !this.props.isPinnedPosts && !this.props.isMentionSearch) ? searchTerms : ''}\n                        isMentionSearch={this.props.isMentionSearch}\n                        a11yIndex={index}\n                    />\n                );\n            }, this);\n\n            if (!this.props.isSearchAtEnd && !this.props.isFlaggedPosts && !this.props.isPinnedPosts) {\n                loadingMorePostsComponent = (\n                    <div className='loading-screen'>\n                        <div className='loading__content'>\n                            <div className='round round-1'/>\n                            <div className='round round-2'/>\n                            <div className='round round-3'/>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        var formattedTitle = this.props.intl.formatMessage({\n            id: 'search_header.results',\n            defaultMessage: 'Search Results',\n        });\n\n        if (this.props.isMentionSearch) {\n            formattedTitle = this.props.intl.formatMessage({\n                id: 'search_header.title2',\n                defaultMessage: 'Recent Mentions',\n            });\n        } else if (this.props.isFlaggedPosts) {\n            formattedTitle = this.props.intl.formatMessage({\n                id: 'search_header.title3',\n                defaultMessage: 'Flagged Posts',\n            });\n        } else if (this.props.isPinnedPosts) {\n            formattedTitle = this.props.intl.formatMessage({\n                id: 'search_header.title4',\n                defaultMessage: 'Pinned posts in {channelDisplayName}',\n            }, {\n                channelDisplayName: this.props.channelDisplayName,\n            });\n        } else if (this.props.isCard) {\n            formattedTitle = this.props.intl.formatMessage({\n                id: 'search_header.title5',\n                defaultMessage: 'Extra information',\n            });\n        }\n\n        return (\n            <div\n                id='searchContainer'\n                className='sidebar-right__body'\n            >\n                <SearchResultsHeader>\n                    {formattedTitle}\n                </SearchResultsHeader>\n                <Scrollbars\n                    ref='scrollbars'\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div\n                        id='search-items-container'\n                        role='application'\n                        className='search-items-container post-list__table a11y__region'\n                        data-a11y-sort-order='3'\n                        data-a11y-focus-child={true}\n                        data-a11y-loop-navigation={false}\n                        aria-label={this.props.intl.formatMessage({\n                            id: 'accessibility.sections.rhs',\n                            defaultMessage: '{regionTitle} complimentary region',\n                        }, {\n                            regionTitle: formattedTitle,\n                        })}\n                    >\n                        {ctls}\n                        {loadingMorePostsComponent}\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SearchResults);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMorePostsForSearch} from 'mattermost-redux/actions/search';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getSearchMatches, getSearchResults} from 'mattermost-redux/selectors/entities/posts';\nimport * as PreferenceSelectors from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentSearchForCurrentTeam} from 'mattermost-redux/selectors/entities/search';\n\nimport {\n    getSearchResultsTerms,\n    getIsSearchingTerm,\n    getIsSearchingFlaggedPost,\n    getIsSearchingPinnedPost,\n    getIsSearchGettingMore,\n} from 'selectors/rhs';\nimport {Preferences} from 'utils/constants.jsx';\n\nimport SearchResults from './search_results.jsx';\n\nfunction makeMapStateToProps() {\n    let results;\n    let posts;\n\n    return function mapStateToProps(state) {\n        const config = getConfig(state);\n\n        const dataRetentionEnableMessageDeletion = config.DataRetentionEnableMessageDeletion === 'true';\n        const dataRetentionMessageRetentionDays = config.DataRetentionMessageRetentionDays;\n        const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n        const newResults = getSearchResults(state);\n\n        // Cache posts and channels\n        if (newResults && newResults !== results) {\n            results = newResults;\n\n            posts = [];\n            results.forEach((post) => {\n                if (!post) {\n                    return;\n                }\n\n                const channel = getChannel(state, post.channel_id);\n                if (channel && channel.delete_at !== 0 && !viewArchivedChannels) {\n                    return;\n                }\n\n                posts.push(post);\n            });\n        }\n\n        const currentSearch = getCurrentSearchForCurrentTeam(state) || {};\n\n        return {\n            results: posts,\n            matches: getSearchMatches(state),\n            currentUser: getCurrentUser(state),\n            searchTerms: getSearchResultsTerms(state),\n            isSearchingTerm: getIsSearchingTerm(state),\n            isSearchingFlaggedPost: getIsSearchingFlaggedPost(state),\n            isSearchingPinnedPost: getIsSearchingPinnedPost(state),\n            isSearchGettingMore: getIsSearchGettingMore(state),\n            isSearchAtEnd: currentSearch.isEnd,\n            compactDisplay: PreferenceSelectors.get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n            dataRetentionEnableMessageDeletion,\n            dataRetentionMessageRetentionDays,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMorePostsForSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SearchResults);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SearchResultsHeader from 'components/search_results_header';\n\nimport Pluggable from 'plugins/pluggable';\n\nexport default class RhsPlugin extends React.PureComponent {\n    static propTypes = {\n        title: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n        pluggableId: PropTypes.string.isRequired,\n    }\n\n    render() {\n        return (\n            <div\n                id='rhsContainer'\n                className='sidebar-right__body'\n            >\n                <SearchResultsHeader>\n                    {this.props.title}\n                </SearchResultsHeader>\n                <Pluggable\n                    pluggableName='RightHandSidebarComponent'\n                    pluggableId={this.props.pluggableId}\n                />\n            </div>\n        );\n    }\n}\n","\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getPluginId} from 'selectors/rhs';\n\nimport RHSPlugin from './rhs_plugin.jsx';\n\nfunction mapStateToProps(state) {\n    const rhsPlugins = state.plugins.components.RightHandSidebarComponent;\n    const pluginId = getPluginId(state);\n\n    const plugin = rhsPlugins.find((element) => element.id === pluginId);\n    const pluginName = plugin ? plugin.title : '';\n\n    return {\n        title: pluginName,\n        pluggableId: pluginId,\n    };\n}\n\nexport default connect(mapStateToProps)(RHSPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FileUploadOverlay from 'components/file_upload_overlay';\nimport RhsThread from 'components/rhs_thread';\nimport RhsCard from 'components/rhs_card';\nimport SearchBar from 'components/search_bar';\nimport SearchResults from 'components/search_results';\n\nimport RhsPlugin from 'plugins/rhs_plugin';\n\nexport default class SidebarRight extends React.PureComponent {\n    static propTypes = {\n        isExpanded: PropTypes.bool.isRequired,\n        isOpen: PropTypes.bool.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        channel: PropTypes.object,\n        postRightVisible: PropTypes.bool,\n        postCardVisible: PropTypes.bool,\n        searchVisible: PropTypes.bool,\n        isMentionSearch: PropTypes.bool,\n        isFlaggedPosts: PropTypes.bool,\n        isPinnedPosts: PropTypes.bool,\n        isPluginView: PropTypes.bool,\n        previousRhsState: PropTypes.string,\n        actions: PropTypes.shape({\n            setRhsExpanded: PropTypes.func.isRequired,\n            showPinnedPosts: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.sidebarRight = React.createRef();\n        this.state = {\n            isOpened: false,\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.determineTransition);\n        this.determineTransition();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.determineTransition);\n        if (this.sidebarRight.current) {\n            this.sidebarRight.current.removeEventListener('transitionend', this.onFinishTransition);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const wasOpen = prevProps.searchVisible || prevProps.postRightVisible;\n        const isOpen = this.props.searchVisible || this.props.postRightVisible;\n\n        if (!wasOpen && isOpen) {\n            trackEvent('ui', 'ui_rhs_opened');\n        }\n\n        const {actions, isPinnedPosts, channel} = this.props;\n        if (isPinnedPosts && prevProps.isPinnedPosts === isPinnedPosts && channel.id !== prevProps.channel.id) {\n            actions.showPinnedPosts(channel.id);\n        }\n    }\n\n    determineTransition = () => {\n        const transitionInfo = window.getComputedStyle(this.sidebarRight.current).getPropertyValue('transition');\n        const hasTransition = Boolean(transitionInfo) && transitionInfo !== 'all 0s ease 0s';\n\n        if (this.sidebarRight.current && hasTransition) {\n            this.setState({isOpened: this.props.isOpen});\n            this.sidebarRight.current.addEventListener('transitionend', this.onFinishTransition);\n        } else {\n            this.setState({isOpened: true});\n            if (this.sidebarRight.current) {\n                this.sidebarRight.current.removeEventListener('transitionend', this.onFinishTransition);\n            }\n        }\n    }\n\n    onFinishTransition = (e) => {\n        if (e.propertyName === 'transform') {\n            this.setState({isOpened: this.props.isOpen});\n        }\n    }\n\n    onShrink = () => {\n        this.props.actions.setRhsExpanded(false);\n    };\n\n    render() {\n        const {\n            channel,\n            currentUserId,\n            isFlaggedPosts,\n            isMentionSearch,\n            isPinnedPosts,\n            postRightVisible,\n            postCardVisible,\n            previousRhsState,\n            searchVisible,\n            isPluginView,\n        } = this.props;\n\n        let content = null;\n        let expandedClass = '';\n\n        if (this.props.isExpanded) {\n            expandedClass = 'sidebar--right--expanded';\n        }\n\n        var searchForm = null;\n        if (currentUserId) {\n            searchForm = (\n                <SearchBar\n                    isFocus={searchVisible && !isFlaggedPosts && !isPinnedPosts}\n                    isSideBarRight={true}\n                />\n            );\n        }\n\n        let channelDisplayName = '';\n        if (channel) {\n            if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n                channelDisplayName = Utils.localizeMessage('rhs_root.direct', 'Direct Message');\n            } else {\n                channelDisplayName = channel.display_name;\n            }\n        }\n\n        if (searchVisible) {\n            content = (\n                <div className='sidebar--right__content'>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <SearchResults\n                        isMentionSearch={isMentionSearch}\n                        isFlaggedPosts={isFlaggedPosts}\n                        isPinnedPosts={isPinnedPosts}\n                        toggleSize={this.toggleSize}\n                        shrink={this.onShrink}\n                        channelDisplayName={channelDisplayName}\n                        isOpened={this.state.isOpened}\n                    />\n                </div>\n            );\n        } else if (postRightVisible) {\n            content = (\n                <div className='post-right__container'>\n                    <FileUploadOverlay overlayType='right'/>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <RhsThread\n                        previousRhsState={previousRhsState}\n                        currentUserId={currentUserId}\n                        toggleSize={this.toggleSize}\n                        shrink={this.onShrink}\n                    />\n                </div>\n            );\n        } else if (isPluginView) {\n            content = (\n                <div className='post-right__container'>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <RhsPlugin/>\n                </div>\n            );\n        } else if (postCardVisible) {\n            content = (\n                <div className='post-right__container'>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <RhsCard previousRhsState={previousRhsState}/>\n                </div>\n            );\n        }\n\n        if (!content) {\n            expandedClass = '';\n        }\n\n        return (\n            <div\n                className={classNames('sidebar--right', expandedClass, {'move--left': this.props.isOpen})}\n                id='sidebar-right'\n                ref={this.sidebarRight}\n            >\n                <div\n                    onClick={this.onShrink}\n                    className='sidebar--right__bg'\n                />\n                <div className='sidebar-right-container'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {setRhsExpanded, showPinnedPosts} from 'actions/views/rhs';\nimport {\n    getIsRhsExpanded,\n    getIsRhsOpen,\n    getRhsState,\n    getSelectedPostId,\n    getSelectedPostCardId,\n    getSelectedChannelId,\n    getPreviousRhsState,\n} from 'selectors/rhs';\nimport {RHSStates} from 'utils/constants';\n\nimport SidebarRight from './sidebar_right.jsx';\n\nfunction mapStateToProps(state) {\n    const rhsState = getRhsState(state);\n\n    const channelId = getSelectedChannelId(state);\n\n    let channel = null;\n    if (channelId) {\n        channel = getChannel(state, channelId);\n        if (channel == null) {\n            // the permalink view is not really tied to a particular channel but still needs it\n            const {focusedPostId} = state.views.channel;\n            const post = getPost(state, focusedPostId);\n\n            // the post take some time before being available on page load\n            if (post != null) {\n                channel = getChannel(state, post.channel_id);\n            }\n        }\n    }\n\n    return {\n        isExpanded: getIsRhsExpanded(state),\n        isOpen: getIsRhsOpen(state),\n        channel,\n        currentUserId: getCurrentUserId(state),\n        postRightVisible: Boolean(getSelectedPostId(state)),\n        postCardVisible: Boolean(getSelectedPostCardId(state)),\n        searchVisible: Boolean(rhsState) && rhsState !== RHSStates.PLUGIN,\n        previousRhsState: getPreviousRhsState(state),\n        isMentionSearch: rhsState === RHSStates.MENTION,\n        isFlaggedPosts: rhsState === RHSStates.FLAG,\n        isPinnedPosts: rhsState === RHSStates.PIN,\n        isPluginView: rhsState === RHSStates.PLUGIN,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            setRhsExpanded,\n            showPinnedPosts,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarRight);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Overlay} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport tutorialGif from 'images/tutorialTip.gif';\nimport tutorialGifWhite from 'images/tutorialTipWhite.gif';\n\nconst Preferences = Constants.Preferences;\nconst TutorialSteps = Constants.TutorialSteps;\n\ntype Preference = {\n    user_id: string;\n    category: string;\n    name: string;\n    value: string;\n}\n\ntype Props = {\n    currentUserId: string;\n    step: number;\n    screens: Array<JSX.Element>;\n    placement: string;\n    overlayClass: string;\n    diagnosticsTag?: string;\n    actions: {\n        closeRhsMenu: () => void;\n        savePreferences: (currentUserId: string, preferences: Array<Preference>) => void;\n    };\n}\n\ntype State = {\n    currentScreen: number;\n    show: boolean;\n}\n\nexport default class TutorialTip extends React.Component<Props, State> {\n    public targetRef: React.RefObject<HTMLImageElement>;\n\n    public static defaultProps: Partial<Props> = {\n        overlayClass: '',\n    }\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            currentScreen: 0,\n            show: false\n        };\n\n        this.targetRef = React.createRef();\n    }\n\n    private show = (): void => {\n        this.setState({show: true});\n    }\n\n    private hide = (): void => {\n        this.setState({show: false});\n    }\n\n    public handleNext = (): void => {\n        if (this.state.currentScreen < this.props.screens.length - 1) {\n            this.setState({currentScreen: this.state.currentScreen + 1});\n            return;\n        }\n\n        if (this.props.diagnosticsTag) {\n            let tag = this.props.diagnosticsTag;\n\n            if (this.props.screens.length > 1) {\n                tag += '_' + (this.state.currentScreen + 1).toString();\n            }\n\n            if (this.state.currentScreen === this.props.screens.length - 1) {\n                tag += '_okay';\n            } else {\n                tag += '_next';\n            }\n\n            trackEvent('tutorial', tag);\n        }\n\n        const {currentUserId, actions} = this.props;\n        const {closeRhsMenu, savePreferences} = actions;\n\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: (this.props.step + 1).toString(),\n        }];\n\n        closeRhsMenu();\n        this.hide();\n\n        savePreferences(currentUserId, preferences);\n    }\n\n    public skipTutorial = (e: React.MouseEvent<HTMLAnchorElement>): void => {\n        e.preventDefault();\n\n        if (this.props.diagnosticsTag) {\n            let tag = this.props.diagnosticsTag;\n            if (this.props.screens.length > 1) {\n                tag += '_' + this.state.currentScreen;\n            }\n            tag += '_skip';\n            trackEvent('tutorial', tag);\n        }\n\n        const {currentUserId, actions} = this.props;\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: TutorialSteps.FINISHED.toString(),\n        }];\n\n        actions.savePreferences(currentUserId, preferences);\n    }\n\n    private handleCircleClick = (e: React.MouseEvent<HTMLAnchorElement>, screen: number): void => {\n        e.preventDefault();\n        this.setState({currentScreen: screen});\n    }\n\n    private getTarget = (): HTMLImageElement | null => {\n        return this.targetRef.current;\n    }\n\n    public render(): JSX.Element {\n        const buttonText = this.state.currentScreen === this.props.screens.length - 1 ?\n            (\n                <FormattedMessage\n                    id='tutorial_tip.ok'\n                    defaultMessage='Okay'\n                />\n            ) :\n            (\n                <FormattedMessage\n                    id='tutorial_tip.next'\n                    defaultMessage='Next'\n                />\n            );\n\n        const dots = [];\n        if (this.props.screens.length > 1) {\n            for (let i = 0; i < this.props.screens.length; i++) {\n                let className = 'circle';\n                if (i === this.state.currentScreen) {\n                    className += ' active';\n                }\n\n                dots.push(\n                    <a\n                        href='#'\n                        key={'dotactive' + i}\n                        className={className}\n                        data-screen={i}\n                        onClick={(e) => this.handleCircleClick(e, i)}\n                    />\n                );\n            }\n        }\n\n        let tutorialGifImage = tutorialGif;\n        if (this.props.overlayClass === 'tip-overlay--header' || this.props.overlayClass === 'tip-overlay--sidebar' || this.props.overlayClass === 'tip-overlay--header--up') {\n            tutorialGifImage = tutorialGifWhite;\n        }\n\n        return (\n            <div\n                id='tipButton'\n                className={'tip-div ' + this.props.overlayClass}\n                onClick={this.show}\n            >\n                <img\n                    alt={'tutorial tip'}\n                    className='tip-button'\n                    src={tutorialGifImage}\n                    width='35'\n                    onClick={this.show}\n                    ref={this.targetRef}\n                />\n\n                <Overlay\n                    show={this.state.show}\n                >\n                    <div className='tip-backdrop'/>\n                </Overlay>\n\n                <Overlay\n                    placement={this.props.placement}\n                    show={this.state.show}\n                    rootClose={true}\n                    onHide={this.hide}\n                    target={this.getTarget}\n                >\n                    <div className={'tip-overlay ' + this.props.overlayClass}>\n                        <div className='arrow'/>\n                        {this.props.screens[this.state.currentScreen]}\n                        <div className='tutorial__footer'>\n                            <div className='tutorial__circles'>{dots}</div>\n                            <div className='text-right'>\n                                <button\n                                    id='tipNextButton'\n                                    className='btn btn-primary'\n                                    onClick={this.handleNext}\n                                >\n                                    {buttonText}\n                                </button>\n                                <div className='tip-opt'>\n                                    <FormattedMessage\n                                        id='tutorial_tip.seen'\n                                        defaultMessage='Seen this before? '\n                                    />\n                                    <a\n                                        href='#'\n                                        onClick={this.skipTutorial}\n                                    >\n                                        <FormattedMessage\n                                            id='tutorial_tip.out'\n                                            defaultMessage='Opt out of these tips.'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Overlay>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {closeMenu as closeRhsMenu} from 'actions/views/rhs';\nimport {Preferences} from 'utils/constants';\n\nimport TutorialTip from './tutorial_tip';\n\nfunction mapStateToProps(state) {\n    const currentUserId = getCurrentUserId(state);\n    return {\n        currentUserId,\n        step: getInt(state, Preferences.TUTORIAL_STEP, currentUserId, 0),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeRhsMenu,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TutorialTip);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport TutorialTip from './tutorial_tip';\n\nconst MenuTutorialTip = ({toggleFunc, onBottom}) => {\n    const screens = [];\n\n    screens.push(\n        <div>\n            <h4>\n                <FormattedMessage\n                    id='sidebar_header.tutorial.title'\n                    defaultMessage='Main Menu'\n                />\n            </h4>\n            <p>\n                <FormattedMarkdownMessage\n                    id='sidebar_header.tutorial.body1'\n                    defaultMessage='The **Main Menu** is where you can **Invite New Members**, access your **Account Settings** and set your **Theme Color**.'\n                />\n            </p>\n            <p>\n                <FormattedMarkdownMessage\n                    id='sidebar_header.tutorial.body2'\n                    defaultMessage='Team administrators can also access their **Team Settings** from this menu.'\n                />\n            </p>\n            <p>\n                <FormattedMarkdownMessage\n                    id='sidebar_header.tutorial.body3'\n                    defaultMessage='System administrators will find a **System Console** option to administrate the entire system.'\n                />\n            </p>\n        </div>\n    );\n\n    let placement = 'right';\n    let arrow = 'left';\n    if (onBottom) {\n        placement = 'bottom';\n        arrow = 'up';\n    }\n\n    return (\n        <div\n            onClick={toggleFunc}\n        >\n            <TutorialTip\n                placement={placement}\n                screens={screens}\n                overlayClass={'tip-overlay--header--' + arrow}\n                diagnosticsTag='tutorial_tip_3_main_menu'\n            />\n        </div>\n    );\n};\n\nMenuTutorialTip.propTypes = {\n    toggleFunc: PropTypes.func,\n    onBottom: PropTypes.bool.isRequired,\n};\n\nexport default MenuTutorialTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SearchableUserList from './searchable_user_list.jsx';\n\nexport default class SearchableUserListContainer extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        extraInfo: PropTypes.object,\n        nextPage: PropTypes.func.isRequired,\n        search: PropTypes.func.isRequired,\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        focusOnMount: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: '',\n            page: 0,\n        };\n    }\n\n    handleTermChange = (term) => {\n        this.setState({term});\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    search = (term) => {\n        this.props.search(term);\n\n        if (term !== '') {\n            this.setState({page: 0});\n        }\n    }\n\n    render() {\n        return (\n            <SearchableUserList\n                {...this.props}\n                nextPage={this.nextPage}\n                previousPage={this.previousPage}\n                search={this.search}\n                page={this.state.page}\n                term={this.state.term}\n                onTermChange={this.handleTermChange}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DropdownIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.dropdown'\n                defaultMessage='Dropdown Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-angle-down'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nconst ROWS_FROM_BOTTOM_TO_OPEN_UP = 3;\n\nexport default class TeamMembersDropdown extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        teamMember: PropTypes.object.isRequired,\n        teamUrl: PropTypes.string.isRequired,\n        currentTeam: PropTypes.object.isRequired,\n        index: PropTypes.number.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            getMyTeamMembers: PropTypes.func.isRequired,\n            getMyTeamUnreads: PropTypes.func.isRequired,\n            getUser: PropTypes.func.isRequired,\n            getTeamMember: PropTypes.func.isRequired,\n            getTeamStats: PropTypes.func.isRequired,\n            getChannelStats: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n            removeUserFromTeamAndGetStats: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: null,\n            showDemoteModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    handleMakeMember = async () => {\n        const me = this.props.currentUser;\n        if (this.props.user.id === me.id && me.roles.includes('system_admin')) {\n            this.handleDemote(this.props.user, 'team_user');\n        } else {\n            const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n            if (error) {\n                this.setState({serverError: error.message});\n            } else {\n                this.props.actions.getUser(this.props.user.id);\n                this.props.actions.getTeamMember(this.props.teamMember.team_id, this.props.user.id);\n                if (this.props.user.id === me.id) {\n                    await this.props.actions.getMyTeamMembers();\n                    this.props.actions.getMyTeamUnreads(this.props.user.id, this.props.teamMember.team_id);\n                }\n            }\n        }\n    }\n\n    handleRemoveFromTeam = async () => {\n        const {error} = await this.props.actions.removeUserFromTeamAndGetStats(this.props.teamMember.team_id, this.props.user.id);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleMakeAdmin = async () => {\n        const me = this.props.currentUser;\n        if (this.props.user.id === me.id && me.roles.includes('system_admin')) {\n            this.handleDemote(this.props.user, 'team_user team_admin');\n        } else {\n            const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n            if (error) {\n                this.setState({serverError: error.message});\n            } else {\n                this.props.actions.getUser(this.props.user.id);\n                this.props.actions.getTeamMember(this.props.teamMember.team_id, this.props.user.id);\n            }\n        }\n    }\n\n    handleDemote = (user, role, newRole) => {\n        this.setState({\n            serverError: this.state.serverError,\n            showDemoteModal: true,\n            user,\n            role,\n            newRole,\n        });\n    }\n\n    handleDemoteCancel = () => {\n        this.setState({\n            serverError: null,\n            showDemoteModal: false,\n            user: null,\n            role: null,\n            newRole: null,\n        });\n    }\n\n    handleDemoteSubmit = async () => {\n        const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.props.actions.getUser(this.props.user.id);\n            browserHistory.push(this.props.teamUrl);\n        }\n    }\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        const {currentTeam, teamMember, user} = this.props;\n\n        let currentRoles = null;\n\n        if (Utils.isGuest(user)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.guest'\n                    defaultMessage='Guest'\n                />\n            );\n        } else if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        } else if ((teamMember.roles.length > 0 && Utils.isAdmin(teamMember.roles)) || teamMember.scheme_admin) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.teamAdmin'\n                    defaultMessage='Team Admin'\n                />\n            );\n        } else {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.member'\n                    defaultMessage='Member'\n                />\n            );\n        }\n\n        const me = this.props.currentUser;\n        let showMakeMember = !Utils.isGuest(user) && (Utils.isAdmin(teamMember.roles) || teamMember.scheme_admin) && !Utils.isSystemAdmin(user.roles);\n        let showMakeAdmin = !Utils.isGuest(user) && !Utils.isAdmin(teamMember.roles) && !Utils.isSystemAdmin(user.roles) && !teamMember.scheme_admin;\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeMember = false;\n            showMakeAdmin = false;\n        }\n\n        const canRemoveFromTeam = user.id !== me.id && (!currentTeam.group_constrained || user.is_bot);\n\n        let makeDemoteModal = null;\n        if (user.id === me.id) {\n            const title = (\n                <FormattedMessage\n                    id='team_members_dropdown.confirmDemoteRoleTitle'\n                    defaultMessage='Confirm demotion from System Admin role'\n                />\n            );\n\n            const message = (\n                <div>\n                    <FormattedMessage\n                        id='team_members_dropdown.confirmDemoteDescription'\n                        defaultMessage=\"If you demote yourself from the System Admin role and there is not another user with System Admin privileges, you'll need to re-assign a System Admin by accessing the Mattermost server through a terminal and running the following command.\"\n                    />\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='team_members_dropdown.confirmDemotionCmd'\n                        defaultMessage='platform roles system_admin {username}'\n                        vallues={{\n                            username: me.username,\n                        }}\n                    />\n                    {serverError}\n                </div>\n            );\n\n            const confirmButton = (\n                <FormattedMessage\n                    id='team_members_dropdown.confirmDemotion'\n                    defaultMessage='Confirm Demotion'\n                />\n            );\n\n            makeDemoteModal = (\n                <ConfirmModal\n                    show={this.state.showDemoteModal}\n                    title={title}\n                    message={message}\n                    confirmButtonText={confirmButton}\n                    onConfirm={this.handleDemoteSubmit}\n                    onCancel={this.handleDemoteCancel}\n                />\n            );\n        }\n\n        if (!canRemoveFromTeam && !showMakeAdmin && !showMakeMember) {\n            return <div>{currentRoles}</div>;\n        }\n\n        const {index, totalUsers} = this.props;\n        let openUp = false;\n        if (totalUsers > ROWS_FROM_BOTTOM_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP) {\n            openUp = true;\n        }\n\n        return (\n            <MenuWrapper>\n                <button\n                    id={`teamMembersDropdown_${user.username}`}\n                    className='dropdown-toggle theme color--link style--none'\n                    type='button'\n                    aria-expanded='true'\n                >\n                    <span>{currentRoles} </span>\n                    <DropdownIcon/>\n                </button>\n                <div>\n                    <Menu\n                        openLeft={true}\n                        openUp={openUp}\n                        ariaLabel={Utils.localizeMessage('team_members_dropdown.menuAriaLabel', 'Team member role change')}\n                    >\n                        <Menu.ItemAction\n                            id='removeFromTeam'\n                            show={canRemoveFromTeam}\n                            onClick={this.handleRemoveFromTeam}\n                            text={Utils.localizeMessage('team_members_dropdown.leave_team', 'Remove From Team')}\n                        />\n                        <Menu.ItemAction\n                            show={showMakeAdmin}\n                            onClick={this.handleMakeAdmin}\n                            text={Utils.localizeMessage('team_members_dropdown.makeAdmin', 'Make Team Admin')}\n                        />\n                        <Menu.ItemAction\n                            show={showMakeMember}\n                            onClick={this.handleMakeMember}\n                            text={Utils.localizeMessage('team_members_dropdown.makeMember', 'Make Member')}\n                        />\n                    </Menu>\n                    {makeDemoteModal}\n                    {serverError}\n                </div>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getChannelStats} from 'mattermost-redux/actions/channels';\nimport {\n    getMyTeamMembers,\n    getMyTeamUnreads,\n    getTeamStats,\n    getTeamMember,\n    updateTeamMemberSchemeRoles,\n} from 'mattermost-redux/actions/teams';\nimport {getUser, updateUserActive} from 'mattermost-redux/actions/users';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentRelativeTeamUrl, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {removeUserFromTeamAndGetStats} from 'actions/team_actions.jsx';\n\nimport TeamMembersDropdown from './team_members_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        currentChannelId: getCurrentChannelId(state),\n        teamUrl: getCurrentRelativeTeamUrl(state),\n        currentTeam: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMyTeamMembers,\n            getMyTeamUnreads,\n            getUser,\n            getTeamMember,\n            getTeamStats,\n            getChannelStats,\n            updateUserActive,\n            updateTeamMemberSchemeRoles,\n            removeUserFromTeamAndGetStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list_container.jsx';\nimport TeamMembersDropdown from 'components/team_members_dropdown';\n\nconst USERS_PER_PAGE = 50;\n\nexport default class MemberListTeam extends React.Component {\n    static propTypes = {\n        searchTerm: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n        teamMembers: PropTypes.object.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        totalTeamMembers: PropTypes.number.isRequired,\n        canManageTeamMembers: PropTypes.bool,\n        actions: PropTypes.shape({\n            searchProfiles: PropTypes.func.isRequired,\n            getTeamStats: PropTypes.func.isRequired,\n            loadProfilesAndTeamMembers: PropTypes.func.isRequired,\n            loadStatusesForProfilesList: PropTypes.func.isRequired,\n            loadTeamMembersForProfilesList: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            getTeamMembers: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    async componentDidMount() {\n        await Promise.all([\n            this.props.actions.loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, this.props.currentTeamId),\n            this.props.actions.getTeamMembers(this.props.currentTeamId),\n            this.props.actions.getTeamStats(this.props.currentTeamId),\n        ]);\n        this.loadComplete();\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setModalSearchTerm('');\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                this.loadComplete();\n                this.searchTimeoutId = '';\n                return;\n            }\n\n            const searchTimeoutId = setTimeout(\n                async () => {\n                    const {\n                        loadStatusesForProfilesList,\n                        loadTeamMembersForProfilesList,\n                        searchProfiles,\n                    } = nextProps.actions;\n                    const {data} = await searchProfiles(searchTerm, {team_id: nextProps.currentTeamId});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    this.setState({loading: true});\n\n                    loadStatusesForProfilesList(data);\n                    loadTeamMembersForProfilesList(data, nextProps.currentTeamId).then(({data: membersLoaded}) => {\n                        if (membersLoaded) {\n                            this.loadComplete();\n                        }\n                    });\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    }\n\n    nextPage = (page) => {\n        this.props.actions.loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE);\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    render() {\n        let teamMembersDropdown = null;\n        if (this.props.canManageTeamMembers) {\n            teamMembersDropdown = [TeamMembersDropdown];\n        }\n\n        const teamMembers = this.props.teamMembers;\n        const users = this.props.users;\n        const actionUserProps = {};\n\n        let usersToDisplay;\n        if (this.state.loading) {\n            usersToDisplay = null;\n        } else {\n            usersToDisplay = [];\n\n            for (let i = 0; i < users.length; i++) {\n                const user = users[i];\n\n                if (teamMembers[user.id] && user.delete_at === 0) {\n                    usersToDisplay.push(user);\n                    actionUserProps[user.id] = {\n                        teamMember: teamMembers[user.id],\n                    };\n                }\n            }\n        }\n\n        return (\n            <SearchableUserList\n                users={usersToDisplay}\n                usersPerPage={USERS_PER_PAGE}\n                total={this.props.totalTeamMembers}\n                nextPage={this.nextPage}\n                search={this.search}\n                actions={teamMembersDropdown}\n                actionUserProps={actionUserProps}\n                focusOnMount={!UserAgent.isMobile()}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats, getTeamMembers} from 'mattermost-redux/actions/teams';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getMembersInCurrentTeam, getCurrentTeamStats} from 'mattermost-redux/selectors/entities/teams';\nimport {getProfilesInCurrentTeam, searchProfilesInCurrentTeam} from 'mattermost-redux/selectors/entities/users';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {searchProfiles} from 'mattermost-redux/actions/users';\n\nimport {loadStatusesForProfilesList} from 'actions/status_actions.jsx';\nimport {loadProfilesAndTeamMembers, loadTeamMembersForProfilesList} from 'actions/user_actions.jsx';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport MemberListTeam from './member_list_team.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const canManageTeamMembers = haveITeamPermission(state, {team: ownProps.teamId, permission: Permissions.MANAGE_TEAM_ROLES});\n\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        users = searchProfilesInCurrentTeam(state, searchTerm);\n    } else {\n        users = getProfilesInCurrentTeam(state);\n    }\n\n    const stats = getCurrentTeamStats(state) || {active_member_count: 0};\n\n    return {\n        searchTerm,\n        users,\n        teamMembers: getMembersInCurrentTeam(state) || {},\n        currentTeamId: state.entities.teams.currentTeamId,\n        totalTeamMembers: stats.active_member_count,\n        canManageTeamMembers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeamMembers,\n            searchProfiles,\n            getTeamStats,\n            loadProfilesAndTeamMembers,\n            loadStatusesForProfilesList,\n            loadTeamMembersForProfilesList,\n            setModalSearchTerm,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberListTeam);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport MemberListTeam from 'components/member_list_team';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nexport default class TeamMembersModal extends React.PureComponent {\n    static propTypes = {\n        currentTeam: PropTypes.object.isRequired,\n        onHide: PropTypes.func.isRequired,\n        onLoad: PropTypes.func,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n        })\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.onLoad) {\n            this.props.onLoad();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n\n    render() {\n        let teamDisplayName = '';\n        if (this.props.currentTeam) {\n            teamDisplayName = this.props.currentTeam.display_name;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='teamMemberModalLabel'\n                id='teamMembersModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='teamMemberModalLabel'\n                    >\n                        <FormattedMessage\n                            id='team_member_modal.members'\n                            defaultMessage='{team} Members'\n                            values={{\n                                team: teamDisplayName,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <MemberListTeam\n                        teamId={this.props.currentTeam.id}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {isModalOpen} from 'selectors/views/modals';\nimport {openModal} from 'actions/views/modals';\n\nimport TeamMembersModal from './team_members_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const modalId = ModalIdentifiers.TEAM_MEMBERS;\n    return {\n        currentTeam: getCurrentTeam(state),\n        show: isModalOpen(state, modalId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembersModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Constants} from 'utils/constants';\nimport {fileSizeToString, localizeMessage} from 'utils/utils.jsx';\nimport * as FileUtils from 'utils/file_utils.jsx';\n\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nexport default class SettingPicture extends Component {\n    static defaultProps = {\n        imageContext: 'profile',\n    };\n\n    static propTypes = {\n        clientError: PropTypes.string,\n        serverError: PropTypes.string,\n        src: PropTypes.string,\n        defaultImageSrc: PropTypes.string,\n        file: PropTypes.object,\n        loadingPicture: PropTypes.bool,\n        submitActive: PropTypes.bool,\n        onRemove: PropTypes.func,\n        onSetDefault: PropTypes.func,\n        onSubmit: PropTypes.func,\n        title: PropTypes.string,\n        onFileChange: PropTypes.func,\n        updateSection: PropTypes.func,\n        imageContext: PropTypes.string,\n        maxFileSize: PropTypes.number,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.settingList = React.createRef();\n        this.selectInput = React.createRef();\n        this.confirmButton = React.createRef();\n\n        this.state = {\n            image: null,\n            removeSrc: false,\n            setDefaultSrc: false,\n        };\n    }\n\n    focusFirstElement() {\n        if (this.settingList.current) {\n            this.settingList.current.focus();\n        }\n    }\n\n    componentDidMount() {\n        this.focusFirstElement();\n\n        if (this.selectInput.current) {\n            this.selectInput.current.addEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.file !== this.props.file) {\n            this.setPicture(this.props.file);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.previewBlob) {\n            URL.revokeObjectURL(this.previewBlob);\n        }\n\n        if (this.selectInput.current) {\n            this.selectInput.current.removeEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    handleCancel = (e) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.updateSection(e);\n    }\n\n    handleFileSelected = () => {\n        if (this.confirmButton.current) {\n            this.confirmButton.current.focus();\n        }\n    }\n\n    handleSave = (e) => {\n        e.preventDefault();\n        if (this.state.removeSrc) {\n            this.props.onRemove();\n        } else if (this.state.setDefaultSrc) {\n            this.props.onSetDefault();\n        } else {\n            this.props.onSubmit();\n        }\n    }\n\n    handleRemoveSrc = (e) => {\n        e.preventDefault();\n        this.setState({removeSrc: true});\n        this.focusFirstElement();\n    }\n\n    handleSetDefaultSrc = (e) => {\n        e.preventDefault();\n        this.setState({setDefaultSrc: true});\n        this.focusFirstElement();\n    }\n\n    handleFileChange = (e) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.onFileChange(e);\n    }\n\n    handleInputFile = () => {\n        this.selectInput.current.value = '';\n        this.selectInput.current.click();\n    }\n\n    setPicture = (file) => {\n        if (file) {\n            this.previewBlob = URL.createObjectURL(file);\n\n            var reader = new FileReader();\n            reader.onload = (e) => {\n                const orientation = FileUtils.getExifOrientation(e.target.result);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob,\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    }\n\n    renderImg = () => {\n        const imageContext = this.props.imageContext;\n\n        if (this.props.file) {\n            const imageStyles = {\n                backgroundImage: 'url(' + this.state.image + ')',\n                ...this.state.orientationStyles,\n            };\n\n            return (\n                <div className={`${imageContext}-img-preview`}>\n                    <div className='img-preview__image'>\n                        <div\n                            alt={`${imageContext} image preview`}\n                            style={imageStyles}\n                            className={`${imageContext}-img-preview`}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.setDefaultSrc) {\n            return (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.defaultImageSrc}\n                />\n            );\n        }\n\n        if (this.props.src && !this.state.removeSrc) {\n            const imageElement = (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.src}\n                />\n            );\n            if (!this.props.onRemove && !this.props.onSetDefault) {\n                return imageElement;\n            }\n\n            let title;\n            let handler;\n            if (this.props.onRemove) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove'\n                        defaultMessage='Remove this icon'\n                    />\n                );\n                handler = this.handleRemoveSrc;\n            } else if (this.props.onSetDefault) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove_profile_picture'\n                        defaultMessage='Remove profile picture'\n                    />\n                );\n                handler = this.handleSetDefaultSrc;\n            }\n\n            return (\n                <div className={`${imageContext}-img__container`}>\n                    <div\n                        className='img-preview__image'\n                        aria-hidden={true}\n                    >\n                        {imageElement}\n                    </div>\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='right'\n                        overlay={(\n                            <Tooltip id='removeIcon'>\n                                <div aria-hidden={true}>\n                                    {title}\n                                </div>\n                            </Tooltip>\n                        )}\n                    >\n                        <button\n                            data-testid='removeSettingPicture'\n                            className={`${imageContext}-img__remove`}\n                            onClick={handler}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                            <span className='sr-only'>{title}</span>\n                        </button>\n                    </OverlayTrigger>\n                </div>\n            );\n        }\n        return null;\n    }\n\n    render() {\n        const imageContext = this.props.imageContext;\n\n        const img = this.renderImg();\n\n        let confirmButtonClass = 'btn btn-sm';\n        let disableSaveButtonFocus = false;\n        if (this.props.submitActive || this.state.removeSrc || this.state.setDefaultSrc) {\n            confirmButtonClass += ' btn-primary';\n        } else {\n            confirmButtonClass += ' btn-inactive disabled';\n            disableSaveButtonFocus = true;\n        }\n\n        let helpText;\n        if (imageContext === 'team') {\n            helpText = (\n                <FormattedMarkdownMessage\n                    id={'setting_picture.help.team'}\n                    defaultMessage='Upload a team icon in BMP, JPG or PNG format.\\nSquare images with a solid background color are recommended.'\n                />\n            );\n        } else {\n            helpText = (\n                <FormattedMessage\n                    id={'setting_picture.help.profile'}\n                    defaultMessage='Upload a picture in BMP, JPG or PNG format. Maximum file size: {max}'\n                    values={{max: fileSizeToString(this.props.maxFileSize)}}\n                />\n            );\n        }\n\n        let imgRender;\n        if (img) {\n            imgRender = (\n                <li\n                    className='setting-list-item'\n                    role='presentation'\n                >\n                    {img}\n                </li>\n            );\n        }\n\n        return (\n            <section className='section-max form-horizontal'>\n                <h4 className='col-xs-12 section-title'>\n                    {this.props.title}\n                </h4>\n                <div className='col-xs-offset-3 col-xs-8'>\n                    <div\n                        className='setting-list'\n                        ref={this.settingList}\n                        tabIndex='-1'\n                        aria-label={this.props.title}\n                        aria-describedby='setting-picture__helptext'\n                    >\n                        {imgRender}\n                        <div\n                            id='setting-picture__helptext'\n                            className='setting-list-item padding-top x2'\n                        >\n                            {helpText}\n                        </div>\n                        <div\n                            className='setting-list-item'\n                        >\n                            <hr/>\n                            <FormError\n                                errors={[this.props.clientError, this.props.serverError]}\n                                type={'modal'}\n                            />\n                            <input\n                                data-testid='uploadPicture'\n                                ref={this.selectInput}\n                                className='hidden'\n                                accept='.jpg,.png,.bmp'\n                                type='file'\n                                onChange={this.handleFileChange}\n                                disabled={this.props.loadingPicture}\n                                aria-hidden={true}\n                                tabIndex='-1'\n                            />\n                            <button\n                                data-testid='inputSettingPictureButton'\n                                className='btn btn-sm btn-primary btn-file sel-btn'\n                                disabled={this.props.loadingPicture}\n                                onClick={this.handleInputFile}\n                                aria-label={localizeMessage('setting_picture.select', 'Select')}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.select'\n                                    defaultMessage='Select'\n                                />\n                            </button>\n                            <button\n                                tabIndex={disableSaveButtonFocus ? '-1' : '0'}\n                                data-testid='saveSettingPicture'\n                                disabled={disableSaveButtonFocus}\n                                ref={this.confirmButton}\n                                className={confirmButtonClass}\n                                onClick={this.props.loadingPicture ? () => true : this.handleSave}\n                                aria-label={this.props.loadingPicture ? localizeMessage('setting_picture.uploading', 'Uploading...') : localizeMessage('setting_picture.save', 'Save')}\n                            >\n                                <LoadingWrapper\n                                    loading={this.props.loadingPicture}\n                                    text={localizeMessage('setting_picture.uploading', 'Uploading...')}\n                                >\n                                    <FormattedMessage\n                                        id='setting_picture.save'\n                                        defaultMessage='Save'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                            <button\n                                data-testid='cancelSettingPicture'\n                                className='btn btn-link btn-sm theme'\n                                href='#'\n                                onClick={this.handleCancel}\n                                aria-label={localizeMessage('setting_picture.cancel', 'Cancel')}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, FormattedDate} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {t} from 'utils/i18n.jsx';\n\nconst ACCEPTED_TEAM_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/bmp'];\n\nexport default class GeneralTab extends React.Component {\n    static propTypes = {\n        updateSection: PropTypes.func.isRequired,\n        team: PropTypes.object.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        maxFileSize: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            getTeam: PropTypes.func.isRequired,\n            patchTeam: PropTypes.func.isRequired,\n            regenerateTeamInviteId: PropTypes.func.isRequired,\n            removeTeamIcon: PropTypes.func.isRequired,\n            setTeamIcon: PropTypes.func.isRequired,\n        }).isRequired,\n        canInviteTeamMembers: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = this.setupInitialState(props);\n    }\n\n    updateSection = (section) => {\n        this.setState(this.setupInitialState(this.props));\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const team = props.team;\n\n        return {\n            name: team.display_name,\n            invite_id: team.invite_id,\n            allow_open_invite: team.allow_open_invite,\n            description: team.description,\n            allowed_domains: team.allowed_domains,\n            serverError: '',\n            clientError: '',\n            teamIconFile: null,\n            loadingIcon: false,\n            submitActive: false,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        this.setState({\n            name: nextProps.team.display_name,\n            description: nextProps.team.description,\n            allowed_domains: nextProps.team.allowed_domains,\n            invite_id: nextProps.team.invite_id,\n            allow_open_invite: nextProps.team.allow_open_invite,\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!prevState.shouldFetchTeam && this.state.shouldFetchTeam) {\n            this.fetchTeam();\n        }\n    }\n\n    fetchTeam() {\n        if (this.state.serverError) {\n            return;\n        }\n        this.props.actions.getTeam(this.props.team.id).then(({error}) => {\n            const state = {\n                shouldFetchTeam: false,\n            };\n            if (error) {\n                state.serverError = error.message;\n            }\n            this.setState(state);\n        });\n    }\n\n    handleOpenInviteRadio = (openInvite) => {\n        this.setState({allow_open_invite: openInvite});\n    }\n\n    handleAllowedDomainsSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n\n        var data = {...this.props.team};\n        data.allowed_domains = this.state.allowed_domains;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleOpenInviteSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n\n        var data = {...this.props.team};\n        data.allow_open_invite = this.state.allow_open_invite;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleNameSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n        let valid = true;\n\n        const name = this.state.name.trim();\n\n        if (!name) {\n            state.clientError = Utils.localizeMessage('general_tab.required', 'This field is required');\n            valid = false;\n        } else if (name.length < Constants.MIN_TEAMNAME_LENGTH) {\n            state.clientError = (\n                <FormattedMessage\n                    id='general_tab.teamNameRestrictions'\n                    defaultMessage='Team Name must be {min} or more characters up to a maximum of {max}. You can add a longer team description.'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />\n            );\n\n            valid = false;\n        } else {\n            state.clientError = '';\n        }\n\n        this.setState(state);\n\n        if (!valid) {\n            return;\n        }\n\n        var data = {...this.props.team};\n        data.display_name = this.state.name;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleInviteIdSubmit = async () => {\n        const state = {serverError: '', clientError: ''};\n        this.setState(state);\n\n        const {error} = await this.props.actions.regenerateTeamInviteId(this.props.team.id);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleClose = () => {\n        this.updateSection('');\n    }\n\n    handleDescriptionSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n        let valid = true;\n\n        const description = this.state.description.trim();\n        if (description === this.props.team.description) {\n            state.clientError = Utils.localizeMessage('general_tab.chooseDescription', 'Please choose a new description for your team');\n            valid = false;\n        } else {\n            state.clientError = '';\n        }\n\n        this.setState(state);\n\n        if (!valid) {\n            return;\n        }\n\n        var data = {...this.props.team};\n        data.description = this.state.description;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleTeamIconSubmit = async () => {\n        if (!this.state.teamIconFile) {\n            return;\n        }\n\n        if (!this.state.submitActive) {\n            return;\n        }\n\n        this.setState({\n            loadingIcon: true,\n            clientError: '',\n            serverError: '',\n        });\n\n        const {error} = await this.props.actions.setTeamIcon(this.props.team.id, this.state.teamIconFile);\n\n        if (error) {\n            this.setState({\n                loadingIcon: false,\n                serverError: error.message,\n            });\n        } else {\n            this.setState({\n                loadingIcon: false,\n                submitActive: false,\n            });\n            this.updateSection('');\n        }\n    }\n\n    handleTeamIconRemove = async () => {\n        this.setState({\n            loadingIcon: true,\n            clientError: '',\n            serverError: '',\n        });\n\n        const {error} = await this.props.actions.removeTeamIcon(this.props.team.id);\n\n        if (error) {\n            this.setState({\n                loadingIcon: false,\n                serverError: error.message,\n            });\n        } else {\n            this.setState({\n                loadingIcon: false,\n                submitActive: false,\n            });\n            this.updateSection('');\n        }\n    }\n\n    componentDidMount() {\n        $('#team_settings').on('hidden.bs.modal', this.handleClose);\n    }\n\n    componentWillUnmount() {\n        $('#team_settings').off('hidden.bs.modal', this.handleClose);\n    }\n\n    handleUpdateSection = (section) => {\n        if (section === 'invite_id' && this.props.activeSection !== section && !this.props.team.invite_id) {\n            this.setState({shouldFetchTeam: true}, () => {\n                this.updateSection(section);\n            });\n            return;\n        }\n\n        this.updateSection(section);\n    }\n\n    updateName = (e) => {\n        this.setState({name: e.target.value});\n    }\n\n    updateDescription = (e) => {\n        this.setState({description: e.target.value});\n    }\n\n    updateTeamIcon = (e) => {\n        if (e && e.target && e.target.files && e.target.files[0]) {\n            const file = e.target.files[0];\n\n            if (!ACCEPTED_TEAM_IMAGE_TYPES.includes(file.type)) {\n                this.setState({\n                    clientError: Utils.localizeMessage('general_tab.teamIconInvalidFileType', 'Only BMP, JPG or PNG images may be used for team icons'),\n                });\n            } else if (file.size > this.props.maxFileSize) {\n                this.setState({\n                    clientError: Utils.localizeMessage('general_tab.teamIconTooLarge', 'Unable to upload team icon. File is too large.'),\n                });\n            } else {\n                this.setState({\n                    teamIconFile: e.target.files[0],\n                    clientError: '',\n                    submitActive: true,\n                });\n            }\n        } else {\n            this.setState({\n                teamIconFile: null,\n                clientError: Utils.localizeMessage('general_tab.teamIconError', 'An error occurred while selecting the image.'),\n            });\n        }\n    }\n\n    updateAllowedDomains = (e) => {\n        this.setState({allowed_domains: e.target.value});\n    }\n\n    render() {\n        const team = this.props.team;\n\n        let clientError = null;\n        let serverError = null;\n\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let openInviteSection;\n        if (this.props.activeSection === 'open_invite') {\n            let inputs;\n\n            if (team.group_constrained) {\n                inputs = [\n                    <div key='userOpenInviteOptions'>\n                        <div>\n                            <FormattedMarkdownMessage\n                                id='team_settings.openInviteDescription.groupConstrained'\n                                defaultMessage='No, members of this team are added and removed by linked groups. [Learn More](!https://mattermost.com/pl/default-ldap-group-constrained-team-channel.html)'\n                            />\n                        </div>\n                    </div>,\n                ];\n            } else {\n                inputs = [\n                    <fieldset key='userOpenInviteOptions'>\n                        <legend className='form-legend hidden-label'>\n                            <FormattedMessage\n                                id='team_settings.openInviteDescription.ariaLabel'\n                                defaultMessage='Invite Code'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='teamOpenInvite'\n                                    name='userOpenInviteOptions'\n                                    type='radio'\n                                    defaultChecked={this.state.allow_open_invite}\n                                    onChange={this.handleOpenInviteRadio.bind(this, true)}\n                                />\n                                <FormattedMessage\n                                    id='general_tab.yes'\n                                    defaultMessage='Yes'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='teamOpenInviteNo'\n                                    name='userOpenInviteOptions'\n                                    type='radio'\n                                    defaultChecked={!this.state.allow_open_invite}\n                                    onChange={this.handleOpenInviteRadio.bind(this, false)}\n                                />\n                                <FormattedMessage\n                                    id='general_tab.no'\n                                    defaultMessage='No'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='margin-top x3'>\n                            <FormattedMessage\n                                id='general_tab.openInviteDesc'\n                                defaultMessage='When allowed, a link to this team will be included on the landing page allowing anyone with an account to join this team.'\n                            />\n                        </div>\n                    </fieldset>,\n                ];\n            }\n\n            openInviteSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.openInviteTitle', 'Allow any user with an account on this server to join this team')}\n                    inputs={inputs}\n                    submit={this.handleOpenInviteSubmit}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.allow_open_invite === true) {\n                describe = Utils.localizeMessage('general_tab.yes', 'Yes');\n            } else if (team.group_constrained) {\n                describe = Utils.localizeMessage('team_settings.openInviteSetting.groupConstrained', 'No, members of this team are added and removed by linked groups.');\n            } else {\n                describe = Utils.localizeMessage('general_tab.no', 'No');\n            }\n\n            openInviteSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.openInviteTitle', 'Allow any user with an account on this server to join this team')}\n                    describe={describe}\n                    updateSection={this.handleUpdateSection}\n                    section={'open_invite'}\n                />\n            );\n        }\n\n        let inviteSection;\n\n        if (this.props.activeSection === 'invite_id' && this.props.canInviteTeamMembers) {\n            const inputs = [];\n\n            inputs.push(\n                <div key='teamInviteSetting'>\n                    <div className='row'>\n                        <label className='col-sm-5 control-label visible-xs-block'/>\n                        <div className='col-sm-12'>\n                            <input\n                                id='teamInviteId'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                value={this.state.invite_id}\n                                maxLength='32'\n                                onFocus={Utils.moveCursorToEnd}\n                                readOnly={true}\n                            />\n                        </div>\n                    </div>\n                    <div className='setting-list__hint'>\n                        <FormattedMessage\n                            id='general_tab.codeLongDesc'\n                            defaultMessage='The Invite Code is used as part of the URL in the team invitation link created by {getTeamInviteLink} in the main menu. Regenerating creates a new team invitation link and invalidates the previous link.'\n                            values={{\n                                getTeamInviteLink: (\n                                    <strong>\n                                        <FormattedMessage\n                                            id='general_tab.getTeamInviteLink'\n                                            defaultMessage='Get Team Invite Link'\n                                        />\n                                    </strong>\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n\n            inviteSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.codeTitle', 'Invite Code')}\n                    inputs={inputs}\n                    submit={this.handleInviteIdSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    saveButtonText={Utils.localizeMessage('general_tab.regenerate', 'Regenerate')}\n                />\n            );\n        } else if (this.props.canInviteTeamMembers) {\n            inviteSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.codeTitle', 'Invite Code')}\n                    describe={Utils.localizeMessage('general_tab.codeDesc', \"Click 'Edit' to regenerate Invite Code.\")}\n                    updateSection={this.handleUpdateSection}\n                    section={'invite_id'}\n                />\n            );\n        }\n\n        let nameSection;\n\n        if (this.props.activeSection === 'name') {\n            const inputs = [];\n\n            let teamNameLabel = (\n                <FormattedMessage\n                    id='general_tab.teamName'\n                    defaultMessage='Team Name'\n                />\n            );\n            if (Utils.isMobile()) {\n                teamNameLabel = '';\n            }\n\n            inputs.push(\n                <div\n                    key='teamNameSetting'\n                    className='form-group'\n                >\n                    <label className='col-sm-5 control-label'>{teamNameLabel}</label>\n                    <div className='col-sm-7'>\n                        <input\n                            id='teamName'\n                            autoFocus={true}\n                            className='form-control'\n                            type='text'\n                            maxLength={Constants.MAX_TEAMNAME_LENGTH.toString()}\n                            onChange={this.updateName}\n                            value={this.state.name}\n                            onFocus={Utils.moveCursorToEnd}\n                        />\n                    </div>\n                </div>\n            );\n\n            const nameExtraInfo = <span>{Utils.localizeMessage('general_tab.teamNameInfo', 'Set the name of the team as it appears on your sign-in screen and at the top of the left-hand sidebar.')}</span>;\n\n            nameSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.teamName', 'Team Name')}\n                    inputs={inputs}\n                    submit={this.handleNameSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={nameExtraInfo}\n                />\n            );\n        } else {\n            var describe = this.state.name;\n\n            nameSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.teamName', 'Team Name')}\n                    describe={describe}\n                    updateSection={this.handleUpdateSection}\n                    section={'name'}\n                />\n            );\n        }\n\n        let descriptionSection;\n\n        if (this.props.activeSection === 'description') {\n            const inputs = [];\n\n            let teamDescriptionLabel = (\n                <FormattedMessage\n                    id='general_tab.teamDescription'\n                    defaultMessage='Team Description'\n                />\n            );\n            if (Utils.isMobile()) {\n                teamDescriptionLabel = '';\n            }\n\n            inputs.push(\n                <div\n                    key='teamDescriptionSetting'\n                    className='form-group'\n                >\n                    <label className='col-sm-5 control-label'>{teamDescriptionLabel}</label>\n                    <div className='col-sm-7'>\n                        <input\n                            id='teamDescription'\n                            autoFocus={true}\n                            className='form-control'\n                            type='text'\n                            maxLength={Constants.MAX_TEAMDESCRIPTION_LENGTH.toString()}\n                            onChange={this.updateDescription}\n                            value={this.state.description}\n                            onFocus={Utils.moveCursorToEnd}\n                        />\n                    </div>\n                </div>\n            );\n\n            const descriptionExtraInfo = <span>{Utils.localizeMessage('general_tab.teamDescriptionInfo', 'Team description provides additional information to help users select the right team. Maximum of 50 characters.')}</span>;\n\n            descriptionSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.teamDescription', 'Team Description')}\n                    inputs={inputs}\n                    submit={this.handleDescriptionSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={descriptionExtraInfo}\n                />\n            );\n        } else {\n            let describemsg = '';\n            if (this.state.description) {\n                describemsg = this.state.description;\n            } else {\n                describemsg = (\n                    <FormattedMessage\n                        id='general_tab.emptyDescription'\n                        defaultMessage=\"Click 'Edit' to add a team description.\"\n                    />\n                );\n            }\n            descriptionSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.teamDescription', 'Team Description')}\n                    describe={describemsg}\n                    updateSection={this.handleUpdateSection}\n                    section={'description'}\n                />\n            );\n        }\n\n        let teamIconSection;\n        if (this.props.activeSection === 'team_icon') {\n            teamIconSection = (\n                <SettingPicture\n                    imageContext='team'\n                    title={Utils.localizeMessage('general_tab.teamIcon', 'Team Icon')}\n                    src={Utils.imageURLForTeam(team)}\n                    file={this.state.teamIconFile}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    loadingPicture={this.state.loadingIcon}\n                    submitActive={this.state.submitActive}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    onFileChange={this.updateTeamIcon}\n                    onSubmit={this.handleTeamIconSubmit}\n                    onRemove={this.handleTeamIconRemove}\n                />\n            );\n        } else {\n            let minMessage;\n\n            if (team.last_team_icon_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='general_tab.teamIconLastUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(team.last_team_icon_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            } else {\n                minMessage = Utils.isMobile() ?\n                    Utils.localizeMessage('general_tab.teamIconEditHintMobile', 'Click to upload an image') :\n                    Utils.localizeMessage('general_tab.teamIconEditHint', 'Click \\'Edit\\' to upload an image.');\n            }\n\n            teamIconSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.teamIcon', 'Team Icon')}\n                    describe={minMessage}\n                    section={'team_icon'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let allowedDomainsSection;\n\n        if (this.props.activeSection === 'allowed_domains') {\n            const inputs = [];\n\n            inputs.push(\n                <div\n                    key='allowedDomainsSetting'\n                    className='form-group'\n                >\n                    <div className='col-sm-12'>\n                        <LocalizedInput\n                            id='allowedDomains'\n                            autoFocus={true}\n                            className='form-control'\n                            type='text'\n                            onChange={this.updateAllowedDomains}\n                            value={this.state.allowed_domains}\n                            onFocus={Utils.moveCursorToEnd}\n                            placeholder={{id: t('general_tab.AllowedDomainsExample'), defaultMessage: 'corp.mattermost.com, mattermost.org'}}\n                            aria-label={Utils.localizeMessage('general_tab.allowedDomains.ariaLabel', 'Allowed Domains')}\n                        />\n                    </div>\n                </div>\n            );\n\n            const allowedDomainsInfo = <span>{Utils.localizeMessage('general_tab.AllowedDomainsInfo', 'Users can only join the team if their email matches a specific domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\").')}</span>;\n\n            allowedDomainsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.allowedDomains', 'Allow only users with a specific email domain to join this team')}\n                    inputs={inputs}\n                    submit={this.handleAllowedDomainsSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={allowedDomainsInfo}\n                />\n            );\n        } else {\n            let describemsg = '';\n            if (this.state.allowed_domains) {\n                describemsg = this.state.allowed_domains;\n            } else {\n                describemsg = (\n                    <FormattedMessage\n                        id='general_tab.allowedDomainsEdit'\n                        defaultMessage=\"Click 'Edit' to add an email domain whitelist.\"\n                    />\n                );\n            }\n            allowedDomainsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.allowedDomains', 'allowedDomains')}\n                    describe={describemsg}\n                    updateSection={this.handleUpdateSection}\n                    section={'allowed_domains'}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='general_tab.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='general_tab.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {descriptionSection}\n                    <div className='divider-light'/>\n                    {teamIconSection}\n                    {!team.group_constrained &&\n                        <>\n                            <div className='divider-light'/>\n                            {allowedDomainsSection}\n                        </>\n                    }\n                    <div className='divider-light'/>\n                    {openInviteSection}\n                    {!team.group_constrained &&\n                        <>\n                            <div className='divider-light'/>\n                            {inviteSection}\n                        </>\n                    }\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTeam, patchTeam, removeTeamIcon, setTeamIcon, regenerateTeamInviteId} from 'mattermost-redux/actions/teams';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport TeamGeneralTab from './team_general_tab.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n\n    const canInviteTeamMembers = haveITeamPermission(state, {team: ownProps.team.id, permission: Permissions.INVITE_USER});\n\n    return {\n        maxFileSize,\n        canInviteTeamMembers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeam,\n            patchTeam,\n            regenerateTeamInviteId,\n            removeTeamIcon,\n            setTeamIcon,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SettingsUpload extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.uploadinput = React.createRef();\n\n        this.state = {\n            clientError: '',\n            serverError: '',\n            filename: '',\n        };\n    }\n\n    doFileSelect = (e) => {\n        e.preventDefault();\n        var filename = $(e.target).val();\n        if (filename.substring(3, 11) === 'fakepath') {\n            filename = filename.substring(12);\n        }\n        this.setState({\n            clientError: '',\n            serverError: '',\n            filename,\n        });\n    }\n\n    openFileSelect = () => {\n        this.uploadinput.current.value = '';\n        this.uploadinput.current.click();\n    }\n\n    doSubmit = (e) => {\n        e.preventDefault();\n        var inputnode = ReactDOM.findDOMNode(this.uploadinput.current);\n        if (inputnode.files && inputnode.files[0]) {\n            this.props.submit(inputnode.files[0]);\n        } else {\n            this.setState({clientError: true});\n        }\n    }\n\n    render() {\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = (\n                <div className='file-status'>\n                    <FormattedMessage\n                        id='setting_upload.noFile'\n                        defaultMessage='No file selected.'\n                    />\n                </div>\n            );\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='file-status'>{this.state.serverError}</div>\n            );\n        }\n        let fileNameText = null;\n        let submitButtonClass = 'btn btn-sm btn-primary disabled';\n        if (this.state.filename) {\n            fileNameText = (\n                <div className='file-status file-name'>{this.state.filename}</div>\n            );\n            submitButtonClass = 'btn btn-sm btn-primary';\n        }\n\n        return (\n            <ul className='section-max'>\n                <li className='col-sm-12 section-title'>{this.props.title}</li>\n                <li className='col-sm-offset-3 col-sm-9'>{this.props.helpText}</li>\n                <li className='col-sm-offset-3 col-sm-9'>\n                    <ul className='setting-list'>\n                        <li className='setting-list-item'>\n                            <input\n                                ref={this.uploadinput}\n                                accept={this.props.fileTypesAccepted}\n                                type='file'\n                                onChange={this.doFileSelect}\n                                tabIndex='-1'\n                                aria-hidden={true}\n                            />\n                            <button\n                                onClick={this.openFileSelect}\n                                className='btn btn-sm btn-primary btn-file sel-btn'\n                            >\n                                <FormattedMessage\n                                    id='setting_upload.select'\n                                    defaultMessage='Select file'\n                                />\n                            </button>\n                            <a\n                                className={submitButtonClass}\n                                onClick={this.doSubmit}\n                            >\n                                <FormattedMessage\n                                    id='setting_upload.import'\n                                    defaultMessage='Import'\n                                />\n                            </a>\n                            {fileNameText}\n                            {serverError}\n                            {clientError}\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        );\n    }\n}\n\nSettingsUpload.propTypes = {\n    title: PropTypes.node.isRequired,\n    submit: PropTypes.func.isRequired,\n    fileTypesAccepted: PropTypes.string.isRequired,\n    helpText: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {defineMessages, FormattedMessage} from 'react-intl';\n\nimport * as utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\nimport SettingUpload from 'components/setting_upload.jsx';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst holders = defineMessages({\n    importSlack: {\n        id: t('team_import_tab.importSlack'),\n        defaultMessage: 'Import from Slack (Beta)',\n    },\n});\n\nexport default class TeamImportTab extends React.Component {\n    static propTypes = {\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            status: 'ready',\n            link: '',\n        };\n    }\n\n    onImportFailure = () => {\n        this.setState({status: 'fail'});\n    }\n\n    onImportSuccess = (data) => {\n        this.setState({status: 'done', link: 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(atob(data.results))});\n    }\n\n    doImportSlack = (file) => {\n        this.setState({status: 'in-progress', link: ''});\n        utils.importSlack(file, this.onImportSuccess, this.onImportFailure);\n    }\n\n    render() {\n        const uploadDocsLink = (\n            <a\n                href='https://docs.mattermost.com/administration/migrating.html#migrating-from-slack'\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <FormattedMessage\n                    id='team_import_tab.importHelpDocsLink'\n                    defaultMessage='documentation'\n                />\n            </a>\n        );\n\n        const uploadExportInstructions = (\n            <strong>\n                <FormattedMessage\n                    id='team_import_tab.importHelpExportInstructions'\n                    defaultMessage='Slack > Administration > Workspace settings > Import/Export Data > Export > Start Export'\n                />\n            </strong>\n        );\n\n        const uploadExporterLink = (\n            <a\n                href='https://github.com/grundleborg/slack-advanced-exporter'\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <FormattedMessage\n                    id='team_import_tab.importHelpExporterLink'\n                    defaultMessage='Slack Advanced Exporter'\n                />\n            </a>\n        );\n\n        const importCliLink = (\n            <a\n                href='https://docs.mattermost.com/administration/migrating.html#migrating-from-slack-using-the-mattermost-cli'\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <FormattedMessage\n                    id='team_import_tab.importHelpCliDocsLink'\n                    defaultMessage='CLI tool for Slack import'\n                />\n            </a>\n        );\n\n        const uploadHelpText = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine1'\n                        defaultMessage=\"Slack import to Mattermost supports importing of messages in your Slack team's public channels.\"\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine2'\n                        defaultMessage='To import a team from Slack, go to {exportInstructions}. See {uploadDocsLink} to learn more.'\n                        values={{\n                            exportInstructions: uploadExportInstructions,\n                            uploadDocsLink,\n                        }}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine3'\n                        defaultMessage='To import posts with attached files, see {slackAdvancedExporterLink} for details.'\n                        values={{\n                            slackAdvancedExporterLink: uploadExporterLink,\n                        }}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine4'\n                        defaultMessage='For Slack teams with over 10,000 messages, we recommend using the {cliLink}.'\n                        values={{\n                            cliLink: importCliLink,\n                        }}\n                    />\n                </p>\n            </div>\n        );\n\n        const uploadSection = (\n            <SettingUpload\n                title={<FormattedMessage {...holders.importSlack}/>}\n                submit={this.doImportSlack}\n                helpText={uploadHelpText}\n                fileTypesAccepted='.zip'\n            />\n        );\n\n        let messageSection;\n        switch (this.state.status) {\n        case 'ready':\n            messageSection = '';\n            break;\n        case 'in-progress':\n            messageSection = (\n                <p className='confirm-import alert alert-warning'>\n                    <LoadingSpinner text={utils.localizeMessage('team_import_tab.importing', 'Importing...')}/>\n                </p>\n            );\n            break;\n        case 'done':\n            messageSection = (\n                <p className='confirm-import alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='team_import_tab.successful'\n                        defaultMessage=' Import successful: '\n                    />\n                    <a\n                        href={this.state.link}\n                        download='MattermostImportSummary.txt'\n                    >\n                        <FormattedMessage\n                            id='team_import_tab.summary'\n                            defaultMessage='View Summary'\n                        />\n                    </a>\n                </p>\n            );\n            break;\n        case 'fail':\n            messageSection = (\n                <p className='confirm-import alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMessage\n                        id='team_import_tab.failure'\n                        defaultMessage=' Import failure: '\n                    />\n                    <a\n                        href={this.state.link}\n                        download='MattermostImportSummary.txt'\n                    >\n                        <FormattedMessage\n                            id='team_import_tab.summary'\n                            defaultMessage='View Summary'\n                        />\n                    </a>\n                </p>\n            );\n            break;\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='team_import_tab.import'\n                            defaultMessage='Import'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='team_import_tab.import'\n                            defaultMessage='Import'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {uploadSection}\n                    <div className='divider-dark'/>\n                    {messageSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport GeneralTab from 'components/team_general_tab';\nimport ImportTab from 'components/team_import_tab.jsx';\n\nconst TeamSettings = ({activeTab, activeSection, updateSection, closeModal, collapseModal, team}) => {\n    if (!team) {\n        return null;\n    }\n\n    let result;\n    switch (activeTab) {\n    case 'general':\n        result = (\n            <div>\n                <GeneralTab\n                    team={team}\n                    activeSection={activeSection}\n                    updateSection={updateSection}\n                    closeModal={closeModal}\n                    collapseModal={collapseModal}\n                />\n            </div>\n        );\n        break;\n    case 'import':\n        result = (\n            <div>\n                <ImportTab\n                    team={team}\n                    activeSection={activeSection}\n                    updateSection={updateSection}\n                    closeModal={closeModal}\n                    collapseModal={collapseModal}\n                />\n            </div>\n        );\n        break;\n    default:\n        result = (\n            <div/>\n        );\n        break;\n    }\n\n    return result;\n};\n\nTeamSettings.defaultProps = {\n    activeTab: '',\n    activeSection: '',\n};\n\nTeamSettings.propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    activeSection: PropTypes.string.isRequired,\n    updateSection: PropTypes.func.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    team: PropTypes.object.isRequired,\n};\n\nexport default TeamSettings;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport TeamSettings from './team_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        team: getCurrentTeam(state),\n    };\n}\n\nexport default connect(mapStateToProps)(TeamSettings);","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nconst SettingsSidebar = React.lazy(() => import('components/settings_sidebar.tsx'));\n\nimport TeamSettings from 'components/team_settings';\n\nexport default class TeamSettingsModal extends React.Component {\n    static propTypes = {\n        onHide: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab: 'general',\n            activeSection: '',\n            show: true,\n        };\n\n        this.modalBodyRef = React.createRef();\n    }\n\n    updateTab = (tab) => {\n        this.setState({\n            activeTab: tab,\n            activeSection: '',\n        });\n    }\n\n    updateSection = (section) => {\n        this.setState({activeSection: section});\n    }\n\n    collapseModal = () => {\n        $(ReactDOM.findDOMNode(this.modalBodyRef.current)).closest('.modal-dialog').removeClass('display--content');\n\n        this.setState({\n            active_tab: '',\n            active_section: '',\n        });\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    // called after the dialog is fully hidden and faded out\n    handleHidden = () => {\n        this.setState({\n            activeTab: 'general',\n            activeSection: '',\n        });\n        this.props.onHide();\n    }\n\n    render() {\n        const tabs = [];\n        tabs.push({name: 'general', uiName: Utils.localizeMessage('team_settings_modal.generalTab', 'General'), icon: 'icon fa fa-cog', iconTitle: Utils.localizeMessage('generic_icons.settings', 'Settings Icon')});\n        tabs.push({name: 'import', uiName: Utils.localizeMessage('team_settings_modal.importTab', 'Import'), icon: 'icon fa fa-upload', iconTitle: Utils.localizeMessage('generic_icons.upload', 'Upload Icon')});\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal settings-modal settings-modal--action'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHidden}\n                role='dialog'\n                aria-labelledby='teamSettingsModalLabel'\n            >\n                <Modal.Header\n                    id='teamSettingsModalLabel'\n                    closeButton={true}\n                >\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='team_settings_modal.title'\n                            defaultMessage='Team Settings'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref={this.modalBodyRef}>\n                    <div className='settings-table'>\n                        <div className='settings-links'>\n                            <React.Suspense fallback={null}>\n                                <SettingsSidebar\n                                    tabs={tabs}\n                                    activeTab={this.state.activeTab}\n                                    updateTab={this.updateTab}\n                                />\n                            </React.Suspense>\n                        </div>\n                        <div className='settings-content minimize-settings'>\n                            <TeamSettings\n                                activeTab={this.state.activeTab}\n                                activeSection={this.state.activeSection}\n                                updateSection={this.updateSection}\n                                closeModal={this.handleHide}\n                                collapseModal={this.collapseModal}\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport TeamSettingsModal from './team_settings_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const modalId = ModalIdentifiers.TEAM_SETTINGS;\n    return {\n        show: isModalOpen(state, modalId),\n    };\n}\n\nexport default connect(mapStateToProps)(TeamSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport const getPlugins = (state) => state.views.marketplace.plugins;\n\nexport const getInstalledPlugins = (state) =>\n    Object.values(getPlugins(state)).filter((p) => p.installed_version !== '');\n\nexport const getPlugin = (state, id) =>\n    getPlugins(state).find(((p) => p.manifest && p.manifest.id === id));\n\nexport const getFilter = (state) => state.views.marketplace.filter;\n\nexport const getInstalling = (state, id) => Boolean(state.views.marketplace.installing[id]);\n\nexport const getError = (state, id) => state.views.marketplace.errors[id];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport {getFilter, getPlugin} from 'selectors/views/marketplace';\nimport {ActionTypes} from 'utils/constants';\n\n// fetchPlugins fetches the latest marketplace plugins, subject to any existing search filter.\nexport function fetchPlugins(localOnly = false) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const filter = getFilter(state);\n\n        try {\n            const plugins = await Client4.getMarketplacePlugins(filter, localOnly);\n\n            dispatch({\n                type: ActionTypes.RECEIVED_MARKETPLACE_PLUGINS,\n                plugins,\n            });\n\n            return {plugins};\n        } catch (error) {\n            // If the marketplace server is unreachable, try to get the local plugins only.\n            if (error.server_error_id === 'app.plugin.marketplace_client.failed_to_fetch' && !localOnly) {\n                await dispatch(fetchPlugins(true));\n            }\n            return {error};\n        }\n    };\n}\n\n// installPlugin installs the latest version of the given plugin from the marketplace.\n//\n// On success, it also requests the current state of the plugins to reflect the newly installed plugin.\nexport function installPlugin(id, version) {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: ActionTypes.INSTALLING_MARKETPLACE_PLUGIN,\n            id,\n        });\n\n        const state = getState();\n\n        const marketplacePlugin = getPlugin(state, id);\n        if (!marketplacePlugin) {\n            dispatch({\n                type: ActionTypes.INSTALLING_MARKETPLACE_PLUGIN_FAILED,\n                id,\n                error: 'Unknown plugin: ' + id,\n            });\n            return;\n        }\n\n        try {\n            await Client4.installMarketplacePlugin(id, version);\n        } catch (error) {\n            dispatch({\n                type: ActionTypes.INSTALLING_MARKETPLACE_PLUGIN_FAILED,\n                id,\n                error: error.message,\n            });\n            return;\n        }\n\n        await dispatch(fetchPlugins());\n        dispatch({\n            type: ActionTypes.INSTALLING_MARKETPLACE_PLUGIN_SUCCEEDED,\n            id,\n        });\n    };\n}\n\n// filterPlugins sets a search filter for marketplace plugins, fetching the latest data.\nexport function filterPlugins(filter) {\n    return async (dispatch) => {\n        dispatch({\n            type: ActionTypes.FILTER_MARKETPLACE_PLUGINS,\n            filter,\n        });\n\n        return dispatch(fetchPlugins());\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class CloseIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.close'\n                    defaultMessage='Close Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                fillRule='nonzero'\n                                d='M18 7.209L16.791 6 12 10.791 7.209 6 6 7.209 10.791 12 6 16.791 7.209 18 12 13.209 16.791 18 18 16.791 13.209 12z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class BackIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.back'\n                    defaultMessage='Back Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport {injectIntl} from 'react-intl';\n\nimport CloseIcon from 'components/widgets/icons/close_icon';\nimport BackIcon from 'components/widgets/icons/back_icon';\n\nimport './full_screen_modal.scss';\n\n// This must be on sync with the animation time in ./full_screen_modal.scss\nconst ANIMATION_DURATION = 100;\n\ntype Props = {\n    show: boolean;\n    onClose: () => void;\n    onGoBack?: () => void;\n    children: React.ReactNode;\n    ariaLabel?: string;\n    ariaLabelledBy?: string;\n    intl: any; // TODO This needs to be replaced with IntlShape once react-intl is upgraded\n};\n\nclass FullScreenModal extends React.Component<Props> {\n    private modal = React.createRef<HTMLDivElement>();\n\n    public componentDidMount() {\n        document.addEventListener('keydown', this.handleKeypress);\n        document.addEventListener('focus', this.enforceFocus, true);\n        this.resetFocus();\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeypress);\n        document.removeEventListener('focus', this.enforceFocus, true);\n    }\n\n    private enforceFocus = () => {\n        setTimeout(() => {\n            const currentActiveElement = document.activeElement;\n            if (this.modal && this.modal.current && !this.modal.current.contains(currentActiveElement)) {\n                this.modal.current.focus();\n            }\n        });\n    }\n\n    public resetFocus = () => {\n        setTimeout(() => {\n            if (this.modal && this.modal.current) {\n                this.modal.current.focus();\n            }\n        });\n    }\n\n    private handleKeypress = (e: KeyboardEvent) => {\n        if (e.key === 'Escape' && this.props.show) {\n            this.close();\n        }\n    }\n\n    private close = () => {\n        this.props.onClose();\n    }\n\n    public render() {\n        return (\n            <CSSTransition\n                in={this.props.show}\n                classNames='FullScreenModal'\n                mountOnEnter={true}\n                unmountOnExit={true}\n                timeout={ANIMATION_DURATION}\n                appear={true}\n            >\n                <>\n                    <div\n                        className='FullScreenModal'\n                        ref={this.modal}\n                        tabIndex={-1}\n                        aria-modal={true}\n                        aria-label={this.props.ariaLabel}\n                        aria-labelledby={this.props.ariaLabelledBy}\n                        role='dialog'\n                    >\n                        {this.props.onGoBack &&\n                            <button\n                                onClick={this.props.onGoBack}\n                                className='back'\n                                aria-label={this.props.intl.formatMessage({id: 'full_screen_modal.back', defaultMessage: 'Back'})}\n                            >\n                                <BackIcon id='backIcon'/>\n                            </button>}\n                        <button\n                            onClick={this.close}\n                            className='close-x'\n                            aria-label={this.props.intl.formatMessage({id: 'full_screen_modal.close', defaultMessage: 'Close'})}\n                        >\n                            <CloseIcon id='closeIcon'/>\n                        </button>\n                        {this.props.children}\n                    </div>\n                    <div\n                        tabIndex={0}\n                        style={{display: 'none'}}\n                    />\n                </>\n            </CSSTransition>\n        );\n    }\n}\n\nconst wrappedComponent = injectIntl(FullScreenModal, {forwardRef: true});\nwrappedComponent.displayName = 'injectIntl(FullScreenModal)';\nexport default wrappedComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nexport default class RootPortal extends React.Component {\n    static propTypes = {\n        children: PropTypes.node,\n    }\n\n    constructor(props) {\n        super(props);\n        this.el = document.createElement('div');\n    }\n\n    componentDidMount() {\n        document.getElementById('root-portal').appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        document.getElementById('root-portal').removeChild(this.el);\n    }\n\n    render() {\n        return ReactDOM.createPortal(\n            this.props.children,\n            this.el,\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class PluginIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.plugin'\n                    defaultMessage='Plugin Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='61px'\n                            height='61px'\n                            viewBox='0 0 61 61'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-347.000000, -211.000000)'\n                                    fill='inherit'\n                                >\n                                    <g transform='translate(377.585786, 241.500000) rotate(-315.000000) translate(-377.585786, -241.500000) translate(358.585786, 200.000000)'>\n                                        <g transform='translate(0.000000, -0.000000)'>\n                                            <path\n                                                d='M3.28846154,6.10822511 L3.05411255,6.10822511 C1.36737277,6.10822511 2.06566048e-16,4.74085234 0,3.05411255 C-2.06566048e-16,1.36737277 1.36737277,-7.78498519e-14 3.05411255,-7.81597009e-14 L34.9458874,-7.81597009e-14 C36.6326272,-8.16905472e-14 38,1.36737277 38,3.05411255 C38,4.74085234 36.6326272,6.10822511 34.9458874,6.10822511 L34.7115385,6.10822511 L34.7115385,14.7316017 C34.7115385,20.9798931 29.0184395,26.1638765 21.5576923,27.1415606 L21.5576923,33.1964286 C21.5576923,34.5081049 20.4943686,35.5714286 19.1826923,35.5714286 C17.871016,35.5714286 16.8076923,34.5081049 16.8076923,33.1964286 L16.8076923,27.1859094 C9.16823824,26.3322077 3.28846154,21.0815081 3.28846154,14.7316017 L3.28846154,6.10822511 Z M19.1431901,14.7316017 C17.8533303,14.7316017 16.8076923,15.7772397 16.8076923,17.0670996 C16.8076923,18.3569594 17.8533303,19.4025974 19.1431901,19.4025974 L19.2221945,19.4025974 C20.5120543,19.4025974 21.5576923,18.3569594 21.5576923,17.0670996 C21.5576923,15.7772397 20.5120543,14.7316017 19.2221945,14.7316017 L19.1431901,14.7316017 Z'\n                                                transform='translate(19.000000, 17.785714) rotate(-180.000000) translate(-19.000000, -17.785714) '\n                                            />\n                                            <path\n                                                d='M32.1538462,53.5367965 L34.7115385,53.5367965 L34.7115385,62.1601732 C34.7115385,68.4084646 29.0184395,73.592448 21.5576923,74.5701321 L21.5576923,80.625 C21.5576923,81.9366763 20.4943686,83 19.1826923,83 C17.871016,83 16.8076923,81.9366763 16.8076923,80.625 L16.8076923,74.6144809 C9.16823824,73.7607791 3.28846154,68.5100796 3.28846154,62.1601732 L3.28846154,53.5367965 L3.05411255,53.5367965 C1.36737277,53.5367965 2.06566048e-16,52.1694238 0,50.482684 C-2.06566048e-16,48.7959442 1.36737277,47.4285714 3.05411255,47.4285714 L8.40384615,47.4285714 L8.40384615,42.2581169 C8.40384615,40.9464406 9.46716987,39.8831169 10.7788462,39.8831169 C12.0905224,39.8831169 13.1538462,40.9464406 13.1538462,42.2581169 L13.1538462,47.4285714 L24.8461538,47.4285714 L24.8461538,42.2581169 C24.8461538,40.9464406 25.9094776,39.8831169 27.2211538,39.8831169 C28.5328301,39.8831169 29.5961538,40.9464406 29.5961538,42.2581169 L29.5961538,47.4285714 L34.9458874,47.4285714 C36.6326272,47.4285714 38,48.7959442 38,50.482684 C38,52.1694238 36.6326272,53.5367965 34.9458874,53.5367965 L32.1538462,53.5367965 Z M19.1431901,62.1601732 C17.8533303,62.1601732 16.8076923,63.2058112 16.8076923,64.495671 C16.8076923,65.7855308 17.8533303,66.8311688 19.1431901,66.8311688 L19.2221945,66.8311688 C20.5120543,66.8311688 21.5576923,65.7855308 21.5576923,64.495671 C21.5576923,63.2058112 20.5120543,62.1601732 19.2221945,62.1601732 L19.1431901,62.1601732 Z'\n                                                transform='translate(19.000000, 61.441558) rotate(-360.000000) translate(-19.000000, -61.441558) '\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {Tooltip} from 'react-bootstrap';\nimport semver from 'semver';\n\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\n\nimport {Link} from 'react-router-dom';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.tsx';\nimport PluginIcon from 'components/widgets/icons/plugin_icon.jsx';\n\nimport {localizeMessage} from 'utils/utils';\nimport {Constants} from 'utils/constants';\n\n// UpdateVersion renders the version text in the update details, linking out to release notes if available.\nexport const UpdateVersion = ({version, releaseNotesUrl}) => {\n    if (!releaseNotesUrl) {\n        return version;\n    }\n\n    return (\n        <a\n            target='_blank'\n            rel='noopener noreferrer'\n            href={releaseNotesUrl}\n        >\n            {version}\n        </a>\n    );\n};\n\nUpdateVersion.propTypes = {\n    version: PropTypes.string.isRequired,\n    releaseNotesUrl: PropTypes.string,\n};\n\n// Label renders a tag showing a name and a description in a tooltip.\n// If a URL is provided, clicking on the tag will open the URL in a new tab.\nexport const Label = ({name, description, url, color}) => {\n    const tag = (\n        <span\n            className='tag'\n            style={{backgroundColor: color || ''}}\n        >\n            {name.toUpperCase()}\n        </span>\n    );\n\n    let label;\n    if (description) {\n        label = (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                overlay={\n                    <Tooltip id={'plugin-marketplace_label_' + name.toLowerCase() + '-tooltip'}>\n                        {description}\n                    </Tooltip>\n                }\n            >\n                {tag}\n            </OverlayTrigger>\n        );\n    } else {\n        label = tag;\n    }\n\n    if (url) {\n        return (\n            <a\n                aria-label={name.toLowerCase()}\n                className='style--none more-modal__row--link'\n                target='_blank'\n                rel='noopener noreferrer'\n                href={url}\n            >\n                {label}\n            </a>\n        );\n    }\n\n    return label;\n};\n\nLabel.propTypes = {\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    url: PropTypes.string,\n    color: PropTypes.string,\n};\n\n// UpdateDetails renders an inline update prompt for plugins, when available.\nexport const UpdateDetails = ({version, releaseNotesUrl, installedVersion, isInstalling, onUpdate}) => {\n    if (!installedVersion || isInstalling) {\n        return null;\n    }\n\n    var isUpdate = false;\n    try {\n        isUpdate = semver.gt(version, installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume not an update;\n    }\n\n    if (!isUpdate) {\n        return null;\n    }\n\n    return (\n        <div className={classNames('update')}>\n            <FormattedMessage\n                id='marketplace_modal.list.update_available'\n                defaultMessage='Update available:'\n            />\n            {' '}\n            <UpdateVersion\n                version={version}\n                releaseNotesUrl={releaseNotesUrl}\n            />\n            {' - '}\n            <b>\n                <a onClick={onUpdate}>\n                    <FormattedMessage\n                        id='marketplace_modal.list.update'\n                        defaultMessage='Update'\n                    />\n                </a>\n            </b>\n        </div>\n    );\n};\n\nUpdateDetails.propTypes = {\n    version: PropTypes.string.isRequired,\n    releaseNotesUrl: PropTypes.string,\n    installedVersion: PropTypes.string,\n    isInstalling: PropTypes.bool.isRequired,\n    onUpdate: PropTypes.func.isRequired,\n};\n\n// UpdateConfirmationModal prompts before allowing upgrade, specially handling major version changes.\nexport const UpdateConfirmationModal = ({show, name, version, installedVersion, releaseNotesUrl, onUpdate, onCancel}) => {\n    if (!installedVersion) {\n        return null;\n    }\n\n    var isUpdate = false;\n    try {\n        isUpdate = semver.gt(version, installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume not an update;\n    }\n\n    if (!isUpdate) {\n        return null;\n    }\n\n    const messages = [(\n        <p key='intro'>\n            <FormattedMessage\n                id='marketplace_modal.list.update_confirmation.message.intro'\n                defaultMessage={`Are you sure you want to update the ${name} plugin to ${version}?`}\n                values={{name, version}}\n            />\n        </p>\n    )];\n\n    if (releaseNotesUrl) {\n        messages.push(\n            <p key='current'>\n                <FormattedHTMLMessage\n                    id='marketplace_modal.list.update_confirmation.message.current_with_release_notes'\n                    defaultMessage={`You currently have ${installedVersion} installed. View the <a href=\"${releaseNotesUrl}\" target='_blank' rel='noopener noreferrer'>release notes</a> to learn about the changes included in this update.`}\n                    values={{installedVersion, releaseNotesUrl}}\n                />\n            </p>\n        );\n    } else {\n        messages.push(\n            <p key='current'>\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.message.current'\n                    defaultMessage={`You currently have ${installedVersion} installed.`}\n                    values={{installedVersion}}\n                />\n            </p>\n        );\n    }\n\n    let sameMajorVersion = false;\n    try {\n        sameMajorVersion = semver.major(version) === semver.major(installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume a potentially breaking change.\n        // In practice, this won't happen since we already tried to parse the version above.\n    }\n\n    if (!sameMajorVersion) {\n        if (releaseNotesUrl) {\n            messages.push(\n                <p\n                    className='alert alert-warning'\n                    key='warning'\n                >\n                    <FormattedHTMLMessage\n                        id='marketplace_modal.list.update_confirmation.message.warning_major_version_with_release_notes'\n                        defaultMessage={`This update may contain breaking changes. Consult the <a href=\"${releaseNotesUrl}\" target='_blank' rel='noopener noreferrer'>release notes</a> before upgrading.`}\n                        values={{releaseNotesUrl}}\n                    />\n                </p>\n            );\n        } else {\n            messages.push(\n                <p\n                    className='alert alert-warning'\n                    key='warning'\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.list.update_confirmation.message.warning_major_version'\n                        defaultMessage={'This update may contain breaking changes.'}\n                    />\n                </p>\n            );\n        }\n    }\n\n    return (\n        <ConfirmModal\n            show={show}\n            title={\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.title'\n                    defaultMessage={'Confirm Plugin Update'}\n                />\n            }\n            message={messages}\n            confirmButtonText={\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.confirm_button'\n                    defaultMessage='Update'\n                />\n            }\n            onConfirm={onUpdate}\n            onCancel={onCancel}\n        />\n    );\n};\n\nUpdateConfirmationModal.propTypes = {\n    show: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    version: PropTypes.string.isRequired,\n    releaseNotesUrl: PropTypes.string,\n    installedVersion: PropTypes.string,\n    onUpdate: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n};\n\nexport default class MarketplaceItem extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n        version: PropTypes.string.isRequired,\n        downloadUrl: PropTypes.string,\n        homepageUrl: PropTypes.string,\n        releaseNotesUrl: PropTypes.string,\n        labels: PropTypes.array,\n        iconData: PropTypes.string,\n        installedVersion: PropTypes.string.isRequired,\n        installing: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n        isDefaultMarketplace: PropTypes.bool.isRequired,\n        trackEvent: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            installPlugin: PropTypes.func.isRequired,\n            closeMarketplaceModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor() {\n        super();\n\n        this.state = {\n            showUpdateConfirmationModal: false,\n        };\n    }\n\n    trackEvent = (eventName, allowDetail = true) => {\n        if (this.props.isDefaultMarketplace && allowDetail) {\n            this.props.trackEvent('plugins', eventName, {\n                plugin_id: this.props.id,\n                version: this.props.version,\n                installed_version: this.props.installedVersion,\n            });\n        } else {\n            this.props.trackEvent('plugins', eventName);\n        }\n    }\n\n    onInstall = () => {\n        this.trackEvent('ui_marketplace_download');\n        this.props.actions.installPlugin(this.props.id, this.props.version);\n    }\n\n    showUpdateConfirmationModal = () => {\n        this.setState({showUpdateConfirmationModal: true});\n    }\n\n    hideUpdateConfirmationModal = () => {\n        this.setState({showUpdateConfirmationModal: false});\n    }\n\n    onUpdate = () => {\n        this.trackEvent('ui_marketplace_download_update');\n\n        this.hideUpdateConfirmationModal();\n        this.props.actions.installPlugin(this.props.id, this.props.version);\n    }\n\n    onConfigure = () => {\n        this.trackEvent('ui_marketplace_configure', false);\n\n        this.props.actions.closeMarketplaceModal();\n    }\n\n    getItemButton() {\n        let actionButton = (\n            <FormattedMessage\n                id='marketplace_modal.list.Install'\n                defaultMessage='Install'\n            />\n        );\n        if (this.props.error) {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.try_again'\n                    defaultMessage='Try Again'\n                />\n            );\n        }\n\n        let button = (\n            <button\n                onClick={this.onInstall}\n                className='btn btn-primary'\n                disabled={this.props.installing}\n            >\n                <LoadingWrapper\n                    loading={this.props.installing}\n                    text={localizeMessage('marketplace_modal.installing', 'Installing...')}\n                >\n                    {actionButton}\n                </LoadingWrapper>\n\n            </button>\n        );\n\n        if (this.props.installedVersion !== '' && !this.props.installing && !this.props.error) {\n            button = (\n                <Link\n                    to={'/admin_console/plugins/plugin_' + this.props.id}\n                >\n                    <button\n                        onClick={this.onConfigure}\n                        className='btn btn-outline'\n                    >\n                        <FormattedMessage\n                            id='marketplace_modal.list.configure'\n                            defaultMessage='Configure'\n                        />\n                    </button>\n                </Link>\n            );\n        }\n\n        return button;\n    }\n\n    render() {\n        const ariaLabel = `${this.props.name}, ${this.props.description}`.toLowerCase();\n        let versionLabel = `(${this.props.version})`;\n        if (this.props.installedVersion !== '') {\n            versionLabel = `(${this.props.installedVersion})`;\n        }\n\n        let pluginIcon;\n        if (this.props.iconData) {\n            pluginIcon = (\n                <div className='icon__plugin icon__plugin--background'>\n                    <img src={this.props.iconData}/>\n                </div>\n            );\n        } else {\n            pluginIcon = <PluginIcon className='icon__plugin icon__plugin--background'/>;\n        }\n\n        let labels;\n        if (this.props.labels && this.props.labels.length !== 0) {\n            labels = this.props.labels.map((label) => (\n                <Label\n                    key={label.name}\n                    name={label.name}\n                    description={label.description}\n                    url={label.url}\n                    color={label.color}\n                />\n            )\n            );\n        }\n\n        const pluginDetailsInner = (\n            <>\n                {this.props.name}\n                <span className='light subtitle'>{versionLabel}</span>\n                {labels}\n                <p className={classNames('more-modal__description', {error_text: this.props.error})}>\n                    {this.props.error ? this.props.error : this.props.description}\n                </p>\n            </>\n        );\n\n        let pluginDetails;\n        if (this.props.homepageUrl) {\n            pluginDetails = (\n                <a\n                    aria-label={ariaLabel}\n                    className='style--none more-modal__row--link'\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={this.props.homepageUrl}\n                >\n                    {pluginDetailsInner}\n                </a>\n            );\n        } else {\n            pluginDetails = (\n                <span\n                    aria-label={ariaLabel}\n                    className='style--none'\n                >\n                    {pluginDetailsInner}\n                </span>\n            );\n        }\n\n        return (\n            <>\n                <div\n                    className={classNames('more-modal__row', 'more-modal__row--link', {item_error: this.props.error})}\n                    key={this.props.id}\n                    id={'marketplace-plugin-' + this.props.id}\n                >\n                    {pluginIcon}\n                    <div className='more-modal__details'>\n                        {pluginDetails}\n                        <UpdateDetails\n                            version={this.props.version}\n                            installedVersion={this.props.installedVersion}\n                            releaseNotesUrl={this.props.releaseNotesUrl}\n                            isInstalling={this.props.installing}\n                            onUpdate={this.showUpdateConfirmationModal}\n                        />\n                    </div>\n                    <div className='more-modal__actions'>\n                        {this.getItemButton()}\n                    </div>\n                    <UpdateConfirmationModal\n                        show={this.state.showUpdateConfirmationModal}\n                        name={this.props.name}\n                        version={this.props.version}\n                        installedVersion={this.props.installedVersion}\n                        releaseNotesUrl={this.props.releaseNotesUrl}\n                        onUpdate={this.onUpdate}\n                        onCancel={this.hideUpdateConfirmationModal}\n                    />\n                </div>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {installPlugin} from 'actions/marketplace';\nimport {closeModal} from 'actions/views/modals';\nimport {ModalIdentifiers} from 'utils/constants';\nimport {getInstalling, getError} from 'selectors/views/marketplace';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport MarketplaceItem from './marketplace_item';\n\nfunction mapStateToProps(state, props) {\n    const installing = getInstalling(state, props.id);\n    const error = getError(state, props.id);\n    const isDefaultMarketplace = getConfig(state).IsDefaultMarketplace === 'true';\n\n    return {\n        installing,\n        error,\n        isDefaultMarketplace,\n        trackEvent,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            installPlugin,\n            closeMarketplaceModal: () => closeModal(ModalIdentifiers.PLUGIN_MARKETPLACE),\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MarketplaceItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport debounce from 'lodash/debounce';\nimport {Tabs, Tab, OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport FullScreenModal from 'components/widgets/modals/full_screen_modal';\nimport RootPortal from 'components/root_portal';\nimport QuickInput from 'components/quick_input';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport PluginIcon from 'components/widgets/icons/plugin_icon.jsx';\nimport LoadingScreen from 'components/loading_screen';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {t} from 'utils/i18n';\nimport {localizeMessage} from 'utils/utils';\nimport Constants from 'utils/constants.jsx';\n\nimport MarketplaceItem from './marketplace_item';\n\nimport './marketplace_modal.scss';\n\nconst MarketplaceTabs = {\n    ALL_PLUGINS: 'allPlugins',\n    INSTALLED_PLUGINS: 'installed',\n};\n\nconst SEARCH_TIMEOUT_MILLISECONDS = 200;\n\n// Plugins renders the list of plugins in a tab.\nexport const Plugins = ({plugins}) => (\n    <div className='more-modal__list'>{plugins.map((p) => (\n        <MarketplaceItem\n            key={p.manifest.id}\n            id={p.manifest.id}\n            name={p.manifest.name}\n            description={p.manifest.description}\n            version={p.manifest.version}\n            downloadUrl={p.download_url}\n            homepageUrl={p.homepage_url}\n            releaseNotesUrl={p.release_notes_url}\n            labels={p.labels}\n            iconData={p.icon_data}\n            installedVersion={p.installed_version}\n        />\n    ))}</div>\n);\n\nPlugins.propTypes = {\n    plugins: PropTypes.array.isRequired,\n};\n\n// AllPlugins renders the contents of the all plugins tab.\nexport const AllPlugins = ({plugins}) => {\n    if (plugins.length === 0) {\n        return (\n            <div className='no_plugins_div'>\n                <br/>\n                <PluginIcon className='icon__plugin'/>\n                <div className='margin-top x2 light'>\n                    <FormattedMessage\n                        id='marketplace_modal.no_plugins'\n                        defaultMessage='There are no plugins available at this time.'\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return <Plugins plugins={plugins}/>;\n};\n\nAllPlugins.propTypes = {\n    plugins: PropTypes.array.isRequired,\n};\n\n// InstalledPlugins renders the contents of the installed plugins tab.\nexport const InstalledPlugins = ({installedPlugins, changeTab}) => {\n    if (installedPlugins.length === 0) {\n        return (\n            <div className='no_plugins_div'>\n                <br/>\n                <PluginIcon className='icon__plugin'/>\n                <div className='margin-top x2 light'>\n                    <FormattedMessage\n                        id='marketplace_modal.no_plugins_installed'\n                        defaultMessage='You do not have any plugins installed.'\n                    />\n                </div>\n                <button\n                    className='margin-top x3 style--none color--link'\n                    onClick={() => changeTab(MarketplaceTabs.ALL_PLUGINS)}\n                    data-testid='Install-Plugins-button'\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.install_plugins'\n                        defaultMessage='Install Plugins'\n                    />\n                </button>\n            </div>\n        );\n    }\n\n    return <Plugins plugins={installedPlugins}/>;\n};\n\nInstalledPlugins.propTypes = {\n    installedPlugins: PropTypes.array.isRequired,\n    changeTab: PropTypes.func,\n};\n\n// MarketplaceModal is the plugin marketplace.\nexport class MarketplaceModal extends React.Component {\n    static propTypes = {\n        show: PropTypes.bool,\n        plugins: PropTypes.array.isRequired,\n        installedPlugins: PropTypes.array.isRequired,\n        siteURL: PropTypes.string.isRequired,\n        pluginStatuses: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            closeModal: PropTypes.func.isRequired,\n            fetchPlugins: PropTypes.func.isRequired,\n            filterPlugins: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tabKey: MarketplaceTabs.ALL_PLUGINS,\n            loading: true,\n            serverError: null,\n            filter: '',\n        };\n    }\n\n    componentDidMount() {\n        trackEvent('plugins', 'ui_marketplace_opened');\n\n        this.fetchPlugins();\n\n        if (this.refs.filter) {\n            this.refs.filter.focus();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        // Automatically refresh the component when a plugin is installed or uninstalled.\n        if (this.props.pluginStatuses !== prevProps.pluginStatuses) {\n            this.fetchPlugins();\n        }\n    }\n\n    fetchPlugins = async () => {\n        const {error} = await this.props.actions.fetchPlugins();\n\n        this.setState({loading: false, serverError: error});\n    }\n\n    close = () => {\n        trackEvent('plugins', 'ui_marketplace_closed');\n        this.props.actions.closeModal();\n    }\n\n    changeTab = (tabKey) => {\n        this.setState({tabKey});\n    }\n\n    onInput = () => {\n        this.setState({filter: this.refs.filter.value});\n\n        this.debouncedSearch();\n    }\n\n    handleClearSearch = () => {\n        this.refs.filter.value = '';\n        this.setState({filter: this.refs.filter.value}, this.doSearch);\n    }\n\n    doSearch = async () => {\n        trackEvent('plugins', 'ui_marketplace_search');\n\n        const {error} = await this.props.actions.filterPlugins(this.state.filter);\n\n        this.setState({serverError: error});\n    }\n\n    debouncedSearch = debounce(this.doSearch, SEARCH_TIMEOUT_MILLISECONDS);\n\n    render() {\n        const searchClearTooltip = (\n            <Tooltip id='searchClearTooltip'>\n                <FormattedMessage\n                    id='search_bar.clear'\n                    defaultMessage='Clear search query'\n                />\n            </Tooltip>\n        );\n\n        const input = (\n            <div className='filter-row filter-row--full'>\n                <div className='col-sm-12'>\n                    <QuickInput\n                        id='searchMarketplaceTextbox'\n                        ref='filter'\n                        className='form-control filter-textbox search_input'\n                        placeholder={{id: t('marketplace_modal.search'), defaultMessage: 'Search Plugins'}}\n                        inputComponent={LocalizedInput}\n                        onInput={this.onInput}\n                        value={this.state.filter}\n                    />\n                    {this.state.filter && this.state.filter.trim() !== '' &&\n                        <div\n                            id='searchClearButton'\n                            className='sidebar__search-clear visible'\n                            onClick={this.handleClearSearch}\n                        >\n                            <OverlayTrigger\n                                delayShow={Constants.OVERLAY_TIME_DELAY}\n                                placement='bottom'\n                                overlay={searchClearTooltip}\n                            >\n                                <span\n                                    className='sidebar__search-clear-x'\n                                    aria-hidden='true'\n                                >\n                                    {'×'}\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n\n        let errorBanner = null;\n        if (this.state.serverError) {\n            errorBanner = (\n                <div\n                    className='error-bar'\n                    id='error_bar'\n                >\n                    <div className='error-bar__content'>\n                        <FormattedMarkdownMessage\n                            id='app.plugin.marketplace_plugins.app_error'\n                            defaultMessage='Error connecting to the marketplace server. Please check your settings in the [System Console]({siteURL}/admin_console/plugins/plugin_management).'\n                            values={{siteURL: this.props.siteURL}}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <RootPortal>\n                <FullScreenModal\n                    show={this.props.show}\n                    onClose={this.close}\n                    ariaLabel={localizeMessage('marketplace_modal.title', 'Plugin Marketplace')}\n                >\n                    {errorBanner}\n                    <div\n                        className='modal-marketplace'\n                        id='modal_marketplace'\n                    >\n                        <h1>\n                            <strong>\n                                <FormattedMessage\n                                    id='marketplace_modal.title'\n                                    defaultMessage='Plugin Marketplace'\n                                />\n                            </strong>\n                        </h1>\n                        {input}\n                        <Tabs\n                            id='marketplaceTabs'\n                            className='tabs'\n                            defaultActiveKey='allPlugins'\n                            activeKey={this.state.tabKey}\n                            onSelect={this.changeTab}\n                            unmountOnExit={true}\n                        >\n                            <Tab\n                                eventKey={MarketplaceTabs.ALL_PLUGINS}\n                                title={localizeMessage('marketplace_modal.tabs.all_plugins', 'All Plugins')}\n                            >\n                                {this.state.loading ? <LoadingScreen/> : <AllPlugins plugins={this.props.plugins}/>}\n                            </Tab>\n                            <Tab\n                                eventKey={MarketplaceTabs.INSTALLED_PLUGINS}\n                                title={localizeMessage('marketplace_modal.tabs.installed_plugins', 'Installed') + ` (${this.props.installedPlugins.length})`}\n                            >\n                                <InstalledPlugins\n                                    installedPlugins={this.props.installedPlugins}\n                                    changeTab={this.changeTab}\n                                />\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </FullScreenModal>\n            </RootPortal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getPlugins, getInstalledPlugins} from 'selectors/views/marketplace';\n\nimport {isModalOpen} from 'selectors/views/modals';\nimport {ModalIdentifiers} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\n\nimport {closeModal} from 'actions/views/modals';\nimport {fetchPlugins, filterPlugins} from 'actions/marketplace';\n\nimport {MarketplaceModal} from './marketplace_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        show: isModalOpen(state, ModalIdentifiers.PLUGIN_MARKETPLACE),\n        plugins: getPlugins(state),\n        installedPlugins: getInstalledPlugins(state),\n        siteURL: getSiteURL(state),\n        pluginStatuses: state.entities.admin.pluginStatuses,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeModal: () => closeModal(ModalIdentifiers.PLUGIN_MARKETPLACE),\n            fetchPlugins,\n            filterPlugins,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MarketplaceModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen';\n\nexport const DEFAULT_NUM_PER_PAGE = 50;\n\nexport default class ListModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * loadItems is a function that receives the params (pageNumber, searchTerm) and should return an object\n         * with the shape {items: [], totalCount: 0}.\n         * items: an array of objects that are passed to each renderRow function.\n         * totalCount: an integer representing the total number of items as displayed in the pagination text.\n         *\n         * Example:\n         *     const loadItems = async (pageNumber, searchTerm) => {\n         *         const {data} = await loadFromServer(searchTerm, pageNumber, PER_PAGE);\n         *         return {\n         *             items: data.users,\n         *             totalCount: data.total,\n         *         };\n         *     };\n         */\n        loadItems: PropTypes.func.isRequired,\n\n        /**\n         * renderRow is a function that receives the params (item, listModal) and should return JSX.\n         * item: an object as returned by each entry in the loadItems function's 'items' array.\n         * listModal: the instance of the ListModal component class.\n         *\n         * Example:\n         *     const renderRow = (item, listModal) => <div>{item.id}</div>;\n         */\n        renderRow: PropTypes.func.isRequired,\n\n        /**\n         * onHide (optional) a function to be invoked when the modal is closed.\n         */\n        onHide: PropTypes.func,\n\n        /**\n         * titleText (optional) a string to show at the top bar of the modal.\n         */\n        titleText: PropTypes.string,\n\n        /**\n         * searchPlaceholderText (optional) a string to show as a placeholder in the search input.\n         */\n        searchPlaceholderText: PropTypes.string,\n\n        /**\n         * titleBarButtonText (optional) a string representing a title bar button text.\n         */\n        titleBarButtonText: PropTypes.string,\n\n        /**\n         * titleBarButtonOnClick (optional) a func to handle title button bar clicks.\n         */\n        titleBarButtonOnClick: PropTypes.func,\n\n        /**\n         * numPerPage (optional) a number setting how many items per page should be displayed. Defaults to\n         * DEFAULT_NUM_PER_PAGE.\n         */\n        numPerPage: PropTypes.number,\n\n        /**\n         * show (optional) a boolean setting to hide the modal via props rather then unmounting it.\n         */\n        show: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        show: true,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.numPerPage = props.numPerPage || DEFAULT_NUM_PER_PAGE;\n\n        this.state = {\n            show: true,\n            page: 0,\n            items: [],\n            totalCount: 0,\n            loading: true,\n            searchTerm: '',\n        };\n    }\n\n    async componentDidMount() {\n        const {totalCount, items} = await this.props.loadItems(0, '');\n        this.setState({totalCount, items, loading: false}); // eslint-disable-line react/no-did-mount-set-state\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    renderRows() {\n        if (this.state.loading) {\n            return (\n                <div>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        }\n        return this.state.items.map((item) => (\n            this.props.renderRow(item, this)\n        ));\n    }\n\n    onNext = () => {\n        const nextPage = this.state.page + 1;\n        this.onPageChange(nextPage);\n    }\n\n    onPrev = () => {\n        const prevPage = this.state.page - 1;\n        this.onPageChange(prevPage);\n    }\n\n    onPageChange = async (page) => {\n        this.setState({loading: true});\n        const result = await this.props.loadItems(page, this.state.searchTerm);\n        this.setState({page, items: result.items, loading: false});\n    }\n\n    onSearchInput = async (event) => {\n        const {target} = event;\n        const searchTerm = target.value;\n        this.setState({loading: true, searchTerm});\n        const result = await this.props.loadItems(0, searchTerm);\n        const {items, totalCount} = result;\n        this.setState({loading: false, items, totalCount});\n    }\n\n    paginationRange() {\n        let startCount = (this.state.page * this.numPerPage) + 1;\n        const endCount = (startCount + this.state.items.length) - 1;\n        if (endCount === 0) {\n            startCount = 0;\n        }\n        return {startCount, endCount};\n    }\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        const {endCount, startCount} = this.paginationRange();\n        return (\n            <div>\n                <Modal\n                    dialogClassName='a11y__modal more-modal more-modal--action'\n                    show={this.state.show}\n                    onHide={this.handleHide}\n                    onExited={this.handleExit}\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title componentClass='h1'>\n                            <span className='name'>{this.props.titleText}</span>\n                        </Modal.Title>\n                        {this.props.titleBarButtonText && this.props.titleBarButtonOnClick &&\n                            <a\n                                className='btn btn-md btn-primary'\n                                href='#'\n                                onClick={this.props.titleBarButtonOnClick}\n                            >\n                                {this.props.titleBarButtonText}\n                            </a>}\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className='filtered-user-list'>\n                            <div className='filter-row'>\n                                <div className='col-xs-12'>\n                                    <label\n                                        className='hidden-label'\n                                        htmlFor='searchUsersInput'\n                                    >\n                                        {this.props.searchPlaceholderText}\n                                    </label>\n                                    <input\n                                        id='searchUsersInput'\n                                        className='form-control filter-textbox'\n                                        placeholder={this.props.searchPlaceholderText}\n                                        onChange={this.onSearchInput}\n                                    />\n                                </div>\n                                <div className='col-sm-12'>\n                                    <span className='member-count pull-left'>\n                                        <FormattedMessage\n                                            id='list_modal.paginatorCount'\n                                            defaultMessage='{startCount, number} - {endCount, number} of {total, number} total'\n                                            values={{\n                                                startCount,\n                                                endCount,\n                                                total: this.state.totalCount,\n                                            }}\n                                        />\n                                    </span>\n                                </div>\n                            </div>\n                            <div className='more-modal__list'>\n                                <div>\n                                    {this.renderRows()}\n                                </div>\n                            </div>\n                            <div className='filter-controls'>\n                                {this.state.page > 0 &&\n                                <button\n                                    onClick={this.onPrev}\n                                    className='btn btn-link filter-control filter-control__prev'\n                                >\n                                    <FormattedMessage\n                                        id='filtered_user_list.prev'\n                                        defaultMessage='Previous'\n                                    />\n                                </button>}\n                                {(this.state.items.length >= this.props.numPerPage) && endCount !== this.state.totalCount &&\n                                <button\n                                    onClick={this.onNext}\n                                    className='btn btn-link filter-control filter-control__next'\n                                >\n                                    <FormattedMessage\n                                        id='filtered_user_list.next'\n                                        defaultMessage='Next'\n                                    />\n                                </button>}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div >\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\n\nimport ListModal, {DEFAULT_NUM_PER_PAGE} from 'components/list_modal.jsx';\n\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\n\nimport groupsAvatar from 'images/groups-avatar.png';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nimport * as Utils from 'utils/utils.jsx';\n\nclass TeamGroupsManageModal extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        team: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            getGroupsAssociatedToTeam: PropTypes.func.isRequired,\n            unlinkGroupSyncable: PropTypes.func.isRequired,\n            patchGroupSyncable: PropTypes.func.isRequired,\n            getMyTeamMembers: PropTypes.func.isRequired,\n            closeModal: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    state = {\n        showConfirmModal: false,\n        item: {member_count: 0},\n        listModal: null,\n    };\n\n    loadItems = async (pageNumber, searchTerm) => {\n        const {data} = await this.props.actions.getGroupsAssociatedToTeam(this.props.team.id, searchTerm, pageNumber, DEFAULT_NUM_PER_PAGE, true);\n\n        return {\n            items: data.groups,\n            totalCount: data.totalGroupCount,\n        };\n    };\n\n    handleDeleteCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    handleDeleteConfirmed = () => {\n        this.setState({showConfirmModal: false});\n        const {item, listModal} = this.state;\n        this.props.actions.unlinkGroupSyncable(item.id, this.props.team.id, Groups.SYNCABLE_TYPE_TEAM).then(async () => {\n            listModal.setState({loading: true});\n            const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n\n            listModal.setState({loading: false, items, totalCount});\n        });\n    };\n\n    onClickRemoveGroup = (item, listModal) => {\n        this.setState({showConfirmModal: true, item, listModal});\n    };\n\n    onClickConfirmRemoveGroup = (item, listModal) => this.props.actions.unlinkGroupSyncable(item.id, this.props.team.id, Groups.SYNCABLE_TYPE_TEAM).then(async () => {\n        listModal.setState({loading: true});\n        const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n        listModal.setState({loading: false, items, totalCount});\n    });\n\n    onHide = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MANAGE_TEAM_GROUPS);\n    };\n\n    titleButtonOnClick = () => {\n        this.onHide();\n        this.props.actions.openModal({modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM, dialogType: AddGroupsToTeamModal});\n    };\n\n    setTeamMemberStatus = async (item, listModal, isTeamAdmin) => {\n        this.props.actions.patchGroupSyncable(item.id, this.props.team.id, Groups.SYNCABLE_TYPE_TEAM, {scheme_admin: isTeamAdmin}).then(async () => {\n            listModal.setState({loading: true});\n            const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n\n            this.props.actions.getMyTeamMembers();\n\n            listModal.setState({loading: false, items, totalCount});\n        });\n    };\n\n    renderRow = (item, listModal) => {\n        let title;\n        if (item.scheme_admin) {\n            title = Utils.localizeMessage('team_members_dropdown.teamAdmins', 'Team Admins');\n        } else {\n            title = Utils.localizeMessage('team_members_dropdown.teamMembers', 'Team Members');\n        }\n\n        return (\n            <div\n                key={item.id}\n                className='more-modal__row'\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='40'\n                    height='40'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>{item.display_name} {'-'} &nbsp;\n                        <span className='more-modal__name_count'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: item.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <MenuWrapper>\n                        <button\n                            id={`teamGroupsDropdown_${item.display_name}`}\n                            className='dropdown-toggle theme color--link style--none'\n                            type='button'\n                            aria-expanded='true'\n                        >\n                            <span>{title} </span>\n                            <DropdownIcon/>\n                        </button>\n                        <Menu\n                            openLeft={true}\n                            ariaLabel={Utils.localizeMessage('team_members_dropdown.menuAriaLabel', 'Team member role change')}\n                        >\n                            <Menu.ItemAction\n                                show={!item.scheme_admin}\n                                onClick={() => this.setTeamMemberStatus(item, listModal, true)}\n                                text={Utils.localizeMessage('team_members_dropdown.makeTeamAdmins', 'Make Team Admins')}\n                            />\n                            <Menu.ItemAction\n                                show={Boolean(item.scheme_admin)}\n                                onClick={() => this.setTeamMemberStatus(item, listModal, false)}\n                                text={Utils.localizeMessage('team_members_dropdown.makeTeamMembers', 'Make Team Members')}\n                            />\n                            <Menu.ItemAction\n                                onClick={() => this.onClickRemoveGroup(item, listModal)}\n                                text={Utils.localizeMessage('group_list_modal.removeGroupButton', 'Remove Group')}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const memberCount = this.state.item.member_count;\n        return (\n            <>\n                <ListModal\n                    show={!this.state.showConfirmModal}\n                    titleText={formatMessage({id: 'groups', defaultMessage: '{team} Groups'}, {team: this.props.team.display_name})}\n                    searchPlaceholderText={formatMessage({id: 'manage_team_groups_modal.search_placeholder', defaultMessage: 'Search groups'})}\n                    renderRow={this.renderRow}\n                    loadItems={this.loadItems}\n                    onHide={this.onHide}\n                    titleBarButtonText={formatMessage({id: 'group_list_modal.addGroupButton', defaultMessage: 'Add Groups'})}\n                    titleBarButtonOnClick={this.titleButtonOnClick}\n                />\n                <ConfirmModal\n                    show={this.state.showConfirmModal}\n                    title={formatMessage({id: 'remove_group_confirm_title', defaultMessage: 'Remove Group and {memberCount, number} {memberCount, plural, one {Member} other {Members}}'}, {memberCount})}\n                    message={formatMessage({id: 'remove_group_confirm_message', defaultMessage: '{memberCount, number} {memberCount, plural, one {member} other {members}} associated to this group will be removed from the team. Are you sure you wish to remove this group and {memberCount} {memberCount, plural, one {member} other {members}}?'}, {memberCount})}\n                    confirmButtonText={formatMessage({id: 'remove_group_confirm_button', defaultMessage: 'Yes, Remove Group and {memberCount, plural, one {Member} other {Members}}'}, {memberCount})}\n                    onConfirm={this.handleDeleteConfirmed}\n                    onCancel={this.handleDeleteCanceled}\n                />\n            </>\n        );\n    }\n}\n\nexport default injectIntl(TeamGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getGroupsAssociatedToTeam, unlinkGroupSyncable, patchGroupSyncable} from 'mattermost-redux/actions/groups';\nimport {getMyTeamMembers} from 'mattermost-redux/actions/teams';\n\nimport {closeModal, openModal} from 'actions/views/modals';\n\nimport TeamGroupsManageModal from './team_groups_manage_modal';\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        team: state.entities.teams.teams[ownProps.teamID],\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        getGroupsAssociatedToTeam,\n        closeModal,\n        openModal,\n        unlinkGroupSyncable,\n        patchGroupSyncable,\n        getMyTeamMembers,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupsManageModal);","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/utils';\nimport {useSafeUrl} from 'utils/url';\nimport * as UserAgent from 'utils/user_agent';\nimport InvitationModal from 'components/invitation_modal';\n\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\n\nimport LeaveTeamIcon from 'components/widgets/icons/leave_team_icon';\n\nimport LeaveTeamModal from 'components/leave_team_modal';\nimport UserSettingsModal from 'components/user_settings/modal';\nimport TeamMembersModal from 'components/team_members_modal';\nimport TeamSettingsModal from 'components/team_settings_modal';\nimport AboutBuildModal from 'components/about_build_modal';\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\nimport MarketplaceModal from 'components/plugin_marketplace';\n\nimport Menu from 'components/widgets/menu/menu';\nimport TeamGroupsManageModal from 'components/team_groups_manage_modal';\n\nclass MainMenu extends React.PureComponent {\n    static propTypes = {\n        mobile: PropTypes.bool.isRequired,\n        id: PropTypes.string,\n        teamId: PropTypes.string,\n        teamType: PropTypes.string,\n        teamName: PropTypes.string,\n        siteName: PropTypes.string,\n        currentUser: PropTypes.object,\n        appDownloadLink: PropTypes.string,\n        enableCommands: PropTypes.bool.isRequired,\n        enableCustomEmoji: PropTypes.bool.isRequired,\n        canCreateOrDeleteCustomEmoji: PropTypes.bool.isRequired,\n        enableIncomingWebhooks: PropTypes.bool.isRequired,\n        enableOAuthServiceProvider: PropTypes.bool.isRequired,\n        enableOutgoingWebhooks: PropTypes.bool.isRequired,\n        enableUserCreation: PropTypes.bool.isRequired,\n        enableEmailInvitations: PropTypes.bool.isRequired,\n        enablePluginMarketplace: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        helpLink: PropTypes.string,\n        reportAProblemLink: PropTypes.string,\n        moreTeamsToJoin: PropTypes.bool.isRequired,\n        pluginMenuItems: PropTypes.arrayOf(PropTypes.object),\n        isMentionSearch: PropTypes.bool,\n        teamIsGroupConstrained: PropTypes.bool.isRequired,\n        isLicensedForLDAPGroups: PropTypes.bool,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequred,\n            showMentions: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func.isRequired,\n            closeRhsMenu: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        teamType: '',\n        mobile: false,\n        pluginMenuItems: [],\n    };\n\n    toggleShortcutsModal = (e) => {\n        e.preventDefault();\n        GlobalActions.toggleShortcutsModal();\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = (e) => {\n        if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.A)) {\n            this.props.actions.openModal({ModalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal});\n        }\n    }\n\n    handleEmitUserLoggedOutEvent = () => {\n        GlobalActions.emitUserLoggedOutEvent();\n    }\n\n    getFlagged = (e) => {\n        e.preventDefault();\n        this.props.actions.showFlaggedPosts();\n        this.props.actions.closeRhsMenu();\n    }\n\n    searchMentions = (e) => {\n        e.preventDefault();\n\n        if (this.props.isMentionSearch) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.closeRhsMenu();\n            this.props.actions.showMentions();\n        }\n    }\n\n    render() {\n        const {currentUser, teamIsGroupConstrained, isLicensedForLDAPGroups} = this.props;\n\n        if (!currentUser) {\n            return null;\n        }\n\n        const pluginItems = this.props.pluginMenuItems.map((item) => {\n            return (\n                <Menu.ItemAction\n                    id={item.id + '_pluginmenuitem'}\n                    key={item.id + '_pluginmenuitem'}\n                    onClick={() => {\n                        if (item.action) {\n                            item.action();\n                        }\n                    }}\n                    text={item.text}\n                    icon={this.props.mobile && item.mobileIcon}\n                />\n            );\n        });\n\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <Menu\n                mobile={this.props.mobile}\n                id={this.props.id}\n                ariaLabel={formatMessage({id: 'navbar_dropdown.menuAriaLabel', defaultMessage: 'main menu'})}\n            >\n                <Menu.Group>\n                    <Menu.ItemAction\n                        id='recentMentions'\n                        show={this.props.mobile}\n                        onClick={this.searchMentions}\n                        icon={this.props.mobile && <i className='mentions'>{'@'}</i>}\n                        text={formatMessage({id: 'sidebar_right_menu.recentMentions', defaultMessage: 'Recent Mentions'})}\n                    />\n                    <Menu.ItemAction\n                        id='flaggedPosts'\n                        show={this.props.mobile}\n                        onClick={this.getFlagged}\n                        icon={this.props.mobile && <i className='fa fa-flag'/>}\n                        text={formatMessage({id: 'sidebar_right_menu.flagged', defaultMessage: 'Flagged Posts'})}\n                    />\n                </Menu.Group>\n                <Menu.Group>\n                    <Menu.ItemToggleModalRedux\n                        id='accountSettings'\n                        modalId={ModalIdentifiers.USER_SETTINGS}\n                        dialogType={UserSettingsModal}\n                        text={formatMessage({id: 'navbar_dropdown.accountSettings', defaultMessage: 'Account Settings'})}\n                        icon={this.props.mobile && <i className='fa fa-cog'/>}\n                    />\n                </Menu.Group>\n                <Menu.Group>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_TEAM]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='teamSettings'\n                            modalId={ModalIdentifiers.TEAM_SETTINGS}\n                            dialogType={TeamSettingsModal}\n                            text={formatMessage({id: 'navbar_dropdown.teamSettings', defaultMessage: 'Team Settings'})}\n                            icon={this.props.mobile && <i className='fa fa-globe'/>}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_TEAM]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='manageGroups'\n                            show={teamIsGroupConstrained && isLicensedForLDAPGroups}\n                            modalId={ModalIdentifiers.MANAGE_TEAM_GROUPS}\n                            dialogProps={{\n                                teamID: this.props.teamId,\n                            }}\n                            dialogType={TeamGroupsManageModal}\n                            text={formatMessage({id: 'navbar_dropdown.manageGroups', defaultMessage: 'Manage Groups'})}\n                            icon={this.props.mobile && <i className='fas fa-user-plus'/>}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.REMOVE_USER_FROM_TEAM, Permissions.MANAGE_TEAM_ROLES]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='manageMembers'\n                            modalId={ModalIdentifiers.TEAM_MEMBERS}\n                            dialogType={TeamMembersModal}\n                            text={formatMessage({id: 'navbar_dropdown.manageMembers', defaultMessage: 'Manage Members'})}\n                            icon={this.props.mobile && <i className='fa fa-users'/>}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.REMOVE_USER_FROM_TEAM, Permissions.MANAGE_TEAM_ROLES]}\n                        invert={true}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='viewMembers'\n                            modalId={ModalIdentifiers.TEAM_MEMBERS}\n                            dialogType={TeamMembersModal}\n                            text={formatMessage({id: 'navbar_dropdown.viewMembers', defaultMessage: 'View Members'})}\n                            icon={this.props.mobile && <i className='fa fa-users'/>}\n                        />\n                    </TeamPermissionGate>\n                </Menu.Group>\n                <Menu.Group>\n                    {pluginItems}\n                </Menu.Group>\n                <Menu.Group>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_SLASH_COMMANDS, Permissions.MANAGE_OAUTH, Permissions.MANAGE_INCOMING_WEBHOOKS, Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    >\n                        <Menu.ItemLink\n                            id='integrations'\n                            show={!this.props.mobile && (this.props.enableIncomingWebhooks || this.props.enableOutgoingWebhooks || this.props.enableCommands || this.props.enableOAuthServiceProvider)}\n                            to={'/' + this.props.teamName + '/integrations'}\n                            text={formatMessage({id: 'navbar_dropdown.integrations', defaultMessage: 'Integrations'})}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_SYSTEM]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='marketplaceModal'\n                            modalId={ModalIdentifiers.PLUGIN_MARKETPLACE}\n                            show={!this.props.mobile && this.props.enablePluginMarketplace}\n                            dialogType={MarketplaceModal}\n                            text={formatMessage({id: 'navbar_dropdown.marketplace', defaultMessage: 'Plugin Marketplace'})}\n                        />\n                    </TeamPermissionGate>\n                    <Menu.ItemLink\n                        id='customEmojis'\n                        show={!this.props.mobile && this.props.enableCustomEmoji && this.props.canCreateOrDeleteCustomEmoji}\n                        to={'/' + this.props.teamName + '/emoji'}\n                        text={formatMessage({id: 'navbar_dropdown.emoji', defaultMessage: 'Custom Emoji'})}\n                    />\n                </Menu.Group>\n                <Menu.Group>\n                    <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                        <Menu.ItemLink\n                            id='systemConsole'\n                            show={!this.props.mobile}\n                            to='/admin_console'\n                            text={formatMessage({id: 'navbar_dropdown.console', defaultMessage: 'System Console'})}\n                            icon={this.props.mobile && <i className='fa fa-wrench'/>}\n                        />\n                    </SystemPermissionGate>\n                </Menu.Group>\n            </Menu>\n        );\n    }\n}\n\nexport default injectIntl(MainMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getMyTeams, getJoinableTeamIds, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {haveITeamPermission, haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {RHSStates} from 'utils/constants';\n\nimport {showMentions, showFlaggedPosts, closeRightHandSide, closeMenu as closeRhsMenu} from 'actions/views/rhs';\nimport {openModal} from 'actions/views/modals';\nimport {getRhsState} from 'selectors/rhs';\n\nimport MainMenu from './main_menu.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentTeam = getCurrentTeam(state);\n    const currentUser = getCurrentUser(state);\n\n    const appDownloadLink = config.AppDownloadLink;\n    const enableCommands = config.EnableCommands === 'true';\n    const enableCustomEmoji = config.EnableCustomEmoji === 'true';\n    const siteName = config.SiteName;\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableUserCreation = config.EnableUserCreation === 'true';\n    const enableEmailInvitations = config.EnableEmailInvitations === 'true';\n    const enablePluginMarketplace = config.PluginsEnabled === 'true' && config.EnableMarketplace === 'true';\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const helpLink = config.HelpLink;\n    const reportAProblemLink = config.ReportAProblemLink;\n\n    let canCreateOrDeleteCustomEmoji = (haveISystemPermission(state, {permission: Permissions.CREATE_EMOJIS}) || haveISystemPermission(state, {permission: Permissions.DELETE_EMOJIS}));\n    if (!canCreateOrDeleteCustomEmoji) {\n        for (const team of getMyTeams(state)) {\n            if (haveITeamPermission(state, {team: team.id, permission: Permissions.CREATE_EMOJIS}) || haveITeamPermission(state, {team: team.id, permission: Permissions.DELETE_EMOJIS})) {\n                canCreateOrDeleteCustomEmoji = true;\n\n                break;\n            }\n        }\n    }\n\n    const joinableTeams = getJoinableTeamIds(state);\n    const moreTeamsToJoin = joinableTeams && joinableTeams.length > 0;\n    const rhsState = getRhsState(state);\n\n    return {\n        appDownloadLink,\n        enableCommands,\n        enableCustomEmoji,\n        enableIncomingWebhooks,\n        enableOAuthServiceProvider,\n        enableOutgoingWebhooks,\n        enableUserCreation,\n        enableEmailInvitations,\n        enablePluginMarketplace,\n        experimentalPrimaryTeam,\n        helpLink,\n        reportAProblemLink,\n        pluginMenuItems: state.plugins.components.MainMenu,\n        canCreateOrDeleteCustomEmoji,\n        moreTeamsToJoin,\n        siteName,\n        teamId: currentTeam.id,\n        teamName: currentTeam.name,\n        teamType: currentTeam.type,\n        currentUser,\n        isMentionSearch: rhsState === RHSStates.MENTION,\n        teamIsGroupConstrained: Boolean(currentTeam.group_constrained),\n        isLicensedForLDAPGroups: state.entities.general.license.LDAPGroups === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            showMentions,\n            showFlaggedPosts,\n            closeRightHandSide,\n            closeRhsMenu,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\nimport {CSSTransition} from 'react-transition-group';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport MenuTutorialTip from 'components/tutorial/menu_tutorial_tip';\n\nimport MainMenu from 'components/main_menu';\n\nconst ANIMATION_DURATION = 500;\n\nexport default class SidebarRightMenu extends React.PureComponent {\n    static propTypes = {\n        isOpen: PropTypes.bool.isRequired,\n        teamDisplayName: PropTypes.string,\n        showTutorialTip: PropTypes.bool.isRequired,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            openRhsMenu: PropTypes.func.isRequired,\n        }),\n    };\n\n    handleEmitUserLoggedOutEvent = () => {\n        GlobalActions.emitUserLoggedOutEvent();\n    }\n\n    render() {\n        var siteName = '';\n        if (this.props.siteName != null) {\n            siteName = this.props.siteName;\n        }\n        var teamDisplayName = siteName;\n        if (this.props.teamDisplayName) {\n            teamDisplayName = this.props.teamDisplayName;\n        }\n\n        let tutorialTip = null;\n        if (this.props.showTutorialTip) {\n            tutorialTip = <MenuTutorialTip onBottom={true}/>;\n            this.props.actions.openRhsMenu();\n        }\n\n        return (\n            <div\n                className={classNames('sidebar--menu', {'move--left': this.props.isOpen && Utils.isMobile()})}\n                id='sidebar-menu'\n            >\n                <div className='team__header theme'>\n                    <Link\n                        className='team__name'\n                        to={`/channels/${Constants.DEFAULT_CHANNEL}`}\n                    >\n                        {teamDisplayName}\n                    </Link>\n                </div>\n\n                <div className='nav-pills__container mobile-main-menu'>\n                    {tutorialTip}\n                    <CSSTransition\n                        in={this.props.isOpen && Utils.isMobile()}\n                        classNames='MobileRightSidebarMenu'\n                        enter={true}\n                        exit={true}\n                        mountOnEnter={true}\n                        unmountOnExit={true}\n                        timeout={{\n                            enter: ANIMATION_DURATION,\n                            exit: ANIMATION_DURATION,\n                        }}\n                    >\n                        <MainMenu mobile={true}/>\n                    </CSSTransition>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openMenu as openRhsMenu} from 'actions/views/rhs';\nimport {getIsRhsMenuOpen} from 'selectors/rhs';\nimport {Preferences, TutorialSteps} from 'utils/constants';\nimport {isMobile} from 'utils/utils.jsx';\n\nimport SidebarRightMenu from './sidebar_right_menu.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentTeam = getCurrentTeam(state);\n\n    const enableTutorial = config.EnableTutorial === 'true';\n    const tutorialStep = getInt(state, Preferences.TUTORIAL_STEP, getCurrentUserId(state), TutorialSteps.FINISHED);\n\n    const siteName = config.SiteName;\n\n    return {\n        teamDisplayName: currentTeam && currentTeam.display_name,\n        isOpen: getIsRhsMenuOpen(state),\n        showTutorialTip: enableTutorial && isMobile() && tutorialStep === TutorialSteps.MENU_POPOVER,\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openRhsMenu,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarRightMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants';\n\nconst ActionTypes = Constants.ActionTypes;\n\nexport default class ImportThemeModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            inputError: '',\n            show: false,\n            callback: null,\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(ActionTypes.TOGGLE_IMPORT_THEME_MODAL, this.updateShow);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(ActionTypes.TOGGLE_IMPORT_THEME_MODAL, this.updateShow);\n    }\n\n    updateShow = (show, args) => {\n        this.setState({\n            show,\n            callback: args.callback,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const text = this.state.value;\n\n        if (!this.isInputValid(text)) {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        const colors = text.split(',');\n        const theme = {type: 'custom'};\n\n        theme.sidebarBg = colors[0];\n        theme.sidebarText = colors[5];\n        theme.sidebarUnreadText = colors[5];\n        theme.sidebarTextHoverBg = colors[4];\n        theme.sidebarTextActiveBorder = colors[2];\n        theme.sidebarTextActiveColor = colors[3];\n        theme.sidebarHeaderBg = colors[1];\n        theme.sidebarHeaderTextColor = colors[5];\n        theme.onlineIndicator = colors[6];\n        theme.mentionBg = colors[7];\n        setThemeDefaults(theme);\n\n        this.state.callback(theme);\n        this.setState({\n            show: false,\n            callback: null,\n        });\n    }\n\n    isInputValid(text) {\n        if (text.length === 0) {\n            return false;\n        }\n\n        if (text.indexOf(' ') !== -1) {\n            return false;\n        }\n\n        if (text.length > 0 && text.indexOf(',') === -1) {\n            return false;\n        }\n\n        if (text.length > 0) {\n            const colors = text.split(',');\n\n            if (colors.length !== 8) {\n                return false;\n            }\n\n            for (let i = 0; i < colors.length; i++) {\n                if (colors[i].length !== 7 && colors[i].length !== 4) {\n                    return false;\n                }\n\n                if (colors[i].charAt(0) !== '#') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    handleChange = (e) => {\n        const value = e.target.value;\n        this.setState({value});\n\n        if (this.isInputValid(value)) {\n            this.setState({inputError: null});\n        } else {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n        }\n    }\n\n    handleOnHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal'\n                    show={this.state.show}\n                    onHide={this.handleOnHide}\n                    role='dialog'\n                    aria-labelledby='importThemeModalLabel'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='importThemeModalLabel'\n                        >\n                            <FormattedMessage\n                                id='user.settings.import_theme.importHeader'\n                                defaultMessage='Import Slack Theme'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <p>\n                                <FormattedMessage\n                                    id='user.settings.import_theme.importBody'\n                                    defaultMessage='To import a theme, go to a Slack team and look for \"Preferences -> Sidebar Theme\". Open the custom theme option, copy the theme color values and paste them here:'\n                                />\n                            </p>\n                            <div className='form-group less'>\n                                <div className='col-sm-12'>\n                                    <input\n                                        id='themeVector'\n                                        type='text'\n                                        className='form-control'\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                    />\n                                    <div className='input__help'>\n                                        {this.state.inputError}\n                                    </div>\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelButton'\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.handleOnHide}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitButton'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.submit'\n                                    defaultMessage='Submit'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getIsLhsOpen(state) {\n    return state.views.lhs.isOpen;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {ContextMenu, ContextMenuTrigger, MenuItem} from 'react-contextmenu';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class CopyUrlContextMenu extends React.Component {\n    static propTypes = {\n\n        // The child component that will be right-clicked on to show the context menu\n        children: PropTypes.element,\n\n        // The link to copy to the user's clipboard when the 'Copy' option is selected from the context menu\n        link: PropTypes.string.isRequired,\n\n        // A unique id differentiating this instance of context menu from others on the page.\n        menuId: PropTypes.string.isRequired,\n\n        siteURL: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n            copyToClipboard: PropTypes.func.isRequired,\n        }),\n    };\n\n    copy = () => {\n        let link = this.props.link;\n\n        // Transform relative links to absolute ones for copy and paste.\n        if (link.indexOf('http://') === -1 && link.indexOf('https://') === -1) {\n            link = this.props.siteURL + link;\n        }\n\n        this.props.actions.copyToClipboard(link);\n    }\n\n    render() {\n        const contextMenu = (\n            <ContextMenu id={'copy-url-context-menu' + this.props.menuId}>\n                <MenuItem\n                    onClick={this.copy}\n                >\n                    <FormattedMessage\n                        id='copy_url_context_menu.getChannelLink'\n                        defaultMessage='Copy Link'\n                    />\n                </MenuItem>\n            </ContextMenu>\n        );\n\n        const contextMenuTrigger = (\n            <ContextMenuTrigger\n                id={'copy-url-context-menu' + this.props.menuId}\n                holdToDisplay={-1}\n            >\n                {this.props.children}\n            </ContextMenuTrigger>\n        );\n\n        return (\n            <span>\n                {contextMenu}\n                {contextMenuTrigger}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {copyToClipboard} from 'utils/utils';\n\nimport CopyUrlContextMenu from './copy_url_context_menu.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        siteURL: config.SiteURL,\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {\n        actions: {\n            copyToClipboard,\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyUrlContextMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {mark, trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport {isDesktopApp} from 'utils/user_agent';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport CopyUrlContextMenu from 'components/copy_url_context_menu';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport TeamIcon from '../../widgets/team_icon/team_icon';\n\n// eslint-disable-next-line react/require-optimization\nclass TeamButton extends React.Component {\n    static propTypes = {\n        btnClass: PropTypes.string,\n        url: PropTypes.string.isRequired,\n        displayName: PropTypes.string,\n        content: PropTypes.node,\n        tip: PropTypes.node.isRequired,\n        active: PropTypes.bool,\n        disabled: PropTypes.bool,\n        unread: PropTypes.bool,\n        mentions: PropTypes.number,\n        placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n        teamIconUrl: PropTypes.string,\n        switchTeam: PropTypes.func.isRequired,\n        intl: intlShape.isRequired,\n    };\n\n    static defaultProps = {\n        btnClass: '',\n        tip: '',\n        placement: 'right',\n        active: false,\n        disabled: false,\n        unread: false,\n        mentions: 0,\n    };\n\n    handleSwitch = (e) => {\n        e.preventDefault();\n        mark('TeamLink#click');\n        trackEvent('ui', 'ui_team_sidebar_switch_team');\n        this.props.switchTeam(this.props.url);\n    }\n\n    handleDisabled = (e) => {\n        e.preventDefault();\n    }\n\n    render() {\n        const {teamIconUrl, displayName, btnClass, mentions, unread} = this.props;\n        const {formatMessage} = this.props.intl;\n\n        let teamClass = this.props.active ? 'active' : '';\n        const disabled = this.props.disabled ? 'team-disabled' : '';\n        const handleClick = (this.props.active || this.props.disabled) ? this.handleDisabled : this.handleSwitch;\n        let badge;\n\n        let ariaLabel = formatMessage({\n            id: 'team.button.ariaLabel',\n            defaultMessage: '{teamName} team',\n        },\n        {\n            teamName: displayName,\n        });\n\n        if (!teamClass) {\n            teamClass = unread ? 'unread' : '';\n            ariaLabel = formatMessage({\n                id: 'team.button.unread.ariaLabel',\n                defaultMessage: '{teamName} team unread',\n            },\n            {\n                teamName: displayName,\n            });\n\n            if (mentions) {\n                ariaLabel = formatMessage({\n                    id: 'team.button.mentions.ariaLabel',\n                    defaultMessage: '{teamName} team, {mentionCount} mentions',\n                },\n                {\n                    teamName: displayName,\n                    mentionCount: mentions,\n                });\n\n                badge = (\n                    <span className={'badge pull-right small'}>{mentions}</span>\n                );\n            }\n        }\n\n        ariaLabel = ariaLabel.toLowerCase();\n\n        const content = (\n            <TeamIcon\n                withHover={true}\n                name={this.props.content || displayName}\n                url={teamIconUrl}\n            />\n        );\n\n        const toolTip = this.props.tip || localizeMessage('team.button.name_undefined', 'Name undefined');\n        const btn = (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement={this.props.placement}\n                overlay={\n                    <Tooltip id={`tooltip-${this.props.url}`}>\n                        {toolTip}\n                    </Tooltip>\n                }\n            >\n                <div className={'team-btn ' + btnClass}>\n                    {badge}\n                    {content}\n                </div>\n            </OverlayTrigger>\n        );\n\n        let teamButton;\n        if (isDesktopApp()) {\n            teamButton = (\n                <button\n                    className={'btn btn-link ' + disabled}\n                    onClick={handleClick}\n                >\n                    {btn}\n                </button>\n            );\n\n            // if this is not a \"special\" team button, give it a context menu\n            if (!this.props.url.endsWith('create_team') && !this.props.url.endsWith('select_team')) {\n                teamButton = (\n                    <CopyUrlContextMenu\n                        link={this.props.url}\n                        menuId={this.props.url}\n                    >\n                        {teamButton}\n                    </CopyUrlContextMenu>\n                );\n            }\n        } else {\n            teamButton = (\n                <Link\n                    id={`${this.props.url.slice(1)}TeamButton`}\n                    aria-label={ariaLabel}\n                    className={disabled}\n                    to={this.props.url}\n                    onClick={handleClick}\n                >\n                    {btn}\n                </Link>\n            );\n        }\n\n        return (\n            <div\n                className={`team-container ${teamClass}`}\n            >\n                {teamButton}\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(TeamButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage} from 'react-intl';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport classNames from 'classnames';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport Pluggable from 'plugins/pluggable';\n\nimport TeamButton from './components/team_button.jsx';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport default class TeamSidebar extends React.PureComponent {\n    static propTypes = {\n        myTeams: PropTypes.array.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        moreTeamsToJoin: PropTypes.bool.isRequired,\n        myTeamMembers: PropTypes.object.isRequired,\n        isOpen: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        locale: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            getTeams: PropTypes.func.isRequired,\n            switchTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    componentDidMount() {\n        this.props.actions.getTeams(0, 200);\n    }\n\n    render() {\n        const root = document.querySelector('#root');\n        if (this.props.myTeams.length <= 1) {\n            root.classList.remove('multi-teams');\n            return null;\n        }\n        root.classList.add('multi-teams');\n\n        const plugins = [];\n        const teams = filterAndSortTeamsByDisplayName(this.props.myTeams, this.props.locale).\n            map((team) => {\n                const member = this.props.myTeamMembers[team.id];\n                return (\n                    <TeamButton\n                        key={'switch_team_' + team.name}\n                        url={`/${team.name}`}\n                        tip={team.display_name}\n                        active={team.id === this.props.currentTeamId}\n                        displayName={team.display_name}\n                        unread={member.msg_count > 0}\n                        mentions={member.mention_count}\n                        teamIconUrl={Utils.imageURLForTeam(team)}\n                        switchTeam={this.props.actions.switchTeam}\n                    />\n                );\n            });\n\n        if (this.props.moreTeamsToJoin && !this.props.experimentalPrimaryTeam) {\n            teams.push(\n                <TeamButton\n                    btnClass='team-btn__add'\n                    key='more_teams'\n                    url='/select_team'\n                    tip={\n                        <FormattedMessage\n                            id='team_sidebar.join'\n                            defaultMessage='Other teams you can join.'\n                        />\n                    }\n                    content={'+'}\n                    switchTeam={this.props.actions.switchTeam}\n                />\n            );\n        } else {\n            teams.push(\n                <SystemPermissionGate\n                    permissions={[Permissions.CREATE_TEAM]}\n                    key='more_teams'\n                >\n                    <TeamButton\n                        btnClass='team-btn__add'\n                        url='/create_team'\n                        tip={\n                            <FormattedMessage\n                                id='navbar_dropdown.create'\n                                defaultMessage='Create a Team'\n                            />\n                        }\n                        content={'+'}\n                        switchTeam={this.props.actions.switchTeam}\n                    />\n                </SystemPermissionGate>\n            );\n        }\n\n        plugins.push(\n            <div\n                key='team-sidebar-bottom-plugin'\n                className='team-sidebar-bottom-plugin is-empty'\n            >\n                <Pluggable pluggableName='BottomTeamSidebar'/>\n            </div>\n        );\n\n        return (\n            <div className={classNames('team-sidebar', {'move--right': this.props.isOpen})}>\n                <div\n                    className='team-wrapper'\n                    id='teamSidebarWrapper'\n                >\n                    <Scrollbars\n                        autoHide={true}\n                        autoHideTimeout={500}\n                        autoHideDuration={500}\n                        renderThumbHorizontal={renderThumbHorizontal}\n                        renderThumbVertical={renderThumbVertical}\n                        renderView={renderView}\n                        onScroll={this.handleScroll}\n                    >\n                        {teams}\n                    </Scrollbars>\n                </div>\n                {plugins}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {withRouter} from 'react-router-dom';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getMyTeams, getJoinableTeamIds, getTeamMemberships, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {switchTeam} from 'actions/team_actions.jsx';\n\nimport TeamSidebar from './team_sidebar_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const joinableTeams = getJoinableTeamIds(state);\n    const moreTeamsToJoin = joinableTeams && joinableTeams.length > 0;\n\n    return {\n        currentTeamId: getCurrentTeamId(state),\n        myTeams: getMyTeams(state),\n        myTeamMembers: getTeamMemberships(state),\n        isOpen: getIsLhsOpen(state),\n        experimentalPrimaryTeam,\n        locale: getCurrentLocale(state),\n        moreTeamsToJoin,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            switchTeam,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(TeamSidebar));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport QuickInput from 'components/quick_input';\nimport * as UserAgent from 'utils/user_agent';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\n\nimport {t} from 'utils/i18n';\n\nimport MenuWrapper from './widgets/menu/menu_wrapper';\nimport Menu from './widgets/menu/menu';\n\nconst NEXT_BUTTON_TIMEOUT_MILLISECONDS = 500;\n\nexport default class SearchableChannelList extends React.Component {\n    static getDerivedStateFromProps(props, state) {\n        return {isSearch: props.isSearch, page: props.isSearch && !state.isSearch ? 0 : state.page};\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            joiningChannel: '',\n            page: 0,\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        // only focus the search box on desktop so that we don't cause the keyboard to open on mobile\n        if (!UserAgent.isMobile() && this.refs.filter) {\n            this.refs.filter.focus();\n        }\n    }\n\n    handleJoin(channel) {\n        this.setState({joiningChannel: channel.id});\n        this.props.handleJoin(\n            channel,\n            () => {\n                this.setState({joiningChannel: ''});\n            }\n        );\n    }\n\n    createChannelRow = (channel) => {\n        const ariaLabel = `${channel.display_name}, ${channel.purpose}`.toLowerCase();\n        let archiveIcon;\n        const {shouldShowArchivedChannels} = this.props;\n\n        if (shouldShowArchivedChannels) {\n            archiveIcon = (\n                <div className='more-modal__icon-container'>\n                    <ArchiveIcon className='icon icon__archive'/>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='more-modal__row'\n                key={channel.id}\n                id={`ChannelRow-${channel.name}`}\n            >\n                <div className='more-modal__details'>\n                    <button\n                        onClick={this.handleJoin.bind(this, channel)}\n                        aria-label={ariaLabel}\n                        className='style--none more-modal__name'\n                    >\n                        {archiveIcon}\n                        {channel.display_name}\n                    </button>\n                    <p className='more-modal__description'>{channel.purpose}</p>\n                </div>\n                <div className='more-modal__actions'>\n                    <button\n                        onClick={this.handleJoin.bind(this, channel)}\n                        className='btn btn-primary'\n                        disabled={this.state.joiningChannel}\n                    >\n                        <LoadingWrapper\n                            loading={this.state.joiningChannel === channel.id}\n                            text={localizeMessage('more_channels.joining', 'Joining...')}\n                        >\n                            <FormattedMessage\n                                id={shouldShowArchivedChannels ? 'more_channels.view' : 'more_channels.join'}\n                                defaultMessage={shouldShowArchivedChannels ? 'View' : 'Join'}\n                            />\n                        </LoadingWrapper>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    nextPage = (e) => {\n        e.preventDefault();\n        this.setState({page: this.state.page + 1, nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT_MILLISECONDS);\n        this.props.nextPage(this.state.page + 1);\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    previousPage = (e) => {\n        e.preventDefault();\n        this.setState({page: this.state.page - 1});\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    doSearch = () => {\n        const term = this.refs.filter.value;\n        this.props.search(term);\n        if (term === '') {\n            this.setState({page: 0});\n        }\n    }\n    toggleArchivedChannelsOn = () => {\n        this.props.toggleArchivedChannels(true);\n    }\n    toggleArchivedChannelsOff = () => {\n        this.props.toggleArchivedChannels(false);\n    }\n\n    render() {\n        const channels = this.props.channels;\n        let listContent;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.loading && channels.length === 0) {\n            listContent = <LoadingScreen style={{marginTop: '50%'}}/>;\n        } else if (channels.length === 0) {\n            listContent = (\n                <div className='no-channel-message'>\n                    <p className='primary-message'>\n                        <FormattedMessage\n                            id='more_channels.noMore'\n                            defaultMessage='No more channels to join'\n                        />\n                    </p>\n                    {this.props.noResultsText}\n                </div>\n            );\n        } else {\n            const pageStart = this.state.page * this.props.channelsPerPage;\n            const pageEnd = pageStart + this.props.channelsPerPage;\n            const channelsToDisplay = this.props.channels.slice(pageStart, pageEnd);\n            listContent = channelsToDisplay.map(this.createChannelRow);\n\n            if (channelsToDisplay.length >= this.props.channelsPerPage && pageEnd < this.props.channels.length) {\n                nextButton = (\n                    <button\n                        className='btn btn-link filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                    >\n                        <FormattedMessage\n                            id='more_channels.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-link filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                    >\n                        <FormattedMessage\n                            id='more_channels.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        let input = (\n            <div className='filter-row filter-row--full'>\n                <div className='col-sm-12'>\n                    <QuickInput\n                        id='searchChannelsTextbox'\n                        ref='filter'\n                        className='form-control filter-textbox'\n                        placeholder={{id: t('filtered_channels_list.search'), defaultMessage: 'Search channels'}}\n                        inputComponent={LocalizedInput}\n                        onInput={this.doSearch}\n                    />\n                </div>\n            </div>\n        );\n\n        if (this.props.createChannelButton) {\n            input = (\n                <div className='channel_search'>\n                    <div className='search_input'>\n                        <QuickInput\n                            id='searchChannelsTextbox'\n                            ref='filter'\n                            className='form-control filter-textbox'\n                            placeholder={{id: t('filtered_channels_list.search'), defaultMessage: 'Search channels'}}\n                            inputComponent={LocalizedInput}\n                            onInput={this.doSearch}\n                        />\n                    </div>\n                    <div className='create_button'>\n                        {this.props.createChannelButton}\n                    </div>\n                </div>\n            );\n        }\n\n        let channelDropdown;\n\n        if (this.props.canShowArchivedChannels) {\n            channelDropdown = (\n                <div className='more-modal__dropdown'>\n                    <MenuWrapper id='channelsMoreDropdown'>\n                        <a>\n                            <span>{this.props.shouldShowArchivedChannels ? localizeMessage('more_channels.show_archived_channels', 'Show: Archived Channels') : localizeMessage('more_channels.show_public_channels', 'Show: Public Channels')}</span>\n                            <span className='caret'/>\n                        </a>\n                        <Menu\n                            openLeft={false}\n                            ariaLabel={localizeMessage('team_members_dropdown.menuAriaLabel', 'Team member role change')}\n                        >\n                            <Menu.ItemAction\n                                id='channelsMoreDropdownPublic'\n                                onClick={this.toggleArchivedChannelsOff}\n                                text={localizeMessage('suggestion.search.public', 'Public Channels')}\n                            />\n                            <Menu.ItemAction\n                                id='channelsMoreDropdownArchived'\n                                onClick={this.toggleArchivedChannelsOn}\n                                text={localizeMessage('suggestion.archive', 'Archived Channels')}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            );\n        }\n\n        return (\n            <div className='filtered-user-list'>\n                {input}\n                {channelDropdown}\n                <div\n                    role='application'\n                    ref='channelList'\n                    className='more-modal__list'\n                >\n                    <div\n                        id='moreChannelsList'\n                        ref='channelListScroll'\n                    >\n                        {listContent}\n                    </div>\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nSearchableChannelList.defaultProps = {\n    channels: [],\n    isSearch: false,\n};\n\nSearchableChannelList.propTypes = {\n    channels: PropTypes.arrayOf(PropTypes.object),\n    channelsPerPage: PropTypes.number,\n    nextPage: PropTypes.func.isRequired,\n    isSearch: PropTypes.bool,\n    search: PropTypes.func.isRequired,\n    handleJoin: PropTypes.func.isRequired,\n    noResultsText: PropTypes.object,\n    loading: PropTypes.bool,\n    createChannelButton: PropTypes.element,\n    toggleArchivedChannels: PropTypes.func.isRequired,\n    shouldShowArchivedChannels: PropTypes.bool.isRequired,\n    canShowArchivedChannels: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport {browserHistory} from 'utils/browser_history';\n\nimport {getRelativeChannelURL} from 'utils/url';\n\nimport SearchableChannelList from 'components/searchable_channel_list.jsx';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nconst CHANNELS_CHUNK_SIZE = 50;\nconst CHANNELS_PER_PAGE = 50;\nconst SEARCH_TIMEOUT_MILLISECONDS = 100;\n\nexport default class MoreChannels extends React.Component {\n    static propTypes = {\n        channels: PropTypes.array.isRequired,\n        archivedChannels: PropTypes.array.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        teamName: PropTypes.string.isRequired,\n        onModalDismissed: PropTypes.func,\n        handleNewChannel: PropTypes.func,\n        channelsRequestStarted: PropTypes.bool,\n        bodyOnly: PropTypes.bool,\n        canShowArchivedChannels: PropTypes.bool,\n        morePublicChannelsModalType: PropTypes.string,\n        actions: PropTypes.shape({\n            getChannels: PropTypes.func.isRequired,\n            getArchivedChannels: PropTypes.func.isRequired,\n            joinChannel: PropTypes.func.isRequired,\n            searchMoreChannels: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            show: true,\n            shouldShowArchivedChannels: this.props.morePublicChannelsModalType === 'private',\n            search: false,\n            searchedChannels: [],\n            serverError: null,\n            searching: false,\n            searchTerm: '',\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2);\n        if (this.props.canShowArchivedChannels) {\n            this.props.actions.getArchivedChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2);\n        }\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n\n        if (this.props.bodyOnly) {\n            this.handleExit();\n        }\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    onChange = (force) => {\n        if (this.state.search && !force) {\n            return;\n        }\n\n        this.setState({\n            searchedChannels: [],\n            serverError: null,\n        });\n    }\n\n    nextPage = (page) => {\n        this.props.actions.getChannels(this.props.teamId, page + 1, CHANNELS_PER_PAGE);\n    }\n\n    handleJoin = (channel, done) => {\n        const {actions, currentUserId, teamId, teamName} = this.props;\n        actions.joinChannel(currentUserId, teamId, channel.id).then((result) => {\n            if (result.error) {\n                this.setState({serverError: result.error.message});\n            } else {\n                browserHistory.push(getRelativeChannelURL(teamName, channel.name));\n                this.handleHide();\n            }\n\n            if (done) {\n                done();\n            }\n        });\n    };\n\n    search = (term) => {\n        clearTimeout(this.searchTimeoutId);\n\n        if (term === '') {\n            this.onChange(true);\n            this.setState({search: false, searchedChannels: [], searching: false, searchTerm: term});\n            this.searchTimeoutId = '';\n            return;\n        }\n        this.setState({search: true, searching: true, searchTerm: term});\n\n        const searchTimeoutId = setTimeout(\n            () => {\n                this.props.actions.searchMoreChannels(term, this.state.shouldShowArchivedChannels).\n                    then((result) => {\n                        if (searchTimeoutId !== this.searchTimeoutId) {\n                            return;\n                        }\n\n                        if (result.data) {\n                            this.setSearchResults(result.data);\n                        } else {\n                            this.setState({searchedChannels: [], searching: false});\n                        }\n                    }).\n                    catch(() => {\n                        this.setState({searchedChannels: [], searching: false});\n                    });\n            },\n            SEARCH_TIMEOUT_MILLISECONDS\n        );\n\n        this.searchTimeoutId = searchTimeoutId;\n    };\n\n    setSearchResults = (channels) => {\n        this.setState({searchedChannels: this.state.shouldShowArchivedChannels ? channels.filter((c) => c.delete_at !== 0) : channels.filter((c) => c.delete_at === 0), searching: false});\n    };\n\n    toggleArchivedChannels = (shouldShowArchivedChannels) => {\n        // search again when switching channels to update search results\n        this.search(this.state.searchTerm);\n        this.setState({shouldShowArchivedChannels});\n    };\n\n    render() {\n        const {\n            channels,\n            archivedChannels,\n            teamId,\n            channelsRequestStarted,\n            bodyOnly,\n        } = this.props;\n\n        const {\n            search,\n            searchedChannels,\n            serverError: serverErrorState,\n            show,\n            searching,\n            shouldShowArchivedChannels,\n        } = this.state;\n\n        let activeChannels;\n\n        if (shouldShowArchivedChannels) {\n            activeChannels = search ? searchedChannels : archivedChannels;\n        } else {\n            activeChannels = search ? searchedChannels : channels;\n        }\n\n        let serverError;\n        if (serverErrorState) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{serverErrorState}</label></div>;\n        }\n\n        const createNewChannelButton = (\n            <TeamPermissionGate\n                teamId={teamId}\n                permissions={[Permissions.CREATE_PUBLIC_CHANNEL]}\n            >\n                <button\n                    id='createNewChannel'\n                    type='button'\n                    className='btn btn-primary channel-create-btn'\n                    onClick={this.props.handleNewChannel}\n                >\n                    <FormattedMessage\n                        id='more_channels.create'\n                        defaultMessage='Create Channel'\n                    />\n                </button>\n            </TeamPermissionGate>\n        );\n\n        const createChannelHelpText = (\n            <TeamPermissionGate\n                teamId={teamId}\n                permissions={[Permissions.CREATE_PUBLIC_CHANNEL, Permissions.CREATE_PRIVATE_CHANNEL]}\n            >\n                <p className='secondary-message'>\n                    <FormattedMessage\n                        id='more_channels.createClick'\n                        defaultMessage=\"Click 'Create New Channel' to make a new one\"\n                    />\n                </p>\n            </TeamPermissionGate>\n        );\n\n        const body = (\n            <React.Fragment>\n                <SearchableChannelList\n                    channels={activeChannels}\n                    channelsPerPage={CHANNELS_PER_PAGE}\n                    nextPage={this.nextPage}\n                    isSearch={search}\n                    search={this.search}\n                    handleJoin={this.handleJoin}\n                    noResultsText={createChannelHelpText}\n                    loading={search ? searching : channelsRequestStarted}\n                    createChannelButton={bodyOnly && createNewChannelButton}\n                    toggleArchivedChannels={this.toggleArchivedChannels}\n                    shouldShowArchivedChannels={this.state.shouldShowArchivedChannels}\n                    canShowArchivedChannels={this.props.canShowArchivedChannels}\n                />\n                {serverError}\n            </React.Fragment>\n        );\n\n        if (bodyOnly) {\n            return body;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-modal--action'\n                show={show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                id='moreChannelsModal'\n                aria-labelledby='moreChannelsModalLabel'\n            >\n                <Modal.Header\n                    id='moreChannelsModalHeader'\n                    closeButton={true}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='moreChannelsModalLabel'\n                    >\n                        <FormattedMessage\n                            id='more_channels.title'\n                            defaultMessage='More Channels'\n                        />\n                    </Modal.Title>\n                    {createNewChannelButton}\n                </Modal.Header>\n                <Modal.Body>\n                    {body}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {getChannels, getArchivedChannels, joinChannel} from 'mattermost-redux/actions/channels';\nimport {getOtherChannels, getChannelsInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {searchMoreChannels} from 'actions/channel_actions.jsx';\n\nimport MoreChannels from './more_channels.jsx';\n\nconst getNotArchivedOtherChannels = createSelector(\n    getOtherChannels,\n    (channels) => channels && channels.filter((c) => c.delete_at === 0)\n);\n\nconst getArchivedOtherChannels = createSelector(\n    getChannelsInCurrentTeam,\n    (channels) => channels && channels.filter((c) => c.delete_at !== 0)\n);\n\nfunction mapStateToProps(state) {\n    const team = getCurrentTeam(state) || {};\n\n    return {\n        channels: getNotArchivedOtherChannels(state) || [],\n        archivedChannels: getArchivedOtherChannels(state) || [],\n        currentUserId: getCurrentUserId(state),\n        teamId: team.id,\n        teamName: team.name,\n        channelsRequestStarted: state.requests.channels.getChannels.status === RequestStatus.STARTED,\n        canShowArchivedChannels: (getConfig(state).ExperimentalViewArchivedChannels === 'true'),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannels,\n            getArchivedChannels,\n            joinChannel,\n            searchMoreChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoreChannels);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class AddIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.add'\n                defaultMessage='Add Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fas fa-user-plus'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n// import AddIcon from 'components/widgets/icons/fa_add_icon';\nimport AddUserIcon from 'components/widgets/icons/fa_add_user_icon';\n\nexport default class GroupMessageOption extends React.Component {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        isSelected: PropTypes.bool.isRequired,\n        onAdd: PropTypes.func.isRequired,\n    };\n\n    getStyle() {\n        let className = 'mentions__name';\n        if (this.props.isSelected) {\n            className += ' suggestion--selected';\n        }\n        return className;\n    }\n\n    displayName() {\n        return this.props.channel.profiles.map((profile) => '@' + profile.username).join(', ');\n    }\n\n    addValue = () => {\n        this.props.onAdd(this.props.channel.profiles);\n    }\n\n    render() {\n        return (\n            <div\n                key={this.props.channel.id}\n                className={'more-modal__row clickable ' + this.getStyle()}\n                onClick={this.addValue}\n            >\n                <div className='more-modal__gm-icon bg-text-200'>\n                    {this.props.channel.profiles.length}\n                </div>\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>\n                        {this.displayName()}\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddUserIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\n// import {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport {displayEntireNameForUser, localizeMessage, isGuest} from 'utils/utils.jsx';\nimport MultiSelect from 'components/multiselect/multiselect';\nimport ProfilePicture from 'components/profile_picture';\nimport AddUserIcon from 'components/widgets/icons/fa_add_user_icon';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport BotBadge from 'components/widgets/badges/bot_badge';\n\nimport GroupMessageOption from './group_message_option';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = Constants.MAX_USERS_IN_GM - 1;\n\nexport default class MoreDirectChannels extends React.Component {\n    static propTypes = {\n\n        currentUserId: PropTypes.string.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        currentTeamName: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n        groupChannels: PropTypes.arrayOf(PropTypes.object).isRequired,\n        myDirectChannels: PropTypes.arrayOf(PropTypes.object).isRequired,\n        statuses: PropTypes.object.isRequired,\n        totalCount: PropTypes.number,\n\n        /*\n         * List of current channel members of existing channel\n         */\n        currentChannelMembers: PropTypes.arrayOf(PropTypes.object),\n\n        /*\n         * Whether the modal is for existing channel or not\n         */\n        isExistingChannel: PropTypes.bool.isRequired,\n\n        /*\n         * The mode by which direct messages are restricted, if at all.\n         */\n        restrictDirectMessage: PropTypes.string,\n        onModalDismissed: PropTypes.func,\n        onHide: PropTypes.func,\n        bodyOnly: PropTypes.bool,\n        actions: PropTypes.shape({\n            getProfiles: PropTypes.func.isRequired,\n            getProfilesInTeam: PropTypes.func.isRequired,\n            getStatusesByIds: PropTypes.func.isRequired,\n            getTotalUsersStats: PropTypes.func.isRequired,\n            loadStatusesForProfilesList: PropTypes.func.isRequired,\n            loadProfilesForGroupChannels: PropTypes.func.isRequired,\n            openDirectChannelToUserId: PropTypes.func.isRequired,\n            openGroupChannelToUserIds: PropTypes.func.isRequired,\n            searchProfiles: PropTypes.func.isRequired,\n            searchGroupChannels: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        const values = [];\n\n        if (props.currentChannelMembers) {\n            for (let i = 0; i < props.currentChannelMembers.length; i++) {\n                const user = Object.assign({}, props.currentChannelMembers[i]);\n\n                if (user.id === props.currentUserId) {\n                    continue;\n                }\n\n                values.push(user);\n            }\n        }\n\n        this.state = {\n            values,\n            show: true,\n            search: false,\n            saving: false,\n            loadingUsers: true,\n        };\n    }\n\n    componentDidMount() {\n        this.getUserProfiles();\n        this.props.actions.getTotalUsersStats();\n        this.loadProfilesMissingStatus(this.props.users, this.props.statuses);\n    }\n\n    updateFromProps(prevProps) {\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                this.resetPaging();\n            } else {\n                const teamId = this.props.restrictDirectMessage === 'any' ? '' : this.props.currentTeamId;\n\n                this.searchTimeoutId = setTimeout(\n                    async () => {\n                        this.setUsersLoadingState(true);\n                        const [{data: profilesData}, {data: groupChannelsData}] = await Promise.all([\n                            this.props.actions.searchProfiles(searchTerm, {team_id: teamId}),\n                            this.props.actions.searchGroupChannels(searchTerm),\n                        ]);\n                        if (profilesData) {\n                            this.props.actions.loadStatusesForProfilesList(profilesData);\n                        }\n                        if (groupChannelsData) {\n                            this.props.actions.loadProfilesForGroupChannels(groupChannelsData);\n                        }\n                        this.resetPaging();\n                        this.setUsersLoadingState(false);\n                    },\n                    Constants.SEARCH_TIMEOUT_MILLISECONDS\n                );\n            }\n        }\n\n        if (\n            prevProps.users.length !== this.props.users.length ||\n            Object.keys(prevProps.statuses).length !== Object.keys(this.props.statuses).length\n        ) {\n            this.loadProfilesMissingStatus(this.props.users, this.props.statuses);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        this.updateFromProps(prevProps);\n    }\n\n    loadProfilesMissingStatus = (users = [], statuses = {}) => {\n        const missingStatusByIds = users.\n            filter((user) => !statuses[user.id]).\n            map((user) => user.id);\n\n        if (missingStatusByIds.length > 0) {\n            this.props.actions.getStatusesByIds(missingStatusByIds);\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n\n        if (this.props.bodyOnly) {\n            this.handleExit();\n        }\n    }\n\n    setUsersLoadingState = (loadingState) => {\n        this.setState({\n            loadingUsers: loadingState,\n        });\n    }\n\n    handleExit = () => {\n        if (this.exitToChannel) {\n            browserHistory.push(this.exitToChannel);\n        }\n\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    handleSubmit = (values = this.state.values) => {\n        const {actions} = this.props;\n        if (this.state.saving) {\n            return;\n        }\n\n        const userIds = values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        const done = (result) => {\n            const {data, error} = result;\n            this.setState({saving: false});\n\n            if (!error) {\n                this.exitToChannel = '/' + this.props.currentTeamName + '/channels/' + data.name;\n                this.handleHide();\n            }\n        };\n\n        if (userIds.length === 1) {\n            actions.openDirectChannelToUserId(userIds[0]).then(done);\n        } else {\n            actions.openGroupChannelToUserIds(userIds).then(done);\n        }\n    };\n\n    addValue = (value) => {\n        if (Array.isArray(value)) {\n            this.addUsers(value);\n        } else if ('profiles' in value) {\n            this.addUsers(value.profiles);\n        } else {\n            const values = Object.assign([], this.state.values);\n\n            if (values.indexOf(value) === -1) {\n                values.push(value);\n            }\n\n            this.setState({values});\n        }\n    };\n\n    addUsers = (users) => {\n        const values = Object.assign([], this.state.values);\n        const existingUserIds = values.map((user) => user.id);\n        for (const user of users) {\n            if (existingUserIds.indexOf(user.id) !== -1) {\n                continue;\n            }\n            values.push(user);\n        }\n\n        this.setState({values});\n    };\n\n    getUserProfiles = (page) => {\n        const pageNum = page ? page + 1 : 0;\n        if (this.props.restrictDirectMessage === 'any') {\n            this.props.actions.getProfiles(pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        } else {\n            this.props.actions.getProfilesInTeam(this.props.currentTeamId, pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setUsersLoadingState(true);\n            this.getUserProfiles(page);\n        }\n    }\n\n    resetPaging = () => {\n        if (this.refs.multiselect) {\n            this.refs.multiselect.resetPaging();\n        }\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    renderAriaLabel = (option) => {\n        if (!option) {\n            return null;\n        }\n        return option.username;\n    }\n\n    renderOption = (option, isSelected, onAdd, onMouseMove) => {\n        if (option.type && option.type === 'G') {\n            return (\n                <GroupMessageOption\n                    key={option.id}\n                    channel={option}\n                    isSelected={isSelected}\n                    onAdd={onAdd}\n                />\n            );\n        }\n\n        const displayName = displayEntireNameForUser(option);\n\n        let modalName = displayName;\n        if (option.id === this.props.currentUserId) {\n            modalName = (\n                <FormattedMessage\n                    id='more_direct_channels.directchannel.you'\n                    defaultMessage='{displayname} (you)'\n                    values={{\n                        displayname: displayName,\n                    }}\n                />\n            );\n        } else if (option.delete_at) {\n            modalName = (\n                <FormattedMessage\n                    id='more_direct_channels.directchannel.deactivated'\n                    defaultMessage='{displayname} - Deactivated'\n                    values={{\n                        displayname: displayName,\n                    }}\n                />\n            );\n        }\n\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        const status = option.delete_at || option.is_bot ? null : this.props.statuses[option.id];\n        const email = option.is_bot ? null : option.email;\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <ProfilePicture\n\n                    //src={Client4.getProfilePictureUrl(option.id, option.last_picture_update)}\n                    src={option.avatar}\n                    status={status}\n                    size='lg'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {modalName}\n                        <BotBadge\n                            show={Boolean(option.is_bot)}\n                            className='badge-popoverlist'\n                        />\n                        <GuestBadge\n                            show={isGuest(option)}\n                            className='badge-popoverlist'\n                        />\n                    </div>\n                    <div className='more-modal__description'>\n                        {email}\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddUserIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.username;\n    }\n\n    handleSubmitImmediatelyOn = (value) => {\n        return value.id === this.props.currentUserId || Boolean(value.delete_at);\n    }\n\n    render() {\n        let note;\n        if (this.props.currentChannelMembers) {\n            if (this.state.values && this.state.values.length >= MAX_SELECTABLE_VALUES) {\n                note = (\n                    <FormattedMessage\n                        id='more_direct_channels.new_convo_note.full'\n                        defaultMessage={'You\\'ve reached the maximum number of people for this conversation. Consider creating a private channel instead.'}\n                    />\n                );\n            } else if (this.props.isExistingChannel) {\n                note = (\n                    <FormattedMessage\n                        id='more_direct_channels.new_convo_note'\n                        defaultMessage={'This will start a new conversation. If you\\'re adding a lot of people, consider creating a private channel instead.'}\n                    />\n                );\n            }\n        }\n\n        const buttonSubmitText = localizeMessage('multiselect.go', 'Go');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.loading', 'Loading..');\n\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.numPeopleRemaining'\n                defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '\n                values={{\n                    num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                }}\n            />\n        );\n\n        let users = this.props.users || [];\n\n        if (this.state.values.length) {\n            users = users.filter((user) => user.delete_at === 0 && user.id !== this.props.currentUserId);\n        } else {\n            const active = [];\n            const inactive = [];\n            for (const user of users) {\n                (user.delete_at ? inactive : active).push(user);\n            }\n            users = active.concat(inactive);\n        }\n        users = users.filter((user) => {\n            if (user.delete_at === 0) {\n                return true;\n            }\n            for (const channel of this.props.myDirectChannels) {\n                if (channel.name.indexOf(user.id) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        users.map((user) => {\n            return {label: user.username, value: user.id, ...user};\n        });\n\n        let groupChannels = this.props.groupChannels || [];\n        groupChannels = groupChannels.map((group) => {\n            return {label: group.display_name, value: group.id, ...group};\n        });\n\n        const options = [...users, ...groupChannels];\n        const body = (\n            <MultiSelect\n                key='moreDirectChannelsList'\n                ref='multiselect'\n                options={options}\n                optionRenderer={this.renderOption}\n                values={this.state.values}\n                valueRenderer={this.renderValue}\n                ariaLabelRenderer={this.renderAriaLabel}\n                perPage={USERS_PER_PAGE}\n                handlePageChange={this.handlePageChange}\n                handleInput={this.search}\n                handleDelete={this.handleDelete}\n                handleAdd={this.addValue}\n                handleSubmit={this.handleSubmit}\n                noteText={note}\n                maxValues={MAX_SELECTABLE_VALUES}\n                numRemainingText={numRemainingText}\n                buttonSubmitText={buttonSubmitText}\n                buttonSubmitLoadingText={buttonSubmitLoadingText}\n                submitImmediatelyOn={this.handleSubmitImmediatelyOn}\n                saving={this.state.saving}\n                loading={this.state.loadingUsers}\n                users={this.props.users}\n                totalCount={this.props.totalCount}\n                placeholderText={localizeMessage('multiselect.placeholder', 'Search and add members')}\n            />\n        );\n\n        if (this.props.bodyOnly) {\n            return body;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-direct-channels'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='moreDmModalLabel'\n                id='moreDmModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='moreDmModalLabel'\n                    >\n                        <FormattedMessage\n                            id='more_direct_channels.title'\n                            defaultMessage='Direct Messages'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    role='application'\n                >\n                    {body}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getProfiles,\n    getProfilesInTeam,\n    getStatusesByIds,\n    getTotalUsersStats,\n    searchProfiles,\n} from 'mattermost-redux/actions/users';\nimport {searchGroupChannels} from 'mattermost-redux/actions/channels';\nimport {\n    getCurrentUserId,\n    getProfiles as selectProfiles,\n    getProfilesInCurrentChannel,\n    getProfilesInCurrentTeam, searchProfiles as searchProfilesSelector,\n    searchProfilesInCurrentTeam,\n    getTotalUsersStats as getTotalUsersStatsSelector,\n} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelsWithUserProfiles, getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {sortByUsername, filterProfilesMatchingTerm} from 'mattermost-redux/utils/user_utils';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport {openDirectChannelToUserId, openGroupChannelToUserIds} from 'actions/channel_actions';\nimport {loadStatusesForProfilesList} from 'actions/status_actions.jsx';\nimport {loadProfilesForGroupChannels} from 'actions/user_actions';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport MoreDirectChannels from './more_direct_channels.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const currentUserId = getCurrentUserId(state);\n    let currentChannelMembers = [];\n    if (ownProps.isExistingChannel) {\n        currentChannelMembers = getProfilesInCurrentChannel(state);\n    }\n\n    const config = getConfig(state);\n    const restrictDirectMessage = config.RestrictDirectMessage;\n\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        if (restrictDirectMessage === 'any') {\n            users = searchProfilesSelector(state, searchTerm, false);\n        } else {\n            users = searchProfilesInCurrentTeam(state, searchTerm, false);\n        }\n    } else if (restrictDirectMessage === 'any') {\n        users = selectProfiles(state);\n    } else {\n        users = getProfilesInCurrentTeam(state);\n    }\n\n    const filteredGroupChannels = filterGroupChannels(getChannelsWithUserProfiles(state), searchTerm);\n    const myDirectChannels = filterDirectChannels(getAllChannels(state), currentUserId);\n\n    const team = getCurrentTeam(state);\n    const stats = getTotalUsersStatsSelector(state) || {total_users_count: 0};\n\n    return {\n        currentTeamId: team.id,\n        currentTeamName: team.name,\n        searchTerm,\n        users: users.sort(sortByUsername),\n        myDirectChannels,\n        groupChannels: filteredGroupChannels,\n        statuses: state.entities.users.statuses,\n        currentChannelMembers,\n        currentUserId,\n        restrictDirectMessage,\n        totalCount: stats.total_users_count,\n    };\n}\n\nconst filterGroupChannels = memoizeResult((channels, term) => {\n    return channels.filter((channel) => {\n        const matches = filterProfilesMatchingTerm(channel.profiles, term);\n        return matches.length > 0;\n    });\n});\n\nconst filterDirectChannels = memoizeResult((channels, userId) => {\n    return Object.values(channels).filter((channel) => {\n        if (channel.type !== 'D') {\n            return false;\n        }\n        if (channel.name && channel.name.indexOf(userId) < 0) {\n            return false;\n        }\n        return true;\n    });\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getProfiles,\n            getProfilesInTeam,\n            getStatusesByIds,\n            getTotalUsersStats,\n            loadStatusesForProfilesList,\n            loadProfilesForGroupChannels,\n            openDirectChannelToUserId,\n            openGroupChannelToUserIds,\n            searchProfiles,\n            searchGroupChannels,\n            setModalSearchTerm,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoreDirectChannels);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DraftIcon extends React.PureComponent {\n    render() {\n        return (\n            <span\n                {...this.props}\n                id='draftIcon'\n            >\n                <FormattedMessage\n                    id='generic_icons.channel.draft'\n                    defaultMessage='Channel Draft Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-pen'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {UserTypes} from 'mattermost-redux/action_types';\nimport {Client4} from 'mattermost-redux/client';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {\n    getChannelsInCurrentTeam,\n    getDirectAndGroupChannels,\n    getSortedUnreadChannelIds,\n    makeGetChannel,\n    getMyChannelMemberships,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getBool, getMyPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getLastPostPerChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentUserId,\n    getUserIdsInChannels,\n    getUser,\n    searchProfiles,\n} from 'mattermost-redux/selectors/entities/users';\nimport * as ChannelActions from 'mattermost-redux/actions/channels';\nimport {logError} from 'mattermost-redux/actions/errors';\n\nimport {\n    sortChannelsByTypeAndDisplayName,\n    isDirectChannelVisible,\n    isGroupChannelVisible,\n    isUnreadChannel,\n} from 'mattermost-redux/utils/channel_utils';\n\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport DraftIcon from 'components/widgets/icons/draft_icon';\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport {getPostDraft} from 'selectors/rhs';\nimport store from 'stores/redux_store.jsx';\nimport {Constants, StoragePrefixes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nconst getState = store.getState;\n\nclass SwitchChannelSuggestion extends Suggestion {\n    static get propTypes() {\n        return {\n            ...super.propTypes,\n            channelMember: PropTypes.object,\n            hasDraft: PropTypes.bool,\n        };\n    }\n\n    render() {\n        const {item, isSelection} = this.props;\n        const channel = item.channel;\n        const channelIsArchived = channel.delete_at && channel.delete_at !== 0;\n\n        const member = this.props.channelMember;\n        let badge = null;\n        if (member) {\n            if (member.notify_props && member.mention_count > 0) {\n                badge = <span className='badge'>{member.mention_count}</span>;\n            }\n        }\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const displayName = channel.display_name;\n        let icon = null;\n        if (channelIsArchived) {\n            icon = (\n                <ArchiveIcon className='icon icon__archive'/>\n            );\n        } else if (this.props.hasDraft) {\n            icon = (\n                <DraftIcon className='icon icon__draft icon--body'/>\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            icon = (\n                <GlobeIcon className='icon icon__globe icon--body'/>\n            );\n        } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n            icon = (\n                <LockIcon className='icon icon__lock icon--body'/>\n            );\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            icon = <div className='status status--group'>{'G'}</div>;\n        } else {\n            icon = (\n                <div className='pull-left'>\n                    <Avatar\n                        size='xs'\n                        url={Utils.imageURLForUser(channel.userId)}\n                    />\n                </div>\n            );\n        }\n\n        let tag = null;\n        if (channel.type === Constants.DM_CHANNEL) {\n            var teammate = Utils.getDirectTeammate(channel.id);\n            if (Utils.isEmptyObject(teammate)) {\n                teammate = getUser(getState(), channel.userId);\n            }\n            tag = (\n                <React.Fragment>\n                    <BotBadge\n                        show={Boolean(teammate && teammate.is_bot)}\n                        className='badge-autocomplete'\n                    />\n                    <GuestBadge\n                        show={Boolean(teammate && Utils.isGuest(teammate))}\n                        className='badge-autocomplete'\n                    />\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                onMouseMove={this.handleMouseMove}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                id={`switchChannel_${channel.name}`}\n                data-testid={channel.name}\n                {...Suggestion.baseProps}\n            >\n                {icon}\n                <span>{displayName}</span>\n                {tag}\n                {badge}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToPropsForSwitchChannelSuggestion(state, ownProps) {\n    const channelId = ownProps.item && ownProps.item.channel ? ownProps.item.channel.id : '';\n    const draft = channelId ? getPostDraft(state, StoragePrefixes.DRAFT, channelId) : false;\n\n    return {\n        channelMember: getMyChannelMemberships(state)[channelId],\n        hasDraft: draft && Boolean(draft.message.trim() || draft.fileInfos.length || draft.uploadsInProgress.length),\n    };\n}\n\nconst ConnectedSwitchChannelSuggestion = connect(mapStateToPropsForSwitchChannelSuggestion)(SwitchChannelSuggestion);\n\nlet prefix = '';\n\nfunction quickSwitchSorter(wrappedA, wrappedB) {\n    const aIsArchived = wrappedA.channel.delete_at ? wrappedA.channel.delete_at !== 0 : false;\n    const bIsArchived = wrappedB.channel.delete_at ? wrappedB.channel.delete_at !== 0 : false;\n    if (aIsArchived && !bIsArchived) {\n        return 1;\n    } else if (!aIsArchived && bIsArchived) {\n        return -1;\n    } else if (wrappedA.type === Constants.MENTION_CHANNELS && wrappedB.type === Constants.MENTION_MORE_CHANNELS) {\n        return -1;\n    } else if (wrappedB.type === Constants.MENTION_CHANNELS && wrappedA.type === Constants.MENTION_MORE_CHANNELS) {\n        return 1;\n    }\n\n    if (wrappedA.deactivated && !wrappedB.deactivated) {\n        return 1;\n    } else if (wrappedB.deactivated && !wrappedA.deactivated) {\n        return -1;\n    }\n\n    const a = wrappedA.channel;\n    const b = wrappedB.channel;\n\n    let aDisplayName = a.display_name.toLowerCase();\n    let bDisplayName = b.display_name.toLowerCase();\n\n    if (a.type === Constants.DM_CHANNEL) {\n        aDisplayName = aDisplayName.substring(1);\n    }\n\n    if (b.type === Constants.DM_CHANNEL) {\n        bDisplayName = bDisplayName.substring(1);\n    }\n\n    const aStartsWith = aDisplayName.startsWith(prefix);\n    const bStartsWith = bDisplayName.startsWith(prefix);\n    if ((aStartsWith && bStartsWith) || (!aStartsWith && !bStartsWith)) {\n        //\n        // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n        //\n        return sortChannelsByTypeAndDisplayName('en', a, b);\n    } else if (aStartsWith) {\n        return -1;\n    }\n\n    return 1;\n}\n\nfunction makeChannelSearchFilter(channelPrefix) {\n    const channelPrefixLower = channelPrefix.toLowerCase();\n    const curState = getState();\n    const usersInChannels = getUserIdsInChannels(curState);\n    const userSearchStrings = {};\n\n    return (channel) => {\n        let searchString = channel.display_name;\n\n        if (channel.type === Constants.GM_CHANNEL || channel.type === Constants.DM_CHANNEL) {\n            const usersInChannel = usersInChannels[channel.id] || new Set([]);\n\n            // In case the channel is a DM and the profilesInChannel is not populated\n            if (!usersInChannel.size && channel.type === Constants.DM_CHANNEL) {\n                const userId = Utils.getUserIdFromChannelId(channel.name);\n                const user = getUser(curState, userId);\n                if (user) {\n                    usersInChannel.add(userId);\n                }\n            }\n\n            for (const userId of usersInChannel) {\n                let userString = userSearchStrings[userId];\n\n                if (!userString) {\n                    const user = getUser(curState, userId);\n                    if (!user) {\n                        continue;\n                    }\n                    const {nickname, username} = user;\n                    userString = `${nickname}${username}${Utils.getFullName(user)}`;\n                    userSearchStrings[userId] = userString;\n                }\n                searchString += userString;\n            }\n        }\n\n        return searchString.toLowerCase().includes(channelPrefixLower);\n    };\n}\n\nexport default class SwitchChannelProvider extends Provider {\n    handlePretextChanged(channelPrefix, resultsCallback) {\n        if (channelPrefix) {\n            prefix = channelPrefix;\n            this.startNewRequest(channelPrefix);\n\n            // Dispatch suggestions for local data\n            const channels = getChannelsInCurrentTeam(getState()).concat(getDirectAndGroupChannels(getState()));\n            const users = Object.assign([], searchProfiles(getState(), channelPrefix, false));\n            this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels, users, true);\n\n            // Fetch data from the server and dispatch\n            this.fetchUsersAndChannels(channelPrefix, resultsCallback);\n        } else {\n            this.formatUnreadChannelsAndDispatch(resultsCallback);\n        }\n\n        return true;\n    }\n\n    async fetchUsersAndChannels(channelPrefix, resultsCallback) {\n        const state = getState();\n        const teamId = getCurrentTeamId(state);\n        if (!teamId) {\n            return;\n        }\n\n        const config = getConfig(state);\n        let usersAsync;\n        if (config.RestrictDirectMessage === 'team') {\n            usersAsync = Client4.autocompleteUsers(channelPrefix, teamId, '');\n        } else {\n            usersAsync = Client4.autocompleteUsers(channelPrefix, '', '');\n        }\n\n        const channelsAsync = ChannelActions.searchChannels(teamId, channelPrefix)(store.dispatch, store.getState);\n\n        let usersFromServer = [];\n        let channelsFromServer = [];\n        try {\n            usersFromServer = await usersAsync;\n            const {data} = await channelsAsync;\n            channelsFromServer = data;\n        } catch (err) {\n            store.dispatch(logError(err));\n        }\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const users = Object.assign([], searchProfiles(state, channelPrefix, false)).concat(usersFromServer.users);\n        const currentUserId = getCurrentUserId(state);\n        store.dispatch({\n            type: UserTypes.RECEIVED_PROFILES_LIST,\n            data: users.filter((user) => user.id !== currentUserId),\n        });\n\n        const channels = getChannelsInCurrentTeam(state).concat(getDirectAndGroupChannels(state)).concat(channelsFromServer);\n        this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels, users);\n    }\n\n    userWrappedChannel(user, channel) {\n        let displayName = `@${user.username}`;\n\n        if ((user.first_name || user.last_name) && user.nickname) {\n            displayName += ` - ${Utils.getFullName(user)} (${user.nickname})`;\n        } else if (user.nickname) {\n            displayName += ` - (${user.nickname})`;\n        } else if (user.first_name || user.last_name) {\n            displayName += ` - ${Utils.getFullName(user)}`;\n        }\n\n        if (user.delete_at) {\n            displayName += ' - ' + Utils.localizeMessage('channel_switch_modal.deactivated', 'Deactivated');\n        }\n\n        return {\n            channel: {\n                display_name: displayName,\n                name: user.username,\n                id: channel ? channel.id : user.id,\n                userId: user.id,\n                update_at: user.update_at,\n                type: Constants.DM_CHANNEL,\n                last_picture_update: user.last_picture_update || 0,\n            },\n            name: user.username,\n            deactivated: user.delete_at,\n        };\n    }\n\n    formatChannelsAndDispatch(channelPrefix, resultsCallback, allChannels, users, skipNotInChannel = false) {\n        const channels = [];\n\n        const members = getMyChannelMemberships(getState());\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const completedChannels = {};\n\n        const channelFilter = makeChannelSearchFilter(channelPrefix);\n\n        const state = getState();\n        const config = getConfig(state);\n        const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n        for (const id of Object.keys(allChannels)) {\n            const channel = allChannels[id];\n\n            if (completedChannels[channel.id]) {\n                continue;\n            }\n\n            if (channelFilter(channel)) {\n                const newChannel = Object.assign({}, channel);\n                const channelIsArchived = channel.delete_at !== 0;\n\n                let wrappedChannel = {channel: newChannel, name: newChannel.name, deactivated: false};\n                if (!viewArchivedChannels && channelIsArchived) {\n                    continue;\n                } else if (channelIsArchived && members[channel.id]) {\n                    wrappedChannel.type = Constants.ARCHIVED_CHANNEL;\n                } else if (channelIsArchived && !members[channel.id]) {\n                    continue;\n                } else if (newChannel.type === Constants.GM_CHANNEL) {\n                    newChannel.name = newChannel.display_name;\n                    wrappedChannel.name = newChannel.name;\n                    const isGMVisible = isGroupChannelVisible(config, getMyPreferences(state), channel, getLastPostPerChannel(state)[channel.id], isUnreadChannel(getMyChannelMemberships(state), channel));\n                    if (isGMVisible) {\n                        wrappedChannel.type = Constants.MENTION_CHANNELS;\n                    } else {\n                        wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                        if (skipNotInChannel) {\n                            continue;\n                        }\n                    }\n                } else if (newChannel.type === Constants.DM_CHANNEL) {\n                    const userId = Utils.getUserIdFromChannelId(newChannel.name);\n                    const user = users.find((u) => u.id === userId);\n\n                    if (user) {\n                        completedChannels[user.id] = true;\n                        wrappedChannel = this.userWrappedChannel(\n                            user,\n                            newChannel\n                        );\n                        const isDMVisible = isDirectChannelVisible(user.id, config, getMyPreferences(state), channel, getLastPostPerChannel(state)[channel.id], isUnreadChannel(getMyChannelMemberships(state), channel));\n                        if (isDMVisible) {\n                            wrappedChannel.type = Constants.MENTION_CHANNELS;\n                        } else {\n                            wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                            if (skipNotInChannel) {\n                                continue;\n                            }\n                        }\n                    } else {\n                        continue;\n                    }\n                } else if (members[channel.id]) {\n                    wrappedChannel.type = Constants.MENTION_CHANNELS;\n                } else {\n                    wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                    if (skipNotInChannel || !newChannel.display_name.toLowerCase().startsWith(channelPrefix)) {\n                        continue;\n                    }\n                }\n\n                completedChannels[channel.id] = true;\n                channels.push(wrappedChannel);\n            }\n        }\n\n        for (let i = 0; i < users.length; i++) {\n            const user = users[i];\n\n            if (completedChannels[user.id]) {\n                continue;\n            }\n\n            const isDMVisible = getBool(getState(), Preferences.CATEGORY_DIRECT_CHANNEL_SHOW, user.id, false);\n\n            const wrappedChannel = this.userWrappedChannel(user);\n\n            if (isDMVisible) {\n                wrappedChannel.type = Constants.MENTION_CHANNELS;\n            } else {\n                wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                if (skipNotInChannel) {\n                    continue;\n                }\n            }\n\n            completedChannels[user.id] = true;\n            channels.push(wrappedChannel);\n        }\n\n        const channelNames = channels.\n            sort(quickSwitchSorter).\n            map((wrappedChannel) => wrappedChannel.channel.name);\n\n        if (skipNotInChannel) {\n            channels.push({\n                type: Constants.MENTION_MORE_CHANNELS,\n                loading: true,\n            });\n        }\n\n        resultsCallback({\n            matchedPretext: channelPrefix,\n            terms: channelNames,\n            items: channels,\n            component: ConnectedSwitchChannelSuggestion,\n        });\n    }\n\n    formatUnreadChannelsAndDispatch(resultsCallback) {\n        const getChannel = makeGetChannel();\n\n        const unreadChannelIds = getSortedUnreadChannelIds(getState(), false);\n\n        const channels = [];\n        for (let i = 0; i < unreadChannelIds.length; i++) {\n            const channel = getChannel(getState(), {id: unreadChannelIds[i]}) || {};\n\n            let wrappedChannel = {channel, name: channel.name, deactivated: false};\n            if (channel.type === Constants.GM_CHANNEL) {\n                wrappedChannel.name = channel.display_name;\n            } else if (channel.type === Constants.DM_CHANNEL) {\n                const user = getUser(getState(), Utils.getUserIdFromChannelId(channel.name));\n\n                if (!user) {\n                    continue;\n                }\n\n                wrappedChannel = this.userWrappedChannel(\n                    user,\n                    channel\n                );\n            }\n            wrappedChannel.type = Constants.MENTION_UNREAD_CHANNELS;\n            channels.push(wrappedChannel);\n        }\n\n        const channelNames = channels.map((wrappedChannel) => wrappedChannel.channel.name);\n\n        resultsCallback({\n            matchedPretext: '',\n            terms: channelNames,\n            items: channels,\n            component: ConnectedSwitchChannelSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport * as Selectors from 'mattermost-redux/selectors/entities/teams';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport store from 'stores/redux_store.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nconst getState = store.getState;\n\nclass SwitchTeamSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                onMouseMove={this.handleMouseMove}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                <div className='status'>\n                    <FormattedMessage\n                        id='general_tab.teamIcon'\n                        defaultMessage='Team Icon'\n                    >\n                        {(title) => (\n                            <i\n                                className='fa fa-group'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                </div>\n                {item.display_name}\n            </div>\n        );\n    }\n}\n\nlet prefix = '';\n\nfunction quickSwitchSorter(a, b) {\n    const aDisplayName = a.display_name.toLowerCase();\n    const bDisplayName = b.display_name.toLowerCase();\n    const aStartsWith = aDisplayName.startsWith(prefix);\n    const bStartsWith = bDisplayName.startsWith(prefix);\n\n    if (aStartsWith && bStartsWith) {\n        const locale = getCurrentLocale(getState());\n\n        if (aDisplayName !== bDisplayName) {\n            return aDisplayName.localeCompare(bDisplayName, locale, {numeric: true});\n        }\n\n        return a.name.localeCompare(b.name, locale, {numeric: true});\n    } else if (aStartsWith) {\n        return -1;\n    }\n\n    return 1;\n}\n\nexport default class SwitchTeamProvider extends Provider {\n    handlePretextChanged(teamPrefix, resultsCallback) {\n        if (teamPrefix) {\n            prefix = teamPrefix;\n            this.startNewRequest(teamPrefix);\n\n            const allTeams = Selectors.getMyTeams(getState());\n\n            const teams = allTeams.filter((team) => {\n                return team.display_name.toLowerCase().indexOf(teamPrefix) !== -1 ||\n                    team.name.indexOf(teamPrefix) !== -1;\n            });\n\n            const teamNames = teams.\n                sort(quickSwitchSorter).\n                map((team) => team.name);\n\n            resultsCallback({\n                matchedPretext: teamPrefix,\n                terms: teamNames,\n                items: teams,\n                component: SwitchTeamSuggestion,\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport * as UserAgent from 'utils/user_agent';\nimport {t} from 'utils/i18n';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport SwitchChannelProvider from 'components/suggestion/switch_channel_provider.jsx';\nimport SwitchTeamProvider from 'components/suggestion/switch_team_provider.jsx';\n\nconst CHANNEL_MODE = 'channel';\nconst TEAM_MODE = 'team';\n\nexport default class QuickSwitchModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The function called to hide the modal\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Set to show team switcher\n         */\n        showTeamSwitcher: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            joinChannelById: PropTypes.func.isRequired,\n            switchToChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.channelProviders = [new SwitchChannelProvider()];\n        this.teamProviders = [new SwitchTeamProvider()];\n\n        this.switchBox = null;\n\n        this.state = {\n            text: '',\n            mode: CHANNEL_MODE,\n        };\n    }\n\n    focusTextbox = () => {\n        if (this.switchBox == null) {\n            return;\n        }\n\n        const textbox = this.switchBox.getTextbox();\n        if (document.activeElement !== textbox) {\n            textbox.focus();\n            Utils.placeCaretAtEnd(textbox);\n        }\n    };\n\n    setSwitchBoxRef = (input) => {\n        this.switchBox = input;\n        this.focusTextbox();\n    };\n\n    onShow = () => {\n        this.setState({\n            text: '',\n        });\n    };\n\n    onHide = () => {\n        this.focusPostTextbox();\n        this.setState({\n            text: '',\n        });\n        this.props.onHide();\n    };\n\n    focusPostTextbox = () => {\n        if (!UserAgent.isMobile()) {\n            setTimeout(() => {\n                const textbox = document.querySelector('#post_textbox');\n                if (textbox) {\n                    textbox.focus();\n                }\n            });\n        }\n    };\n\n    onChange = (e) => {\n        this.setState({text: e.target.value});\n    };\n\n    handleKeyDown = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.TAB)) {\n            e.preventDefault();\n            this.switchMode();\n        }\n    };\n\n    handleSubmit = async (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        if (this.state.mode === CHANNEL_MODE) {\n            const {joinChannelById, switchToChannel} = this.props.actions;\n            const selectedChannel = selected.channel;\n\n            if (selected.type === Constants.MENTION_MORE_CHANNELS && selectedChannel.type === Constants.OPEN_CHANNEL) {\n                await joinChannelById(selectedChannel.id);\n            }\n            switchToChannel(selectedChannel).then((result) => {\n                if (result.data) {\n                    this.onHide();\n                }\n            });\n        } else {\n            browserHistory.push('/' + selected.name);\n            this.onHide();\n        }\n    };\n\n    enableChannelProvider = () => {\n        this.channelProviders[0].disableDispatches = false;\n        this.teamProviders[0].disableDispatches = true;\n    };\n\n    enableTeamProvider = () => {\n        this.teamProviders[0].disableDispatches = false;\n        this.channelProviders[0].disableDispatches = true;\n    };\n\n    switchMode = () => {\n        if (this.state.mode === CHANNEL_MODE && this.props.showTeamSwitcher) {\n            this.enableTeamProvider();\n            this.setState({mode: TEAM_MODE});\n        } else if (this.state.mode === TEAM_MODE) {\n            this.enableChannelProvider();\n            this.setState({mode: CHANNEL_MODE});\n        }\n    };\n\n    handleOnClick = (e) => {\n        e.preventDefault();\n        const mode = e.currentTarget.getAttribute('data-mode');\n        this.enableChannelProvider();\n        this.setState({mode});\n        this.focusTextbox();\n    }\n\n    render() {\n        let providers = this.channelProviders;\n        let header;\n        let renderDividers = true;\n\n        let channelShortcut = t('quick_switch_modal.channelsShortcut.windows');\n        let defaultChannelShortcut = 'CTRL+K';\n        if (Utils.isMac()) {\n            channelShortcut = t('quick_switch_modal.channelsShortcut.mac');\n            defaultChannelShortcut = 'CMD+K';\n        }\n\n        let teamShortcut = t('quick_switch_modal.teamsShortcut.windows');\n        let defaultTeamShortcut = 'CTRL+ALT+K';\n        if (Utils.isMac()) {\n            teamShortcut = t('quick_switch_modal.teamsShortcut.mac');\n            defaultTeamShortcut = 'CMD+ALT+K';\n        }\n\n        if (this.props.showTeamSwitcher) {\n            let channelsActiveClass = '';\n            let teamsActiveClass = '';\n            if (this.state.mode === TEAM_MODE) {\n                providers = this.teamProviders;\n                renderDividers = false;\n                teamsActiveClass = 'active';\n            } else {\n                channelsActiveClass = 'active';\n            }\n\n            header = (\n                <div className='nav nav-tabs'>\n                    <li className={channelsActiveClass}>\n                        <a\n                            data-mode={'channel'}\n                            href='#'\n                            onClick={this.handleOnClick}\n                        >\n                            <FormattedMessage\n                                id='quick_switch_modal.channels'\n                                defaultMessage='Channels'\n                            />\n                            <span className='small'>\n                                <FormattedMessage\n                                    id={channelShortcut}\n                                    defaultMessage={defaultChannelShortcut}\n                                />\n                            </span>\n                        </a>\n                    </li>\n                    <li className={teamsActiveClass}>\n                        <a\n                            data-mode={'team'}\n                            href='#'\n                            onClick={this.handleOnClick}\n                        >\n                            <FormattedMessage\n                                id='quick_switch_modal.teams'\n                                defaultMessage='Teams'\n                            />\n                            <span className='small'>\n                                <FormattedMessage\n                                    id={teamShortcut}\n                                    defaultMessage={defaultTeamShortcut}\n                                />\n                            </span>\n                        </a>\n                    </li>\n                </div>\n            );\n        }\n\n        let help;\n        if (Utils.isMobile()) {\n            help = (\n                <FormattedMessage\n                    id='quick_switch_modal.help_mobile'\n                    defaultMessage='Type to find a channel.'\n                />\n            );\n        } else if (this.props.showTeamSwitcher) {\n            help = (\n                <FormattedMessage\n                    id='quick_switch_modal.help'\n                    defaultMessage='Start typing then use TAB to toggle channels/teams, ↑↓ to browse, ↵ to select, and ESC to dismiss.'\n                />\n            );\n        } else {\n            help = (\n                <FormattedMessage\n                    id='quick_switch_modal.help_no_team'\n                    defaultMessage='Type to find a channel. Use ↑↓ to browse, ↵ to select, ESC to dismiss.'\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal channel-switch__modal'\n                ref='modal'\n                show={true}\n                onHide={this.onHide}\n                enforceFocus={false}\n                restoreFocus={false}\n                role='dialog'\n                aria-labelledby='quickSwitchModalLabel'\n                animation={false}\n            >\n                <Modal.Header\n                    id='quickSwitchModalLabel'\n                    closeButton={true}\n                />\n                <Modal.Body>\n                    {header}\n                    <div\n                        id='quickSwitchHint'\n                        className='modal__hint'\n                    >\n                        {help}\n                    </div>\n                    <div className='channel-switch__suggestion-box'>\n                        <SuggestionBox\n                            id='quickSwitchInput'\n                            ref={this.setSwitchBoxRef}\n                            className='form-control focused'\n                            onChange={this.onChange}\n                            value={this.state.text}\n                            onKeyDown={this.handleKeyDown}\n                            onItemSelected={this.handleSubmit}\n                            listComponent={SuggestionList}\n                            maxLength='64'\n                            providers={providers}\n                            listStyle='bottom'\n                            completeOnTab={false}\n                            spellCheck='false'\n                            renderDividers={renderDividers}\n                            delayInputUpdate={true}\n                            openWhenEmpty={true}\n                        />\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {joinChannelById, switchToChannel} from 'actions/views/channel';\n\nimport QuickSwitchModal from './quick_switch_modal.jsx';\n\nfunction mapStateToProps() {\n    return {\n        showTeamSwitcher: false,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            joinChannelById,\n            switchToChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickSwitchModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport Constants from 'utils/constants.jsx';\nimport {getShortenedURL} from 'utils/url';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nexport default class NewChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set whether to show the modal or not\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * Id of the active team\n         */\n        currentTeamId: PropTypes.string.isRequired,\n\n        /**\n         * The type of channel to create, 'O' or 'P'\n         */\n        channelType: PropTypes.string.isRequired,\n\n        /**\n         * The data needed to create the channel\n         */\n        channelData: PropTypes.object.isRequired,\n\n        /**\n         * Set to force form submission on CTRL/CMD + ENTER instead of ENTER\n         */\n        ctrlSend: PropTypes.bool,\n\n        /**\n         * Server error from failed channel creation\n         */\n        serverError: PropTypes.node,\n\n        /**\n         * Function used to submit the channel\n         */\n        onSubmitChannel: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when modal is dimissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when modal has exited\n         */\n        onModalExited: PropTypes.func,\n\n        /**\n         * Function to call to switch channel type\n         */\n        onTypeSwitched: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when edit URL button is pressed\n         */\n        onChangeURLPressed: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when channel data is modified\n         */\n        onDataChanged: PropTypes.func.isRequired,\n\n        /**\n         * Permission to create public channel\n         */\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Permission to create private channel\n         */\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n    }\n\n    static getDerivedStateFromProps(props) {\n        if (props.show === false) {\n            return {displayNameError: ''};\n        }\n\n        return null;\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            displayNameError: '',\n        };\n\n        this.channelHeaderInput = React.createRef();\n        this.channelPurposeInput = React.createRef();\n        this.displayNameInput = React.createRef();\n    }\n\n    componentDidMount() {\n        // ???\n        if (UserAgent.isInternetExplorer() || UserAgent.isEdge()) {\n            $('body').addClass('browser--ie');\n        }\n    }\n\n    onEnterKeyDown = (e) => {\n        const enterPressed = Utils.isKeyPressed(e, Constants.KeyCodes.ENTER);\n        const {ctrlSend} = this.props;\n\n        // Enter pressed alone without required cmd or ctrl key\n        if (ctrlSend && enterPressed && !e.ctrlKey) {\n            e.preventDefault();\n        } else if ((ctrlSend && enterPressed && e.ctrlKey) || (!ctrlSend && enterPressed && !e.shiftKey && !e.altKey)) {\n            this.handleSubmit(e);\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const displayName = this.displayNameInput.current.value.trim();\n        if (displayName.length < Constants.MIN_CHANNELNAME_LENGTH) {\n            this.setState({displayNameError: true});\n            return;\n        }\n\n        this.props.onSubmitChannel();\n    }\n\n    handleChange = () => {\n        const newData = {\n            displayName: this.displayNameInput.current.value,\n            header: this.channelHeaderInput.current.value,\n            purpose: this.channelPurposeInput.current.value,\n        };\n        this.props.onDataChanged(newData);\n    }\n\n    handleOnURLChange = (e) => {\n        e.preventDefault();\n        if (this.props.onChangeURLPressed) {\n            this.props.onChangeURLPressed();\n        }\n    }\n\n    handlePublicTypeSelect = () => {\n        this.props.onTypeSwitched('O');\n    }\n\n    handlePrivateTypeSelect = () => {\n        this.props.onTypeSwitched('P');\n    }\n\n    render() {\n        const {canCreatePublicChannel, canCreatePrivateChannel} = this.props;\n\n        const enableTypeSelection = canCreatePublicChannel && canCreatePrivateChannel;\n        var displayNameError = null;\n        var serverError = null;\n        var displayNameClass = 'form-group';\n\n        if (this.state.displayNameError) {\n            displayNameError = (\n                <p className='input__help error'>\n                    <FormattedMessage\n                        id='channel_modal.displayNameError'\n                        defaultMessage='Channel name must be 2 or more characters'\n                    />\n                    {this.state.displayNameError}\n                </p>\n            );\n            displayNameClass += ' has-error';\n        }\n\n        if (this.props.serverError) {\n            serverError = (\n                <div className='form-group has-error'>\n                    <div className='col-sm-12'>\n                        <p\n                            id='createChannelError'\n                            className='input__help error'\n                        >\n                            {this.props.serverError}\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n\n        const publicChannelDesc = (\n            <div className='flex-parent'>\n                <GlobeIcon className='icon icon__globe icon--body type-icon'/>\n                <FormattedMessage\n                    id='channel_modal.publicName'\n                    defaultMessage='Public'\n                />\n                <FormattedMessage\n                    id='channel_modal.publicHint'\n                    defaultMessage=' - Anyone can join this channel.'\n                />\n            </div>\n        );\n\n        const privateChannelDesc = (\n            <div className='flex-parent'>\n                <LockIcon className='icon icon__lock icon--body type-icon'/>\n                <FormattedMessage\n                    id='channel_modal.privateName'\n                    defaultMessage='Private'\n                />\n                <FormattedMessage\n                    id='channel_modal.privateHint'\n                    defaultMessage=' - Only invited members can join this channel.'\n                />\n            </div>\n        );\n\n        let typeOptions = null;\n        if (enableTypeSelection) {\n            typeOptions = (\n                <fieldset\n                    key='channelType'\n                    className='multi-select__radio'\n                >\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='public'\n                                type='radio'\n                                name='channelType'\n                                checked={this.props.channelType === 'O'}\n                                onChange={this.handlePublicTypeSelect}\n                                aria-labelledby='channelModalTypeLabel'\n                            />\n                            {publicChannelDesc}\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='private'\n                                type='radio'\n                                name='channelType'\n                                checked={this.props.channelType === 'P'}\n                                onChange={this.handlePrivateTypeSelect}\n                                aria-labelledby='channelModalTypeLabel'\n                            />\n                            {privateChannelDesc}\n                        </label>\n                    </div>\n                </fieldset>\n            );\n        } else {\n            typeOptions = (\n                <div className='type-container multi-select__radio'>\n                    <div className='radio'>\n                        {canCreatePublicChannel ? publicChannelDesc : null}\n                        {canCreatePrivateChannel ? privateChannelDesc : null}\n                    </div>\n                </div>\n            );\n        }\n\n        const prettyTeamURL = getShortenedURL();\n\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal new-channel__modal new-channel'\n                    show={this.props.show}\n                    bsSize='large'\n                    onHide={this.props.onModalDismissed}\n                    onExited={this.props.onModalExited}\n                    autoFocus={true}\n                    restoreFocus={true}\n                    role='dialog'\n                    aria-labelledby='newChannelModalLabel'\n                >\n                    <Modal.Header>\n                        <button\n                            type='button'\n                            className='close'\n                            onClick={this.props.onModalDismissed}\n                            aria-label='Close'\n                            title='Close'\n                        >\n                            <span aria-hidden='true'>{'×'}</span>\n                        </button>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='newChannelModalLabel'\n                        >\n                            <FormattedMessage\n                                id='channel_modal.modalTitle'\n                                defaultMessage='New Channel'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <div className='form-group'>\n                                <label\n                                    className='col-sm-3 form__label control-label'\n                                    id='channelModalTypeLabel'\n                                >\n                                    <FormattedMessage\n                                        id='channel_modal.type'\n                                        defaultMessage='Type'\n                                    />\n                                </label>\n                                <div className='col-sm-9'>\n                                    {typeOptions}\n                                </div>\n                            </div>\n                            <div className={displayNameClass}>\n                                <label\n                                    className='col-sm-3 form__label control-label'\n                                    htmlFor='newChannelName'\n                                >\n                                    <FormattedMessage\n                                        id='channel_modal.name'\n                                        defaultMessage='Name'\n                                    />\n                                </label>\n                                <div className='col-sm-9'>\n                                    <LocalizedInput\n                                        id='newChannelName'\n                                        onChange={this.handleChange}\n                                        type='text'\n                                        ref={this.displayNameInput}\n                                        className='form-control'\n                                        placeholder={{id: t('channel_modal.nameEx'), defaultMessage: 'E.g.: \"Bugs\", \"Marketing\"'}}\n                                        maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                        value={this.props.channelData.displayName}\n                                        autoFocus={true}\n                                        onKeyDown={this.onEnterKeyDown}\n                                    />\n                                    {displayNameError}\n                                </div>\n                            </div>\n                            <div className='form-group less'>\n                                <div className='col-sm-3'>\n                                    <label\n                                        className='form__label control-label'\n                                        htmlFor='newChannelHeader'\n                                    >\n                                        <FormattedMessage\n                                            id='channel_modal.header'\n                                            defaultMessage='Header'\n                                        />\n                                    </label>\n                                    <label className='form__label light'>\n                                        <FormattedMessage\n                                            id='channel_modal.optional'\n                                            defaultMessage='(optional)'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='col-sm-9'>\n                                    <textarea\n                                        id='newChannelHeader'\n                                        className='form-control no-resize'\n                                        ref={this.channelHeaderInput}\n                                        rows='4'\n                                        placeholder={Utils.localizeMessage('channel_modal.headerEx', 'E.g.: \"[Link Title](http://example.com)\"')}\n                                        maxLength='1024'\n                                        value={this.props.channelData.header}\n                                        onChange={this.handleChange}\n                                    />\n                                    <p className='input__help'>\n                                        <FormattedMessage\n                                            id='channel_modal.headerHelp'\n                                            defaultMessage='Set text that will appear in the header of the channel beside the channel name. For example, include frequently used links by typing [Link Title](http://example.com).'\n                                        />\n                                    </p>\n                                    {serverError}\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelNewChannel'\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.props.onModalDismissed}\n                                onBlur={() => document.getElementById('newChannelName').focus()}\n                            >\n                                <FormattedMessage\n                                    id='channel_modal.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitNewChannel'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='channel_modal.createNew'\n                                    defaultMessage='Create Channel'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport NewChannelModal from './new_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n        currentTeamId: getCurrentTeamId(state),\n    };\n}\n\nexport default connect(mapStateToProps)(NewChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport Constants from 'utils/constants';\nimport {getShortenedURL, cleanUpUrlable} from 'utils/url';\nimport {t} from 'utils/i18n';\n\nexport default class ChangeURLModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Set whether to show the modal or not\n        */\n        show: PropTypes.bool.isRequired,\n\n        /**\n        * Set to change the title of the modal\n        */\n        title: PropTypes.node,\n\n        /**\n        * Set to change the submit button text\n        */\n        submitButtonText: PropTypes.node,\n\n        /**\n        * Set to change the current URL\n        */\n        currentURL: PropTypes.string,\n\n        /**\n        * Set to the current team URL\n        */\n        currentTeamURL: PropTypes.string.isRequired,\n\n        /**\n        * Server error from failed channel creation\n        */\n        serverError: PropTypes.node,\n\n        /**\n         * Function to call when modal is submitted\n         */\n        onModalSubmit: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when modal is exited\n         */\n        onModalExited: PropTypes.func,\n\n        /**\n         * Function to call when modal is dimissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n    }\n\n    static defaultProps = {\n        show: false,\n        title: 'Change URL',\n        submitButtonText: 'Save',\n        currentURL: '',\n        serverError: null,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentURL: props.currentURL,\n            urlError: '',\n            userEdit: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // This check prevents the url being deleted when we re-render\n        // because of user status check\n        if (!state.userEdit) {\n            return {currentURL: props.currentURL};\n        }\n\n        return null;\n    }\n\n    onURLChanged = (e) => {\n        const url = e.target.value.trim();\n        this.setState({currentURL: url.replace(/[^A-Za-z0-9-_]/g, '').toLowerCase(), userEdit: true});\n    }\n\n    formattedError = (key, id, message) => {\n        return (<span key={key}>\n            <FormattedMessage\n                id={id}\n                defaultMessage={message}\n            />\n            <br/>\n        </span>);\n    }\n\n    getURLError = (url) => {\n        let error = []; //eslint-disable-line prefer-const\n\n        if (url.length < 2) {\n            error.push(\n                this.formattedError('error1', t('change_url.longer'), 'URL must be two or more characters.')\n            );\n        }\n        if (url.charAt(0) === '-' || url.charAt(0) === '_') {\n            error.push(\n                this.formattedError('error2', t('change_url.startWithLetter'), 'URL must start with a letter or number.')\n            );\n        }\n        if (url.length > 1 && (url.charAt(url.length - 1) === '-' || url.charAt(url.length - 1) === '_')) {\n            error.push(\n                this.formattedError('error3', t('change_url.endWithLetter'), 'URL must end with a letter or number.')\n            );\n        }\n        if (url.indexOf('__') > -1) {\n            error.push(\n                this.formattedError('error4', t('change_url.noUnderscore'), 'URL can not contain two underscores in a row.')\n            );\n        }\n\n        // In case of error we don't detect\n        if (error.length === 0) {\n            error.push(\n                this.formattedError('errorlast', t('change_url.invalidUrl'), 'Invalid URL')\n            );\n        }\n        return error;\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const url = this.refs.urlinput.value;\n        const cleanedURL = cleanUpUrlable(url);\n        if (cleanedURL !== url || url.length < 2 || url.indexOf('__') > -1) {\n            this.setState({urlError: this.getURLError(url)});\n            return;\n        }\n        this.setState({urlError: '', userEdit: false});\n        this.props.onModalSubmit(url);\n    }\n\n    onCancel = () => {\n        this.setState({urlError: '', userEdit: false});\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        let urlClass = 'input-group input-group--limit';\n        let error = null;\n\n        if (this.state.urlError) {\n            urlClass += ' has-error';\n        }\n\n        if (this.props.serverError || this.state.urlError) {\n            error = (\n                <div className='has-error'>\n                    <p className='input__help error'>\n                        {this.state.urlError || this.props.serverError}\n                    </p>\n                </div>\n            );\n        }\n\n        const fullURL = this.props.currentTeamURL + '/channels';\n        const shortURL = getShortenedURL(fullURL);\n        const urlTooltip = (\n            <Tooltip id='urlTooltip'>{fullURL}</Tooltip>\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.onCancel}\n                onExited={this.props.onModalExited}\n                role='dialog'\n                aria-labelledby='changeUrlModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='changeUrlModalLabel'\n                    >\n                        {this.props.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='modal-intro'>\n                            <FormattedMessage\n                                id='channel_flow.changeUrlDescription'\n                                defaultMessage='Some characters are now allowed in URLs and may be removed.'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-sm-3 form__label control-label'>\n                                <FormattedMessage\n                                    id='change_url.urlLabel'\n                                    defaultMessage='Channel URL'\n                                />\n                            </label>\n                            <div className='col-sm-9'>\n                                <div className={urlClass}>\n                                    <OverlayTrigger\n                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                        placement='top'\n                                        overlay={urlTooltip}\n                                    >\n                                        <span className='input-group-addon'>{shortURL}</span>\n                                    </OverlayTrigger>\n                                    <input\n                                        type='text'\n                                        ref='urlinput'\n                                        className='form-control'\n                                        maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                        onChange={this.onURLChanged}\n                                        value={this.state.currentURL}\n                                        autoFocus={true}\n                                    />\n                                </div>\n                                {error}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.onCancel}\n                        >\n                            <FormattedMessage\n                                id='change_url.close'\n                                defaultMessage='Close'\n                            />\n                        </button>\n                        <button\n                            onClick={this.onSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            {this.props.submitButtonText}\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSiteURL} from 'utils/url';\n\nimport ChangeURLModal from './change_url_modal';\n\nfunction mapStateToProps(state) {\n    const currentTeam = getCurrentTeam(state);\n    const currentTeamURL = `${getSiteURL()}/${currentTeam.name}`;\n    return {\n        currentTeamURL,\n    };\n}\n\nexport default connect(mapStateToProps)(ChangeURLModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {cleanUpUrlable} from 'utils/url';\nimport * as Utils from 'utils/utils';\nimport Constants from 'utils/constants';\nimport NewChannelModal from 'components/new_channel_modal';\nimport ChangeURLModal from 'components/change_url_modal';\n\nexport const SHOW_NEW_CHANNEL = 1;\nexport const SHOW_EDIT_URL = 2;\nexport const SHOW_EDIT_URL_THEN_COMPLETE = 3;\n\nexport function getChannelTypeFromProps(props) {\n    let channelType = props.channelType || Constants.OPEN_CHANNEL;\n    if (!props.canCreatePublicChannel && channelType === Constants.OPEN_CHANNEL) {\n        channelType = Constants.PRIVATE_CHANNEL;\n    }\n    if (!props.canCreatePrivateChannel && channelType === Constants.PRIVATE_CHANNEL) {\n        channelType = Constants.OPEN_CHANNEL;\n    }\n    return channelType;\n}\n\nexport default class NewChannelFlow extends React.Component {\n    static propTypes = {\n\n        /**\n        * Set whether to show the modal or not\n        */\n        show: PropTypes.bool.isRequired,\n\n        /**\n        * Set to Constants.OPEN_CHANNEL or Constants.PRIVATE_CHANNEL depending on which modal we should show first\n        */\n        channelType: PropTypes.string.isRequired,\n\n        /**\n        * Function to call when modal is dimissed\n        */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        /**\n        * The current team ID\n        */\n        currentTeamId: PropTypes.string.isRequired,\n\n        /**\n         * Permission to create public channel\n         */\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Permission to create private channel\n         */\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            createChannel: PropTypes.func.isRequired,\n            switchToChannel: PropTypes.func.isRequired,\n        }),\n    };\n\n    static defaultProps = {\n        show: false,\n        channelType: Constants.OPEN_CHANNEL,\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        // If we are being shown, grab channel type from props and clear\n        if (props.show === true && state.show === false) {\n            return {\n                serverError: '',\n                channelType: getChannelTypeFromProps(props),\n                flowState: SHOW_NEW_CHANNEL,\n                channelDisplayName: '',\n                channelName: '',\n                channelPurpose: '',\n                channelHeader: '',\n                nameModified: false,\n                show: props.show,\n            };\n        }\n\n        return {show: props.show};\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: '',\n            channelType: getChannelTypeFromProps(props),\n            flowState: SHOW_NEW_CHANNEL,\n            channelDisplayName: '',\n            channelName: '',\n            channelPurpose: '',\n            channelHeader: '',\n            nameModified: false,\n            show: props.show,\n        };\n    }\n\n    onSubmit = () => {\n        if (!this.state.channelDisplayName) {\n            this.setState({serverError: Utils.localizeMessage('channel_flow.invalidName', 'Invalid Channel Name')});\n            return;\n        }\n\n        if (this.state.channelName.length < 2) {\n            this.setState({flowState: SHOW_EDIT_URL_THEN_COMPLETE});\n            return;\n        }\n\n        const {actions, currentTeamId} = this.props;\n        const channel = {\n            team_id: currentTeamId,\n            name: this.state.channelName,\n            display_name: this.state.channelDisplayName,\n            purpose: this.state.channelPurpose,\n            header: this.state.channelHeader,\n            type: this.state.channelType,\n        };\n\n        actions.createChannel(channel).then((result) => {\n            if (result.error) {\n                this.onCreateChannelError(result.error);\n                return;\n            }\n\n            this.props.onModalDismissed();\n            actions.switchToChannel(result.data);\n        });\n    };\n\n    onCreateChannelError = (err) => {\n        if (err.id === 'model.channel.is_valid.2_or_more.app_error') {\n            this.setState({\n                flowState: SHOW_EDIT_URL_THEN_COMPLETE,\n                serverError: (\n                    <FormattedMessage\n                        id='channel_flow.handleTooShort'\n                        defaultMessage='Channel URL must be 2 or more lowercase alphanumeric characters'\n                    />\n                ),\n            });\n        } else if (err.id === 'store.sql_channel.update.exists.app_error') {\n            this.setState({serverError: Utils.localizeMessage('channel_flow.alreadyExist', 'A channel with that URL already exists')});\n        } else {\n            this.setState({serverError: err.message});\n        }\n    };\n\n    typeSwitched = (channelType) => {\n        this.setState({\n            channelType,\n            serverError: '',\n        });\n    };\n\n    urlChangeRequested = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState({flowState: SHOW_EDIT_URL});\n    };\n\n    urlChangeSubmitted = (newURL) => {\n        if (this.state.flowState === SHOW_EDIT_URL_THEN_COMPLETE) {\n            this.setState({channelName: newURL, nameModified: true}, this.onSubmit);\n        } else {\n            this.setState({flowState: SHOW_NEW_CHANNEL, serverError: null, channelName: newURL, nameModified: true});\n        }\n    };\n\n    urlChangeDismissed = () => {\n        this.setState({flowState: SHOW_NEW_CHANNEL});\n    };\n\n    channelDataChanged = (data) => {\n        this.setState({\n            channelDisplayName: data.displayName,\n            channelPurpose: data.purpose,\n            channelHeader: data.header,\n        });\n        if (!this.state.nameModified) {\n            this.setState({channelName: cleanUpUrlable(data.displayName.trim())});\n        }\n    };\n\n    render() {\n        const channelData = {\n            name: this.state.channelName,\n            displayName: this.state.channelDisplayName,\n            purpose: this.state.channelPurpose,\n            header: this.state.channelHeader,\n        };\n\n        let showChannelModal = false;\n        let showChangeURLModal = false;\n\n        let changeURLTitle = '';\n        let changeURLSubmitButtonText = '';\n\n        // Only listen to flow state if we are being shown\n        if (this.props.show) {\n            switch (this.state.flowState) {\n            case SHOW_NEW_CHANNEL:\n                showChannelModal = true;\n                break;\n            case SHOW_EDIT_URL:\n                showChangeURLModal = true;\n                changeURLTitle = (\n                    <FormattedMessage\n                        id='channel_flow.changeUrlTitle'\n                        defaultMessage='Change Channel URL'\n                    />\n                );\n                changeURLSubmitButtonText = changeURLTitle;\n                break;\n            case SHOW_EDIT_URL_THEN_COMPLETE:\n                showChangeURLModal = true;\n                changeURLTitle = (\n                    <FormattedMessage\n                        id='channel_flow.set_url_title'\n                        defaultMessage='Set Channel URL'\n                    />\n                );\n                changeURLSubmitButtonText = (\n                    <FormattedMessage\n                        id='channel_flow.create'\n                        defaultMessage='Create Channel'\n                    />\n                );\n                break;\n            }\n        }\n        return (\n            <span>\n                <NewChannelModal\n                    show={showChannelModal}\n                    channelType={this.state.channelType}\n                    canCreatePublicChannel={this.props.canCreatePublicChannel}\n                    canCreatePrivateChannel={this.props.canCreatePrivateChannel}\n                    channelData={channelData}\n                    serverError={this.state.serverError}\n                    onSubmitChannel={this.onSubmit}\n                    onModalDismissed={this.props.onModalDismissed}\n                    onTypeSwitched={this.typeSwitched}\n                    onChangeURLPressed={this.urlChangeRequested}\n                    onDataChanged={this.channelDataChanged}\n                />\n                <ChangeURLModal\n                    show={showChangeURLModal}\n                    title={changeURLTitle}\n                    submitButtonText={changeURLSubmitButtonText}\n                    currentURL={this.state.channelName}\n                    serverError={this.state.serverError}\n                    onModalSubmit={this.urlChangeSubmitted}\n                    onModalDismissed={this.urlChangeDismissed}\n                />\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {createChannel} from 'mattermost-redux/actions/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {switchToChannel} from 'actions/views/channel';\n\nimport NewChannelFlow from './new_channel_flow.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentTeamId: getCurrentTeamId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createChannel,\n            switchToChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewChannelFlow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class UnreadBelowIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.arrow.down'\n                    defaultMessage='Down Arrow Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            xmlns='http://www.w3.org/2000/svg'\n                            width='24px'\n                            height='24px'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M6 12l1.058-1.057 4.192 4.184V6h1.5v9.127l4.185-4.192L18 12l-6 6z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\n\nimport UnreadBelowIcon from 'components/widgets/icons/unread_below_icon';\n\ntype Props = {\n\n    /**\n     * Function to call when the indicator is clicked\n     */\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n\n    /**\n     * Set whether to show the indicator or not\n     */\n    show?: boolean;\n\n    /**\n     * The additional CSS class for the indicator\n     */\n    extraClass?: string;\n\n    /**\n     * The content of the indicator\n     */\n    content?: ReactNode;\n\n    /**\n     * The name of the indicator\n     */\n    name?: string;\n}\n\nexport default class UnreadChannelIndicator extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        show: false,\n        extraClass: '',\n        content: '',\n    };\n\n    public render(): JSX.Element {\n        let classes = 'nav-pills__unread-indicator ';\n        if (this.props.show) {\n            classes += 'nav-pills__unread-indicator--visible ';\n        }\n\n        return (\n            <div\n                id={'unreadIndicator' + this.props.name}\n                className={classes + this.props.extraClass}\n                onClick={this.props.onClick}\n            >\n                {this.props.content}\n                <UnreadBelowIcon className='icon icon__unread'/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserStatuses, ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport ResetStatusModal from 'components/reset_status_modal';\nimport StatusIcon from 'components/status_icon.jsx';\n\nimport Avatar from 'components/widgets/users/avatar';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nexport default class StatusDropdown extends React.Component {\n    static propTypes = {\n        style: PropTypes.object,\n        status: PropTypes.string,\n        userId: PropTypes.string.isRequired,\n        profilePicture: PropTypes.string,\n        autoResetPref: PropTypes.string,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n            setStatus: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        userId: '',\n        profilePicture: '',\n        status: UserStatuses.OFFLINE,\n    }\n\n    isUserOutOfOffice = () => {\n        return this.props.status === UserStatuses.OUT_OF_OFFICE;\n    }\n\n    setStatus = (status) => {\n        this.props.actions.setStatus({\n            user_id: this.props.userId,\n            status,\n        });\n    }\n\n    setOnline = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.ONLINE);\n    }\n\n    setOffline = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.OFFLINE);\n    }\n\n    setAway = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.AWAY);\n    }\n\n    setDnd = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.DND);\n    }\n\n    showStatusChangeConfirmation = (status) => {\n        const resetStatusModalData = {\n            ModalId: ModalIdentifiers.RESET_STATUS,\n            dialogType: ResetStatusModal,\n            dialogProps: {newStatus: status},\n        };\n\n        this.props.actions.openModal(resetStatusModalData);\n    };\n\n    renderProfilePicture = () => {\n        if (!this.props.profilePicture) {\n            return null;\n        }\n        return (\n            <Avatar\n                size='md'\n                url={this.props.profilePicture}\n            />\n        );\n    }\n\n    renderDropdownIcon = () => {\n        return (\n            <FormattedMessage\n                id='generic_icons.dropdown'\n                defaultMessage='Dropdown Icon'\n            >\n                { (title) => (\n                    <i\n                        className={'fa fa-caret-down'}\n                        title={title}\n                    />)\n                }\n            </FormattedMessage>\n        );\n    }\n\n    render() {\n        const needsConfirm = this.isUserOutOfOffice() && this.props.autoResetPref === '';\n        const profilePicture = this.renderProfilePicture();\n        const dropdownIcon = this.renderDropdownIcon();\n\n        const setOnline = needsConfirm ? () => this.showStatusChangeConfirmation('online') : this.setOnline;\n        const setDnd = needsConfirm ? () => this.showStatusChangeConfirmation('dnd') : this.setDnd;\n        const setAway = needsConfirm ? () => this.showStatusChangeConfirmation('away') : this.setAway;\n        const setOffline = needsConfirm ? () => this.showStatusChangeConfirmation('offline') : this.setOffline;\n\n        return (\n            <MenuWrapper\n                onToggle={this.onToggle}\n                style={this.props.style}\n            >\n                <div className='status-wrapper status-selector'>\n                    {profilePicture}\n                    <button\n                        className='status style--none'\n                        aria-label={localizeMessage('status_dropdown.menuAriaLabel', 'set status')}\n                    >\n                        <StatusIcon\n                            status={this.props.status}\n                            button={true}\n                        />\n                    </button>\n                    <span className={'status status-edit edit'}>\n                        {dropdownIcon}\n                    </span>\n                </div>\n                <Menu ariaLabel={localizeMessage('status_dropdown.menuAriaLabel', 'set status')}>\n                    <Menu.Group>\n                        <Menu.ItemAction\n                            show={this.isUserOutOfOffice()}\n                            onClick={() => null}\n                            ariaLabel={localizeMessage('status_dropdown.set_ooo', 'Out of office').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_ooo', 'Out of office')}\n                            extraText={localizeMessage('status_dropdown.set_ooo.extra', 'Automatic Replies are enabled')}\n                        />\n                    </Menu.Group>\n                    <Menu.Group>\n                        <Menu.ItemAction\n                            onClick={setOnline}\n                            ariaLabel={localizeMessage('status_dropdown.set_online', 'Online').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_online', 'Online')}\n                        />\n                        <Menu.ItemAction\n                            onClick={setAway}\n                            ariaLabel={localizeMessage('status_dropdown.set_away', 'Away').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_away', 'Away')}\n                        />\n                        <Menu.ItemAction\n                            onClick={setDnd}\n                            ariaLabel={`${localizeMessage('status_dropdown.set_dnd', 'Do not disturb').toLowerCase()}. ${localizeMessage('status_dropdown.set_dnd.extra', 'Disables desktop, email and push notifications').toLowerCase()}`}\n                            text={localizeMessage('status_dropdown.set_dnd', 'Do not disturb')}\n                            extraText={localizeMessage('status_dropdown.set_dnd.extra', 'Disables desktop, email and push notifications')}\n                        />\n                        <Menu.ItemAction\n                            onClick={setOffline}\n                            ariaLabel={localizeMessage('status_dropdown.set_offline', 'Offline').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_offline', 'Offline')}\n                        />\n                    </Menu.Group>\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {setStatus} from 'mattermost-redux/actions/users';\n\n// import {Client4} from 'mattermost-redux/client';\nimport {getCurrentUser, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\n\nimport StatusDropdown from 'components/status_dropdown/status_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    const currentUser = getCurrentUser(state);\n\n    if (!currentUser) {\n        return {};\n    }\n\n    const userId = currentUser.id;\n    return {\n        userId,\n\n        // profilePicture: Client4.getProfilePictureUrl(userId, currentUser.last_picture_update),\n        profilePicture: currentUser.avatar,\n        autoResetPref: get(state, Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, userId, ''),\n        status: getStatusForUserId(state, userId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            setStatus,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatusDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport MenuIcon from 'components/widgets/icons/menu_icon';\nimport Constants from 'utils/constants';\n\nimport MenuTutorialTip from 'components/tutorial/menu_tutorial_tip';\n\nexport default class SidebarHeaderDropdownButton extends React.PureComponent {\n    static propTypes = {\n        showTutorialTip: PropTypes.bool.isRequired,\n        teamDescription: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        teamDisplayName: PropTypes.string.isRequired,\n    };\n\n    render() {\n        const mainMenuToolTip = (\n            <Tooltip id='main-menu__tooltip'>\n                <FormattedMessage\n                    id='sidebar.mainMenu'\n                    defaultMessage='Main menu'\n                />\n            </Tooltip>\n        );\n\n        let tutorialTip = null;\n        if (this.props.showTutorialTip) {\n            tutorialTip = (\n                <MenuTutorialTip onBottom={false}/>\n            );\n        }\n\n\n        let teamNameWithToolTip = (\n            <h1\n                id='headerTeamName'\n                className='team__name'\n                data-teamid={this.props.teamId}\n            >\n                {this.props.currentUser.first_name + ' ' + this.props.currentUser.last_name}\n            </h1>\n        );\n        if (this.props.teamDescription) {\n            teamNameWithToolTip = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={<Tooltip id='team-name__tooltip'>{this.props.teamDescription}</Tooltip>}\n                >\n                    {teamNameWithToolTip}\n                </OverlayTrigger>\n            );\n        }\n\n        return (\n            <div\n                className='SidebarHeaderDropdownButton'\n                id='sidebarHeaderDropdownButton'\n            >\n                {tutorialTip}\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='right'\n                    overlay={mainMenuToolTip}\n                >\n                    <div\n                        id='headerInfo'\n                        className='header__info'\n                    >\n                        {teamNameWithToolTip}\n                        <div\n                            id='headerUsername'\n                            className='user__name'\n                        >\n                            {'@' + this.props.currentUser.username}\n                        </div>\n                        <button\n                            className='style--none sidebar-header-dropdown__icon'\n                            aria-label={localizeMessage('navbar_dropdown.menuAriaLabel', 'main menu')}\n                        >\n                            <MenuIcon/>\n                        </button>\n                    </div>\n                </OverlayTrigger>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/utils';\n\nimport SidebarHeaderDropdownButton from '../sidebar_header_dropdown_button.jsx';\n\nimport UserSettingsModal from 'components/user_settings/modal';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport MainMenu from 'components/main_menu';\n\nexport default class SidebarHeaderDropdown extends React.PureComponent {\n    static propTypes = {\n        teamDescription: PropTypes.string.isRequired,\n        teamDisplayName: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        currentUser: PropTypes.object,\n        showTutorialTip: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequred,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        teamType: '',\n        pluginMenuItems: [],\n    };\n\n    toggleShortcutsModal = (e) => {\n        e.preventDefault();\n        GlobalActions.toggleShortcutsModal();\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = (e) => {\n        if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.A)) {\n            this.props.actions.openModal({ModalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal});\n        }\n    }\n\n    handleEmitUserLoggedOutEvent = () => {\n        GlobalActions.emitUserLoggedOutEvent();\n    }\n\n    render() {\n        const currentUser = this.props.currentUser;\n\n        if (!currentUser) {\n            return null;\n        }\n\n        return (\n            <MenuWrapper>\n                <SidebarHeaderDropdownButton\n                    showTutorialTip={this.props.showTutorialTip}\n                    teamDescription={this.props.teamDescription}\n                    currentUser={this.props.currentUser}\n                    teamDisplayName={this.props.teamDisplayName}\n                    teamId={this.props.teamId}\n                />\n                <MainMenu id='sidebarDropdownMenu'/>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\n\nimport {Preferences, TutorialSteps} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SidebarHeaderDropdown from './sidebar_header_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    const currentTeam = getCurrentTeam(state);\n    const currentUser = getCurrentUser(state);\n    const showTutorialTip = getInt(state, Preferences.TUTORIAL_STEP, currentUser.id) === TutorialSteps.MENU_POPOVER && !Utils.isMobile();\n    return {\n        currentUser,\n        teamDescription: currentTeam.description,\n        teamDisplayName: currentTeam.display_name,\n        teamId: currentTeam.id,\n        showTutorialTip,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarHeaderDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\nimport StatusDropdown from 'components/status_dropdown/index.jsx';\n\nimport SidebarHeaderDropdown from './dropdown';\n\nexport default class SidebarHeader extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMobile: Utils.isMobile(),\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    handleResize = () => {\n        const isMobile = Utils.isMobile();\n        this.setState({isMobile});\n    }\n\n    render() {\n        const ariaLabel = Utils.localizeMessage('accessibility.sections.lhsHeader', 'team menu region');\n\n        return (\n            <div\n                id='lhsHeader'\n                aria-label={ariaLabel}\n                tabIndex='-1'\n                role='application'\n                className='SidebarHeader team__header theme a11y__region'\n                data-a11y-sort-order='5'\n            >\n                <div\n                    className='d-flex'\n                >\n                    {!this.state.isMobile && <StatusDropdown/>}\n                    <SidebarHeaderDropdown/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {Preferences, TutorialSteps} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SidebarHeader from './sidebar_header.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n\n    const enableTutorial = config.EnableTutorial === 'true';\n\n    const showTutorialTip = getInt(state, Preferences.TUTORIAL_STEP, currentUser.id) === TutorialSteps.MENU_POPOVER && !Utils.isMobile();\n\n    return {\n        enableTutorial,\n        showTutorialTip,\n    };\n}\n\nexport default connect(mapStateToProps)(SidebarHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class BotIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.bot'\n                    defaultMessage='Bot Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-robot'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Svg from 'react-inlinesvg';\n\nimport {Constants} from 'utils/constants';\n\n// import DraftIcon from 'components/widgets/icons/draft_icon';\n// import GlobeIcon from 'components/widgets/icons/globe_icon';\n// import LockIcon from 'components/widgets/icons/lock_icon';\n\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport StatusIcon from 'components/status_icon.jsx';\nimport BotIcon from 'components/widgets/icons/bot_icon.jsx';\nimport Avatar from 'components/widgets/users/avatar';\n\nexport default class SidebarChannelButtonOrLinkIcon extends React.PureComponent {\n    static propTypes = {\n        channelAvatar: PropTypes.string.isRequired,\n        botIconUrl: PropTypes.string,\n        channelIsArchived: PropTypes.bool.isRequired,\n        channelType: PropTypes.string.isRequired,\n        channelStatus: PropTypes.string,\n        hasDraft: PropTypes.bool.isRequired,\n        membersCount: PropTypes.number,\n        teammateId: PropTypes.string,\n        teammateDeletedAt: PropTypes.number,\n        teammateIsBot: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            svgErrorUrl: null,\n        };\n    }\n\n    onSvgLoadError = () => {\n        this.setState({\n            svgErrorUrl: this.props.botIconUrl,\n        });\n    }\n\n    onSvgLoad = () => {\n        this.setState({\n            svgErrorUrl: null,\n        });\n    }\n\n    render() {\n        let icon = null;\n        if (this.props.channelIsArchived) {\n            icon = (\n                <div className='sidebar-item__avatar'>\n                    {/* <ArchiveIcon className='icon icon__archive'/> */}\n                    <Avatar\n                        username={''}\n                        size={'md'}\n                        url={this.props.channelAvatar}\n                    />\n                </div>\n            );\n        } else if (this.props.hasDraft) {\n            icon = (\n                <div className='sidebar-item__avatar'>\n                    {/* <DraftIcon className='icon icon__draft'/> */}\n                    <Avatar\n                        username={''}\n                        size={'md'}\n                        url={this.props.channelAvatar}\n                    />\n                </div>\n            );\n        } else if (this.props.channelType === Constants.OPEN_CHANNEL) {\n            icon = (\n                <div className='sidebar-item__avatar'>\n                    {/* <GlobeIcon className='icon icon__globe'/> */}\n                    <Avatar\n                        username={''}\n                        size={'md'}\n                        url={this.props.channelAvatar}\n                    />\n                </div>\n            );\n        } else if (this.props.channelType === Constants.PRIVATE_CHANNEL) {\n            icon = (\n                <div className='sidebar-item__avatar'>\n                    {/* <LockIcon className='icon icon__lock'/> */}\n                    <Avatar\n                        username={''}\n                        size={'md'}\n                        url={this.props.channelAvatar}\n                    />\n                </div>\n            );\n        } else if (this.props.channelType === Constants.GM_CHANNEL) {\n            icon = <div className='status status--group'>{this.props.membersCount}</div>;\n        } else if (this.props.channelType === Constants.DM_CHANNEL) {\n            if (this.props.teammateId && this.props.teammateDeletedAt) {\n                icon = (\n                    <ArchiveIcon className='icon icon__archive'/>\n                );\n            } else if (this.props.teammateId && this.props.teammateIsBot) {\n                // Use default bot icon\n                icon = (<BotIcon className='icon icon__bot'/>);\n\n                // Attempt to display custom icon if botIconUrl has changed\n                // or if there was no error when loading custom svg\n                if (this.props.botIconUrl &&\n                    this.props.botIconUrl !== this.state.svgErrorUrl) {\n                    icon = (\n                        <Svg\n                            className='icon icon__bot'\n                            src={this.props.botIconUrl}\n                            onLoad={this.onSvgLoad}\n                            onError={this.onSvgLoadError}\n                        />\n                    );\n                }\n            } else {\n                icon = (\n                    <div className='sidebar-item__avatar'>\n                        <Avatar\n                            username={''}\n                            size={'md'}\n                            url={this.props.channelAvatar}\n                        />\n                        <div className='sidebar-item__status'>\n                            <StatusIcon\n                                status={this.props.channelStatus}\n                            />\n                        </div>\n                    </div>\n                );\n            }\n        }\n        return icon;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport {Constants} from 'utils/constants';\n\nexport default class SidebarChannelButtonOrLinkCloseButton extends React.PureComponent {\n    static propTypes = {\n        handleClose: PropTypes.func,\n        channelId: PropTypes.string.isRequired,\n        channelType: PropTypes.string.isRequired,\n        teammateId: PropTypes.string,\n        badge: PropTypes.bool,\n    }\n\n    handleClose = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.handleClose();\n    }\n\n    render() {\n        let closeButton = null;\n\n        if (this.props.handleClose && !this.props.badge) {\n            let removeTooltip = (\n                <Tooltip id='remove-dm-tooltip'>\n                    <FormattedMessage\n                        id='sidebar.removeList'\n                        defaultMessage='Remove from list'\n                    />\n                </Tooltip>\n            );\n\n            if (this.props.channelType === Constants.OPEN_CHANNEL || this.props.channelType === Constants.PRIVATE_CHANNEL) {\n                removeTooltip = (\n                    <Tooltip id='remove-dm-tooltip'>\n                        <FormattedMessage\n                            id='sidebar.leave'\n                            defaultMessage='Leave channel'\n                        />\n                    </Tooltip>\n                );\n            }\n\n            closeButton = (\n                <OverlayTrigger\n                    delayShow={1000}\n                    placement='top'\n                    overlay={removeTooltip}\n                >\n                    <span\n                        onClick={this.handleClose}\n                        className='btn-close'\n                    >\n                        {'×'}\n                    </span>\n                </OverlayTrigger>\n            );\n        }\n        return closeButton;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {mark, trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {isDesktopApp} from 'utils/user_agent';\nimport Constants from 'utils/constants';\nimport CopyUrlContextMenu from 'components/copy_url_context_menu';\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport SidebarChannelButtonOrLinkIcon from './sidebar_channel_button_or_link_icon.jsx';\nimport SidebarChannelButtonOrLinkCloseButton from './sidebar_channel_button_or_link_close_button.jsx';\n\nexport default class SidebarChannelButtonOrLink extends React.PureComponent {\n    static propTypes = {\n        link: PropTypes.string.isRequired,\n        rowClass: PropTypes.string.isRequired,\n        channelType: PropTypes.string.isRequired,\n        channelId: PropTypes.string.isRequired,\n        channelName: PropTypes.string.isRequired,\n        channelAvatar: PropTypes.string.isRequired,\n        displayName: PropTypes.string.isRequired,\n        botIconUrl: PropTypes.string,\n        channelStatus: PropTypes.string,\n        handleClose: PropTypes.func,\n        hasDraft: PropTypes.bool.isRequired,\n        badge: PropTypes.bool,\n        membersCount: PropTypes.number.isRequired,\n        showUnreadForMsgs: PropTypes.bool.isRequired,\n        unreadMsgs: PropTypes.number.isRequired,\n        unreadMentions: PropTypes.number.isRequired,\n        teammateId: PropTypes.string,\n        teammateDeletedAt: PropTypes.number,\n        teammateIsBot: PropTypes.bool,\n        channelIsArchived: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.gmItemRef = React.createRef();\n        this.displayNameRef = React.createRef();\n    }\n\n    state = {\n        showTooltip: false,\n    }\n\n    componentDidMount() {\n        this.enableToolTipIfNeeded();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.displayName !== this.props.displayName) {\n            this.enableToolTipIfNeeded();\n        }\n    }\n\n    enableToolTipIfNeeded = () => {\n        const element = this.displayNameRef.current;\n        if (element && element.offsetWidth < element.scrollWidth) {\n            this.setState({showTooltip: true});\n        } else {\n            this.setState({showTooltip: false});\n        }\n    }\n\n    trackChannelSelectedEvent = () => {\n        mark('SidebarChannelLink#click');\n        trackEvent('ui', 'ui_channel_selected');\n    }\n\n    handleClick = () => {\n        this.trackChannelSelectedEvent();\n        browserHistory.push(this.props.link);\n    }\n\n    removeTooltipLink = () => {\n        // Bootstrap adds the attr dynamically, removing it to prevent a11y readout\n        this.gmItemRef.current.removeAttribute('aria-describedby');\n    }\n\n    render = () => {\n        let badge = null;\n        if (this.props.badge) {\n            badge = (\n                <span\n                    id='unreadMentions'\n                    className='badge'\n                >\n                    {this.props.unreadMentions}\n                </span>\n            );\n        }\n\n        const content = (\n            <React.Fragment>\n                <SidebarChannelButtonOrLinkIcon\n                    channelStatus={this.props.channelStatus}\n                    channelType={this.props.channelType}\n                    channelAvatar={this.props.channelAvatar}\n                    botIconUrl={this.props.botIconUrl}\n                    channelIsArchived={this.props.channelIsArchived}\n                    hasDraft={this.props.hasDraft}\n                    membersCount={this.props.membersCount}\n                    teammateId={this.props.teammateId}\n                    teammateDeletedAt={this.props.teammateDeletedAt}\n                    teammateIsBot={this.props.teammateIsBot}\n                />\n                <span className='sidebar-item__name'>\n                    <span ref={this.displayNameRef}>\n                        {this.props.displayName}\n                    </span>\n                </span>\n                {badge}\n                <SidebarChannelButtonOrLinkCloseButton\n                    handleClose={this.props.handleClose}\n                    channelId={this.props.channelId}\n                    channelType={this.props.channelType}\n                    teammateId={this.props.teammateId}\n                    badge={this.props.badge}\n                />\n            </React.Fragment>\n        );\n\n        let element;\n        let ariaLabel = this.props.displayName;\n\n        if (this.props.channelType === Constants.OPEN_CHANNEL) {\n            ariaLabel += ` ${localizeMessage('accessibility.sidebar.types.public', 'public channel')}`;\n        } else if (this.props.channelType === Constants.PRIVATE_CHANNEL) {\n            ariaLabel += ` ${localizeMessage('accessibility.sidebar.types.private', 'private channel')}`;\n        }\n\n        if (this.props.unreadMentions === 1) {\n            ariaLabel += ` ${this.props.unreadMentions} ${localizeMessage('accessibility.sidebar.types.mention', 'mention')}`;\n        } else if (this.props.unreadMentions > 1) {\n            ariaLabel += ` ${this.props.unreadMentions} ${localizeMessage('accessibility.sidebar.types.mentions', 'mentions')}`;\n        }\n\n        if (this.props.unreadMsgs > 0 && this.props.showUnreadForMsgs && this.props.unreadMentions === 0) {\n            ariaLabel += ` ${localizeMessage('accessibility.sidebar.types.unread', 'unread')}`;\n        }\n\n        ariaLabel = ariaLabel.toLowerCase();\n\n        if (isDesktopApp()) {\n            element = (\n                <div>\n                    <CopyUrlContextMenu\n                        link={this.props.link}\n                        menuId={this.props.channelId}\n                    >\n                        <button\n                            className={'btn btn-link ' + this.props.rowClass}\n                            aria-label={ariaLabel}\n                            onClick={this.handleClick}\n                        >\n                            {content}\n                        </button>\n                    </CopyUrlContextMenu>\n                </div>\n            );\n        } else {\n            element = (\n                <Link\n                    id={`sidebarItem_${this.props.channelName}`}\n                    aria-label={ariaLabel}\n                    to={this.props.link}\n                    className={this.props.rowClass}\n                    onClick={this.trackChannelSelectedEvent}\n                >\n                    {content}\n                </Link>\n            );\n        }\n\n        if (this.state.showTooltip) {\n            const displayNameToolTip = (\n                <Tooltip\n                    id='channel-displayname__tooltip'\n                    style={style.channelTooltip}\n                >\n                    {this.props.displayName}\n                </Tooltip>\n            );\n            element = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={displayNameToolTip}\n                    onEntering={this.removeTooltipLink}\n                >\n                    <div ref={this.gmItemRef}>\n                        {element}\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n        return element;\n    }\n}\n\nconst style = {\n    channelTooltip: {\n        paddingLeft: '8px',\n        maxWidth: '228px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport TutorialTip from 'components/tutorial/tutorial_tip';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SidebarTutorialTip extends React.PureComponent {\n    static propTypes = {\n        townSquareDisplayName: PropTypes.string,\n        offTopicDisplayName: PropTypes.string,\n        openLhs: PropTypes.func\n    }\n\n    componentDidMount() {\n        if (this.props.townSquareDisplayName || this.props.offTopicDisplayName) {\n            this.props.openLhs();\n        }\n    }\n\n    render = () => {\n        const screens = [];\n\n        let townSquareDisplayName = Constants.DEFAULT_CHANNEL_UI_NAME;\n        if (this.props.townSquareDisplayName) {\n            townSquareDisplayName = this.props.townSquareDisplayName;\n        }\n\n        let offTopicDisplayName = Constants.OFFTOPIC_CHANNEL_UI_NAME;\n        if (this.props.offTopicDisplayName) {\n            offTopicDisplayName = this.props.offTopicDisplayName;\n        }\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen1.title'\n                        defaultMessage='Channels'\n                    />\n                </h4>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen1.body'\n                        defaultMessage={'**Channels** organize conversations across different topics. They\\'re open to everyone on your team. To send private communications use **Direct Messages** for a single person or **Private Channels** for multiple people.'}\n                    />\n                </p>\n            </div>\n        );\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen2.title'\n                        defaultMessage='\"{townsquare}\" and \"{offtopic}\" channels'\n                        values={{\n                            townsquare: townSquareDisplayName,\n                            offtopic: offTopicDisplayName,\n                        }}\n                    />\n                </h4>\n                <p>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen2.body1'\n                        defaultMessage='Here are two public channels to start:'\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen2.body2'\n                        defaultMessage='**{townsquare}** is a place for team-wide communication. Everyone in your team is a member of this channel.'\n                        values={{\n                            townsquare: townSquareDisplayName,\n                        }}\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen2.body3'\n                        defaultMessage='**{offtopic}** is a place for fun and humor outside of work-related channels. You and your team can decide what other channels to create.'\n                        values={{\n                            offtopic: offTopicDisplayName,\n                        }}\n                    />\n                </p>\n            </div>\n        );\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen3.title'\n                        defaultMessage='Creating and Joining Channels'\n                    />\n                </h4>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen3.body1'\n                        defaultMessage='Click **\"More...\"** to create a new channel or join an existing one.'\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen3.body2'\n                        defaultMessage='You can also create a new channel by clicking the **\"+\" symbol** next to the public or private channel header.'\n                    />\n                </p>\n            </div>\n        );\n\n        return (\n            <TutorialTip\n                placement='right'\n                screens={screens}\n                overlayClass='tip-overlay--sidebar'\n                diagnosticsTag='tutorial_tip_2_channels'\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport SidebarChannelButtonOrLink from '../sidebar_channel_button_or_link/sidebar_channel_button_or_link.jsx';\nimport SidebarTutorialTip from '../sidebar_tutorial_tip.jsx';\n\nclass SidebarChannel extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Global config object\n         */\n        config: PropTypes.object.isRequired,\n\n        /**\n         * Channel id\n         */\n        channelId: PropTypes.string.isRequired,\n\n        /**\n         * Channel name\n         */\n        channelName: PropTypes.string.isRequired,\n\n        /**\n         * Channel avatar\n         */\n        channelAvatar: PropTypes.string.isRequired,\n\n        /**\n         * Channel display name\n         */\n        channelDisplayName: PropTypes.string.isRequired,\n\n        /**\n         * LHS bot icon image url\n         */\n        botIconUrl: PropTypes.string,\n\n        /**\n         * Channel is muted\n         */\n        channelMuted: PropTypes.bool,\n\n        /**\n         * Channel type\n         */\n        channelType: PropTypes.string.isRequired,\n\n        /**\n         * Channel status\n         */\n        channelStatus: PropTypes.string,\n\n        /**\n         * Channel is fake\n         */\n        channelFake: PropTypes.bool,\n\n        /**\n         * Serialized channel information (for fake channels)\n         */\n        channelStringified: PropTypes.string,\n\n        /**\n         * Teammate id (for direct messages)\n         */\n        channelTeammateId: PropTypes.string,\n\n        /**\n         * Teammate username (for direct messages)\n         */\n        channelTeammateUsername: PropTypes.string,\n\n        /**\n         * Teammate delete at date (for direct messages)\n         */\n        channelTeammateDeletedAt: PropTypes.number,\n\n        /**\n         * Teammate is_bot (for direct messages)\n         */\n        channelTeammateIsBot: PropTypes.bool,\n\n        /**\n         * Whether the channel contains a draft in the center channel\n         */\n        hasDraft: PropTypes.bool.isRequired,\n\n        intl: intlShape.isRequired,\n\n        /**\n         * Whether or not to mark the channel as unread when it has unread messages and no mentions\n         */\n        showUnreadForMsgs: PropTypes.bool.isRequired,\n\n        /**\n         * Number of unread messages\n         */\n        unreadMsgs: PropTypes.number.isRequired,\n\n        /**\n         * Number of unread mentions\n         */\n        unreadMentions: PropTypes.number.isRequired,\n\n        /**\n         * Set if the channel is the current active channel\n         */\n        active: PropTypes.bool.isRequired,\n\n        /**\n         * Current team name\n         */\n        currentTeamName: PropTypes.string.isRequired,\n\n        /**\n         * Current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Set if the tutorial must be shown\n         */\n        showTutorialTip: PropTypes.bool.isRequired,\n\n        /**\n         * TownSquare (default channel) display name\n         */\n        townSquareDisplayName: PropTypes.string,\n\n        /**\n         * OffTopic (default channel) display name\n         */\n        offTopicDisplayName: PropTypes.string,\n\n        /**\n         * Number of members\n         */\n        membersCount: PropTypes.number.isRequired,\n\n        /**\n         * Flag if channel should be hidden in sidebar\n         */\n        shouldHideChannel: PropTypes.bool.isRequired,\n\n        channelIsArchived: PropTypes.bool.isRequired,\n\n        redirectChannel: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            leaveChannel: PropTypes.func.isRequired,\n            openLhs: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    isLeaving = false;\n\n    handleLeavePublicChannel = () => {\n        this.props.actions.leaveChannel(this.props.channelId);\n        trackEvent('ui', 'ui_public_channel_x_button_clicked');\n    }\n\n    handleLeavePrivateChannel = () => {\n        GlobalActions.showLeavePrivateChannelModal({id: this.props.channelId, display_name: this.props.channelDisplayName});\n        trackEvent('ui', 'ui_private_channel_x_button_clicked');\n    }\n\n    handleLeaveDirectChannel = () => {\n        if (!this.isLeaving) {\n            this.isLeaving = true;\n\n            let id;\n            let category;\n            if (this.props.channelType === Constants.DM_CHANNEL) {\n                id = this.props.channelTeammateId;\n                category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n            } else {\n                id = this.props.channelId;\n                category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n            }\n\n            const currentUserId = this.props.currentUserId;\n            this.props.actions.savePreferences(currentUserId, [{user_id: currentUserId, category, name: id, value: 'false'}]).then(\n                () => {\n                    this.isLeaving = false;\n                }\n            );\n\n            trackEvent('ui', 'ui_direct_channel_x_button_clicked');\n        }\n\n        if (this.props.active) {\n            browserHistory.push(`/${this.props.currentTeamName}/channels/${this.props.redirectChannel}`);\n        }\n    }\n\n    showChannelAsUnread = () => {\n        return this.props.unreadMentions > 0 || (this.props.unreadMsgs > 0 && this.props.showUnreadForMsgs);\n    };\n\n    render = () => {\n        if (this.props.channelIsArchived && !this.props.active) {\n            return null;\n        }\n        if (!this.props.channelDisplayName || !this.props.channelType) {\n            return (<div/>);\n        }\n\n        let closeHandler = null;\n        if (!this.showChannelAsUnread()) {\n            if (this.props.shouldHideChannel) {\n                return '';\n            }\n            if (this.props.channelType === Constants.DM_CHANNEL || this.props.channelType === Constants.GM_CHANNEL) {\n                closeHandler = this.handleLeaveDirectChannel;\n            } else if (this.props.config.EnableXToLeaveChannelsFromLHS === 'true') {\n                if (this.props.channelType === Constants.OPEN_CHANNEL && this.props.channelName !== Constants.DEFAULT_CHANNEL) {\n                    closeHandler = this.handleLeavePublicChannel;\n                } else if (this.props.channelType === Constants.PRIVATE_CHANNEL) {\n                    closeHandler = this.handleLeavePrivateChannel;\n                }\n            }\n        }\n\n        let linkClass = '';\n        if (this.props.active) {\n            linkClass = 'active';\n        }\n\n        let rowClass = 'sidebar-item';\n        let badge = false;\n        if (this.showChannelAsUnread()) {\n            rowClass += ' unread-title';\n        }\n\n        if (this.props.unreadMentions > 0) {\n            rowClass += ' has-badge';\n\n            badge = true;\n        }\n\n        if (this.props.channelMuted) {\n            rowClass += ' muted';\n        }\n\n        if (closeHandler && !badge) {\n            rowClass += ' has-close';\n        }\n\n        let tutorialTip = null;\n        if (this.props.showTutorialTip && this.props.channelName === Constants.DEFAULT_CHANNEL) {\n            tutorialTip = (\n                <SidebarTutorialTip\n                    townSquareDisplayName={this.props.townSquareDisplayName}\n                    offTopicDisplayName={this.props.offTopicDisplayName}\n                    openLhs={this.props.actions.openLhs}\n                />\n            );\n        }\n\n        let link = '';\n        if (this.props.channelFake) {\n            link = `/${this.props.currentTeamName}/channels/${this.props.channelName}?fakechannel=${encodeURIComponent(this.props.channelStringified)}`;\n        } else if (this.props.channelType === Constants.DM_CHANNEL) {\n            link = `/${this.props.currentTeamName}/messages/@${this.props.channelTeammateUsername}`;\n        } else if (this.props.channelType === Constants.GM_CHANNEL) {\n            link = `/${this.props.currentTeamName}/messages/${this.props.channelName}`;\n        } else {\n            link = `/${this.props.currentTeamName}/channels/${this.props.channelName}`;\n        }\n\n        let displayName = '';\n        if (this.props.currentUserId === this.props.channelTeammateId) {\n            displayName = this.props.intl.formatMessage({\n                id: 'sidebar.directchannel.you',\n                defaultMessage: '{displayname} (you)',\n            }, {\n                displayname: this.props.channelDisplayName,\n            });\n        } else {\n            displayName = this.props.channelDisplayName;\n        }\n\n        return (\n            <li\n                key={this.props.channelName}\n                ref={'channel'}\n                className={linkClass}\n            >\n                <SidebarChannelButtonOrLink\n                    link={link}\n                    rowClass={rowClass}\n                    channelId={this.props.channelId}\n                    channelName={this.props.channelName}\n                    channelAvatar={this.props.channelAvatar}\n                    botIconUrl={this.props.botIconUrl}\n                    channelStatus={this.props.channelStatus}\n                    channelType={this.props.channelType}\n                    displayName={displayName}\n                    handleClose={closeHandler}\n                    hasDraft={this.props.hasDraft}\n                    badge={badge}\n                    showUnreadForMsgs={this.props.showUnreadForMsgs}\n                    unreadMentions={this.props.unreadMentions}\n                    unreadMsgs={this.props.unreadMsgs}\n                    membersCount={this.props.membersCount}\n                    teammateId={this.props.channelTeammateId}\n                    teammateDeletedAt={this.props.channelTeammateDeletedAt}\n                    teammateIsBot={this.props.channelTeammateIsBot}\n                    channelIsArchived={this.props.channelIsArchived}\n                />\n                {tutorialTip}\n            </li>\n        );\n    }\n}\n\nconst wrappedComponent = injectIntl(SidebarChannel, {forwardRef: true});\nwrappedComponent.displayName = 'injectIntl(SidebarChannel)';\nexport default wrappedComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {\n    getCurrentChannelId,\n    getChannelsNameMapInCurrentTeam,\n    makeGetChannel,\n    shouldHideDefaultChannel,\n    getRedirectChannelNameForTeam,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getUserIdsInChannels, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getInt, getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isChannelMuted, isFavoriteChannel} from 'mattermost-redux/utils/channel_utils';\n\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {Constants, NotificationLevels, StoragePrefixes} from 'utils/constants';\n\nimport {leaveChannel} from 'actions/views/channel';\nimport {open as openLhs} from 'actions/views/lhs.js';\nimport {getPostDraft} from 'selectors/rhs';\n\nimport SidebarChannel from './sidebar_channel.jsx';\n\nfunction makeMapStateToProps() {\n    const getChannel = makeGetChannel();\n\n    return (state, ownProps) => {\n        const channelId = ownProps.channelId;\n\n        const config = getConfig(state);\n        const currentChannelId = getCurrentChannelId(state);\n        const channel = getChannel(state, {id: channelId}) || {};\n        const draft = channel.id ? getPostDraft(state, StoragePrefixes.DRAFT, channel.id) : false;\n\n        const enableTutorial = config.EnableTutorial === 'true';\n        const tutorialStep = getInt(state, Constants.Preferences.TUTORIAL_STEP, ownProps.currentUserId, Constants.TutorialSteps.FINISHED);\n        const channelsByName = getChannelsNameMapInCurrentTeam(state);\n        const memberIds = getUserIdsInChannels(state);\n\n        let membersCount = 0;\n        if (memberIds && memberIds[channel.id]) {\n            membersCount = memberIds[channel.id].size;\n            if (memberIds[channel.id].has(ownProps.currentUserId)) {\n                membersCount--;\n            }\n        }\n\n        const member = getMyChannelMemberships(state)[channelId];\n\n        let unreadMentions = 0;\n        let unreadMsgs = 0;\n        let showUnreadForMsgs = true;\n        if (member) {\n            unreadMentions = member.mention_count;\n\n            if (channel) {\n                unreadMsgs = Math.max(channel.total_msg_count - member.msg_count, 0);\n            }\n\n            if (member.notify_props) {\n                showUnreadForMsgs = member.notify_props.mark_unread !== NotificationLevels.MENTION;\n            }\n        }\n\n        const teammateNameDisplay = getTeammateNameDisplaySetting(state);\n        let teammate = null;\n        let channelTeammateId = '';\n        let channelAvatar = channel.avatar;\n        let channelTeammateDeletedAt = 0;\n        let channelTeammateUsername = '';\n        let channelTeammateIsBot = false;\n        let botLastIconUpdate = 0;\n        let channelDisplayName = channel.display_name;\n        let botIconUrl = null;\n        if (channel.type === Constants.DM_CHANNEL) {\n            teammate = getUser(state, channel.teammate_id);\n            if (teammate) {\n                channelAvatar = teammate.avatar;\n                channelTeammateId = teammate.id;\n                channelTeammateDeletedAt = teammate.delete_at;\n                channelTeammateUsername = teammate.username;\n                channelTeammateIsBot = teammate.is_bot;\n                botLastIconUpdate = teammate.bot_last_icon_update;\n                botLastIconUpdate = (typeof botLastIconUpdate === 'undefined') ? 0 : botLastIconUpdate;\n            }\n            if (channelTeammateIsBot) {\n                if (botLastIconUpdate !== 0) {\n                    botIconUrl = botIconImageUrl(teammate);\n                }\n            }\n            channelDisplayName = displayUsername(teammate, teammateNameDisplay, false);\n        } else if (!channel.avatar) {\n            channelAvatar = 'https://appota.com/doc/ACheckin/icon-acheckin.png';\n        }\n\n        let shouldHideChannel = false;\n        if (\n            channel.name === Constants.DEFAULT_CHANNEL &&\n            !ownProps.active &&\n            shouldHideDefaultChannel(state, channel) &&\n            !isFavoriteChannel(state.entities.preferences.myPreferences, channel.id)\n        ) {\n            shouldHideChannel = true;\n        }\n\n        return {\n            config,\n            channelId,\n            channelName: channel.name,\n            channelAvatar,\n            channelDisplayName,\n            botIconUrl,\n            channelType: channel.type,\n            channelStatus: channel.status,\n            channelFake: channel.fake,\n            channelMuted: isChannelMuted(member),\n            channelStringified: channel.fake && JSON.stringify(channel),\n            channelTeammateId,\n            channelTeammateUsername,\n            channelTeammateDeletedAt,\n            channelTeammateIsBot,\n            hasDraft: draft && Boolean(draft.message.trim() || draft.fileInfos.length || draft.uploadsInProgress.length) && currentChannelId !== channel.id,\n            showTutorialTip: enableTutorial && tutorialStep === Constants.TutorialSteps.CHANNEL_POPOVER,\n            townSquareDisplayName: channelsByName[Constants.DEFAULT_CHANNEL] && channelsByName[Constants.DEFAULT_CHANNEL].display_name,\n            offTopicDisplayName: channelsByName[Constants.OFFTOPIC_CHANNEL] && channelsByName[Constants.OFFTOPIC_CHANNEL].display_name,\n            showUnreadForMsgs,\n            unreadMsgs,\n            unreadMentions,\n            membersCount,\n            shouldHideChannel,\n            channelIsArchived: channel.delete_at !== 0,\n            redirectChannel: getRedirectChannelNameForTeam(state, getCurrentTeamId(state)),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            leaveChannel,\n            openLhs,\n        }, dispatch),\n    };\n}\n\n/**\n * Gets the LHS bot icon url for a given botUser.\n */\nfunction botIconImageUrl(botUser) {\n    return `${Client4.getBotRoute(botUser.id)}/icon?_=${(botUser.bot_last_icon_update || 0)}`;\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps, null, {withRef: true})(SidebarChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {PropTypes} from 'prop-types';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ChannelCreate extends React.PureComponent {\n    static propTypes = {\n        sectionType: PropTypes.string.isRequired,\n        createPublicChannel: PropTypes.func.isRequired,\n        createPrivateChannel: PropTypes.func.isRequired,\n        createDirectMessage: PropTypes.func.isRequired,\n        createPublicDirectChannel: PropTypes.func.isRequired,\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n    };\n\n    renderPublic = () => {\n        if (!this.props.canCreatePublicChannel) {\n            return null;\n        }\n\n        const ariaLabelPublic = `${Utils.localizeMessage('sidebar.createChannel', 'Create new public channel').toLowerCase()}`;\n\n        const tooltip = (\n            <Tooltip id='new-channel-tooltip' >\n                <FormattedMessage\n                    id='sidebar.createChannel'\n                    defaultMessage='Create new public channel'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                id='createPublicChannel'\n                aria-label={ariaLabelPublic}\n                type='button'\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createPublicChannel}\n            >\n                <OverlayTrigger\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    renderPrivate = () => {\n        if (!this.props.canCreatePrivateChannel) {\n            return null;\n        }\n\n        const ariaLabelPrivate = `${Utils.localizeMessage('sidebar.createGroup', 'Create new private channel').toLowerCase()}`;\n\n        const tooltip = (\n            <Tooltip id='new-group-tooltip'>\n                <FormattedMessage\n                    id='sidebar.createGroup'\n                    defaultMessage='Create new private channel'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                id='createPrivateChannel'\n                aria-label={ariaLabelPrivate}\n                type='button'\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createPrivateChannel}\n            >\n                <OverlayTrigger\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    renderDirect = () => {\n        const ariaLabelDM = Utils.localizeMessage('sidebar.createDirectMessage', 'Create new direct message').toLowerCase();\n        const tooltip = (\n            <Tooltip\n                id='new-group-tooltip'\n                className='hidden-xs'\n            >\n                <FormattedMessage\n                    id='sidebar.createDirectMessage'\n                    defaultMessage='Create new direct message'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                id='addDirectChannel'\n                aria-label={ariaLabelDM}\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createDirectMessage}\n            >\n                <OverlayTrigger\n                    className='hidden-xs'\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    renderCombined = () => {\n        const {canCreatePublicChannel, canCreatePrivateChannel} = this.props;\n\n        if (canCreatePublicChannel && !canCreatePrivateChannel) {\n            return this.renderPublic();\n        }\n\n        if (canCreatePrivateChannel && !canCreatePublicChannel) {\n            return this.renderPrivate();\n        }\n\n        if (!canCreatePublicChannel && !canCreatePrivateChannel) {\n            return null;\n        }\n\n        const tooltip = (\n            <Tooltip\n                id='new-group-tooltip'\n                className='hidden-xs'\n            >\n                <FormattedMessage\n                    id='sidebar.createPublicPrivateChannel'\n                    defaultMessage='Create new public or private channel'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                type='button'\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createPublicDirectChannel}\n            >\n                <OverlayTrigger\n                    className='hidden-xs'\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    render() {\n        const {sectionType} = this.props;\n\n        switch (sectionType) {\n        case 'public':\n            return this.renderPublic();\n        case 'private':\n            return this.renderPrivate();\n        case 'direct':\n            return this.renderDirect();\n        case 'recent':\n        case 'alpha':\n            return this.renderCombined();\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {PropTypes} from 'prop-types';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport {intlShape} from 'utils/react_intl';\n\nclass ChannelMore extends React.PureComponent {\n    static propTypes = {\n        currentTeamId: PropTypes.string.isRequired,\n        intl: intlShape.isRequired,\n        sectionType: PropTypes.string.isRequired,\n        moreChannels: PropTypes.func.isRequired,\n        moreDirectMessages: PropTypes.func.isRequired,\n        browsePublicDirectChannels: PropTypes.func.isRequired,\n        viewArchivedChannels: PropTypes.bool,\n    };\n\n    moreChannelsPublic = () => {\n        this.props.moreChannels('public');\n    }\n    moreChannelsPrivate = () => {\n        this.props.moreChannels('private');\n    }\n\n    render() {\n        const {\n            sectionType,\n            moreDirectMessages,\n            browsePublicDirectChannels,\n            viewArchivedChannels,\n        } = this.props;\n\n        const {formatMessage} = this.props.intl;\n\n        switch (sectionType) {\n        case 'public':\n            return (\n                <TeamPermissionGate\n                    teamId={this.props.currentTeamId}\n                    permissions={[Permissions.JOIN_PUBLIC_CHANNELS]}\n                >\n                    <li\n                        key='public-channel-more'\n                        data-testid='morePublicButton'\n                    >\n                        <button\n                            id='sidebarPublicChannelsMore'\n                            aria-label={formatMessage({id: 'sidebar.morePublicAria', defaultMessage: 'more public channels'})}\n                            className='nav-more cursor--pointer style--none btn--block'\n                            onClick={this.moreChannelsPublic}\n                        >\n                            <FormattedMessage\n                                id='sidebar.moreElips'\n                                defaultMessage='More...'\n                            />\n                        </button>\n                    </li>\n                </TeamPermissionGate>\n            );\n        case 'private':\n            if (viewArchivedChannels) {\n                return (\n                    <TeamPermissionGate\n                        teamId={this.props.currentTeamId}\n                        permissions={[Permissions.JOIN_PUBLIC_CHANNELS]}\n                    >\n                        <li\n                            key='public-channel-more'\n                            data-testid='morePublicButton'\n                        >\n                            <button\n                                id='sidebarPrivateChannelsMore'\n                                aria-label={formatMessage({id: 'sidebar.morePublicAria', defaultMessage: 'more public channels'})}\n                                className='nav-more cursor--pointer style--none btn--block'\n                                onClick={this.moreChannelsPrivate}\n                            >\n                                <FormattedMessage\n                                    id='sidebar.moreElips'\n                                    defaultMessage='More...'\n                                />\n                            </button>\n                        </li>\n                    </TeamPermissionGate>\n                );\n            }\n            return null;\n        case 'direct':\n            return (\n                <li\n                    key='dm-more'\n                    id='moreDMButton'\n                >\n                    <button\n                        id='moreDirectMessage'\n                        aria-label={formatMessage({id: 'sidebar.moreDmAria', defaultMessage: 'more direct messages'})}\n                        className='nav-more cursor--pointer style--none btn--block'\n                        onClick={moreDirectMessages}\n                    >\n                        <FormattedMessage\n                            id='sidebar.moreElips'\n                            defaultMessage='More...'\n                        />\n                    </button>\n                </li>\n            );\n        case 'recent':\n        case 'alpha':\n            return (\n                <li\n                    key='public-dm-more'\n                    id='moreRecentAlphaButton'\n                >\n                    <button\n                        id='morePublicDirectChannels'\n                        aria-label={formatMessage({id: 'sidebar.morePublicDmAria', defaultMessage: 'more public channels direct messages'})}\n                        className='nav-more cursor--pointer style--none btn--block'\n                        onClick={browsePublicDirectChannels}\n                    >\n                        <FormattedMessage\n                            id='sidebar.moreElips'\n                            defaultMessage='More...'\n                        />\n                    </button>\n                </li>\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default injectIntl(ChannelMore);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\nimport {PropTypes} from 'prop-types';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst clickableChannelHeader = ['recent', 'alpha'];\n\nexport default class ChannelName extends React.PureComponent {\n    static propTypes = {\n        sectionType: PropTypes.string.isRequired,\n        channelName: PropTypes.string.isRequired,\n        browsePublicDirectChannels: PropTypes.func.isRequired,\n    };\n\n    sectionTypeFormatMessageId = (sectionType) => {\n        switch (sectionType) {\n        case 'public':\n            return t('sidebar.types.public');\n        case 'private':\n            return t('sidebar.types.private');\n        case 'direct':\n            return t('sidebar.types.direct');\n        case 'favorite':\n            return t('sidebar.types.favorite');\n        case 'unreads':\n            return t('sidebar.types.unreads');\n        case 'recent':\n            return t('sidebar.types.recent');\n        default:\n            return t('sidebar.types.alpha');\n        }\n    }\n\n    render() {\n        const {sectionType, channelName, browsePublicDirectChannels} = this.props;\n\n        let tooltipTriggers = ['hover', 'focus'];\n\n        if (Utils.isMobile()) {\n            tooltipTriggers = [];\n        }\n\n        const formattedMessageId = this.sectionTypeFormatMessageId(sectionType);\n        let name = (\n            <FormattedMessage\n                id={formattedMessageId}\n                defaultMessage={channelName}\n            />\n        );\n\n        if (clickableChannelHeader.indexOf(sectionType) !== -1) {\n            const createPublicDirectChannelTooltip = (\n                <Tooltip\n                    id='new-group-tooltip'\n                    className='hidden-xs'\n                >\n                    <FormattedMessage\n                        id='sidebar.browseChannelDirectChannel'\n                        defaultMessage='Browse Channels and Direct Messages'\n                    />\n                </Tooltip>\n            );\n\n            name = (\n                <OverlayTrigger\n                    trigger={tooltipTriggers}\n                    delayShow={500}\n                    placement='top'\n                    overlay={createPublicDirectChannelTooltip}\n                >\n                    <div\n                        role='presentation'\n                        className='public_direct_name'\n                        onClick={browsePublicDirectChannels}\n                    >\n                        {name}\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n\n        return name;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal, Tabs, Tab} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport MorePublicChannels from 'components/more_channels';\nimport MoreDirectMessages from 'components/more_direct_channels';\n\nimport {localizeMessage} from 'utils/utils';\n\nexport default class MorePublicDirectChannels extends React.PureComponent {\n    static propTypes = {\n        handleNewChannel: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n    };\n\n    state = {\n        show: true,\n        key: 'channels',\n    };\n\n    handleHide = () => {\n        this.setState({show: false});\n    };\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    };\n\n    handleSelect = (key) => {\n        this.setState({key});\n    }\n\n    render() {\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-direct-channels more-public-direct-channels'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='morePublicModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='morePublicModalLabel'\n                    >\n                        <FormattedMessage\n                            id='more_public_direct_channels.title'\n                            defaultMessage='Channels and Direct Messages'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Tabs\n                        id='morePublicDirectChannelTabs'\n                        className='modal-tabs'\n                        defaultActiveKey='channels'\n                        activeKey={this.state.key}\n                        onSelect={this.handleSelect}\n                        unmountOnExit={true}\n                    >\n                        <Tab\n                            eventKey='channels'\n                            title={localizeMessage('more_public_direct_channels.channels', 'Channels')}\n                        >\n                            <MorePublicChannels\n                                handleNewChannel={this.props.handleNewChannel}\n                                onModalDismissed={this.handleHide}\n                                bodyOnly={true}\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey='dm'\n                            title={localizeMessage('more_public_direct_channels.direct_messages', 'Direct Messages')}\n                        >\n                            <MoreDirectMessages\n                                onModalDismissed={this.handleHide}\n                                isExistingChannel={false}\n                                bodyOnly={true}\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {PropTypes} from 'prop-types';\nimport classNames from 'classnames';\n\nimport Scrollbars from 'react-custom-scrollbars';\nimport {SpringSystem, MathUtil} from 'rebound';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\nimport * as ChannelUtils from 'utils/channel_utils.jsx';\nimport {Constants, ModalIdentifiers, SidebarChannelGroups} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport favicon16x16 from 'images/favicon/favicon-16x16.png';\nimport favicon32x32 from 'images/favicon/favicon-32x32.png';\nimport favicon96x96 from 'images/favicon/favicon-96x96.png';\nimport redDotFavicon16x16 from 'images/favicon/favicon-reddot-16x16.png';\nimport redDotFavicon32x32 from 'images/favicon/favicon-reddot-32x32.png';\nimport redDotFavicon96x96 from 'images/favicon/favicon-reddot-96x96.png';\nimport MoreChannels from 'components/more_channels';\nimport MoreDirectChannels from 'components/more_direct_channels';\nimport QuickSwitchModal from 'components/quick_switch_modal';\nimport NewChannelFlow from 'components/new_channel_flow';\nimport UnreadChannelIndicator from 'components/unread_channel_indicator';\nimport Pluggable from 'plugins/pluggable';\n\nimport SidebarHeader from './header';\nimport SidebarChannel from './sidebar_channel';\nimport ChannelCreate from './channel_create';\nimport ChannelMore from './channel_more';\nimport ChannelName from './channel_name';\nimport MorePublicDirectChannels from './more_public_direct_channels';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\n// scrollMargin is the margin at the edge of the channel list that we leave when scrolling to a channel.\nconst scrollMargin = 15;\n\n// scrollMarginWithUnread is the margin that we leave at the edge of the channel list when scrolling to a channel so\n// that the channel is not under the unread indicator.\nconst scrollMarginWithUnread = 60;\n\nclass Sidebar extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Global config object\n         */\n        config: PropTypes.object.isRequired,\n\n        isOpen: PropTypes.bool.isRequired,\n\n        /**\n         * List of unread channels (ids)\n         */\n        unreadChannelIds: PropTypes.array,\n\n        /**\n         * List of ordered channels (ids)\n         */\n        orderedChannelIds: PropTypes.arrayOf(PropTypes.shape({\n\n            /**\n             * Type of channel\n             */\n            type: PropTypes.string.isRequired,\n\n            /**\n             * Displayed name in sidebar\n             */\n            name: PropTypes.string.isRequired,\n\n            /**\n             * List of ids for the channels (ids)\n             */\n            items: PropTypes.array.isRequired,\n        })),\n\n        /**\n         * Current channel object\n         */\n        currentChannel: PropTypes.object,\n\n        /**\n         * Current channel teammeat (for direct messages)\n         */\n        currentTeammate: PropTypes.object,\n\n        /**\n         * Current team object\n         */\n        currentTeam: PropTypes.object,\n\n        /**\n         * Current user object\n         */\n        currentUser: PropTypes.object,\n\n        intl: intlShape.isRequired,\n\n        /**\n         * Number of unread mentions/messages\n         */\n        unreads: PropTypes.object.isRequired,\n\n        /**\n         * Permission to create public channel\n         */\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Permission to create private channel\n         */\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Flag to display the Switch channel shortcut\n         */\n        channelSwitcherOption: PropTypes.bool.isRequired,\n\n        /**\n         * Setting that enables user to view archived channels\n         */\n        viewArchivedChannels: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            close: PropTypes.func.isRequired,\n            switchToChannelById: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        currentChannel: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.badgesActive = false;\n        this.firstUnreadChannel = null;\n        this.lastUnreadChannel = null;\n\n        this.isLeaving = new Map();\n        this.isSwitchingChannel = false;\n        this.closedDirectChannel = false;\n\n        this.state = {\n            newChannelModalType: '',\n            orderedChannelIds: props.orderedChannelIds,\n            showDirectChannelsModal: false,\n            showMoreChannelsModal: false,\n            showMorePublicChannelsModal: false,\n            morePublicChannelsModalType: 'public',\n        };\n\n        this.animate = new SpringSystem();\n        this.scrollAnimation = this.animate.createSpring();\n        this.scrollAnimation.setOvershootClampingEnabled(true); // disables the spring action at the end of animation\n        this.scrollAnimation.addListener({onSpringUpdate: this.handleScrollAnimationUpdate});\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.orderedChannelIds[0].type === SidebarChannelGroups.UNREADS &&\n            prevState.orderedChannelIds[0].type === SidebarChannelGroups.UNREADS &&\n            prevState.orderedChannelIds[0].items.length === nextProps.orderedChannelIds[0].items.length &&\n            prevState.orderedChannelIds[0].items.includes(nextProps.currentChannel.id)\n        ) {\n            return null;\n        }\n\n        if (nextProps.orderedChannelIds !== prevState.orderedChannelIds) {\n            return {orderedChannelIds: nextProps.orderedChannelIds};\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        this.updateUnreadIndicators();\n        document.addEventListener('keydown', this.navigateChannelShortcut);\n        document.addEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    componentDidUpdate(prevProps) {\n        // if the active channel disappeared (which can happen when dm channels\n        // autoclose), go to user default channel in team\n        if (this.props.currentTeam === prevProps.currentTeam &&\n            this.props.currentChannel.id === prevProps.currentChannel.id &&\n            !this.channelIdIsDisplayedForProps(this.props.orderedChannelIds, this.props.currentChannel.id) &&\n            this.channelIdIsDisplayedForProps(prevProps.orderedChannelIds, this.props.currentChannel.id)\n        ) {\n            this.closedDirectChannel = true;\n            redirectUserToDefaultTeam();\n            return;\n        }\n\n        // reset the scrollbar upon switching teams\n        if (this.props.currentTeam !== prevProps.currentTeam) {\n            this.refs.scrollbar.scrollToTop();\n        }\n\n        // Scroll to selected channel so it's in view\n        if (this.props.currentChannel.id !== prevProps.currentChannel.id) {\n            // This will be re-enabled after 5.20 when the weird scrolling behaviour when switching teams can be resolved\n            // this.scrollToChannel(this.props.currentChannel.id);\n        }\n\n        // close the LHS on mobile when you change channels\n        if (this.props.currentChannel.id !== prevProps.currentChannel.id) {\n            if (this.closedDirectChannel) {\n                this.closedDirectChannel = false;\n            } else {\n                this.props.actions.close();\n            }\n        }\n\n        this.updateTitle();\n\n        this.setBadgesActiveAndFavicon();\n\n        this.setFirstAndLastUnreadChannels();\n        this.updateUnreadIndicators();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.navigateChannelShortcut);\n        document.removeEventListener('keydown', this.navigateUnreadChannelShortcut);\n\n        this.animate.deregisterSpring(this.scrollAnimation);\n        this.animate.removeAllListeners();\n        this.scrollAnimation.destroy();\n    }\n\n    setBadgesActiveAndFavicon() {\n        if (!(UserAgent.isFirefox() || UserAgent.isChrome())) {\n            return;\n        }\n\n        const link = document.querySelector('link[rel=\"icon\"]');\n\n        if (!link) {\n            return;\n        }\n\n        this.lastBadgesActive = this.badgesActive;\n        this.badgesActive = this.props.unreads.mentionCount > 0;\n\n        // update the favicon to show if there are any notifications\n        if (this.lastBadgesActive !== this.badgesActive) {\n            this.updateFavicon(this.badgesActive);\n        }\n    }\n\n    updateFavicon = (active) => {\n        const link16x16 = document.querySelector('link[rel=\"icon\"][sizes=\"16x16\"]');\n        const link32x32 = document.querySelector('link[rel=\"icon\"][sizes=\"32x32\"]');\n        const link96x96 = document.querySelector('link[rel=\"icon\"][sizes=\"96x96\"]');\n\n        if (active) {\n            link16x16.href = typeof redDotFavicon16x16 === 'string' ? redDotFavicon16x16 : '';\n            link32x32.href = typeof redDotFavicon32x32 === 'string' ? redDotFavicon32x32 : '';\n            link96x96.href = typeof redDotFavicon96x96 === 'string' ? redDotFavicon96x96 : '';\n        } else {\n            link16x16.href = typeof favicon16x16 === 'string' ? favicon16x16 : '';\n            link32x32.href = typeof favicon32x32 === 'string' ? favicon32x32 : '';\n            link96x96.href = typeof favicon96x96 === 'string' ? favicon96x96 : '';\n        }\n    }\n\n    setFirstAndLastUnreadChannels() {\n        const {currentChannel, unreadChannelIds} = this.props;\n        const {orderedChannelIds} = this.state;\n\n        this.getDisplayedChannels(orderedChannelIds).map((channelId) => {\n            if (channelId !== currentChannel.id && unreadChannelIds.includes(channelId)) {\n                if (!this.firstUnreadChannel) {\n                    this.firstUnreadChannel = channelId;\n                }\n                this.lastUnreadChannel = channelId;\n            }\n            return null;\n        });\n    }\n\n    handleOpenMoreDirectChannelsModal = (e) => {\n        e.preventDefault();\n        if (this.state.showDirectChannelsModal) {\n            this.hideMoreDirectChannelsModal();\n        } else {\n            this.showMoreDirectChannelsModal();\n        }\n    }\n\n    updateTitle = () => {\n        const {\n            config,\n            currentChannel,\n            currentTeam,\n            currentTeammate,\n            unreads,\n        } = this.props;\n        const {formatMessage} = this.props.intl;\n\n        const currentSiteName = config.SiteName || '';\n\n        if (currentChannel && currentTeam && currentChannel.id) {\n            let currentChannelName = currentChannel.display_name;\n            if (currentChannel.type === Constants.DM_CHANNEL) {\n                if (currentTeammate != null) {\n                    currentChannelName = currentTeammate.display_name;\n                }\n            }\n\n            const mentionTitle = unreads.mentionCount > 0 ? '(' + unreads.mentionCount + ') ' : '';\n            const unreadTitle = unreads.messageCount > 0 ? '* ' : '';\n            document.title = mentionTitle + unreadTitle + currentChannelName + ' - ' + this.props.currentTeam.display_name + ' ' + currentSiteName;\n        } else {\n            document.title = formatMessage({id: 'sidebar.team_select', defaultMessage: '{siteName} - Join a team'}, {siteName: currentSiteName || 'Mattermost'});\n        }\n    }\n\n    onScroll = () => {\n        this.updateUnreadIndicators();\n    }\n\n    handleScrollAnimationUpdate = (spring) => {\n        const {scrollbar} = this.refs;\n        const val = spring.getCurrentValue();\n        scrollbar.scrollTop(val);\n    }\n\n    scrollToFirstUnreadChannel = () => {\n        this.scrollToChannel(this.firstUnreadChannel, true);\n    }\n\n    scrollToLastUnreadChannel = () => {\n        this.scrollToChannel(this.lastUnreadChannel, true);\n    }\n\n    scrollToChannel = (channelId, scrollingToUnread = false) => {\n        const element = $(ReactDOM.findDOMNode(this.refs[channelId]));\n        if (!element) {\n            return;\n        }\n\n        const position = element.position();\n        if (!position) {\n            return;\n        }\n\n        const top = position.top;\n        const bottom = top + element.height();\n\n        const scrollTop = this.refs.scrollbar.getScrollTop();\n        const scrollHeight = this.refs.scrollbar.getClientHeight();\n\n        if (top < scrollTop) {\n            // Scroll up to the item\n            const margin = (scrollingToUnread || !this.state.showTopUnread) ? scrollMargin : scrollMarginWithUnread;\n\n            let scrollEnd;\n            const displayedChannels = this.getDisplayedChannels(this.state.orderedChannelIds);\n            if (displayedChannels.length > 0 && displayedChannels[0] === channelId) {\n                // This is the first channel, so scroll right to the top\n                scrollEnd = MathUtil.mapValueInRange(0, 0, 1, 0, 1);\n            } else {\n                scrollEnd = MathUtil.mapValueInRange(top - margin, 0, 1, 0, 1);\n            }\n\n            this.scrollToPosition(scrollEnd);\n        } else if (bottom > scrollTop + scrollHeight) {\n            // Scroll down to the item\n            const margin = (scrollingToUnread || !this.state.showBottomUnread) ? scrollMargin : scrollMarginWithUnread;\n            const scrollEnd = (bottom - scrollHeight) + margin;\n\n            this.scrollToPosition(scrollEnd);\n        }\n    }\n\n    scrollToPosition = (scrollEnd) => {\n        // Stop the current animation before scrolling\n        this.scrollAnimation.setCurrentValue(this.refs.scrollbar.getScrollTop()).setAtRest();\n\n        this.scrollAnimation.setEndValue(scrollEnd);\n    }\n\n    updateUnreadIndicators = () => {\n        let showTopUnread = false;\n        let showBottomUnread = false;\n\n        // Consider partially obscured channels as above/below\n\n        if (this.firstUnreadChannel) {\n            const firstUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.firstUnreadChannel]));\n            const firstUnreadPosition = firstUnreadElement ? firstUnreadElement.position() : null;\n\n            if (firstUnreadPosition && ((firstUnreadPosition.top + firstUnreadElement.height()) - scrollMargin) < this.refs.scrollbar.getScrollTop()) {\n                showTopUnread = true;\n            }\n        }\n\n        if (this.lastUnreadChannel) {\n            const lastUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.lastUnreadChannel]));\n            const lastUnreadPosition = lastUnreadElement ? lastUnreadElement.position() : null;\n\n            if (lastUnreadPosition && (lastUnreadPosition.top + scrollMargin) > (this.refs.scrollbar.getScrollTop() + this.refs.scrollbar.getClientHeight())) {\n                showBottomUnread = true;\n            }\n        }\n        if (showTopUnread !== this.state.showTopUnread || showBottomUnread !== this.state.showBottomUnread) {\n            this.setState({\n                showTopUnread,\n                showBottomUnread,\n            });\n        }\n    }\n\n    navigateChannelShortcut = (e) => {\n        if (e.altKey && !e.shiftKey && (Utils.isKeyPressed(e, Constants.KeyCodes.UP) || Utils.isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            if (this.isSwitchingChannel) {\n                return;\n            }\n\n            this.isSwitchingChannel = true;\n            const allChannelIds = this.getDisplayedChannels(this.state.orderedChannelIds);\n            const curChannelId = this.props.currentChannel.id;\n            let curIndex = -1;\n            for (let i = 0; i < allChannelIds.length; i++) {\n                if (allChannelIds[i] === curChannelId) {\n                    curIndex = i;\n                }\n            }\n            let nextIndex = curIndex;\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n                nextIndex = curIndex + 1;\n            } else {\n                nextIndex = curIndex - 1;\n            }\n            const nextChannelId = allChannelIds[Utils.mod(nextIndex, allChannelIds.length)];\n            this.props.actions.switchToChannelById(nextChannelId);\n            this.scrollToChannel(nextChannelId);\n\n            this.isSwitchingChannel = false;\n        } else if (Utils.cmdOrCtrlPressed(e) && e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.K)) {\n            this.handleOpenMoreDirectChannelsModal(e);\n        }\n    };\n\n    navigateUnreadChannelShortcut = (e) => {\n        if (e.altKey && e.shiftKey && (Utils.isKeyPressed(e, Constants.KeyCodes.UP) || Utils.isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            if (this.isSwitchingChannel) {\n                return;\n            }\n\n            this.isSwitchingChannel = true;\n\n            const allChannelIds = this.getDisplayedChannels(this.state.orderedChannelIds);\n\n            let direction = 0;\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.UP)) {\n                direction = -1;\n            } else {\n                direction = 1;\n            }\n\n            const nextIndex = ChannelUtils.findNextUnreadChannelId(\n                this.props.currentChannel.id,\n                allChannelIds,\n                this.props.unreadChannelIds,\n                direction\n            );\n\n            if (nextIndex !== -1) {\n                const nextChannelId = allChannelIds[nextIndex];\n                this.props.actions.switchToChannelById(nextChannelId);\n                this.scrollToChannel(nextChannelId);\n            }\n\n            this.isSwitchingChannel = false;\n        }\n    };\n\n    getDisplayedChannels = (orderedChannelIds = []) => {\n        return orderedChannelIds.reduce((allChannelIds, section) => {\n            allChannelIds.push(...section.items);\n            return allChannelIds;\n        }, []);\n    };\n\n    channelIdIsDisplayedForProps = (orderedChannelIds = [], id) => {\n        const allChannels = this.getDisplayedChannels(orderedChannelIds);\n        for (let i = 0; i < allChannels.length; i++) {\n            if (allChannels[i] === id) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    showMorePublicDirectChannelsModal = () => {\n        this.setState({showMorePublicChannelsModal: true});\n        trackEvent('ui', 'ui_channels_more_public_direct');\n    }\n\n    hideMorePublicDirectChannelsModal = () => {\n        this.setState({showMorePublicChannelsModal: false});\n    }\n\n    onHandleNewChannel = () => {\n        this.hideMorePublicDirectChannelsModal();\n        this.showNewChannelModal(Constants.OPEN_CHANNEL);\n    }\n\n    showMoreChannelsModal = (type) => {\n        this.setState({showMoreChannelsModal: true, morePublicChannelsModalType: type});\n        trackEvent('ui', 'ui_channels_more_public');\n    }\n\n    hideMoreChannelsModal = () => {\n        this.setState({showMoreChannelsModal: false});\n    }\n\n    showNewPublicChannelModal = () => {\n        this.showNewChannelModal(Constants.OPEN_CHANNEL);\n    }\n\n    showNewPrivateChannelModal = () => {\n        this.showNewChannelModal(Constants.PRIVATE_CHANNEL);\n    }\n\n    showNewChannelModal = (type) => {\n        this.setState({newChannelModalType: type});\n    }\n\n    hideNewChannelModal = () => {\n        this.setState({newChannelModalType: ''});\n    }\n\n    showMoreDirectChannelsModal = () => {\n        trackEvent('ui', 'ui_channels_more_direct');\n        this.setState({showDirectChannelsModal: true});\n    }\n\n    hideMoreDirectChannelsModal = () => {\n        this.setState({showDirectChannelsModal: false});\n    }\n\n    openQuickSwitcher = (e) => {\n        e.preventDefault();\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.QUICK_SWITCH,\n            dialogType: QuickSwitchModal,\n        });\n    }\n\n    createSidebarChannel = (channelId) => {\n        return (\n            <SidebarChannel\n                key={channelId}\n                ref={channelId}\n                channelId={channelId}\n                active={channelId === this.props.currentChannel.id}\n                currentTeamName={this.props.currentTeam.name}\n                currentUserId={this.props.currentUser.id}\n            />\n        );\n    }\n\n    renderOrderedChannels = () => {\n        const {orderedChannelIds} = this.state;\n\n        const sectionsToHide = [SidebarChannelGroups.UNREADS, SidebarChannelGroups.FAVORITE];\n\n        return (\n            <Scrollbars\n                ref='scrollbar'\n                autoHide={true}\n                autoHideTimeout={500}\n                autoHideDuration={500}\n                renderThumbHorizontal={renderThumbHorizontal}\n                renderThumbVertical={renderThumbVertical}\n                renderView={renderView}\n                onScroll={this.onScroll}\n                style={{position: 'absolute'}}\n            >\n                <div\n                    id='sidebarChannelContainer'\n                    className='nav-pills__container'\n                >\n                    {orderedChannelIds.map((sec) => {\n                        const section = {\n                            type: sec.type,\n                            name: sec.name,\n                            items: sec.items.map(this.createSidebarChannel),\n                        };\n\n                        if (sectionsToHide.indexOf(section.type) !== -1 && section.items.length === 0) {\n                            return null;\n                        }\n\n                        const sectionId = `${section.type}Channel`;\n                        const ariaLabel = section.name.toLowerCase();\n\n                        return (\n                            <ul\n                                key={section.type}\n                                aria-label={ariaLabel}\n                                className='nav nav-pills nav-stacked a11y__section'\n                                id={sectionId + 'List'}\n                                tabIndex='-1'\n                            >\n                                <li className='sidebar-section__header'>\n                                    <h4\n                                        role='presentation'\n                                        id={sectionId}\n                                    >\n                                        <ChannelName\n                                            sectionType={section.type}\n                                            channelName={section.name}\n                                            browsePublicDirectChannels={this.showMorePublicDirectChannelsModal}\n                                        />\n                                    </h4>\n                                    <ChannelCreate\n                                        sectionType={section.type}\n                                        canCreatePublicChannel={this.props.canCreatePublicChannel}\n                                        canCreatePrivateChannel={this.props.canCreatePrivateChannel}\n                                        createPublicChannel={this.showNewPublicChannelModal}\n                                        createPrivateChannel={this.showNewPrivateChannelModal}\n                                        createDirectMessage={this.handleOpenMoreDirectChannelsModal}\n                                        createPublicDirectChannel={this.showNewPublicChannelModal}\n                                    />\n                                </li>\n                                {section.items}\n                                <ChannelMore\n                                    currentTeamId={this.props.currentTeam.id}\n                                    sectionType={section.type}\n                                    moreChannels={this.showMoreChannelsModal}\n                                    moreDirectMessages={this.handleOpenMoreDirectChannelsModal}\n                                    browsePublicDirectChannels={this.showMorePublicDirectChannelsModal}\n                                    viewArchivedChannels={this.props.viewArchivedChannels}\n                                />\n                            </ul>\n                        );\n                    })}\n                </div>\n            </Scrollbars>\n        );\n    };\n\n    render() {\n        const {channelSwitcherOption} = this.props;\n        const ariaLabel = Utils.localizeMessage('accessibility.sections.lhsList', 'channel sidebar region');\n\n        // Check if we have all info needed to render\n        if (this.props.currentTeam == null || this.props.currentUser == null) {\n            return (<div/>);\n        }\n\n        // keep track of the first and last unread channels so we can use them to set the unread indicators\n        this.firstUnreadChannel = null;\n        this.lastUnreadChannel = null;\n\n        let showChannelModal = false;\n        if (this.state.newChannelModalType !== '') {\n            showChannelModal = true;\n        }\n\n        const above = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        const below = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        let moreDirectChannelsModal;\n        if (this.state.showDirectChannelsModal) {\n            moreDirectChannelsModal = (\n                <MoreDirectChannels\n                    onModalDismissed={this.hideMoreDirectChannelsModal}\n                    isExistingChannel={false}\n                />\n            );\n        }\n\n        let moreChannelsModal;\n        if (this.state.showMoreChannelsModal) {\n            moreChannelsModal = (\n                <MoreChannels\n                    onModalDismissed={this.hideMoreChannelsModal}\n                    handleNewChannel={() => {\n                        this.hideMoreChannelsModal();\n                        this.showNewChannelModal(Constants.OPEN_CHANNEL);\n                    }}\n                    morePublicChannelsModalType={this.state.morePublicChannelsModalType}\n                />\n            );\n        }\n\n        let quickSwitchText = null;\n        if (channelSwitcherOption) {\n            let quickSwitchTextShortcutId = t('quick_switch_modal.channelsShortcut.windows');\n            let quickSwitchTextShortcutDefault = '- CTRL+K';\n            if (Utils.isMac()) {\n                quickSwitchTextShortcutId = t('quick_switch_modal.channelsShortcut.mac');\n                quickSwitchTextShortcutDefault = '- ⌘K';\n            }\n\n            const quickSwitchTextShortcut = (\n                <span className='switch__shortcut hidden-xs'>\n                    <FormattedMessage\n                        id={quickSwitchTextShortcutId}\n                        defaultMessage={quickSwitchTextShortcutDefault}\n                    />\n                </span>\n            );\n\n            quickSwitchText = (\n                <div className='sidebar__switcher'>\n                    <button\n                        id='sidebarSwitcherButton'\n                        className='btn btn-link btn-sm'\n                        onClick={this.openQuickSwitcher}\n                    >\n                        <FormattedMessage\n                            id={'channel_switch_modal.title'}\n                            defaultMessage='Switch Channels'\n                        />\n                        {quickSwitchTextShortcut}\n                    </button>\n                </div>\n            );\n        }\n\n        let morePublicDirectChannelsModal;\n        if (this.state.showMorePublicChannelsModal) {\n            morePublicDirectChannelsModal = (\n                <MorePublicDirectChannels\n                    onModalDismissed={this.hideMorePublicDirectChannelsModal}\n                    handleNewChannel={this.onHandleNewChannel}\n                    isExistingChannel={false}\n                />\n            );\n        }\n\n        return (\n            <div\n                className={classNames('sidebar--left', {'move--right': this.props.isOpen && Utils.isMobile()})}\n                id='sidebar-left'\n                key='sidebar-left'\n            >\n                <NewChannelFlow\n                    show={showChannelModal}\n                    canCreatePublicChannel={this.props.canCreatePublicChannel}\n                    canCreatePrivateChannel={this.props.canCreatePrivateChannel}\n                    channelType={this.state.newChannelModalType}\n                    onModalDismissed={this.hideNewChannelModal}\n                />\n                {morePublicDirectChannelsModal}\n                {moreDirectChannelsModal}\n                {moreChannelsModal}\n\n                <SidebarHeader/>\n\n                <div className='sidebar--left__icons'>\n                    <Pluggable pluggableName='LeftSidebarHeader'/>\n                </div>\n\n                <div\n                    id='lhsList'\n                    role='application'\n                    aria-label={ariaLabel}\n                    tabIndex='-1'\n                    className='sidebar--left__list a11y__region'\n                    data-a11y-sort-order='6'\n                >\n                    <UnreadChannelIndicator\n                        name='Top'\n                        show={this.state.showTopUnread}\n                        onClick={this.scrollToFirstUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-top'\n                        content={above}\n                    />\n                    <UnreadChannelIndicator\n                        name='Bottom'\n                        show={this.state.showBottomUnread}\n                        onClick={this.scrollToLastUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-bottom'\n                        content={below}\n                    />\n\n                    {this.renderOrderedChannels()}\n                </div>\n                {quickSwitchText}\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(Sidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants/index';\nimport {\n    getCurrentChannel,\n    getSortedUnreadChannelIds,\n    getOrderedChannelIds,\n    getUnreads,\n} from 'mattermost-redux/selectors/entities/channels';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool as getBoolPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {switchToChannelById} from 'actions/views/channel';\nimport {openModal} from 'actions/views/modals';\nimport {close} from 'actions/views/lhs';\nimport {getIsLhsOpen} from 'selectors/lhs';\n\nimport Sidebar from './sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeammate = currentChannel && currentChannel.teammate_id && getCurrentChannel(state, currentChannel.teammate_id);\n    const currentTeam = getCurrentTeam(state);\n\n    let canCreatePublicChannel = false;\n    let canCreatePrivateChannel = false;\n\n    if (currentTeam) {\n        canCreatePublicChannel = haveITeamPermission(state, {team: currentTeam.id, permission: Permissions.CREATE_PUBLIC_CHANNEL});\n        canCreatePrivateChannel = haveITeamPermission(state, {team: currentTeam.id, permission: Permissions.CREATE_PRIVATE_CHANNEL});\n    }\n\n    const sidebarPrefs = getSidebarPreferences(state);\n    const lastUnreadChannel = state.views.channel.keepChannelIdAsUnread;\n    const unreadChannelIds = getSortedUnreadChannelIds(state, lastUnreadChannel);\n    const orderedChannelIds = getOrderedChannelIds(\n        state,\n        lastUnreadChannel,\n        sidebarPrefs.grouping,\n        sidebarPrefs.sorting,\n        sidebarPrefs.unreads_at_top === 'true',\n        sidebarPrefs.favorite_at_top === 'true',\n    );\n\n    const channelSwitcherOption = getBoolPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    return {\n        config,\n        unreadChannelIds,\n        orderedChannelIds,\n        channelSwitcherOption,\n        currentChannel,\n        currentTeammate,\n        currentTeam,\n        currentUser: getCurrentUser(state),\n        canCreatePublicChannel,\n        canCreatePrivateChannel,\n        isOpen: getIsLhsOpen(state),\n        unreads: getUnreads(state),\n        viewArchivedChannels: (getConfig(state).ExperimentalViewArchivedChannels === 'true')\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            close,\n            switchToChannelById,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getChannel, selectChannel, joinChannel, getChannelStats} from 'mattermost-redux/actions/channels';\nimport {getPostThread} from 'mattermost-redux/actions/posts';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadChannelsForCurrentUser} from 'actions/channel_actions.jsx';\nimport {loadNewDMIfNeeded, loadNewGMIfNeeded} from 'actions/user_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {ActionTypes, Constants, ErrorPageTypes} from 'utils/constants';\n\nexport function focusPost(postId, returnTo = '') {\n    return async (dispatch, getState) => {\n        const {data} = await dispatch(getPostThread(postId));\n\n        if (!data) {\n            browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n            return;\n        }\n\n        const state = getState();\n        const channelId = data.posts[data.order[0]].channel_id;\n        let channel = state.entities.channels.channels[channelId];\n        const teamId = getCurrentTeamId(state);\n\n        if (!channel) {\n            const {data: channelData} = await dispatch(getChannel(channelId));\n\n            if (!channelData) {\n                browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n                return;\n            }\n\n            channel = channelData;\n        }\n\n        const myMember = state.entities.channels.myMembers[channelId];\n\n        if (!myMember) {\n            // If it's a DM or GM channel and we don't have a channel member for it already, user is not a member\n            if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n                browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n                return;\n            }\n\n            await dispatch(joinChannel(getCurrentUserId(getState()), null, channelId));\n        }\n\n        if (channel.team_id && channel.team_id !== teamId) {\n            browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n            return;\n        }\n\n        if (channel && channel.type === Constants.DM_CHANNEL) {\n            loadNewDMIfNeeded(channel.id);\n        } else if (channel && channel.type === Constants.GM_CHANNEL) {\n            loadNewGMIfNeeded(channel.id);\n        }\n\n        dispatch(selectChannel(channelId));\n        dispatch({\n            type: ActionTypes.RECEIVED_FOCUSED_POST,\n            data: postId,\n            channelId,\n        });\n\n        dispatch(loadChannelsForCurrentUser());\n        dispatch(getChannelStats(channelId));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\n\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport {isMobile} from 'utils/user_agent';\nimport {isKeyPressed, localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst KeyCodes = Constants.KeyCodes;\n\nconst holders = defineMessages({\n    error: {\n        id: t('edit_channel_header_modal.error'),\n        defaultMessage: 'This channel header is too long, please enter a shorter one',\n    },\n});\n\nclass EditChannelHeaderModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * react-intl helper object\n         */\n        intl: intlShape.isRequired,\n\n        /*\n         * Object with info about current channel ,\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Set whether to show the modal or not\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * boolean should be `ctrl` button pressed to send\n         */\n        ctrlSend: PropTypes.bool.isRequired,\n\n        /*\n         * Collection of redux actions\n         */\n        actions: PropTypes.shape({\n\n            closeModal: PropTypes.func.isRequired,\n\n            /*\n             * patch channel redux-action\n             */\n            patchChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            preview: false,\n            header: props.channel.header,\n            saving: false,\n        };\n    }\n\n    handleModalKeyDown = (e) => {\n        if (isKeyPressed(e, KeyCodes.ESCAPE)) {\n            this.hideModal();\n        }\n    }\n\n    updatePreview = (newState) => {\n        this.setState({preview: newState});\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            header: e.target.value,\n        });\n    }\n\n    handleSave = async () => {\n        const {header} = this.state;\n        if (header === this.props.channel.header) {\n            this.hideModal();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        const {channel, actions} = this.props;\n        const {error} = await actions.patchChannel(channel.id, {header});\n        if (error) {\n            this.setState({serverError: error, saving: false});\n        } else {\n            this.hideModal();\n        }\n    }\n\n    hideModal = () => {\n        this.props.actions.closeModal(ModalIdentifiers.EDIT_CHANNEL_HEADER);\n    }\n\n    focusTextbox = () => {\n        if (this.refs.editChannelHeaderTextbox) {\n            this.refs.editChannelHeaderTextbox.getWrappedInstance().focus();\n        }\n    }\n\n    blurTextbox = () => {\n        if (this.refs.editChannelHeaderTextbox) {\n            this.refs.editChannelHeaderTextbox.getWrappedInstance().blur();\n        }\n    }\n\n    handleEntering = () => {\n        this.focusTextbox();\n    }\n\n    handleKeyDown = (e) => {\n        const {ctrlSend} = this.props;\n        if (ctrlSend && isKeyPressed(e, KeyCodes.ENTER) && e.ctrlKey === true) {\n            this.handleKeyPress(e);\n        }\n    }\n\n    handleKeyPress = (e) => {\n        const {ctrlSend} = this.props;\n        if (!isMobile() && ((ctrlSend && e.ctrlKey) || !ctrlSend)) {\n            if (isKeyPressed(e, KeyCodes.ENTER) && !e.shiftKey && !e.altKey) {\n                e.preventDefault();\n                this.blurTextbox();\n                this.handleSave(e);\n            }\n        }\n    }\n\n    renderError = () => {\n        const {serverError} = this.state;\n        if (!serverError) {\n            return null;\n        }\n\n        let errorMsg;\n        if (serverError.server_error_id === 'model.channel.is_valid.header.app_error') {\n            errorMsg = this.props.intl.formatMessage(holders.error);\n        } else {\n            errorMsg = serverError.message;\n        }\n\n        return (\n            <div className='form-group has-error'>\n                <br/>\n                <label className='control-label'>\n                    {errorMsg}\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        let headerTitle = null;\n        if (this.props.channel.type === Constants.DM_CHANNEL) {\n            headerTitle = (\n                <FormattedMessage\n                    id='edit_channel_header_modal.title_dm'\n                    defaultMessage='Edit Header'\n                />\n            );\n        } else {\n            headerTitle = (\n                <FormattedMessage\n                    id='edit_channel_header_modal.title'\n                    defaultMessage='Edit Header for {channel}'\n                    values={{\n                        channel: this.props.channel.display_name,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                keyboard={false}\n                onKeyDown={this.handleModalKeyDown}\n                onHide={this.hideModal}\n                onEntering={this.handleEntering}\n                onExited={this.hideModal}\n                role='dialog'\n                aria-labelledby='editChannelHeaderModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editChannelHeaderModalLabel'\n                    >\n                        {headerTitle}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body bsClass='modal-body edit-modal-body'>\n                    <div>\n                        <p>\n                            <FormattedMessage\n                                id='edit_channel_header_modal.description'\n                                defaultMessage='Edit the text appearing next to the channel name in the channel header.'\n                            />\n                        </p>\n                        <div className='textarea-wrapper'>\n                            <Textbox\n                                value={this.state.header}\n                                onChange={this.handleChange}\n                                onKeyPress={this.handleKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                supportsCommands={false}\n                                suggestionListStyle='bottom'\n                                createMessage={localizeMessage('edit_channel_header.editHeader', 'Edit the Channel Header...')}\n                                previewMessageLink={localizeMessage('edit_channel_header.previewHeader', 'Edit Header')}\n                                handlePostError={this.handlePostError}\n                                id='edit_textbox'\n                                ref='editChannelHeaderTextbox'\n                                characterLimit={1024}\n                                preview={this.state.preview}\n                            />\n                        </div>\n                        <div className='post-create-footer'>\n                            <TextboxLinks\n                                characterLimit={1024}\n                                showPreview={this.state.preview}\n                                ref={this.setTextboxLinksRef}\n                                updatePreview={this.updatePreview}\n                                message={this.state.header}\n                            />\n                        </div>\n                        <br/>\n                        {this.renderError()}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link cancel-button'\n                        onClick={this.hideModal}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_header_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        disabled={this.state.saving}\n                        type='button'\n                        className='btn btn-primary save-button'\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_header_modal.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(EditChannelHeaderModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {patchChannel} from 'mattermost-redux/actions/channels';\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {closeModal} from 'actions/views/modals';\n\nimport {isModalOpen} from '../../selectors/views/modals';\nimport {ModalIdentifiers} from '../../utils/constants';\n\nimport EditChannelHeaderModal from './edit_channel_header_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        show: isModalOpen(state, ModalIdentifiers.EDIT_CHANNEL_HEADER),\n        ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeModal,\n            patchChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditChannelHeaderModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\n//import {Client4} from 'mattermost-redux/client';\n\nimport {filterProfilesMatchingTerm} from 'mattermost-redux/utils/user_utils';\n\nimport {displayEntireNameForUser, localizeMessage, isGuest} from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture';\nimport MultiSelect from 'components/multiselect/multiselect';\nimport AddUserIcon from 'components/widgets/icons/fa_add_user_icon';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport BotBadge from 'components/widgets/badges/bot_badge';\n\nimport Constants from 'utils/constants';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 20;\n\nexport default class ChannelInviteModal extends React.Component {\n    static propTypes = {\n        profilesNotInCurrentChannel: PropTypes.array.isRequired,\n        profilesNotInCurrentTeam: PropTypes.array.isRequired,\n        onHide: PropTypes.func.isRequired,\n        channel: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            addUsersToChannel: PropTypes.func.isRequired,\n            getProfilesNotInChannel: PropTypes.func.isRequired,\n            getTeamStats: PropTypes.func.isRequired,\n            searchProfiles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            term: '',\n            show: true,\n            saving: false,\n            loadingUsers: true,\n        };\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        if (values.indexOf(value) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    };\n\n    componentDidMount() {\n        this.props.actions.getProfilesNotInChannel(this.props.channel.team_id, this.props.channel.id, this.props.channel.group_constrained, 0).then(() => {\n            this.setUsersLoadingState(false);\n        });\n        this.props.actions.getTeamStats(this.props.channel.team_id);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    };\n\n    handleInviteError = (err) => {\n        if (err) {\n            this.setState({\n                saving: false,\n                inviteError: err.message,\n            });\n        }\n    };\n\n    handleDelete = (values) => {\n        this.setState({values});\n    };\n\n    setUsersLoadingState = (loadingState) => {\n        this.setState({\n            loadingUsers: loadingState,\n        });\n    };\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setUsersLoadingState(true);\n            this.props.actions.getProfilesNotInChannel(this.props.channel.team_id, this.props.channel.id, this.props.channel.group_constrained, page + 1, USERS_PER_PAGE).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    };\n\n    handleSubmit = (e) => {\n        const {actions, channel} = this.props;\n        if (e) {\n            e.preventDefault();\n        }\n\n        const userIds = this.state.values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        actions.addUsersToChannel(channel.id, userIds).then((result) => {\n            if (result.error) {\n                this.handleInviteError(result.error);\n            } else {\n                this.setState({\n                    saving: false,\n                    inviteError: null,\n                });\n                this.onHide();\n            }\n        });\n    };\n\n    search = (searchTerm) => {\n        const term = searchTerm.trim();\n        clearTimeout(this.searchTimeoutId);\n        this.setState({\n            term,\n        });\n\n        this.searchTimeoutId = setTimeout(\n            async () => {\n                this.setUsersLoadingState(true);\n                const options = {\n                    team_id: this.props.channel.team_id,\n                    not_in_channel_id: this.props.channel.id,\n                    group_constrained: this.props.channel.group_constrained,\n                };\n                await this.props.actions.searchProfiles(term, options);\n                this.setUsersLoadingState(false);\n            },\n            Constants.SEARCH_TIMEOUT_MILLISECONDS\n        );\n    };\n\n    renderAriaLabel = (option) => {\n        if (!option) {\n            return null;\n        }\n        return option.username;\n    }\n\n    renderOption = (option, isSelected, onAdd, onMouseMove) => {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <ProfilePicture\n\n                    // src={Client4.getProfilePictureUrl(option.id, option.last_picture_update)}\n                    src={option.avatar}\n                    size='lg'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>\n                        {displayEntireNameForUser(option)}\n                        <BotBadge\n                            show={Boolean(option.is_bot)}\n                            className='badge-popoverlist'\n                        />\n                        <GuestBadge\n                            show={isGuest(option)}\n                            className='popoverlist'\n                        />\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddUserIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    renderValue(props) {\n        return props.data.username;\n    }\n\n    render() {\n        let inviteError = null;\n        if (this.state.inviteError) {\n            inviteError = (<label className='has-error control-label'>{this.state.inviteError}</label>);\n        }\n\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.numPeopleRemaining'\n                defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '\n                values={{\n                    num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                }}\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        const users = filterProfilesMatchingTerm(this.props.profilesNotInCurrentChannel, this.state.term).filter((user) => {\n            return user.delete_at === 0 && !this.props.profilesNotInCurrentTeam.includes(user);\n        });\n\n        const content = (\n            <MultiSelect\n                key='addUsersToChannelKey'\n                options={users}\n                optionRenderer={this.renderOption}\n                values={this.state.values}\n                valueRenderer={this.renderValue}\n                ariaLabelRenderer={this.renderAriaLabel}\n                perPage={USERS_PER_PAGE}\n                handlePageChange={this.handlePageChange}\n                handleInput={this.search}\n                handleDelete={this.handleDelete}\n                handleAdd={this.addValue}\n                handleSubmit={this.handleSubmit}\n                maxValues={MAX_SELECTABLE_VALUES}\n                numRemainingText={numRemainingText}\n                buttonSubmitText={buttonSubmitText}\n                buttonSubmitLoadingText={buttonSubmitLoadingText}\n                saving={this.state.saving}\n                loading={this.state.loadingUsers}\n                placeholderText={localizeMessage('multiselect.placeholder', 'Search and add members')}\n            />\n        );\n\n        return (\n            <Modal\n                id='addUsersToChannelModal'\n                dialogClassName='a11y__modal more-modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='channelInviteModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelInviteModalLabel'\n                    >\n                        <FormattedMessage\n                            id='channel_invite.addNewMembers'\n                            defaultMessage='Add New Members to '\n                        />\n                        <span className='name'>{this.props.channel.display_name}</span>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    role='application'\n                >\n                    {inviteError}\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats} from 'mattermost-redux/actions/teams';\nimport {getProfilesNotInChannel, searchProfiles} from 'mattermost-redux/actions/users';\nimport {getProfilesNotInCurrentChannel, getProfilesNotInCurrentTeam} from 'mattermost-redux/selectors/entities/users';\n\nimport {addUsersToChannel} from 'actions/channel_actions';\n\nimport ChannelInviteModal from './channel_invite_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        profilesNotInCurrentChannel: getProfilesNotInCurrentChannel(state),\n        profilesNotInCurrentTeam: getProfilesNotInCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addUsersToChannel,\n            getProfilesNotInChannel,\n            getTeamStats,\n            searchProfiles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelInviteModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nconst ROWS_FROM_BOTTOM_TO_OPEN_UP = 3;\n\nexport default class ChannelMembersDropdown extends React.Component {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        channelMember: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        canChangeMemberRoles: PropTypes.bool.isRequired,\n        canRemoveMember: PropTypes.bool.isRequired,\n        index: PropTypes.number.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            getChannelStats: PropTypes.func.isRequired,\n            updateChannelMemberSchemeRoles: PropTypes.func.isRequired,\n            removeChannelMember: PropTypes.func.isRequired,\n            getChannelMember: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: null,\n            removing: false,\n        };\n    }\n\n    handleRemoveFromChannel = () => {\n        if (this.state.removing) {\n            return;\n        }\n\n        const {actions, channel, user} = this.props;\n        this.setState({removing: true});\n\n        actions.removeChannelMember(channel.id, user.id).then((result) => {\n            if (result.error) {\n                this.setState({\n                    serverError: result.error.message,\n                    removing: false,\n                });\n                return;\n            }\n\n            this.setState({removing: false});\n            actions.getChannelStats(channel.id);\n        });\n    };\n\n    handleMakeChannelMember = async () => {\n        const {error} = await this.props.actions.updateChannelMemberSchemeRoles(this.props.channel.id, this.props.user.id, true, false);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.props.actions.getChannelStats(this.props.channel.id);\n            this.props.actions.getChannelMember(this.props.channel.id, this.props.user.id);\n        }\n    };\n\n    handleMakeChannelAdmin = async () => {\n        const {error} = await this.props.actions.updateChannelMemberSchemeRoles(this.props.channel.id, this.props.user.id, true, true);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.props.actions.getChannelStats(this.props.channel.id);\n            this.props.actions.getChannelMember(this.props.channel.id, this.props.user.id);\n        }\n    };\n\n    renderRole(isChannelAdmin, isGuest) {\n        if (isChannelAdmin) {\n            return (\n                <FormattedMessage\n                    id='channel_members_dropdown.channel_admin'\n                    defaultMessage='Channel Admin'\n                />\n            );\n        } else if (isGuest) {\n            return (\n                <FormattedMessage\n                    id='channel_members_dropdown.channel_guest'\n                    defaultMessage='Channel Guest'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='channel_members_dropdown.channel_member'\n                defaultMessage='Channel Member'\n            />\n        );\n    }\n\n    render() {\n        const {index, totalUsers, isLicensed, channelMember, user, channel, currentUserId, canChangeMemberRoles, canRemoveMember} = this.props;\n        const {serverError} = this.state;\n\n        const isChannelAdmin = Utils.isChannelAdmin(isLicensed, channelMember.roles, channelMember.scheme_admin);\n        const isGuest = Utils.isGuest(user);\n        const isMember = !isChannelAdmin && !isGuest;\n        const isDefaultChannel = channel.name === Constants.DEFAULT_CHANNEL;\n        const currentRole = this.renderRole(isChannelAdmin, isGuest);\n\n        if (user.id === currentUserId) {\n            return null;\n        }\n        const canMakeUserChannelMember = canChangeMemberRoles && isChannelAdmin;\n        const canMakeUserChannelAdmin = canChangeMemberRoles && isLicensed && isMember;\n        const canRemoveUserFromChannel = canRemoveMember && (!channel.group_constrained || user.is_bot) && (!isDefaultChannel || isGuest);\n\n        if (canMakeUserChannelMember || canMakeUserChannelAdmin || canRemoveUserFromChannel) {\n            return (\n                <MenuWrapper>\n                    <button\n                        className='dropdown-toggle theme color--link style--none'\n                        type='button'\n                    >\n                        <span className='sr-only'>{user.username}</span>\n                        <span>{currentRole} </span>\n                        <DropdownIcon/>\n                    </button>\n                    <Menu\n                        openLeft={true}\n                        openUp={totalUsers > ROWS_FROM_BOTTOM_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP}\n                        ariaLabel={Utils.localizeMessage('channel_members_dropdown.menuAriaLabel', 'Channel member role change')}\n                    >\n                        <Menu.ItemAction\n                            show={canMakeUserChannelMember}\n                            onClick={this.handleMakeChannelMember}\n                            text={Utils.localizeMessage('channel_members_dropdown.make_channel_member', 'Make Channel Member')}\n                        />\n                        <Menu.ItemAction\n                            show={canMakeUserChannelAdmin}\n                            onClick={this.handleMakeChannelAdmin}\n                            text={Utils.localizeMessage('channel_members_dropdown.make_channel_admin', 'Make Channel Admin')}\n                        />\n                        <Menu.ItemAction\n                            show={canRemoveUserFromChannel}\n                            onClick={this.handleRemoveFromChannel}\n                            text={Utils.localizeMessage('channel_members_dropdown.remove_from_channel', 'Remove from Channel')}\n                        />\n                        {serverError && (\n                            <div className='has-error'>\n                                <label className='has-error control-label'>{serverError}</label>\n                            </div>\n                        )}\n                    </Menu>\n                </MenuWrapper>\n            );\n        }\n\n        if (isDefaultChannel) {\n            return (\n                <div/>\n            );\n        }\n\n        return (\n            <div>\n                {currentRole}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getChannelStats, updateChannelMemberSchemeRoles, removeChannelMember, getChannelMember} from 'mattermost-redux/actions/channels';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {canManageMembers} from 'utils/channel_utils.jsx';\n\nimport ChannelMembersDropdown from './channel_members_dropdown.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const {channel} = ownProps;\n    const canChangeMemberRoles = haveIChannelPermission(\n        state,\n        {\n            channel: channel.id,\n            team: channel.team_id,\n            permission: Permissions.MANAGE_CHANNEL_ROLES,\n        }\n    );\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n    const canRemoveMember = canManageMembers(channel);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        isLicensed,\n        canChangeMemberRoles,\n        canRemoveMember,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannelMember,\n            getChannelStats,\n            updateChannelMemberSchemeRoles,\n            removeChannelMember,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelMembersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport ChannelMembersDropdown from 'components/channel_members_dropdown';\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list_container.jsx';\nimport LoadingScreen from 'components/loading_screen';\nconst USERS_PER_PAGE = 50;\n\nexport default class MemberListChannel extends React.PureComponent {\n    static propTypes = {\n        currentTeamId: PropTypes.string.isRequired,\n        currentChannelId: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        usersToDisplay: PropTypes.arrayOf(PropTypes.object).isRequired,\n        actionUserProps: PropTypes.object.isRequired,\n        totalChannelMembers: PropTypes.number.isRequired,\n        channel: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            searchProfiles: PropTypes.func.isRequired,\n            getChannelStats: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            loadProfilesAndTeamMembersAndChannelMembers: PropTypes.func.isRequired,\n            loadStatusesForProfilesList: PropTypes.func.isRequired,\n            loadTeamMembersAndChannelMembersForProfilesList: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        const {\n            actions,\n            currentChannelId,\n            currentTeamId,\n        } = this.props;\n\n        actions.loadProfilesAndTeamMembersAndChannelMembers(0, Constants.PROFILE_CHUNK_SIZE, currentTeamId, currentChannelId).then(({data}) => {\n            if (data) {\n                this.loadComplete();\n            }\n        });\n\n        actions.getChannelStats(currentChannelId);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setModalSearchTerm('');\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n            const searchTerm = this.props.searchTerm;\n\n            if (searchTerm === '') {\n                this.loadComplete();\n                this.searchTimeoutId = 0;\n                return;\n            }\n\n            const searchTimeoutId = setTimeout(\n                async () => {\n                    const {data} = await prevProps.actions.searchProfiles(searchTerm, {team_id: this.props.currentTeamId, in_channel_id: this.props.currentChannelId});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    this.props.actions.loadStatusesForProfilesList(data);\n                    this.props.actions.loadTeamMembersAndChannelMembersForProfilesList(data, this.props.currentTeamId, this.props.currentChannelId).then(({data: membersLoaded}) => {\n                        if (membersLoaded) {\n                            this.loadComplete();\n                        }\n                    });\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    }\n\n    nextPage = (page) => {\n        this.props.actions.loadProfilesAndTeamMembersAndChannelMembers(page + 1, USERS_PER_PAGE);\n    }\n\n    handleSearch = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        return (\n            <SearchableUserList\n                users={this.props.usersToDisplay}\n                usersPerPage={USERS_PER_PAGE}\n                total={this.props.totalChannelMembers}\n                nextPage={this.nextPage}\n                search={this.handleSearch}\n                actions={channelIsArchived ? [] : [ChannelMembersDropdown]}\n                actionUserProps={this.props.actionUserProps}\n                focusOnMount={!UserAgent.isMobile()}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\nimport {searchProfilesInCurrentChannel, getProfilesInCurrentChannel} from 'mattermost-redux/selectors/entities/users';\nimport {getMembersInCurrentChannel, getCurrentChannelStats, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getMembersInCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getChannelStats} from 'mattermost-redux/actions/channels';\nimport {searchProfiles} from 'mattermost-redux/actions/users';\nimport {sortByUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {\n    loadProfilesAndTeamMembersAndChannelMembers,\n    loadTeamMembersAndChannelMembersForProfilesList,\n} from 'actions/user_actions.jsx';\nimport {loadStatusesForProfilesList} from 'actions/status_actions.jsx';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport MemberListChannel from './member_list_channel.jsx';\n\nconst getUsersAndActionsToDisplay = createSelector(\n    (state, users) => users,\n    getMembersInCurrentTeam,\n    getMembersInCurrentChannel,\n    getCurrentChannel,\n    (users = [], teamMembers = {}, channelMembers = {}, channel = {}) => {\n        const actionUserProps = {};\n        const usersToDisplay = [];\n\n        for (let i = 0; i < users.length; i++) {\n            const user = users[i];\n\n            if (teamMembers[user.id] && channelMembers[user.id] && user.delete_at === 0) {\n                usersToDisplay.push(user);\n\n                actionUserProps[user.id] = {\n                    channel,\n                    teamMember: teamMembers[user.id],\n                    channelMember: channelMembers[user.id],\n                };\n            }\n        }\n\n        return {\n            usersToDisplay: usersToDisplay.sort(sortByUsername),\n            actionUserProps,\n        };\n    }\n);\n\nfunction mapStateToProps(state) {\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        users = searchProfilesInCurrentChannel(state, searchTerm);\n    } else {\n        users = getProfilesInCurrentChannel(state);\n    }\n\n    const stats = getCurrentChannelStats(state) || {member_count: 0};\n\n    return {\n        ...getUsersAndActionsToDisplay(state, users),\n        currentTeamId: state.entities.teams.currentTeamId,\n        currentChannelId: state.entities.channels.currentChannelId,\n        searchTerm,\n        totalChannelMembers: stats.member_count,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            searchProfiles,\n            getChannelStats,\n            setModalSearchTerm,\n            loadProfilesAndTeamMembersAndChannelMembers,\n            loadStatusesForProfilesList,\n            loadTeamMembersAndChannelMembersForProfilesList,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberListChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport MemberListChannel from 'components/member_list_channel';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport {ModalIdentifiers} from 'utils/constants';\n\nexport default class ChannelMembersModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Bool whether user has permission to manage current channel\n         */\n        canManageChannelMembers: PropTypes.bool.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    handleHide = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    handleExit = () => {\n        this.props.onHide();\n    }\n\n    onAddNewMembersButton = () => {\n        const {channel, actions} = this.props;\n\n        actions.openModal({\n            modalId: ModalIdentifiers.CHANNEL_INVITE,\n            dialogType: ChannelInviteModal,\n            dialogProps: {channel},\n        });\n\n        this.handleExit();\n    }\n\n    render() {\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        return (\n            <div>\n                <Modal\n                    dialogClassName='a11y__modal more-modal more-modal--action'\n                    show={this.state.show}\n                    onHide={this.handleHide}\n                    onExited={this.handleExit}\n                    role='dialog'\n                    aria-labelledby='channelMembersModalLabel'\n                    id='channelMembersModal'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='channelMembersModalLabel'\n                        >\n                            <span className='name'>{this.props.channel.display_name}</span>\n                            <FormattedMessage\n                                id='channel_members_modal.members'\n                                defaultMessage=' Members'\n                            />\n                        </Modal.Title>\n                        {this.props.canManageChannelMembers && !channelIsArchived &&\n                            <a\n                                id='showInviteModal'\n                                className='btn btn-md btn-primary'\n                                href='#'\n                                onClick={this.onAddNewMembersButton}\n                            >\n                                <FormattedMessage\n                                    id='channel_members_modal.addNew'\n                                    defaultMessage=' Add Members'\n                                />\n                            </a>\n                        }\n                    </Modal.Header>\n                    <Modal.Body>\n                        <MemberListChannel\n                            channel={this.props.channel}\n                        />\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {canManageChannelMembers} from 'mattermost-redux/selectors/entities/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ChannelMembersModal from './channel_members_modal';\n\nconst mapStateToProps = (state) => ({\n    canManageChannelMembers: canManageChannelMembers(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({openModal}, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelMembersModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MemberIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(title) => (\n                        <i className=\"fas fa-user\" title={title}/>\n                        // <svg\n                        //     width='14px'\n                        //     height='14px'\n                        //     viewBox='0 0 16 16'\n                        //     role='img'\n                        //     aria-label={ariaLabel}\n                        // >\n                        //     <g\n                        //         stroke='none'\n                        //         strokeWidth='1'\n                        //         fill='inherit'\n                        //         fillRule='evenodd'\n                        //     >\n                        //         <g\n                        //             transform='translate(-725.000000, -32.000000)'\n                        //             fillRule='nonzero'\n                        //             fill='inherit'\n                        //         >\n                        //             <g>\n                        //                 <g\n                        //                     transform='translate(676.000000, 22.000000)'\n                        //                 >\n                        //                     <path\n                        //                         d='M64.9481342,24 C64.6981342,20.955 63.2551342,19.076 60.6731342,18.354 C61.4831342,17.466 61.9881342,16.296 61.9881342,15 C61.9881342,12.238 59.7501342,10 56.9881342,10 C54.2261342,10 51.9881342,12.238 51.9881342,15 C51.9881342,16.297 52.4941342,17.467 53.3031342,18.354 C50.7221342,19.076 49.2771342,20.955 49.0271342,24 C49.0161342,24.146 49.0061342,24.577 49.0001342,25.001 C48.9911342,25.553 49.4361342,26 49.9881342,26 L63.9881342,26 C64.5411342,26 64.9851342,25.553 64.9761342,25.001 C64.9701342,24.577 64.9601342,24.146 64.9481342,24 Z M56.9881342,12 C58.6421342,12 59.9881342,13.346 59.9881342,15 C59.9881342,16.654 58.6421342,18 56.9881342,18 C55.3341342,18 53.9881342,16.654 53.9881342,15 C53.9881342,13.346 55.3341342,12 56.9881342,12 Z M51.0321342,24 C51.2981342,21.174 52.7911342,20 55.9881342,20 L57.9881342,20 C61.1851342,20 62.6781342,21.174 62.9441342,24 L51.0321342,24 Z'\n                        //                         id='User_4_x2C__Profile_5-Copy-9'\n                        //                     />\n                        //                 </g>\n                        //             </g>\n                        //         </g>\n                        //     </g>\n                        // </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class MessageIcon extends React.PureComponent {\n    render() {\n        return (\n            <button\n                {...this.props}\n                aria-label={localizeMessage('members_popover.button.message', 'message')}\n                className='style--none icon icon__message'\n            >\n                <FormattedMessage\n                    id='generic_icons.message'\n                    defaultMessage='Message Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='18px'\n                            height='16px'\n                            viewBox='0 0 18 16'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-200.000000, -174.000000)'\n                                    fill='inherit'\n                                >\n                                    <g transform='translate(200.000000, 174.000000)'>\n                                        <path d='M7.2546625,1.42801356 C10.458475,1.42801356 12.999475,3.24528136 12.999475,5.52023729 C12.9895,8.04188475 10.6062625,9.89326102 7.40245,9.89326102 C7.40245,9.89326102 6.9134125,9.91229831 6.4115125,9.83747119 L5.82535,9.79622373 L5.15335,10.3586169 C4.997425,10.5397356 4.3199125,11.1095322 3.736375,11.4794373 C4.0915375,10.4598847 4.07605,10.1370441 4.07605,10.1370441 L4.1251375,9.49004068 L3.55315,9.19549153 C2.0986375,8.44616271 1.4444875,6.88616271 1.4444875,5.52023729 C1.4444875,3.24528136 4.05085,1.42801356 7.2546625,1.42801356 M7.2546625,0.370386441 C3.465475,0.370386441 0.3944875,2.65829831 0.3944875,5.52023729 C0.3944875,7.3028678 1.2623125,9.20342373 3.0751375,10.1370441 C3.0751375,10.1478847 3.07225,10.1560814 3.07225,10.1679797 C3.07225,10.9426915 2.43175,12.0048136 2.1794875,12.4429356 L2.1805375,12.4429356 C2.1605875,12.4902644 2.148775,12.5420881 2.148775,12.5973492 C2.148775,12.8141627 2.322025,12.9881424 2.5375375,12.9881424 C2.5693,12.9881424 2.6210125,12.9815322 2.6393875,12.9815322 C2.6446375,12.9815322 2.6467375,12.9815322 2.6462125,12.9831186 C3.986275,12.762339 5.9642125,11.2435864 6.2576875,10.8837288 C6.5585125,10.928678 6.761425,10.9358169 7.0136875,10.9358169 C7.120525,10.9358169 7.2347125,10.9342305 7.3696375,10.9342305 C11.1583,10.9342305 14.094625,8.75446102 14.049475,5.52023729 C14.049475,2.65829831 11.0435875,0.370386441 7.2546625,0.370386441'/>\n                                        <path d='M17.2055125,9.79172881 C17.2055125,8.35811525 16.6498,7.26532203 15.2624875,6.4451322 C15.228625,6.82614237 15.120475,7.23517966 15.0031375,7.59477288 C15.8998375,8.21903729 16.1555125,8.85995932 16.1555125,9.79172881 C16.1555125,10.9323797 15.62815,11.7597085 14.40175,12.3919051 L13.879375,12.653139 C13.879375,12.653139 13.9337125,14.0082237 14.0140375,14.3511593 C12.9895,13.5946915 12.6374875,12.9630237 12.6374875,12.9630237 L12.08545,13.0486915 C11.86705,13.0809492 11.276425,13.0812136 11.276425,13.0812136 C9.85,13.0812136 8.7929125,12.7388068 7.8909625,12.0278169 C8.135875,12.0124814 6.42805,12.0132746 6.3899875,12.0468542 C7.4326375,13.3297559 9.1373125,14.1388407 11.276425,14.1388407 C11.3927125,14.1388407 11.49115,14.1398983 11.58355,14.1398983 C11.801425,14.1398983 11.9773,14.1338169 12.237175,14.095478 C12.491275,14.4058915 13.914025,15.7728746 15.0724375,15.9629831 C15.0719125,15.9619254 15.073225,15.9619254 15.078475,15.9619254 C15.0939625,15.9619254 15.13885,15.967478 15.16615,15.967478 C15.3522625,15.967478 15.5024125,15.8167661 15.5024125,15.6293017 C15.5024125,15.5817085 15.49165,15.5367593 15.47485,15.4960407 L15.4759,15.4960407 C15.258025,15.117939 14.9159875,14.0129831 14.9159875,13.3435051 C14.9159875,13.3331932 14.9128375,13.3260542 14.9128375,13.3168 C16.4797,12.5095661 17.2055125,11.3321627 17.2055125,9.79172881'/>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n//import {Client4} from 'mattermost-redux/client';\n\nimport ProfilePicture from 'components/profile_picture';\nimport MessageIcon from 'components/widgets/icons/message_icon';\nimport {UserStatuses} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\n\nexport default class PopoverListMembersItem extends React.PureComponent {\n    static propTypes = {\n        showMessageIcon: PropTypes.bool.isRequired,\n        onItemClick: PropTypes.func.isRequired,\n        status: PropTypes.string.isRequired,\n        user: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n        status: UserStatuses.OFFLINE,\n    };\n\n    handleClick = () => {\n        this.props.onItemClick(this.props.user);\n    };\n\n    render() {\n        if (!this.props.user) {\n            return null;\n        }\n\n        const name = Utils.getDisplayNameByUser(this.props.user);\n        if (!name) {\n            return null;\n        }\n\n        let messageIcon;\n        if (this.props.showMessageIcon) {\n            messageIcon = (\n                <MessageIcon aria-hidden='true'/>\n            );\n        }\n\n        const botClass = this.props.user.is_bot ? ' more-modal__row--bot' : '';\n\n        const status = this.props.user.is_bot ? null : this.props.status;\n\n        return (\n            <div\n                data-testid='popoverListMembersItem'\n                tabIndex='0'\n                aria-label={name.toLowerCase()}\n                className={'more-modal__row' + botClass}\n                onClick={this.handleClick}\n            >\n                <ProfilePicture\n\n                    //src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    src={this.props.user.avatar}\n                    status={status}\n                    size='md'\n                />\n                <div className='more-modal__details d-flex whitespace--nowrap'>\n                    <div className='more-modal__name'>\n                        {name}\n                    </div>\n                    <BotBadge\n                        show={Boolean(this.props.user.is_bot)}\n                        className='badge-popoverlist'\n                    />\n                    <GuestBadge\n                        show={Utils.isGuest(this.props.user)}\n                        className='badge-popoverlist'\n                    />\n                </div>\n                <div className='more-modal__actions'>\n                    {messageIcon}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {canManageMembers} from 'utils/channel_utils.jsx';\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelMembersModal from 'components/channel_members_modal';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport MemberIcon from 'components/widgets/icons/member_icon';\nimport Popover from 'components/widgets/popover';\nimport TeamMembersModal from 'components/team_members_modal';\n\nimport PopoverListMembersItem from './popover_list_members_item';\n\nexport default class PopoverListMembers extends React.Component {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        statuses: PropTypes.object.isRequired,\n        users: PropTypes.array.isRequired,\n        memberCount: PropTypes.number,\n        currentUserId: PropTypes.string.isRequired,\n        teamUrl: PropTypes.string,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n            loadProfilesAndStatusesInChannel: PropTypes.func.isRequired,\n            openDirectChannelToUserId: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.membersList = React.createRef();\n\n        this.state = {\n            showPopover: false,\n            showTeamMembersModal: false,\n            showChannelMembersModal: false,\n            showChannelInviteModal: false,\n            users: props.users,\n            statuses: props.statuses,\n            sortedUsers: this.sortUsers(props.users, props.statuses),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.users !== prevState.users || nextProps.statuses !== prevState.statuses) {\n            return {\n                users: nextProps.users,\n                statuses: nextProps.statuses,\n                sortedUsers: Utils.sortUsersByStatusAndDisplayName(nextProps.users, nextProps.statuses),\n            };\n        }\n        return null;\n    }\n\n    sortUsers = (users, statuses) => {\n        return Utils.sortUsersByStatusAndDisplayName(users, statuses);\n    };\n\n    handleShowDirectChannel = (user) => {\n        const {actions} = this.props;\n        const teammateId = user.id;\n\n        if (teammateId) {\n            actions.openDirectChannelToUserId(teammateId).then(({data}) => {\n                if (data) {\n                    browserHistory.push(this.props.teamUrl + '/channels/' + data.name);\n                }\n                this.closePopover();\n            });\n        }\n    };\n\n    closePopover = () => {\n        this.setState({showPopover: false});\n    };\n\n    showMembersModal = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            showPopover: false,\n            showChannelMembersModal: true,\n        });\n    };\n\n    hideChannelMembersModal = () => {\n        this.setState({showChannelMembersModal: false});\n    };\n\n    showChannelInviteModal = () => {\n        this.setState({showChannelInviteModal: true});\n    };\n\n    hideChannelInviteModal = () => {\n        this.setState({showChannelInviteModal: false});\n    };\n\n    hideTeamMembersModal = () => {\n        this.setState({showTeamMembersModal: false});\n    };\n\n    handleGetProfilesInChannel = (e) => {\n        this.setState({popoverTarget: e.target, showPopover: !this.state.showPopover});\n        this.props.actions.loadProfilesAndStatusesInChannel(this.props.channel.id, 0, undefined, 'status'); // eslint-disable-line no-undefined\n    };\n\n    getTargetPopover = () => {\n        this.membersList.current.focus();\n        return this.state.popoverTarget;\n    };\n\n    render() {\n        const isDirectChannel = this.props.channel.type === Constants.DM_CHANNEL;\n\n        const items = this.state.sortedUsers.map((user) => (\n            <PopoverListMembersItem\n                key={user.id}\n                onItemClick={this.handleShowDirectChannel}\n                showMessageIcon={this.props.currentUserId !== user.id && !isDirectChannel}\n                status={this.props.statuses[user.id]}\n                user={user}\n            />\n        ));\n\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        let popoverButton;\n        if (this.props.channel.type !== Constants.GM_CHANNEL && !channelIsArchived) {\n            let membersName = (\n                <FormattedMessage\n                    id='members_popover.manageMembers'\n                    defaultMessage='Manage Members'\n                />\n            );\n\n            const manageMembers = canManageMembers(this.props.channel);\n            const isDefaultChannel = this.props.channel.name === Constants.DEFAULT_CHANNEL;\n\n            if (isDefaultChannel || !manageMembers) {\n                membersName = (\n                    <FormattedMessage\n                        id='members_popover.viewMembers'\n                        defaultMessage='View Members'\n                    />\n                );\n            }\n\n            popoverButton = (\n                <div\n                    className='more-modal__button'\n                    key={'popover-member-more'}\n                >\n                    <button\n                        className='btn btn-link'\n                        data-testid='membersModal'\n                        onClick={this.showMembersModal}\n                    >\n                        {membersName}\n                    </button>\n                </div>\n            );\n        }\n\n        const count = this.props.memberCount;\n        let countText = '-';\n        if (count > 0) {\n            countText = count.toString();\n        }\n\n        const title = (\n            <FormattedMessage\n                id='members_popover.title'\n                defaultMessage='Channel Members'\n            />\n        );\n\n        let channelMembersModal;\n        if (this.state.showChannelMembersModal) {\n            channelMembersModal = (\n                <ChannelMembersModal\n                    onHide={this.hideChannelMembersModal}\n                    showInviteModal={this.showChannelInviteModal}\n                    channel={this.props.channel}\n                />\n            );\n        }\n\n        let teamMembersModal;\n        if (this.state.showTeamMembersModal) {\n            teamMembersModal = (\n                <TeamMembersModal\n                    onHide={this.hideTeamMembersModal}\n                />\n            );\n        }\n\n        let channelInviteModal;\n        if (this.state.showChannelInviteModal) {\n            channelInviteModal = (\n                <ChannelInviteModal\n                    onHide={this.hideChannelInviteModal}\n                    channel={this.props.channel}\n                />\n            );\n        }\n\n        const channelMembersTooltip = (\n            <Tooltip id='channelMembersTooltip'>\n                <FormattedMessage\n                    id='channel_header.channelMembers'\n                    defaultMessage='Members'\n                />\n            </Tooltip>\n        );\n\n        const ariaLabel = `${Utils.localizeMessage('channel_header.channelMembers', 'Members')}`.toLowerCase();\n\n        return (\n            <div id='channelMember'>\n                <button\n                    id='member_popover'\n                    aria-label={ariaLabel}\n                    className={'style--none member-popover__trigger channel-header__icon wide ' + (this.state.showPopover ? 'active' : '')}\n                    ref='member_popover_target'\n                    onClick={this.handleGetProfilesInChannel}\n                >\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='bottom'\n                        overlay={channelMembersTooltip}\n                    >\n                        <div>\n                            <span\n                                id='channelMemberCountText'\n                                className='icon__text'\n                            >\n                                {countText}\n                            </span>\n                            <MemberIcon\n                                id='channelMemberIcon'\n                                className='icon icon__members'\n                                aria-hidden='true'\n                            />\n                        </div>\n                    </OverlayTrigger>\n                </button>\n                <Overlay\n                    rootClose={true}\n                    onHide={this.closePopover}\n                    show={this.state.showPopover}\n                    target={this.getTargetPopover}\n                    placement='bottom'\n                >\n                    <Popover\n                        className='member-list__popover'\n                        id='member-list-popover'\n                    >\n                        <div\n                            className='more-modal__header'\n                        >\n                            {title}\n                            {this.props.channel.group_constrained && <div className='subhead'>\n                                <FormattedMessage\n                                    id='channel_header.groupConstrained'\n                                    defaultMessage='Members managed by linked groups.'\n                                />\n                            </div>}\n                        </div>\n                        <div className='more-modal__body'>\n                            <div\n                                tabIndex='-1'\n                                role='presentation'\n                                ref={this.membersList}\n                                className='more-modal__list'\n                            >\n                                {items}\n                            </div>\n                        </div>\n                        {popoverButton}\n                    </Popover>\n                </Overlay>\n                {channelMembersModal}\n                {teamMembersModal}\n                {channelInviteModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getAllChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, getUserStatuses, makeGetProfilesInChannel} from 'mattermost-redux/selectors/entities/users';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions.jsx';\nimport {loadProfilesAndStatusesInChannel} from 'actions/user_actions.jsx';\nimport {openModal} from 'actions/views/modals';\n\nimport PopoverListMembers from './popover_list_members.jsx';\n\nfunction makeMapStateToProps() {\n    const doGetProfilesInChannel = makeGetProfilesInChannel();\n\n    return function mapStateToProps(state, ownProps) {\n        const stats = getAllChannelStats(state)[ownProps.channel.id] || {};\n        const users = doGetProfilesInChannel(state, ownProps.channel.id, true);\n\n        return {\n            currentUserId: getCurrentUserId(state),\n            memberCount: stats.member_count,\n            users,\n            statuses: getUserStatuses(state),\n            teamUrl: getCurrentRelativeTeamUrl(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            loadProfilesAndStatusesInChannel,\n            openDirectChannelToUserId,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PopoverListMembers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class VideoIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.video'\n                    defaultMessage='Video Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-video'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class PinIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.pin'\n                    defaultMessage='Pin Icon'\n                >\n                    {(title) => (\n                        <i className=\"fas fa-thumbtack\" title={title}></i>\n                        // <svg\n                        //     width='14px'\n                        //     height='14px'\n                        //     viewBox='0 0 16 16'\n                        //     version='1.1'\n                        //     role='img'\n                        //     aria-label={ariaLabel}\n                        // >\n                        //     <g\n                        //         stroke='inherit'\n                        //         strokeWidth='1'\n                        //         fill='inherit'\n                        //         fillRule='evenodd'\n                        //     >\n                        //         <g\n                        //             transform='translate(-775.000000, -32.000000)'\n                        //             fillRule='nonzero'\n                        //             fill='inherit'\n                        //         >\n                        //             <g>\n                        //                 <g transform='translate(764.000000, 22.000000)'>\n                        //                     <g transform='translate(10.000000, 10.000000)'>\n                        //                         <path d='M16.456,7.291 L9.483,0.25 C9.31,0.078 9.178,0 9.08,0 C8.896,0 8.831,0.276 8.831,0.732 L8.831,3.044 L5.831,5.96 L2.578,6.268 C1.887,6.405 1.668,6.917 2.167,7.41 L4.781,10.011 L3.83,10.961 L1.05,15.511 C0.93,15.761 1.03,15.862 1.28,15.74 L5.83,12.961 L6.786,12.005 L9.359,14.565 C9.556,14.76 9.754,14.854 9.929,14.854 C10.197,14.854 10.413,14.634 10.497,14.219 L10.83,10.961 L13.746,7.961 L16.082,7.961 C16.788,7.961 16.955,7.785 16.456,7.291 Z M12.312,6.567 L9.396,9.567 L8.911,10.065 L8.84,10.757 L8.797,11.184 L5.589,7.992 L6.018,7.952 L6.72,7.886 L7.225,7.396 L10.225,4.48 L10.547,4.167 L12.616,6.256 L12.312,6.567 Z'/>\n                        //                     </g>\n                        //                 </g>\n                        //             </g>\n                        //         </g>\n                        //     </g>\n                        // </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils';\nimport {ChannelHeaderDropdownItems} from 'components/channel_header_dropdown';\nimport Menu from 'components/widgets/menu/menu';\n\nexport default class ChannelHeaderDropdown extends React.PureComponent {\n    render() {\n        return (\n            <Menu\n                id='channelHeaderDropdownMenu'\n                ariaLabel={localizeMessage('channel_header.menuAriaLabel', 'Channel Menu').toLowerCase()}\n            >\n                <ChannelHeaderDropdownItems isMobile={false}/>\n            </Menu>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class MobileChannelHeaderPlug extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Components or actions to add as channel header buttons\n         */\n        components: PropTypes.array,\n\n        /*\n         * Set to true if the plug is in the dropdown\n         */\n        isDropdown: PropTypes.bool.isRequired,\n\n        channel: PropTypes.object.isRequired,\n        channelMember: PropTypes.object.isRequired,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n    }\n\n    createButton = (plug) => {\n        const onClick = () => this.fireAction(plug);\n\n        if (this.props.isDropdown) {\n            return (\n                <li\n                    key={'mobileChannelHeaderItem' + plug.id}\n                    role='presentation'\n                    className='MenuItem'\n                >\n                    <a\n                        role='menuitem'\n                        href='#'\n                        onClick={onClick}\n                    >\n                        {plug.dropdownText}\n                    </a>\n                </li>\n            );\n        }\n\n        return (\n            <li className='flex-parent--center'>\n                <button\n                    className='navbar-toggle navbar-right__icon'\n                    onClick={onClick}\n                >\n                    <span className='icon navbar-plugin-button'>\n                        {plug.icon}\n                    </span>\n                </button>\n            </li>\n        );\n    }\n\n    createList(plugs) {\n        return plugs.map(this.createButton);\n    }\n\n    fireAction(plug) {\n        return plug.action(this.props.channel, this.props.channelMember);\n    }\n\n    render() {\n        const components = this.props.components || [];\n\n        if (components.length === 0) {\n            return null;\n        } else if (components.length === 1) {\n            return this.createButton(components[0]);\n        }\n\n        if (!this.props.isDropdown) {\n            return null;\n        }\n\n        return this.createList(components);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {getMyCurrentChannelMembership} from 'mattermost-redux/selectors/entities/channels';\n\nimport MobileChannelHeaderPlug from './mobile_channel_header_plug.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        channelMember: getMyCurrentChannelMembership(state),\n        components: state.plugins.components.MobileChannelHeaderButton,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(MobileChannelHeaderPlug);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {IgnoreChannelMentions, NotificationLevels, NotificationSections} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default function Describe({section, isCollapsed, memberNotifyLevel, globalNotifyLevel, ignoreChannelMentions}) {\n    if (memberNotifyLevel === NotificationLevels.DEFAULT && globalNotifyLevel) {\n        t('channel_notifications.levels.default');\n        t('channel_notifications.levels.all');\n        t('channel_notifications.levels.mention');\n        t('channel_notifications.levels.none');\n        const levelsFormattedMessageId = 'channel_notifications.levels.' + globalNotifyLevel;\n        const notifyLevel = (\n            <FormattedMessage\n                id={levelsFormattedMessageId}\n                defaultMessage={globalNotifyLevel}\n            />\n        );\n        return (\n            <FormattedMessage\n                id='channel_notifications.globalDefault'\n                defaultMessage='Global default ({notifyLevel})'\n                values={{notifyLevel}}\n            />\n        );\n    } else if (memberNotifyLevel === NotificationLevels.MENTION && section === NotificationSections.MARK_UNREAD) {\n        if (isCollapsed) {\n            return (\n                <FormattedMessage\n                    id='channel_notifications.muteChannel.on.title.collapse'\n                    defaultMessage='Mute is enabled. Desktop, email and push notifications will not be sent for this channel.'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='channel_notifications.muteChannel.on.title'\n                defaultMessage='On'\n            />\n        );\n    } else if (\n        section === NotificationSections.IGNORE_CHANNEL_MENTIONS &&\n        ignoreChannelMentions === IgnoreChannelMentions.ON\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.ignoreChannelMentions.on.title'\n                defaultMessage='On'\n            />\n        );\n    } else if (\n        section === NotificationSections.IGNORE_CHANNEL_MENTIONS &&\n        ignoreChannelMentions === IgnoreChannelMentions.OFF\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.ignoreChannelMentions.off.title'\n                defaultMessage='Off'\n            />\n        );\n    } else if (memberNotifyLevel === NotificationLevels.MENTION) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.onlyMentions'\n                defaultMessage='Only for mentions'\n            />\n        );\n    } else if (\n        (section === NotificationSections.DESKTOP || section === NotificationSections.PUSH) &&\n        memberNotifyLevel === NotificationLevels.ALL\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.allActivity'\n                defaultMessage='For all activity'\n            />\n        );\n    } else if (\n        section === NotificationSections.MARK_UNREAD &&\n        memberNotifyLevel === NotificationLevels.ALL\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.muteChannel.off.title'\n                defaultMessage='Off'\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id='channel_notifications.never'\n            defaultMessage='Never'\n        />\n    );\n}\n\nDescribe.propTypes = {\n    globalNotifyLevel: PropTypes.string,\n    ignoreChannelMentions: PropTypes.string,\n    memberNotifyLevel: PropTypes.string.isRequired,\n    section: PropTypes.string.isRequired,\n    isCollapsed: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationSections} from 'utils/constants';\n\nexport default function SectionTitle({section}) {\n    if (section === NotificationSections.DESKTOP) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.sendDesktop'\n                defaultMessage='Send desktop notifications'\n            />\n        );\n    } else if (section === NotificationSections.PUSH) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.push'\n                defaultMessage='Send mobile push notifications'\n            />\n        );\n    } else if (section === NotificationSections.MARK_UNREAD) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.muteChannel.settings'\n                defaultMessage='Mute Channel'\n            />\n        );\n    } else if (section === NotificationSections.IGNORE_CHANNEL_MENTIONS) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.ignoreChannelMentions'\n                defaultMessage='Ignore mentions for @channel, @here and @all'\n            />\n        );\n    }\n\n    return null;\n}\n\nSectionTitle.propTypes = {\n    section: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SettingItemMin from 'components/setting_item_min';\n\nimport Describe from './describe.jsx';\nimport SectionTitle from './section_title.jsx';\n\nexport default function CollapseView({onExpandSection, globalNotifyLevel, memberNotifyLevel, section, ignoreChannelMentions}) {\n    return (\n        <SettingItemMin\n            title={<SectionTitle section={section}/>}\n            describe={\n                <Describe\n                    section={section}\n                    ignoreChannelMentions={ignoreChannelMentions}\n                    memberNotifyLevel={memberNotifyLevel}\n                    globalNotifyLevel={globalNotifyLevel}\n                    isCollapsed={true}\n                />\n            }\n            updateSection={onExpandSection}\n            section={section}\n        />\n    );\n}\n\nCollapseView.propTypes = {\n    ignoreChannelMentions: PropTypes.string,\n    onExpandSection: PropTypes.func.isRequired,\n    globalNotifyLevel: PropTypes.string,\n    memberNotifyLevel: PropTypes.string.isRequired,\n    section: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationSections} from 'utils/constants';\n\nexport default function ExtraInfo({section}) {\n    switch (section) {\n    case NotificationSections.DESKTOP:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.override'\n                    defaultMessage='Selecting an option other than \"Default\" will override the global notification settings. Desktop notifications are available on Firefox, Safari, and Chrome.'\n                />\n            </span>\n        );\n    case NotificationSections.PUSH:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.overridePush'\n                    defaultMessage='Selecting an option other than \"Global default\" will override the global notification settings for mobile push notifications in account settings. Push notifications must be enabled by the System Admin.'\n                />\n            </span>\n        );\n    case NotificationSections.MARK_UNREAD:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.muteChannel.help'\n                    defaultMessage='Muting turns off desktop, email and push notifications for this channel. The channel will not be marked as unread unless you are mentioned.'\n                />\n            </span>\n        );\n    case NotificationSections.IGNORE_CHANNEL_MENTIONS:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.ignoreChannelMentions.help'\n                    defaultMessage='When enabled, @channel, @here and @all will not trigger mentions or mention notifications in this channel.'\n                />\n            </span>\n        );\n    default:\n        return null;\n    }\n}\n\nExtraInfo.propTypes = {\n    section: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {IgnoreChannelMentions, NotificationLevels, NotificationSections} from 'utils/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\n\nimport Describe from './describe.jsx';\nimport ExtraInfo from './extra_info.jsx';\nimport SectionTitle from './section_title.jsx';\n\nexport default function ExpandView({\n    section,\n    memberNotifyLevel,\n    globalNotifyLevel,\n    onChange,\n    onSubmit,\n    serverError,\n    onCollapseSection,\n    ignoreChannelMentions,\n}) {\n    const inputs = [(\n        <div key='channel-notification-level-radio'>\n            {(section === NotificationSections.DESKTOP || section === NotificationSections.PUSH) &&\n            <fieldset>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationGlobalDefault'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.DEFAULT}\n                            checked={memberNotifyLevel === NotificationLevels.DEFAULT}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.DEFAULT}\n                            globalNotifyLevel={globalNotifyLevel}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationAllActivity'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.ALL}\n                            checked={memberNotifyLevel === NotificationLevels.ALL}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.ALL}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationMentions'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.MENTION}\n                            checked={memberNotifyLevel === NotificationLevels.MENTION}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.MENTION}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='channelNotificationNever'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.NONE}\n                            checked={memberNotifyLevel === NotificationLevels.NONE}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.NONE}\n                        />\n                    </label>\n                </div>\n            </fieldset>\n            }\n            {section === NotificationSections.IGNORE_CHANNEL_MENTIONS &&\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ignoreChannelMentionsOn'\n                                name='ignoreChannelMentions'\n                                type='radio'\n                                value={IgnoreChannelMentions.ON}\n                                checked={ignoreChannelMentions === IgnoreChannelMentions.ON}\n                                onChange={onChange}\n                            />\n                            <Describe\n                                section={section}\n                                ignoreChannelMentions={IgnoreChannelMentions.ON}\n                                memberNotifyLevel={memberNotifyLevel}\n                                globalNotifyLevel={globalNotifyLevel}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ignoreChannelMentionsOff'\n                                name='ignoreChannelMentions'\n                                type='radio'\n                                value={IgnoreChannelMentions.OFF}\n                                checked={ignoreChannelMentions === IgnoreChannelMentions.OFF}\n                                onChange={onChange}\n                            />\n                            <Describe\n                                section={section}\n                                ignoreChannelMentions={IgnoreChannelMentions.OFF}\n                                memberNotifyLevel={memberNotifyLevel}\n                                globalNotifyLevel={globalNotifyLevel}\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            }\n            {section === NotificationSections.MARK_UNREAD &&\n            <fieldset>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationUnmute'\n                            name='channelNotificationMute'\n                            type='radio'\n                            value={NotificationLevels.MENTION}\n                            checked={memberNotifyLevel === NotificationLevels.MENTION}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.MENTION}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationMute'\n                            name='channelNotificationMute'\n                            type='radio'\n                            value={NotificationLevels.ALL}\n                            checked={memberNotifyLevel === NotificationLevels.ALL}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.ALL}\n                        />\n                    </label>\n                </div>\n            </fieldset>\n            }\n        </div>\n    )];\n\n    return (\n        <SettingItemMax\n            title={<SectionTitle section={section}/>}\n            inputs={inputs}\n            submit={onSubmit}\n            server_error={serverError}\n            updateSection={onCollapseSection}\n            extraInfo={<ExtraInfo section={section}/>}\n        />\n    );\n}\n\nExpandView.propTypes = {\n    ignoreChannelMentions: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    onCollapseSection: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    globalNotifyLevel: PropTypes.string,\n    memberNotifyLevel: PropTypes.string.isRequired,\n    section: PropTypes.string.isRequired,\n    serverError: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {NotificationSections} from 'utils/constants';\n\nimport CollapseView from './collapse_view.jsx';\nimport ExpandView from './expand_view.jsx';\n\nexport default class NotificationSection extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Notification section\n         */\n        section: PropTypes.string.isRequired,\n\n        /**\n         * Expand if true, else collapse the section\n         */\n        expand: PropTypes.bool.isRequired,\n\n        /**\n         * Member's desktop notification level\n         */\n        memberNotificationLevel: PropTypes.string.isRequired,\n\n        /**\n         * Ignore channel-wide mentions @channel, @here and @all\n         */\n        ignoreChannelMentions: PropTypes.string,\n\n        /**\n         * User's global notification level\n         */\n        globalNotificationLevel: PropTypes.string,\n\n        /**\n         * onChange handles update of desktop notification level\n         */\n        onChange: PropTypes.func.isRequired,\n\n        /**\n         * Submit function to save notification level\n         */\n        onSubmit: PropTypes.func.isRequired,\n\n        /**\n         * Update function to to expand or collapse a section\n         */\n        onUpdateSection: PropTypes.func.isRequired,\n\n        /**\n         * Error string from the server\n         */\n        serverError: PropTypes.string,\n    }\n\n    handleOnChange = (e) => {\n        this.props.onChange(e.target.value);\n    }\n\n    handleExpandSection = () => {\n        this.props.onUpdateSection(this.props.section);\n    }\n\n    handleCollapseSection = () => {\n        this.props.onUpdateSection(NotificationSections.NONE);\n    }\n\n    render() {\n        const {\n            expand,\n            globalNotificationLevel,\n            memberNotificationLevel,\n            ignoreChannelMentions,\n            onSubmit,\n            section,\n            serverError,\n        } = this.props;\n\n        if (expand) {\n            return (\n                <ExpandView\n                    section={section}\n                    memberNotifyLevel={memberNotificationLevel}\n                    globalNotifyLevel={globalNotificationLevel}\n                    ignoreChannelMentions={ignoreChannelMentions}\n                    onChange={this.handleOnChange}\n                    onSubmit={onSubmit}\n                    serverError={serverError}\n                    onCollapseSection={this.handleCollapseSection}\n                />\n            );\n        }\n\n        return (\n            <CollapseView\n                section={section}\n                onExpandSection={this.handleExpandSection}\n                memberNotifyLevel={memberNotificationLevel}\n                globalNotifyLevel={globalNotificationLevel}\n                ignoreChannelMentions={ignoreChannelMentions}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {IgnoreChannelMentions, NotificationLevels, NotificationSections} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport NotificationSection from 'components/channel_notifications_modal/components/notification_section.jsx';\n\nexport default class ChannelNotificationsModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current channel membership\n         */\n        channelMember: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current user\n         */\n        currentUser: PropTypes.object.isRequired,\n\n        /**\n         * Boolean whether server sends push notifications\n         */\n        sendPushNotifications: PropTypes.bool.isRequired,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to update channel notify props\n             */\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n\n        const channelNotifyProps = props.channelMember && props.channelMember.notify_props;\n\n        this.state = {\n            show: true,\n            activeSection: NotificationSections.NONE,\n            serverError: null,\n            ...this.getStateFromNotifyProps(channelNotifyProps, props.currentUser.notify_props),\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const prevChannelNotifyProps = prevProps.channelMember && prevProps.channelMember.notify_props;\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n\n        if (!Utils.areObjectsEqual(channelNotifyProps, prevChannelNotifyProps)) {\n            this.resetStateFromNotifyProps(channelNotifyProps, this.props.currentUser.notify_props);\n        }\n    }\n\n    resetStateFromNotifyProps(channelMemberNotifyProps, currentUserNotifyProps) {\n        this.setState(this.getStateFromNotifyProps(channelMemberNotifyProps, currentUserNotifyProps));\n    }\n\n    getStateFromNotifyProps(channelMemberNotifyProps, currentUserNotifyProps) {\n        let ignoreChannelMentionsDefault = IgnoreChannelMentions.OFF;\n\n        if (currentUserNotifyProps.channel && currentUserNotifyProps.channel === 'false') {\n            ignoreChannelMentionsDefault = IgnoreChannelMentions.ON;\n        }\n\n        let ignoreChannelMentions = channelMemberNotifyProps.ignore_channel_mentions;\n        if (!ignoreChannelMentions || ignoreChannelMentions === IgnoreChannelMentions.DEFAULT) {\n            ignoreChannelMentions = ignoreChannelMentionsDefault;\n        }\n\n        return {\n            desktopNotifyLevel: channelMemberNotifyProps.desktop || NotificationLevels.DEFAULT,\n            markUnreadNotifyLevel: channelMemberNotifyProps.mark_unread || NotificationLevels.ALL,\n            pushNotifyLevel: channelMemberNotifyProps.push || NotificationLevels.DEFAULT,\n            ignoreChannelMentions,\n        };\n    }\n\n    handleHide = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    handleExit = () => {\n        this.updateSection(NotificationSections.NONE);\n        this.props.onHide();\n    }\n\n    updateSection = (section = NotificationSections.NONE) => {\n        this.setState({activeSection: section});\n\n        if (section === NotificationSections.NONE) {\n            const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n            this.resetStateFromNotifyProps(channelNotifyProps, this.props.currentUser.notify_props);\n        }\n    }\n\n    handleUpdateChannelNotifyProps = async (props) => {\n        const {\n            actions,\n            channel,\n            currentUser,\n        } = this.props;\n\n        const {error} = await actions.updateChannelNotifyProps(currentUser.id, channel.id, props);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.updateSection(NotificationSections.NONE);\n        }\n    }\n\n    handleSubmitDesktopNotifyLevel = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {desktopNotifyLevel} = this.state;\n\n        if (channelNotifyProps.desktop === desktopNotifyLevel) {\n            this.updateSection(NotificationSections.NONE);\n            return;\n        }\n\n        const props = {desktop: desktopNotifyLevel};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    handleUpdateDesktopNotifyLevel = (desktopNotifyLevel) => {\n        this.setState({desktopNotifyLevel});\n    }\n\n    handleSubmitMarkUnreadLevel = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {markUnreadNotifyLevel} = this.state;\n\n        if (channelNotifyProps.mark_unread === markUnreadNotifyLevel) {\n            this.updateSection(NotificationSections.NONE);\n            return;\n        }\n\n        const props = {mark_unread: markUnreadNotifyLevel};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    handleUpdateMarkUnreadLevel = (markUnreadNotifyLevel) => {\n        this.setState({markUnreadNotifyLevel});\n    }\n\n    handleSubmitPushNotificationLevel = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {pushNotifyLevel} = this.state;\n\n        if (channelNotifyProps.push === pushNotifyLevel) {\n            this.updateSection(NotificationSections.NONE);\n            return;\n        }\n\n        const props = {push: pushNotifyLevel};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    handleUpdatePushNotificationLevel = (pushNotifyLevel) => {\n        this.setState({pushNotifyLevel});\n    }\n\n    handleUpdateIgnoreChannelMentions = (ignoreChannelMentions) => {\n        this.setState({ignoreChannelMentions});\n    }\n\n    handleSubmitIgnoreChannelMentions = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {ignoreChannelMentions} = this.state;\n\n        if (channelNotifyProps.ignore_channel_mentions === ignoreChannelMentions) {\n            this.updateSection('');\n            return;\n        }\n\n        const props = {ignore_channel_mentions: ignoreChannelMentions};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    render() {\n        const {\n            activeSection,\n            desktopNotifyLevel,\n            markUnreadNotifyLevel,\n            pushNotifyLevel,\n            ignoreChannelMentions,\n            serverError,\n        } = this.state;\n\n        const {\n            channel,\n            channelMember,\n            currentUser,\n            sendPushNotifications,\n        } = this.props;\n\n        let serverErrorTag = null;\n        if (serverError) {\n            serverErrorTag = <div className='form-group has-error'><label className='control-label'>{serverError}</label></div>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal settings-modal settings-modal--tabless'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='channelNotificationModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelNotificationModalLabel'\n                    >\n                        <FormattedMessage\n                            id='channel_notifications.preferences'\n                            defaultMessage='Notification Preferences for '\n                        />\n                        <span className='name'>{channel.display_name}</span>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='settings-table'>\n                        <div className='settings-content'>\n                            <div\n                                ref='wrapper'\n                                className='user-settings'\n                            >\n                                <br/>\n                                <div className='divider-dark first'/>\n                                <NotificationSection\n                                    section={NotificationSections.MARK_UNREAD}\n                                    expand={activeSection === NotificationSections.MARK_UNREAD}\n                                    memberNotificationLevel={markUnreadNotifyLevel}\n                                    onChange={this.handleUpdateMarkUnreadLevel}\n                                    onSubmit={this.handleSubmitMarkUnreadLevel}\n                                    onUpdateSection={this.updateSection}\n                                    serverError={serverError}\n                                />\n                                <div className='divider-light'/>\n                                <NotificationSection\n                                    section={NotificationSections.IGNORE_CHANNEL_MENTIONS}\n                                    expand={activeSection === NotificationSections.IGNORE_CHANNEL_MENTIONS}\n                                    memberNotificationLevel={markUnreadNotifyLevel}\n                                    ignoreChannelMentions={ignoreChannelMentions}\n                                    onChange={this.handleUpdateIgnoreChannelMentions}\n                                    onSubmit={this.handleSubmitIgnoreChannelMentions}\n                                    onUpdateSection={this.updateSection}\n                                    serverError={serverError}\n                                />\n                                {!isChannelMuted(channelMember) &&\n                                <div>\n                                    <div className='divider-light'/>\n                                    <NotificationSection\n                                        section={NotificationSections.DESKTOP}\n                                        expand={activeSection === NotificationSections.DESKTOP}\n                                        memberNotificationLevel={desktopNotifyLevel}\n                                        globalNotificationLevel={currentUser.notify_props ? currentUser.notify_props.desktop : NotificationLevels.ALL}\n                                        onChange={this.handleUpdateDesktopNotifyLevel}\n                                        onSubmit={this.handleSubmitDesktopNotifyLevel}\n                                        onUpdateSection={this.updateSection}\n                                        serverError={serverError}\n                                    />\n                                    <div className='divider-light'/>\n                                    {sendPushNotifications &&\n                                    <NotificationSection\n                                        section={NotificationSections.PUSH}\n                                        expand={activeSection === NotificationSections.PUSH}\n                                        memberNotificationLevel={pushNotifyLevel}\n                                        globalNotificationLevel={currentUser.notify_props ? currentUser.notify_props.push : NotificationLevels.ALL}\n                                        onChange={this.handleUpdatePushNotificationLevel}\n                                        onSubmit={this.handleSubmitPushNotificationLevel}\n                                        onUpdateSection={this.updateSection}\n                                        serverError={serverError}\n                                    />\n                                    }\n                                </div>\n                                }\n                                <div className='divider-dark'/>\n                            </div>\n                        </div>\n                    </div>\n                    {serverErrorTag}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getMyCurrentChannelMembership} from 'mattermost-redux/selectors/entities/channels';\n\nimport ChannelNotificationsModal from './channel_notifications_modal.jsx';\n\nconst mapStateToProps = (state) => ({\n    channelMember: getMyCurrentChannelMembership(state),\n    sendPushNotifications: getConfig(state).SendPushNotifications === 'true',\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelNotificationsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport Markdown from 'components/markdown';\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\n\nimport Constants from 'utils/constants.jsx';\nimport {getSiteURL} from 'utils/url';\nimport * as Utils from 'utils/utils.jsx';\n\nconst headerMarkdownOptions = {singleline: false, mentionHighlight: false};\n\nexport default class ChannelInfoModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Channel object\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Current team object\n         */\n        currentTeam: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {show: true};\n\n        this.getHeaderMarkdownOptions = memoizeResult((channelNamesMap) => (\n            {...headerMarkdownOptions, channelNamesMap}\n        ));\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        let channel = this.props.channel;\n        const channelIsArchived = channel.delete_at !== 0;\n        let channelIcon;\n\n        if (!channel) {\n            const notFound = Utils.localizeMessage('channel_info.notFound', 'No Channel Found');\n\n            channel = {\n                display_name: notFound,\n                name: notFound,\n                purpose: notFound,\n                header: notFound,\n                id: notFound,\n            };\n        }\n\n        const channelNamesMap = this.props.channel.props && this.props.channel.props.channel_mentions;\n\n        if (channelIsArchived) {\n            channelIcon = (\n                <ArchiveIcon className='icon icon__archive'/>\n            );\n        } else if (channel.type === 'O') {\n            channelIcon = (\n                <GlobeIcon className='icon icon__globe icon--body'/>\n            );\n        } else if (channel.type === 'P') {\n            channelIcon = (\n                <LockIcon className='icon icon__globe icon--body'/>\n            );\n        }\n\n        const channelURL = getSiteURL() + '/' + this.props.currentTeam.name + '/channels/' + channel.name;\n\n        let channelPurpose;\n        if (channel.purpose) {\n            channelPurpose = channel.purpose;\n        } else if (channel.name === Constants.DEFAULT_CHANNEL) {\n            channelPurpose = (\n                <FormattedMessage\n                    id='default_channel.purpose'\n                    defaultMessage='Post messages here that you want everyone to see. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                />\n            );\n        }\n\n        let channelPurposeElement;\n        if (channelPurpose) {\n            channelPurposeElement = (\n                <div className='form-group'>\n                    <div className='info__label'>\n                        <FormattedMessage\n                            id='channel_info.purpose'\n                            defaultMessage='Purpose:'\n                        />\n                    </div>\n                    <div className='info__value'>{channelPurpose}</div>\n                </div>\n            );\n        }\n\n        let channelHeader = null;\n        if (channel.header) {\n            channelHeader = (\n                <div className='form-group'>\n                    <div className='info__label'>\n                        <FormattedMessage\n                            id='channel_info.header'\n                            defaultMessage='Header:'\n                        />\n                    </div>\n                    <div className='info__value'>\n                        <Markdown\n                            message={channel.header}\n                            options={this.getHeaderMarkdownOptions(channelNamesMap)}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal about-modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='channelInfoModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelInfoModalLabel'\n                    >\n                        <FormattedMessage\n                            id='channel_info.about'\n                            defaultMessage='About'\n                        />\n                        <strong>{channelIcon}{channel.display_name}</strong>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {channelPurposeElement}\n                    {channelHeader}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport ChannelInfoModal from './channel_info_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentTeam: getCurrentTeam(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelInfoModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\n\nimport {Modal} from 'react-bootstrap';\nimport {getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport {\n    clearFileInput,\n    generateId\n} from 'utils/utils.jsx';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nexport default class UpdateChannelAvatarModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * callback to call when modal will hide\n          */\n        onHide: PropTypes.func.isRequired,\n\n        /*\n         * Channel info object\n         */\n        channel: PropTypes.object,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to patch current channel\n             */\n            patchChannel: PropTypes.func.isRequired,\n            uploadFile: PropTypes.func.isRequired,\n            handleFileUploadEnd: PropTypes.func.isRequired\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n            error: null\n        };\n\n        this.fileInput = React.createRef();\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    getFileUploadTarget = () => {\n        if (this.refs.textbox) {\n            return this.refs.textbox.getWrappedInstance();\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        if (e.target.files.length > 0) {\n            this.uploadFile(e.target.files[0]);\n            clearFileInput(e.target);\n        } else {\n            this.onHide();\n        }\n    }\n\n    uploadFile = (file) => {\n        this.setState({error: null});\n\n        const {channel} = this.props;\n\n        const clientId = generateId();\n\n        const request = this.props.actions.uploadFile(\n            file,\n            file.name,\n            channel.id,\n            '',\n            clientId,\n        );\n\n        request.end(async (err, res) => {\n            const {error, data} = this.props.actions.handleFileUploadEnd(\n                file,\n                file.name,\n                channel.id,\n                '',\n                clientId,\n                {err, res},\n            );\n\n            if (error) {\n                this.setState({error});\n            } else if (data) {\n                const upload = data.file_infos[0];\n                const avatar = getFileUrl(upload.id);\n\n                const {actions: {patchChannel}} = this.props;\n                const patchChannelResult = await patchChannel(channel.id, {\n                    avatar\n                });\n\n                if (patchChannelResult.error) {\n                    this.setState({error});\n                } else {\n                    this.onHide();\n                }\n            }\n        });\n    }\n\n    simulateInputClick = () => {\n        this.fileInput.current.click();\n    }\n\n    render() {\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                onEntered={this.simulateInputClick}\n                role='dialog'\n                aria-labelledby='editChannelPurposeModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editChannelPurposeModalLabel'\n                    >\n                        {'Update Channel Avatar'}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <LoadingSpinner/>\n                    <input\n                        id='fileUploadInput'\n                        tabIndex='-1'\n                        ref={this.fileInput}\n                        type='file'\n                        onChange={this.handleChange}\n                        multiple={false}\n                        accept={'image/*'}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {patchChannel} from 'mattermost-redux/actions/channels';\n\nimport Constants from 'utils/constants';\n\nimport {uploadFile, handleFileUploadEnd} from 'actions/file_actions.jsx';\n\nimport UpdateChannelAvatarModal from './update_channel_avatar_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        ctrlSend: getBool(state, Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            patchChannel,\n            uploadFile,\n            handleFileUploadEnd\n        }, dispatch)\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(UpdateChannelAvatarModal);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport {cleanUpUrlable} from 'utils/url';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    required: {\n        id: t('rename_channel.required'),\n        defaultMessage: 'This field is required',\n    },\n    maxLength: {\n        id: t('rename_channel.maxLength'),\n        defaultMessage: 'This field must be less than {maxLength, number} characters',\n    },\n    lowercase: {\n        id: t('rename_channel.lowercase'),\n        defaultMessage: 'Must be lowercase alphanumeric characters',\n    },\n    url: {\n        id: t('rename_channel.url'),\n        defaultMessage: 'URL',\n    },\n    defaultError: {\n        id: t('rename_channel.defaultError'),\n        defaultMessage: ' - Cannot be changed for the default channel',\n    },\n    displayNameHolder: {\n        id: t('rename_channel.displayNameHolder'),\n        defaultMessage: 'Enter display name',\n    },\n    handleHolder: {\n        id: t('rename_channel.handleHolder'),\n        defaultMessage: 'lowercase alphanumeric characters',\n    },\n});\n\nexport class RenameChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * react-intl helper object\n         */\n        intl: intlShape.isRequired,\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * String with the current team URL\n         */\n        currentTeamUrl: PropTypes.string.isRequired,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to patch current channel\n             */\n            patchChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            displayName: props.channel.display_name,\n            channelName: props.channel.name,\n            serverError: '',\n            nameError: '',\n            displayNameError: '',\n            invalid: false,\n            show: true,\n        };\n    }\n\n    setError = (err) => {\n        this.setState({serverError: err.message});\n    }\n\n    unsetError = () => {\n        this.setState({serverError: ''});\n    }\n\n    handleEntering = () => {\n        Utils.placeCaretAtEnd(this.textbox);\n    }\n\n    handleHide = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            serverError: '',\n            nameError: '',\n            displayNameError: '',\n            invalid: false,\n            show: false,\n        });\n    }\n\n    handleSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const channel = Object.assign({}, this.props.channel);\n        const oldName = channel.name;\n        const oldDisplayName = channel.display_name;\n        const state = {serverError: ''};\n        const {formatMessage} = this.props.intl;\n        const {actions: {patchChannel}} = this.props;\n\n        channel.display_name = this.state.displayName.trim();\n        if (!channel.display_name) {\n            state.displayNameError = formatMessage(holders.required);\n            state.invalid = true;\n        } else if (channel.display_name.length > Constants.MAX_CHANNELNAME_LENGTH) {\n            state.displayNameError = formatMessage(holders.maxLength, {maxLength: Constants.MAX_CHANNELNAME_LENGTH});\n            state.invalid = true;\n        } else if (channel.display_name.length < Constants.MIN_CHANNELNAME_LENGTH) {\n            state.displayNameError = (\n                <FormattedMessage\n                    id='rename_channel.minLength'\n                    defaultMessage='Channel name must be {minLength, number} or more characters'\n                    values={{\n                        minLength: Constants.MIN_CHANNELNAME_LENGTH,\n                    }}\n                />\n            );\n            state.invalid = true;\n        } else {\n            state.displayNameError = '';\n        }\n\n        channel.name = this.state.channelName.trim();\n        if (!channel.name) {\n            state.nameError = formatMessage(holders.required);\n            state.invalid = true;\n        } else if (channel.name.length > Constants.MAX_CHANNELNAME_LENGTH) {\n            state.nameError = formatMessage(holders.maxLength, {maxLength: Constants.MAX_CHANNELNAME_LENGTH});\n            state.invalid = true;\n        } else {\n            const cleanedName = cleanUpUrlable(channel.name);\n            if (cleanedName === channel.name) {\n                state.nameError = '';\n            } else {\n                state.nameError = formatMessage(holders.lowercase);\n                state.invalid = true;\n            }\n        }\n\n        this.setState(state);\n\n        if (state.invalid) {\n            return;\n        }\n        if (oldName === channel.name && oldDisplayName === channel.display_name) {\n            this.onSaveSuccess();\n            return;\n        }\n\n        const {data, error} = await patchChannel(channel.id, channel);\n\n        if (data) {\n            this.onSaveSuccess();\n        } else if (error) {\n            this.setError(error);\n        }\n    }\n\n    onSaveSuccess = () => {\n        this.handleHide();\n        this.unsetError();\n        browserHistory.push('/' + this.props.team.name + '/channels/' + this.state.channelName);\n    }\n\n    handleCancel = (e) => {\n        this.setState({\n            displayName: this.props.channel.display_name,\n            channelName: this.props.channel.name,\n        });\n\n        this.handleHide(e);\n    }\n\n    onNameChange = (e) => {\n        this.setState({channelName: e.target.value});\n    }\n\n    onDisplayNameChange = (e) => {\n        this.setState({displayName: e.target.value});\n    }\n\n    getTextbox = (node) => {\n        this.textbox = node;\n    }\n\n    render() {\n        let displayNameError = null;\n        let displayNameClass = 'form-group';\n        if (this.state.displayNameError) {\n            displayNameError = <label className='control-label'>{this.state.displayNameError}</label>;\n            displayNameClass += ' has-error';\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.handleCancel}\n                onEntering={this.handleEntering}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='renameChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='renameChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='rename_channel.title'\n                            defaultMessage='Rename Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <form role='form'>\n                    <Modal.Body>\n                        <div className={displayNameClass}>\n                            <label className='control-label'>\n                                <FormattedMessage\n                                    id='rename_channel.displayName'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <LocalizedInput\n                                onChange={this.onDisplayNameChange}\n                                type='text'\n                                ref={this.getTextbox}\n                                id='display_name'\n                                className='form-control'\n                                placeholder={holders.displayNameHolder}\n                                value={this.state.displayName}\n                                maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                            />\n                            {displayNameError}\n                        </div>\n                        {serverError}\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.handleCancel}\n                        >\n                            <FormattedMessage\n                                id='rename_channel.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.handleSubmit}\n                            type='submit'\n                            id='save-button'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='rename_channel.save'\n                                defaultMessage='Save'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(RenameChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {patchChannel} from 'mattermost-redux/actions/channels';\nimport {getTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSiteURL} from 'utils/url';\n\nimport RenameChannelModal from './rename_channel_modal.jsx';\n\nconst mapStateToProps = createSelector(\n    (state) => {\n        const currentTeamId = state.entities.teams.currentTeamId;\n        const team = getTeam(state, currentTeamId);\n        const currentTeamUrl = `${getSiteURL()}/${team.name}`;\n        return {\n            currentTeamUrl,\n            team,\n        };\n    },\n    (teamInfo) => ({...teamInfo})\n);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            patchChannel: bindActionCreators(patchChannel, dispatch),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RenameChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class ConvertChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Function called when modal is dismissed\n        */\n        onHide: PropTypes.func.isRequired,\n        channelId: PropTypes.string.isRequired,\n        channelDisplayName: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * Function called for converting channel to private,\n            */\n            convertChannelToPrivate: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    handleConvert = () => {\n        const {actions, channelId} = this.props;\n        if (channelId.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n\n        actions.convertChannelToPrivate(channelId);\n        trackEvent('actions', 'convert_to_private_channel', {channel_id: channelId});\n        this.onHide();\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        const {\n            channelDisplayName,\n            onHide,\n        } = this.props;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={onHide}\n                role='dialog'\n                aria-labelledby='convertChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='convertChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='convert_channel.title'\n                            defaultMessage='Convert {display_name} to a private channel?'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='convert_channel.question1'\n                            defaultMessage='When you convert **{display_name}** to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedHTMLMessage\n                            id='convert_channel.question2'\n                            defaultMessage='The change is permanent and cannot be undone.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='convert_channel.question3'\n                            defaultMessage='Are you sure you want to convert **{display_name}** to a private channel?'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='convert_channel.cancel'\n                            defaultMessage='No, cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        data-dismiss='modal'\n                        onClick={this.handleConvert}\n                        autoFocus={true}\n                    >\n                        <FormattedMessage\n                            id='convert_channel.confirm'\n                            defaultMessage='Yes, convert to private channel'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {convertChannelToPrivate} from 'mattermost-redux/actions/channels';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport ConvertChannelModal from './convert_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentTeamDetails: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            convertChannelToPrivate,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConvertChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class DeleteChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Function called when modal is dismissed\n        */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * channel data\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * currentTeamDetails used for redirection after deleting channel\n         */\n        currentTeamDetails: PropTypes.object.isRequired,\n\n        canViewArchivedChannels: PropTypes.bool,\n        penultimateViewedChannelName: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * Function called for deleting channel,\n            */\n\n            deleteChannel: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    handleDelete = () => {\n        if (this.props.channel.id.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n        if (!this.props.canViewArchivedChannels) {\n            const {penultimateViewedChannelName} = this.props;\n            browserHistory.push('/' + this.props.currentTeamDetails.name + '/channels/' + penultimateViewedChannelName);\n        }\n        this.props.actions.deleteChannel(this.props.channel.id);\n        this.onHide();\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        const {canViewArchivedChannels} = this.props;\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='deleteChannelModalLabel'\n                id='deleteChannelModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='deleteChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='delete_channel.confirm'\n                            defaultMessage='Confirm ARCHIVE Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='alert alert-danger'>\n                        {!canViewArchivedChannels &&\n                            <FormattedMarkdownMessage\n                                id='delete_channel.question'\n                                defaultMessage='This will archive the channel from the team and make its contents inaccessible for all users. \\n \\nAre you sure you wish to archive the **{display_name}** channel?'\n                                values={{\n                                    display_name: this.props.channel.display_name,\n                                }}\n                            />}\n                        {canViewArchivedChannels &&\n                            <FormattedMarkdownMessage\n                                id='delete_channel.viewArchived.question'\n                                defaultMessage={'This will archive the channel from the team. Channel contents will still be accessible by channel members.\\n \\nAre you sure you wish to archive the **{display_name}** channel?'}\n                                values={{\n                                    display_name: this.props.channel.display_name,\n                                }}\n                            />}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='delete_channel.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        data-dismiss='modal'\n                        onClick={this.handleDelete}\n                        autoFocus={true}\n                        id='deleteChannelModalDeleteButton'\n                    >\n                        <FormattedMessage\n                            id='delete_channel.del'\n                            defaultMessage='Archive'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {deleteChannel} from 'mattermost-redux/actions/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport DeleteChannelModal from './delete_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        canViewArchivedChannels: config.ExperimentalViewArchivedChannels === 'true',\n        currentTeamDetails: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\n\nimport ListModal, {DEFAULT_NUM_PER_PAGE} from 'components/list_modal.jsx';\n\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\n\nimport groupsAvatar from 'images/groups-avatar.png';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nimport * as Utils from 'utils/utils.jsx';\n\nclass ChannelGroupsManageModal extends React.PureComponent {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n            getGroupsAssociatedToChannel: PropTypes.func.isRequired,\n            unlinkGroupSyncable: PropTypes.func.isRequired,\n            patchGroupSyncable: PropTypes.func.isRequired,\n            getMyChannelMember: PropTypes.func.isRequired,\n            closeModal: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    loadItems = async (pageNumber, searchTerm) => {\n        const {data} = await this.props.actions.getGroupsAssociatedToChannel(this.props.channel.id, searchTerm, pageNumber, DEFAULT_NUM_PER_PAGE);\n        return {\n            items: data.groups,\n            totalCount: data.totalGroupCount,\n        };\n    };\n\n    onClickRemoveGroup = (item, listModal) => this.props.actions.unlinkGroupSyncable(item.id, this.props.channel.id, Groups.SYNCABLE_TYPE_CHANNEL).then(async () => {\n        listModal.setState({loading: true});\n        const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n        listModal.setState({loading: false, items, totalCount});\n    });\n\n    onHide = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MANAGE_CHANNEL_GROUPS);\n    };\n\n    titleButtonOnClick = () => {\n        this.onHide();\n        this.props.actions.openModal({modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM, dialogType: AddGroupsToChannelModal});\n    };\n\n    setChannelMemberStatus = async (item, listModal, isChannelAdmin) => {\n        this.props.actions.patchGroupSyncable(item.id, this.props.channel.id, Groups.SYNCABLE_TYPE_CHANNEL, {scheme_admin: isChannelAdmin}).then(async () => {\n            listModal.setState({loading: true});\n            const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n\n            await this.props.actions.getMyChannelMember(this.props.channel.id);\n\n            listModal.setState({loading: false, items, totalCount});\n        });\n    };\n\n    renderRow = (item, listModal) => {\n        let title;\n        if (item.scheme_admin) {\n            title = Utils.localizeMessage('channel_members_dropdown.channel_admins', 'Channel Admins');\n        } else {\n            title = Utils.localizeMessage('channel_members_dropdown.channel_members', 'Channel Members');\n        }\n\n        return (\n            <div\n                key={item.id}\n                className='more-modal__row'\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='40'\n                    height='40'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>{item.display_name} {'-'}&nbsp;\n                        <span className='more-modal__name_count'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: item.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <MenuWrapper>\n                        <button\n                            id={`teamGroupsDropdown_${item.display_name}`}\n                            className='dropdown-toggle theme color--link style--none'\n                            type='button'\n                            aria-expanded='true'\n                        >\n                            <span>{title} </span>\n                            <DropdownIcon/>\n                        </button>\n                        <Menu\n                            openLeft={true}\n                            ariaLabel={Utils.localizeMessage('channel_members_dropdown.menuAriaLabel', 'Channel member role change')}\n                        >\n                            <Menu.ItemAction\n                                show={!item.scheme_admin}\n                                onClick={() => this.setChannelMemberStatus(item, listModal, true)}\n                                text={Utils.localizeMessage('channel_members_dropdown.make_channel_admins', 'Make Channel Admins')}\n                            />\n                            <Menu.ItemAction\n                                show={Boolean(item.scheme_admin)}\n                                onClick={() => this.setChannelMemberStatus(item, listModal, false)}\n                                text={Utils.localizeMessage('channel_members_dropdown.make_channel_members', 'Make Channel Members')}\n                            />\n                            <Menu.ItemAction\n                                onClick={() => this.onClickRemoveGroup(item, listModal)}\n                                text={Utils.localizeMessage('group_list_modal.removeGroupButton', 'Remove Group')}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        return (\n            <ListModal\n                titleText={formatMessage({id: 'groups', defaultMessage: '{channel} Groups'}, {channel: this.props.channel.display_name})}\n                searchPlaceholderText={formatMessage({id: 'manage_channel_groups_modal.search_placeholder', defaultMessage: 'Search groups'})}\n                renderRow={this.renderRow}\n                loadItems={this.loadItems}\n                onHide={this.onHide}\n                titleBarButtonText={formatMessage({id: 'group_list_modal.addGroupButton', defaultMessage: 'Add Groups'})}\n                titleBarButtonOnClick={this.titleButtonOnClick}\n            />\n        );\n    }\n}\n\nexport default injectIntl(ChannelGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getGroupsAssociatedToChannel, unlinkGroupSyncable, patchGroupSyncable} from 'mattermost-redux/actions/groups';\nimport {getMyChannelMember} from 'mattermost-redux/actions/channels';\n\nimport {closeModal, openModal} from 'actions/views/modals';\n\nimport ChannelGroupsManageModal from './channel_groups_manage_modal';\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        channel: state.entities.channels.channels[ownProps.channelID],\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        getGroupsAssociatedToChannel,\n        closeModal,\n        openModal,\n        unlinkGroupSyncable,\n        patchGroupSyncable,\n        getMyChannelMember,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {showLeavePrivateChannelModal} from 'actions/global_actions';\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nimport Menu from 'components/widgets/menu/menu';\n\nexport default class LeaveChannel extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with info about user\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Boolean whether the channel is default\n         */\n        isDefault: PropTypes.bool.isRequired,\n\n        /**\n         * Boolean whether the user is a guest or no\n         */\n        isGuestUser: PropTypes.bool.isRequired,\n\n        /**\n         * Use for test selector\n         */\n        id: PropTypes.string,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n\n            /**\n             * Action creator to leave channel\n             */\n            leaveChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        isGuestUser: false,\n    }\n\n    handleLeave = (e) => {\n        e.preventDefault();\n\n        const {\n            channel,\n            actions: {\n                leaveChannel,\n            },\n        } = this.props;\n\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            showLeavePrivateChannelModal(channel);\n        } else {\n            leaveChannel(channel.id);\n        }\n    }\n\n    render() {\n        const {channel, isDefault, isGuestUser, id} = this.props;\n\n        return (\n            <Menu.ItemAction\n                id={id}\n                show={(!isDefault || isGuestUser) && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                onClick={this.handleLeave}\n                text={localizeMessage('channel_header.leave', 'Leave Channel')}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {leaveChannel} from 'actions/views/channel';\n\nimport LeaveChannel from './leave_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({leaveChannel}, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(LeaveChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport Menu from 'components/widgets/menu/menu';\n\nexport default class CloseChannel extends React.PureComponent {\n    static propTypes = {\n        isArchived: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            goToLastViewedChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleClose = () => {\n        this.props.actions.goToLastViewedChannel();\n    }\n\n    render() {\n        return (\n            <Menu.ItemAction\n                show={this.props.isArchived}\n                onClick={this.handleClose}\n                text={localizeMessage('center_panel.archived.closeChannel', 'Close Channel')}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport CloseChannel from './close_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        goToLastViewedChannel,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CloseChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {NotificationLevels} from 'utils/constants';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport Menu from 'components/widgets/menu/menu';\n\nexport default class MenuItemToggleMuteChannel extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with info about the current user\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about the current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Boolean whether the current channel is muted\n         */\n        isMuted: PropTypes.bool.isRequired,\n\n        /**\n         * Use for test selector\n         */\n        id: PropTypes.string,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = () => {\n        const {\n            user,\n            channel,\n            isMuted,\n            actions: {\n                updateChannelNotifyProps,\n            },\n        } = this.props;\n\n        updateChannelNotifyProps(user.id, channel.id, {\n            mark_unread: isMuted ? NotificationLevels.ALL : NotificationLevels.MENTION,\n        });\n    }\n\n    render() {\n        const {\n            id,\n            isMuted,\n        } = this.props;\n\n        let text;\n        if (isMuted) {\n            text = localizeMessage('channel_header.unmute', 'Unmute Channel');\n        } else {\n            text = localizeMessage('channel_header.mute', 'Mute Channel');\n        }\n\n        return (\n            <Menu.ItemAction\n                id={id}\n                onClick={this.handleClick}\n                text={text}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport MenuItemToggleMuteChannel from './toggle_mute_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(MenuItemToggleMuteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport Menu from 'components/widgets/menu/menu';\n\nexport default class ToggleFavoriteChannel extends React.PureComponent {\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        channel: PropTypes.object.isRequired,\n        isFavorite: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            favoriteChannel: PropTypes.func.isRequired,\n            unfavoriteChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        show: true,\n    }\n\n    toggleFavoriteChannel = (channelId) => {\n        const {\n            isFavorite,\n            actions: {\n                favoriteChannel,\n                unfavoriteChannel,\n            },\n        } = this.props;\n\n        return isFavorite ? unfavoriteChannel(channelId) : favoriteChannel(channelId);\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        this.toggleFavoriteChannel(this.props.channel.id);\n    }\n\n    render() {\n        let text;\n        if (this.props.isFavorite) {\n            text = localizeMessage('channelHeader.removeFromFavorites', 'Remove from Favorites');\n        } else {\n            text = localizeMessage('channelHeader.addToFavorites', 'Add to Favorites');\n        }\n        return (\n            <Menu.ItemAction\n                show={this.props.show}\n                onClick={this.handleClick}\n                text={text}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {favoriteChannel, unfavoriteChannel} from 'mattermost-redux/actions/channels';\n\nimport ToggleFavoriteChannel from './toggle_favorite_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        favoriteChannel,\n        unfavoriteChannel,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ToggleFavoriteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport Menu from 'components/widgets/menu/menu';\n\nexport default class ViewPinnedPosts extends React.PureComponent {\n    static propTypes = {\n        show: PropTypes.bool,\n        channel: PropTypes.object.isRequired,\n        hasPinnedPosts: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            closeRightHandSide: PropTypes.func.isRequired,\n            showPinnedPosts: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n\n        const {\n            channel,\n            hasPinnedPosts,\n            actions: {\n                closeRightHandSide,\n                showPinnedPosts,\n            },\n        } = this.props;\n\n        if (hasPinnedPosts) {\n            closeRightHandSide();\n        } else {\n            showPinnedPosts(channel.id);\n        }\n    }\n\n    render() {\n        return (\n            <Menu.ItemAction\n                show={this.props.show}\n                onClick={this.handleClick}\n                text={localizeMessage('navbar.viewPinnedPosts', 'View Pinned Posts')}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {closeRightHandSide, showPinnedPosts} from 'actions/views/rhs';\nimport {getRhsState} from 'selectors/rhs';\nimport {RHSStates} from 'utils/constants';\n\nimport ViewPinnedPosts from './view_pinned_posts';\n\nconst mapStateToProps = (state) => ({\n    hasPinnedPosts: getRhsState(state) === RHSStates.PIN,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        closeRightHandSide,\n        showPinnedPosts,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewPinnedPosts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage, isGuest} from 'utils/utils';\n\nimport MobileChannelHeaderPlug from 'plugins/mobile_channel_header_plug';\n\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelMembersModal from 'components/channel_members_modal';\nimport ChannelInfoModal from 'components/channel_info_modal';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport UpdateChannelAvatarModal from 'components/update_channel_avatar_modal';\nimport RenameChannelModal from 'components/rename_channel_modal';\nimport ConvertChannelModal from 'components/convert_channel_modal';\nimport DeleteChannelModal from 'components/delete_channel_modal';\nimport MoreDirectChannels from 'components/more_direct_channels';\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ChannelGroupsManageModal from 'components/channel_groups_manage_modal';\n\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport Menu from 'components/widgets/menu/menu';\n\nimport MenuItemLeaveChannel from './menu_items/leave_channel';\nimport MenuItemCloseChannel from './menu_items/close_channel';\nimport MenuItemToggleMuteChannel from './menu_items/toggle_mute_channel';\nimport MenuItemToggleFavoriteChannel from './menu_items/toggle_favorite_channel';\nimport MenuItemViewPinnedPosts from './menu_items/view_pinned_posts';\n\nexport default class ChannelHeaderDropdown extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        channel: PropTypes.object.isRequired,\n        isDefault: PropTypes.bool.isRequired,\n        isFavorite: PropTypes.bool.isRequired,\n        isReadonly: PropTypes.bool.isRequired,\n        isMuted: PropTypes.bool.isRequired,\n        isArchived: PropTypes.bool.isRequired,\n        isMobile: PropTypes.bool.isRequired,\n        penultimateViewedChannelName: PropTypes.string.isRequired,\n        pluginMenuItems: PropTypes.arrayOf(PropTypes.object),\n        isLicensedForLDAPGroups: PropTypes.bool,\n    }\n\n    render() {\n        const {\n            user,\n            channel,\n            isDefault,\n            isFavorite,\n            isMuted,\n            isReadonly,\n            isArchived,\n            isMobile,\n            penultimateViewedChannelName,\n            isLicensedForLDAPGroups,\n        } = this.props;\n\n        const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n        const isGroupConstrained = channel.group_constrained === true;\n        const channelMembersPermission = isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS;\n        const channelPropertiesPermission = isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES;\n        const channelDeletePermission = isPrivate ? Permissions.DELETE_PRIVATE_CHANNEL : Permissions.DELETE_PUBLIC_CHANNEL;\n\n        let divider;\n        if (isMobile) {\n            divider = (\n                <li className='MenuGroup mobile-menu-divider'>\n                    <hr/>\n                </li>\n            );\n        }\n\n        const pluginItems = this.props.pluginMenuItems.map((item) => {\n            return (\n                <Menu.ItemAction\n                    id={item.id + '_pluginmenuitem'}\n                    key={item.id + '_pluginmenuitem'}\n                    onClick={() => {\n                        if (item.action) {\n                            item.action(this.props.channel.id);\n                        }\n                    }}\n                    text={item.text}\n                />\n            );\n        });\n\n        return (\n            <React.Fragment>\n                <Menu.Group divider={divider}>\n                    <Menu.ItemToggleModalRedux\n                        id='channelViewInfo'\n                        show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                        modalId={ModalIdentifiers.CHANNEL_INFO}\n                        dialogType={ChannelInfoModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('navbar.viewInfo', 'View Info')}\n                    />\n                    <MenuItemToggleFavoriteChannel\n                        id='channelToggleFavorite'\n                        show={isMobile}\n                        channel={channel}\n                        isFavorite={isFavorite}\n                    />\n                    <MenuItemViewPinnedPosts\n                        id='channelViewPinnedPosts'\n                        show={isMobile}\n                        channel={channel}\n                    />\n                    <Menu.ItemToggleModalRedux\n                        id='channelNotificationPreferences'\n                        show={channel.type !== Constants.DM_CHANNEL && !isArchived}\n                        modalId={ModalIdentifiers.CHANNEL_NOTIFICATIONS}\n                        dialogType={ChannelNotificationsModal}\n                        dialogProps={{\n                            channel,\n                            currentUser: user,\n                        }}\n                        text={localizeMessage('navbar.preferences', 'Notification Preferences')}\n                    />\n                    <MenuItemToggleMuteChannel\n                        id='channelToggleMuteChannel'\n                        user={user}\n                        channel={channel}\n                        isMuted={isMuted}\n                        isArchived={isArchived}\n                    />\n                </Menu.Group>\n\n                <Menu.Group divider={divider}>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelAddMembers'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && !isGroupConstrained}\n                            modalId={ModalIdentifiers.CHANNEL_INVITE}\n                            dialogType={ChannelInviteModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('navbar.addMembers', 'Add Members')}\n                        />\n                        <Menu.ItemToggleModalRedux\n                            id='channelAddMembers'\n                            show={channel.type === Constants.GM_CHANNEL && !isArchived && !isGroupConstrained}\n                            modalId={ModalIdentifiers.CREATE_DM_CHANNEL}\n                            dialogType={MoreDirectChannels}\n                            dialogProps={{isExistingChannel: true}}\n                            text={localizeMessage('navbar.addMembers', 'Add Members')}\n                        />\n                    </ChannelPermissionGate>\n                    <Menu.ItemToggleModalRedux\n                        id='channelViewMembers'\n                        show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && (isArchived || isDefault)}\n                        modalId={ModalIdentifiers.CHANNEL_MEMBERS}\n                        dialogType={ChannelMembersModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('channel_header.viewMembers', 'View Members')}\n                    />\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelAddGroups'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && isGroupConstrained && isLicensedForLDAPGroups}\n                            modalId={ModalIdentifiers.ADD_GROUPS_TO_CHANNEL}\n                            dialogType={AddGroupsToChannelModal}\n                            text={localizeMessage('navbar.addGroups', 'Add Groups')}\n                        />\n                        <Menu.ItemToggleModalRedux\n                            id='channelManageGroups'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && isGroupConstrained && isLicensedForLDAPGroups}\n                            modalId={ModalIdentifiers.MANAGE_CHANNEL_GROUPS}\n                            dialogType={ChannelGroupsManageModal}\n                            dialogProps={{channelID: channel.id}}\n                            text={localizeMessage('navbar_dropdown.manageGroups', 'Manage Groups')}\n                        />\n                        <Menu.ItemToggleModalRedux\n                            id='channelManageMembers'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault}\n                            modalId={ModalIdentifiers.CHANNEL_MEMBERS}\n                            dialogType={ChannelMembersModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.manageMembers', 'Manage Members')}\n                        />\n                    </ChannelPermissionGate>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                        invert={true}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelViewMembers'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault}\n                            modalId={ModalIdentifiers.CHANNEL_MEMBERS}\n                            dialogType={ChannelMembersModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.viewMembers', 'View Members')}\n                        />\n                    </ChannelPermissionGate>\n                </Menu.Group>\n\n                <Menu.Group divider={divider}>\n                    <Menu.ItemToggleModalRedux\n                        id='channelEditHeader'\n                        show={(channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) && !isArchived && !isReadonly}\n                        modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n                        dialogType={EditChannelHeaderModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('channel_header.setHeader', 'Edit Channel Header')}\n                    />\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelPropertiesPermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelEditHeader'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isReadonly}\n                            modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n                            dialogType={EditChannelHeaderModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.setHeader', 'Edit Channel Header')}\n                        />\n\n                        <Menu.ItemToggleModalRedux\n                            id='channelEditAvatar'\n                            show={!isArchived && !isReadonly && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.EDIT_CHANNEL_PURPOSE}\n                            dialogType={UpdateChannelAvatarModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.setAvatar', 'Update Channel Avatar')}\n                        />\n\n                        {/* <Menu.ItemToggleModalRedux\n                            id='channelEditPurpose'\n                            show={!isArchived && !isReadonly && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.EDIT_CHANNEL_PURPOSE}\n                            dialogType={EditChannelPurposeModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.setPurpose', 'Edit Channel Purpose')}\n                        /> */}\n                        <Menu.ItemToggleModalRedux\n                            id='channelRename'\n                            show={!isArchived && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.RENAME_CHANNEL}\n                            dialogType={RenameChannelModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.rename', 'Rename Channel')}\n                        />\n                    </ChannelPermissionGate>\n                    <TeamPermissionGate\n                        teamId={channel.team_id}\n                        permissions={[Permissions.MANAGE_TEAM]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelCovertToPrivate'\n                            show={!isArchived && !isDefault && channel.type === Constants.OPEN_CHANNEL}\n                            modalId={ModalIdentifiers.CONVERT_CHANNEL}\n                            dialogType={ConvertChannelModal}\n                            dialogProps={{\n                                channelId: channel.id,\n                                channelDisplayName: channel.display_name,\n                            }}\n                            text={localizeMessage('channel_header.convert', 'Convert to Private Channel')}\n                        />\n                    </TeamPermissionGate>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelDeletePermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelArchiveChannel'\n                            show={!isArchived && !isDefault && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.DELETE_CHANNEL}\n                            dialogType={DeleteChannelModal}\n                            dialogProps={{\n                                channel,\n                                penultimateViewedChannelName,\n                            }}\n                            text={localizeMessage('channel_header.delete', 'Archive Channel')}\n                        />\n                    </ChannelPermissionGate>\n                </Menu.Group>\n                <Menu.Group>\n                    {pluginItems}\n                </Menu.Group>\n                <Menu.Group divider={divider}>\n                    {isMobile &&\n                        <MobileChannelHeaderPlug\n                            channel={channel}\n                            isDropdown={true}\n                        />}\n                    <MenuItemLeaveChannel\n                        id='channelLeaveChannel'\n                        channel={channel}\n                        isDefault={isDefault}\n                        isGuestUser={isGuest(user)}\n                    />\n                    <MenuItemCloseChannel\n                        id='channelCloseChannel'\n                        isArchived={isArchived}\n                    />\n                </Menu.Group>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {CSSTransition} from 'react-transition-group';\n\nconst ANIMATION_DURATION = 350;\n\nexport default class MobileChannelHeaderDropdownAnimation extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        show: PropTypes.bool.isRequired,\n    };\n\n    render() {\n        return (\n            <CSSTransition\n                in={this.props.show}\n                classNames='mobile-channel-header-dropdown'\n                enter={true}\n                exit={true}\n                mountOnEnter={true}\n                unmountOnExit={true}\n                timeout={{\n                    enter: ANIMATION_DURATION,\n                    exit: ANIMATION_DURATION,\n                }}\n            >\n                {this.props.children}\n            </CSSTransition>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport StatusIcon from 'components/status_icon';\n\nimport {Constants} from 'utils/constants';\nimport {getDisplayNameByUserId} from 'utils/utils';\n\nimport {ChannelHeaderDropdownItems} from 'components/channel_header_dropdown';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport MobileChannelHeaderDropdownAnimation from './mobile_channel_header_dropdown_animation.jsx';\n\nexport default class MobileChannelHeaderDropdown extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        channel: PropTypes.object.isRequired,\n        teammateId: PropTypes.string,\n        teammateIsBot: PropTypes.bool,\n        teammateStatus: PropTypes.string,\n    }\n\n    getChannelTitle = () => {\n        const {user, channel, teammateId} = this.props;\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            const displayname = getDisplayNameByUserId(teammateId);\n            if (user.id === teammateId) {\n                return (\n                    <FormattedMessage\n                        id='channel_header.directchannel.you'\n                        defaultMessage='{displayname} (you)'\n                        values={{displayname}}\n                    />\n                );\n            }\n            return displayname;\n        }\n        return channel.display_name;\n    }\n\n    render() {\n        const {teammateIsBot, teammateStatus} = this.props;\n        let dmHeaderIconStatus;\n\n        if (!teammateIsBot) {\n            dmHeaderIconStatus = (\n                <StatusIcon status={teammateStatus}/>\n            );\n        }\n\n        return (\n            <MenuWrapper animationComponent={MobileChannelHeaderDropdownAnimation}>\n                <a>\n                    <span className='heading'>\n                        {dmHeaderIconStatus}\n                        {this.getChannelTitle()}\n                    </span>\n                    <FormattedMessage\n                        id='generic_icons.dropdown'\n                        defaultMessage='Dropdown Icon'\n                    >\n                        {(title) => (\n                            <span\n                                className='fa fa-angle-down header-dropdown__icon'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                </a>\n\n                <FormattedMessage\n                    id='channel_header.menuAriaLabel'\n                    defaultMessage='Channel Menu'\n                >\n                    {(ariaLabel) => (\n                        <Menu ariaLabel={ariaLabel}>\n                            <ChannelHeaderDropdownItems isMobile={true}/>\n                            <div className='Menu__close visible-xs-block'>\n                                {'×'}\n                            </div>\n                        </Menu>\n                    )}\n                </FormattedMessage>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {\n    getUser,\n    getCurrentUser,\n    getUserStatuses,\n} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentChannel,\n    isCurrentChannelDefault,\n    isCurrentChannelFavorite,\n    isCurrentChannelMuted,\n    isCurrentChannelArchived,\n    isCurrentChannelReadOnly,\n    getRedirectChannelNameForTeam,\n} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getPenultimateViewedChannelName} from 'selectors/local_storage';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport Desktop from './channel_header_dropdown';\nimport Items from './channel_header_dropdown_items';\nimport Mobile from './mobile_channel_header_dropdown';\n\nconst getTeammateId = createSelector(\n    getCurrentChannel,\n    (channel) => {\n        if (channel.type !== Constants.DM_CHANNEL) {\n            return null;\n        }\n\n        return Utils.getUserIdFromChannelName(channel);\n    },\n);\n\nconst getTeammateStatus = createSelector(\n    getUserStatuses,\n    getTeammateId,\n    (userStatuses, teammateId) => {\n        if (!teammateId) {\n            return null;\n        }\n\n        return userStatuses[teammateId];\n    }\n);\n\nconst mapStateToProps = (state) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isDefault: isCurrentChannelDefault(state),\n    isFavorite: isCurrentChannelFavorite(state),\n    isMuted: isCurrentChannelMuted(state),\n    isReadonly: isCurrentChannelReadOnly(state),\n    isArchived: isCurrentChannelArchived(state),\n    penultimateViewedChannelName: getPenultimateViewedChannelName(state) || getRedirectChannelNameForTeam(state, getCurrentTeamId(state)),\n    pluginMenuItems: state.plugins.components.ChannelHeader || [],\n    isLicensedForLDAPGroups: state.entities.general.license.LDAPGroups === 'true',\n});\n\nconst mobileMapStateToProps = (state) => {\n    const user = getCurrentUser(state);\n    const channel = getCurrentChannel(state);\n    const teammateId = getTeammateId(state);\n\n    let teammateIsBot = false;\n    if (teammateId) {\n        const teammate = getUser(state, teammateId);\n        teammateIsBot = teammate && teammate.is_bot;\n    }\n\n    return {\n        user,\n        channel,\n        teammateId,\n        teammateIsBot,\n        teammateStatus: getTeammateStatus(state),\n    };\n};\n\nexport const ChannelHeaderDropdown = Desktop;\nexport const ChannelHeaderDropdownItems = connect(mapStateToProps)(Items);\nexport const MobileChannelHeaderDropdown = connect(mobileMapStateToProps)(Mobile);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class PluginChannelHeaderIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.plugins'\n                    defaultMessage='Plugins'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14px'\n                            height='14px'\n                            viewBox='0 0 16 16'\n                            version='1.1'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                fillRule='evenodd'\n                                d='M10.2500542,0.707106781 C10.6987855,0.707106781 11.0625542,1.07087542 11.0625542,1.51960678 L11.0615542,3.50610678 L12.8042208,3.50710678 C13.4301435,3.50710678 13.9375542,4.0145174 13.9375542,4.64044011 C13.9375542,5.26636283 13.4301435,5.77377345 12.8042208,5.77377345 L12.8125542,5.77377345 L12.8125542,8.97377345 L12.8125542,8.97377345 C12.8125542,11.2921636 10.8653399,13.2156919 8.31338929,13.5787961 L8.31255416,15.8946068 C8.31255416,16.3433381 7.94878552,16.7071068 7.50005416,16.7071068 C7.0513228,16.7071068 6.68755416,16.3433381 6.68755416,15.8946068 L6.68783265,13.5954057 C4.14942691,13.2878302 2.17885387,11.4410225 2.06752014,9.17620376 L2.06255416,8.97377345 L2.06255416,8.97377345 L2.06255416,5.77377345 L2.07088749,5.77377345 C1.44496478,5.77377345 0.937554159,5.26636283 0.937554159,4.64044011 C0.937554159,4.0145174 1.44496478,3.50710678 2.07088749,3.50710678 L3.81155416,3.50610678 L3.81255416,1.51960678 C3.81255416,1.07087542 4.1763228,0.707106781 4.62505416,0.707106781 C5.07378552,0.707106781 5.43755416,1.07087542 5.43755416,1.51960678 L5.43655416,3.50610678 L9.43655416,3.50610678 L9.43755416,1.51960678 C9.43755416,1.07087542 9.8013228,0.707106781 10.2500542,0.707106781 Z M11,6 L4,6 L4,9.3 L4.07019791,9.30071649 C4.39483943,10.5555917 5.80705165,11.5 7.5,11.5 C9.19294835,11.5 10.6051606,10.5555917 10.9298021,9.30071649 L10.9298021,9.30071649 L11,9.3 L11,6 Z'\n                                transform='rotate(45 7.707 6.793)'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/no-multi-comp */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Dropdown} from 'react-bootstrap';\nimport {RootCloseWrapper} from 'react-overlays';\n\nimport HeaderIconWrapper from 'components/channel_header/components/header_icon_wrapper';\nimport PluginChannelHeaderIcon from '../../components/widgets/icons/plugin_channel_header_icon';\n\nclass CustomMenu extends React.PureComponent {\n    static propTypes = {\n        open: PropTypes.bool,\n        children: PropTypes.node,\n        onClose: PropTypes.func.isRequired,\n        rootCloseEvent: PropTypes.oneOf(['click', 'mousedown']),\n    }\n\n    handleRootClose = () => {\n        this.props.onClose();\n    }\n\n    render() {\n        const {\n            open,\n            rootCloseEvent,\n            children,\n        } = this.props;\n\n        return (\n            <RootCloseWrapper\n                disabled={!open}\n                onRootClose={this.handleRootClose}\n                event={rootCloseEvent}\n            >\n                <ul\n                    role='menu'\n                    className='dropdown-menu channel-header_plugin-dropdown'\n                >\n                    {children}\n                </ul>\n            </RootCloseWrapper>\n        );\n    }\n}\n\nclass CustomToggle extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.element,\n        dropdownOpen: PropTypes.bool,\n        onClick: PropTypes.func,\n    }\n\n    handleClick = (e) => {\n        this.props.onClick(e);\n    }\n\n    render() {\n        const {children} = this.props;\n\n        let activeClass = '';\n        if (this.props.dropdownOpen) {\n            activeClass = ' active';\n        }\n\n        return (\n            <button\n                id='pluginChannelHeaderButtonDropdown'\n                className={'wide channel-header__icon style--none' + activeClass}\n                type='button'\n                onClick={this.handleClick}\n            >\n                {children}\n            </button>\n        );\n    }\n}\n\nexport default class ChannelHeaderPlug extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Components or actions to add as channel header buttons\n         */\n        components: PropTypes.array,\n\n        channel: PropTypes.object.isRequired,\n        channelMember: PropTypes.object.isRequired,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropdownOpen: false,\n        };\n    }\n\n    toggleDropdown = (dropdownOpen) => {\n        this.setState({dropdownOpen});\n    }\n\n    onClose = () => {\n        this.toggleDropdown(false);\n    }\n\n    fireActionAndClose = (action) => {\n        action(this.props.channel, this.props.channelMember);\n        this.onClose();\n    }\n\n    createButton = (plug) => {\n        return (\n            <HeaderIconWrapper\n                buttonClass='channel-header__icon style--none'\n                iconComponent={plug.icon}\n                onClick={() => plug.action(this.props.channel, this.props.channelMember)}\n                buttonId={plug.id}\n                tooltipKey={'plugin'}\n                tooltipText={plug.tooltipText ? plug.tooltipText : plug.dropdownText}\n            />\n        );\n    }\n\n    createDropdown = (plugs) => {\n        const items = plugs.map((plug) => {\n            return (\n                <li\n                    key={'channelHeaderPlug' + plug.id}\n                >\n                    <a\n                        href='#'\n                        className='d-flex align-items-center'\n                        onClick={() => this.fireActionAndClose(plug.action)}\n                    >\n                        <span className='d-flex align-items-center overflow--ellipsis'>{plug.icon}</span>\n                        <span>{plug.dropdownText}</span>\n                    </a>\n                </li>\n            );\n        });\n\n        return (\n            <div className='flex-child'>\n                <Dropdown\n                    id='channelHeaderPlugDropdown'\n                    onToggle={this.toggleDropdown}\n                    onSelect={this.onSelect}\n                    open={this.state.dropdownOpen}\n                >\n                    <CustomToggle\n                        dropdownOpen={this.state.dropdownOpen}\n                        bsRole='toggle'\n                    >\n                        <div>\n                            <span\n                                id='pluginCount'\n                                className='icon__text'\n                            >\n                                {plugs.length}\n                            </span>\n                            <PluginChannelHeaderIcon\n                                id='pluginChannelHeaderIcon'\n                                className='icon icon__pluginChannelHeader'\n                                aria-hidden='true'\n                            />\n                        </div>\n                    </CustomToggle>\n                    <CustomMenu\n                        bsRole='menu'\n                        open={this.state.dropdownOpen}\n                        onClose={this.onClose}\n                    >\n                        {items}\n                    </CustomMenu>\n                </Dropdown>\n            </div>\n        );\n    }\n\n    render() {\n        const components = this.props.components || [];\n\n        if (components.length === 0) {\n            return null;\n        } else if (components.length === 1) {\n            return this.createButton(components[0]);\n        }\n\n        return this.createDropdown(components);\n    }\n}\n\n/* eslint-enable react/no-multi-comp */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport ChannelHeaderPlug from './channel_header_plug.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        components: state.plugins.components.ChannelHeaderButton,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelHeaderPlug);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport 'bootstrap';\n\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport Markdown from 'components/markdown';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport PopoverListMembers from 'components/popover_list_members';\nimport SearchBar from 'components/search_bar';\nimport StatusIcon from 'components/status_icon';\nimport VideoIcon from 'components/widgets/icons/video_icon';\nimport FlagIconFilled from 'components/widgets/icons/flag_icon_filled';\nimport MentionsIcon from 'components/widgets/icons/mentions_icon';\nimport PinIcon from 'components/widgets/icons/pin_icon';\nimport SearchIcon from 'components/widgets/icons/search_icon';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport QuickSwitchModal from 'components/quick_switch_modal';\nimport {ChannelHeaderDropdown} from 'components/channel_header_dropdown';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport Popover from 'components/widgets/popover';\nimport {\n    Constants,\n    ModalIdentifiers,\n    NotificationLevels,\n    RHSStates,\n} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils';\n\nimport ChannelHeaderPlug from 'plugins/channel_header_plug';\n\nimport HeaderIconWrapper from './components/header_icon_wrapper';\n\nconst headerMarkdownOptions = {singleline: true, mentionHighlight: false, atMentions: true};\nconst popoverMarkdownOptions = {singleline: false, mentionHighlight: false, atMentions: true};\n\nconst SEARCH_BAR_MINIMUM_WINDOW_SIZE = 1140;\n\nclass ChannelHeader extends React.PureComponent {\n    static propTypes = {\n        teamId: PropTypes.string.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        channel: PropTypes.object,\n        channelMember: PropTypes.object,\n        dmUser: PropTypes.object,\n        gmMembers: PropTypes.array,\n        isFavorite: PropTypes.bool,\n        isReadOnly: PropTypes.bool,\n        isMuted: PropTypes.bool,\n        hasGuests: PropTypes.bool,\n        rhsState: PropTypes.oneOf(\n            Object.values(RHSStates),\n        ),\n        rhsOpen: PropTypes.bool,\n        isQuickSwitcherOpen: PropTypes.bool,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n            favoriteChannel: PropTypes.func.isRequired,\n            unfavoriteChannel: PropTypes.func.isRequired,\n            showFlaggedPosts: PropTypes.func.isRequired,\n            showPinnedPosts: PropTypes.func.isRequired,\n            showMentions: PropTypes.func.isRequired,\n            openRHSSearch: PropTypes.func.isRequired,\n            closeRightHandSide: PropTypes.func.isRequired,\n            getCustomEmojisInText: PropTypes.func.isRequired,\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n            goToLastViewedChannel: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n            closeModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.toggleFavoriteRef = React.createRef();\n\n        this.state = {showSearchBar: ChannelHeader.getShowSearchBar(props)};\n\n        this.getHeaderMarkdownOptions = memoizeResult((channelNamesMap) => (\n            {...headerMarkdownOptions, channelNamesMap}\n        ));\n        this.getPopoverMarkdownOptions = memoizeResult((channelNamesMap) => (\n            {...popoverMarkdownOptions, channelNamesMap}\n        ));\n    }\n\n    componentDidMount() {\n        this.props.actions.getCustomEmojisInText(this.props.channel ? this.props.channel.header : '');\n        document.addEventListener('keydown', this.handleShortcut);\n        document.addEventListener('keydown', this.handleQuickSwitchKeyPress);\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n        document.removeEventListener('keydown', this.handleQuickSwitchKeyPress);\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    componentDidUpdate(prevProps) {\n        const header = this.props.channel ? this.props.channel.header : '';\n        const prevHeader = prevProps.channel ? prevProps.channel.header : '';\n        if (header !== prevHeader) {\n            this.props.actions.getCustomEmojisInText(header);\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps) {\n        return {showSearchBar: ChannelHeader.getShowSearchBar(nextProps)};\n    }\n\n    static getShowSearchBar(props) {\n        return (Utils.windowWidth() > SEARCH_BAR_MINIMUM_WINDOW_SIZE) || props.rhsOpen;\n    }\n\n    handleResize = () => {\n        this.setState({showSearchBar: ChannelHeader.getShowSearchBar(this.props)});\n    };\n\n    handleClose = () => {\n        this.props.actions.goToLastViewedChannel();\n    };\n\n    toggleFavorite = (e) => {\n        e.stopPropagation();\n        if (this.props.isFavorite) {\n            this.props.actions.unfavoriteChannel(this.props.channel.id);\n        } else {\n            this.props.actions.favoriteChannel(this.props.channel.id);\n        }\n    };\n\n    unmute = () => {\n        const {actions, channel, channelMember, currentUser} = this.props;\n\n        if (!channelMember || !currentUser || !channel) {\n            return;\n        }\n\n        const options = {mark_unread: NotificationLevels.ALL};\n        actions.updateChannelNotifyProps(currentUser.id, channel.id, options);\n    };\n\n    mute = () => {\n        const {actions, channel, channelMember, currentUser} = this.props;\n\n        if (!channelMember || !currentUser || !channel) {\n            return;\n        }\n\n        const options = {mark_unread: NotificationLevels.MENTION};\n        actions.updateChannelNotifyProps(currentUser.id, channel.id, options);\n    };\n\n    searchMentions = (e) => {\n        e.preventDefault();\n        if (this.props.rhsState === RHSStates.MENTION) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showMentions();\n        }\n    };\n\n    showPinnedPosts = (e) => {\n        e.preventDefault();\n        if (this.props.rhsState === RHSStates.PIN) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showPinnedPosts();\n        }\n    };\n\n    getFlagged = (e) => {\n        e.preventDefault();\n        if (this.props.rhsState === RHSStates.FLAG) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showFlaggedPosts();\n        }\n    };\n\n    getVideoCall = (e) => {\n        e.preventDefault();\n\n        const {channel} = this.props;\n\n        window.postMessage(\n            {\n                type: 'toggle-video-call',\n                message: {\n                    channel_id: channel.id,\n\t\t            channel_name: channel.display_name\n                }\n            },\n            window.location.origin\n        );\n    };\n\n    searchButtonClick = (e) => {\n        e.preventDefault();\n\n        this.props.actions.openRHSSearch();\n    };\n\n    handleShortcut = (e) => {\n        if (Utils.cmdOrCtrlPressed(e) && e.shiftKey) {\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.M)) {\n                e.preventDefault();\n                this.props.actions.closeModal(ModalIdentifiers.QUICK_SWITCH);\n                this.searchMentions(e);\n            }\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.L)) {\n                // just close the modal if it's open, but let someone else handle the shortcut\n                this.props.actions.closeModal(ModalIdentifiers.QUICK_SWITCH);\n            }\n        }\n    };\n\n    handleOnMouseOver = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.show();\n        }\n    };\n\n    handleOnMouseOut = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n    };\n\n    handleQuickSwitchKeyPress = (e) => {\n        if (Utils.cmdOrCtrlPressed(e) && !e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.K)) {\n            if (!e.altKey) {\n                e.preventDefault();\n                this.toggleQuickSwitchModal();\n            }\n        }\n    }\n\n    toggleQuickSwitchModal = () => {\n        const {isQuickSwitcherOpen} = this.props;\n        if (isQuickSwitcherOpen) {\n            this.props.actions.closeModal(ModalIdentifiers.QUICK_SWITCH);\n        } else {\n            this.props.actions.openModal({\n                modalId: ModalIdentifiers.QUICK_SWITCH,\n                dialogType: QuickSwitchModal,\n            });\n        }\n    }\n\n    removeTooltipLink = () => {\n        // Bootstrap adds the attr dynamically, removing it to prevent a11y readout\n        this.toggleFavoriteRef.current.removeAttribute('aria-describedby');\n    }\n\n    showEditChannelHeaderModal = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n\n        const {actions, channel} = this.props;\n        const modalData = {\n            modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n            dialogType: EditChannelHeaderModal,\n            dialogProps: {channel},\n        };\n\n        actions.openModal(modalData);\n    }\n\n    render() {\n        const {\n            teamId,\n            currentUser,\n            gmMembers,\n            channel,\n            channelMember,\n            isMuted: channelMuted,\n            isReadOnly,\n            isFavorite,\n            dmUser,\n            rhsState,\n            hasGuests,\n        } = this.props;\n        const {formatMessage} = this.props.intl;\n        const ariaLabelChannelHeader = Utils.localizeMessage('accessibility.sections.channelHeader', 'channel header region');\n\n        let hasGuestsText = '';\n        if (hasGuests) {\n            hasGuestsText = (\n                <span className='has-guest-header'>\n                    <FormattedMessage\n                        id='channel_header.channelHasGuests'\n                        defaultMessage='This channel has guests'\n                    />\n                </span>\n            );\n        }\n\n        const channelIsArchived = channel.delete_at !== 0;\n        if (Utils.isEmptyObject(channel) ||\n            Utils.isEmptyObject(channelMember) ||\n            Utils.isEmptyObject(currentUser) ||\n            (!dmUser && channel.type === Constants.DM_CHANNEL)\n        ) {\n            // Use an empty div to make sure the header's height stays constant\n            return (\n                <div className='channel-header'/>\n            );\n        }\n\n        const channelNamesMap = channel.props && channel.props.channel_mentions;\n\n        let channelTitle = channel.display_name;\n        let archivedIcon = null;\n        if (channelIsArchived) {\n            archivedIcon = (<ArchiveIcon className='icon icon__archive icon channel-header-archived-icon svg-text-color'/>);\n        }\n        const isDirect = (channel.type === Constants.DM_CHANNEL);\n        const isGroup = (channel.type === Constants.GM_CHANNEL);\n        const isPrivate = (channel.type === Constants.PRIVATE_CHANNEL);\n        const isPublic = (channel.type === Constants.OPEN_CHANNEL);\n\n        if (isDirect) {\n            const teammateId = dmUser.id;\n            if (currentUser.id === teammateId) {\n                channelTitle = (\n                    <FormattedMessage\n                        id='channel_header.directchannel.you'\n                        defaultMessage='{displayname} (you) '\n                        values={{\n                            displayname: Utils.getDisplayNameByUserId(teammateId),\n                        }}\n                    />\n                );\n            } else {\n                channelTitle = Utils.getDisplayNameByUserId(teammateId) + ' ';\n            }\n            channelTitle = (\n                <React.Fragment>\n                    {channelTitle}\n                    <GuestBadge show={Utils.isGuest(dmUser)}/>\n                </React.Fragment>\n            );\n        }\n\n        if (isGroup) {\n            // map the displayname to the gm member users\n            const membersMap = {};\n            for (const user of gmMembers) {\n                if (user.id === currentUser.id) {\n                    continue;\n                }\n                const userDisplayName = Utils.getDisplayNameByUserId(user.id);\n\n                if (!membersMap[userDisplayName]) {\n                    membersMap[userDisplayName] = []; //Create an array for cases with same display name\n                }\n\n                membersMap[userDisplayName].push(user);\n            }\n\n            const displayNames = channel.display_name.split(', ');\n\n            channelTitle = displayNames.map((displayName, index) => {\n                if (!membersMap[displayName]) {\n                    return displayName;\n                }\n\n                const user = membersMap[displayName].shift();\n\n                return (\n                    <React.Fragment key={user.id}>\n                        {index > 0 && ', '}\n                        {displayName}\n                        <GuestBadge show={Utils.isGuest(user)}/>\n                    </React.Fragment>\n                );\n            });\n\n            if (hasGuests) {\n                hasGuestsText = (\n                    <span className='has-guest-header'>\n                        <FormattedMessage\n                            id='channel_header.groupMessageHasGuests'\n                            defaultMessage='This group message has guests'\n                        />\n                    </span>\n                );\n            }\n        }\n\n        let popoverListMembers;\n        if (!isDirect) {\n            popoverListMembers = (\n                <PopoverListMembers\n                    channel={channel}\n                />\n            );\n        }\n\n        let dmHeaderIconStatus;\n        let dmHeaderTextStatus;\n        if (isDirect && !dmUser.delete_at && !dmUser.is_bot) {\n            dmHeaderIconStatus = (\n                <StatusIcon\n                    type='avatar'\n                    status={channel.status}\n                />\n            );\n\n            dmHeaderTextStatus = (\n                <span className='header-status__text'>\n                    <FormattedMessage\n                        id={`status_dropdown.set_${channel.status}`}\n                        defaultMessage={Utils.toTitleCase(channel.status)}\n                    />\n                </span>\n            );\n        }\n\n        let headerTextContainer;\n        const headerText = (isDirect && dmUser.is_bot) ? dmUser.bot_description : channel.header;\n        if (headerText) {\n            const popoverContent = (\n                <Popover\n                    id='header-popover'\n                    popoverStyle='info'\n                    popoverSize='lg'\n                    placement='bottom'\n                    className='channel-header__popover'\n                    onMouseOver={this.handleOnMouseOver}\n                    onMouseOut={this.handleOnMouseOut}\n                >\n                    <Markdown\n                        message={headerText}\n                        options={this.getPopoverMarkdownOptions(channelNamesMap)}\n                    />\n                </Popover>\n            );\n            headerTextContainer = (\n                <OverlayTrigger\n                    trigger={'click'}\n                    placement='bottom'\n                    rootClose={true}\n                    overlay={popoverContent}\n                    ref='headerOverlay'\n                >\n                    <div\n                        id='channelHeaderDescription'\n                        className='channel-header__description'\n                    >\n                        {dmHeaderIconStatus}\n                        {dmHeaderTextStatus}\n                        {hasGuestsText}\n                        <span\n                            className='header-description__text'\n                            onClick={Utils.handleFormattedTextClick}\n                        >\n                            <Markdown\n                                message={headerText}\n                                options={this.getHeaderMarkdownOptions(channelNamesMap)}\n                            />\n                        </span>\n                    </div>\n                </OverlayTrigger>\n            );\n        } else {\n            let editMessage;\n            if (!isReadOnly && !channelIsArchived) {\n                if (isDirect || isGroup) {\n                    if (!isDirect || !dmUser.is_bot) {\n                        editMessage = (\n                            <button\n                                className='style--none'\n                                onClick={this.showEditChannelHeaderModal}\n                            >\n                                <FormattedMessage\n                                    id='channel_header.addChannelHeader'\n                                    defaultMessage='Add a channel description'\n                                />\n                            </button>\n                        );\n                    }\n                } else {\n                    editMessage = (\n                        <ChannelPermissionGate\n                            channelId={channel.id}\n                            teamId={teamId}\n                            permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n                        >\n                            <button\n                                className='style--none'\n                                onClick={this.showEditChannelHeaderModal}\n                            >\n                                <FormattedMessage\n                                    id='channel_header.addChannelHeader'\n                                    defaultMessage='Add a channel description'\n                                />\n                            </button>\n                        </ChannelPermissionGate>\n                    );\n                }\n            }\n            headerTextContainer = (\n                <div\n                    id='channelHeaderDescription'\n                    className='channel-header__description light'\n                >\n                    {dmHeaderIconStatus}\n                    {dmHeaderTextStatus}\n                    {hasGuestsText}\n                    {editMessage}\n                </div>\n            );\n        }\n\n        let toggleFavoriteTooltip;\n        let toggleFavorite = null;\n        let ariaLabel = '';\n\n        if (!channelIsArchived) {\n            if (isFavorite) {\n                toggleFavoriteTooltip = (\n                    <Tooltip id='favoriteTooltip'>\n                        <FormattedMessage\n                            id='channelHeader.removeFromFavorites'\n                            defaultMessage='Remove from Favorites'\n                        />\n                    </Tooltip>\n                );\n                ariaLabel = formatMessage({id: 'channelHeader.removeFromFavorites', defaultMessage: 'Remove from Favorites'}).toLowerCase();\n            } else {\n                toggleFavoriteTooltip = (\n                    <Tooltip id='favoriteTooltip'>\n                        <FormattedMessage\n                            id='channelHeader.addToFavorites'\n                            defaultMessage='Add to Favorites'\n                        />\n                    </Tooltip>\n                );\n                ariaLabel = formatMessage({id: 'channelHeader.addToFavorites', defaultMessage: 'Add to Favorites'}).toLowerCase();\n            }\n\n            toggleFavorite = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={toggleFavoriteTooltip}\n                    onEntering={this.removeTooltipLink}\n                >\n                    <button\n                        id='toggleFavorite'\n                        ref={this.toggleFavoriteRef}\n                        onClick={this.toggleFavorite}\n                        className={'style--none color--link channel-header__favorites ' + (this.props.isFavorite ? 'active' : 'inactive')}\n                        aria-label={ariaLabel}\n                    >\n                        <i className={'icon fa ' + (this.props.isFavorite ? 'fa-star' : 'fa-star-o')}/>\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        const channelMutedTooltip = (\n            <Tooltip id='channelMutedTooltip'>\n                <FormattedMessage\n                    id='channelHeader.unmute'\n                    defaultMessage='Unmute'\n                />\n            </Tooltip>\n        );\n\n        let muteTrigger;\n        if (channelMuted) {\n            muteTrigger = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={channelMutedTooltip}\n                >\n                    <button\n                        id='toggleMute'\n                        onClick={this.unmute}\n                        className={'style--none color--link channel-header__mute inactive'}\n                        aria-label={formatMessage({id: 'generic_icons.muted', defaultMessage: 'Muted Icon'})}\n                    >\n                        <i className={'icon fa fa-bell-slash-o'}/>\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        let pinnedIconClass = 'channel-header__icon';\n        if (rhsState === RHSStates.PIN) {\n            pinnedIconClass += ' active';\n        }\n\n        let mentionsIconClass = 'channel-header__icon';\n        if (rhsState === RHSStates.MENTION) {\n            mentionsIconClass += ' active';\n        }\n\n        let flaggedIconClass = 'channel-header__icon';\n        if (rhsState === RHSStates.FLAG) {\n            flaggedIconClass += ' active';\n        }\n\n        let videoCallIconClass = 'channel-header__icon';\n        if (rhsState === RHSStates.VIDEO) {\n            videoCallIconClass += ' active';\n        }\n\n        let title = (\n            <React.Fragment>\n                {toggleFavorite}\n                <MenuWrapper>\n                    <div\n                        id='channelHeaderDropdownButton'\n                        className='channel-header__top'\n                    >\n                        <button\n                            className='channel-header__trigger style--none'\n                            aria-label={formatMessage({id: 'channel_header.menuAriaLabel', defaultMessage: 'Channel Menu'}).toLowerCase()}\n                        >\n                            <strong\n                                role='heading'\n                                aria-level='2'\n                                id='channelHeaderTitle'\n                                className='heading'\n                            >\n                                <span>\n                                    {archivedIcon}\n                                    {channelTitle}\n                                </span>\n                            </strong>\n                            <span\n                                id='channelHeaderDropdownIcon'\n                                className='fa fa-angle-down header-dropdown__icon'\n                                aria-label={formatMessage({id: 'generic_icons.dropdown', defaultMessage: 'Dropdown Icon'}).toLowerCase()}\n                            />\n                        </button>\n                    </div>\n                    <ChannelHeaderDropdown/>\n                </MenuWrapper>\n            </React.Fragment>\n        );\n        if (isDirect && dmUser.is_bot) {\n            title = (\n                <div\n                    id='channelHeaderDropdownButton'\n                    className='channel-header__top'\n                >\n                    {toggleFavorite}\n                    <strong\n                        role='heading'\n                        aria-level='2'\n                        id='channelHeaderTitle'\n                        className='heading'\n                    >\n                        <span>\n                            {archivedIcon}\n                            {channelTitle}\n                        </span>\n                    </strong>\n                    <BotBadge className='badge-popoverlist'/>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                id='channel-header'\n                aria-label={ariaLabelChannelHeader}\n                role='application'\n                tabIndex='-1'\n                data-channelid={`${channel.id}`}\n                className='channel-header alt a11y__region'\n                data-a11y-sort-order='7'\n                style={{'-webkit-app-region': 'drag', 'user-select': 'none'}}\n            >\n                <div className='flex-parent'>\n                    <div className='flex-child'>\n                        <div\n                            id='channelHeaderInfo'\n                            className='channel-header__info'\n                        >\n                            <div\n                                className='channel-header__title dropdown'\n                            >\n                                <div>\n                                    {title}\n                                </div>\n                                {muteTrigger}\n                            </div>\n                            {headerTextContainer}\n                        </div>\n                    </div>\n                    <div className='flex-child'>\n                        {popoverListMembers}\n                    </div>\n                    <ChannelHeaderPlug\n                        channel={channel}\n                        channelMember={channelMember}\n                    />\n                    <HeaderIconWrapper\n                        iconComponent={\n                            <PinIcon\n                                className='icon icon__pin'\n                                aria-hidden='true'\n                            />\n                        }\n                        ariaLabel={true}\n                        buttonClass={'style--none ' + pinnedIconClass}\n                        buttonId={'channelHeaderPinButton'}\n                        onClick={this.showPinnedPosts}\n                        tooltipKey={'pinnedPosts'}\n                    />\n                    {this.state.showSearchBar ? (\n                        <div\n                            id='searchbarContainer'\n                            className='flex-child search-bar__container'\n                        >\n                            <SearchBar\n                                showMentionFlagBtns={false}\n                                isFocus={Utils.isMobile() || (this.props.rhsOpen && this.props.rhsState)}\n                            />\n                        </div>\n                    ) : (\n                        <HeaderIconWrapper\n                            iconComponent={\n                                <SearchIcon\n                                    className='icon icon__search icon--stroke'\n                                    aria-hidden='true'\n                                />\n                            }\n                            ariaLabel={true}\n                            buttonId={'channelHeaderSearchButton'}\n                            onClick={this.searchButtonClick}\n                            tooltipKey={'search'}\n                        />\n                    )}\n                    <HeaderIconWrapper\n                        iconComponent={\n                            <MentionsIcon\n                                className='icon icon__mentions'\n                                aria-hidden='true'\n                            />\n                        }\n                        ariaLabel={true}\n                        buttonClass={'style--none ' + mentionsIconClass}\n                        buttonId={'channelHeaderMentionButton'}\n                        onClick={this.searchMentions}\n                        tooltipKey={'recentMentions'}\n                    />\n                    <HeaderIconWrapper\n                        iconComponent={\n                            <FlagIconFilled className='icon icon__flag'/>\n                        }\n                        ariaLabel={true}\n                        buttonClass={'style--none ' + flaggedIconClass}\n                        buttonId={'channelHeaderFlagButton'}\n                        onClick={this.getFlagged}\n                        tooltipKey={'flaggedPosts'}\n                    />\n\n                    {!isPublic && (\n                        <HeaderIconWrapper\n                            iconComponent={\n                                <VideoIcon className='icon icon__bot'/>\n                            }\n                            ariaLabel={true}\n                            buttonClass={'style--none ' + videoCallIconClass}\n                            buttonId={'channelHeaderVideoCallButton'}\n                            onClick={this.getVideoCall}\n                            tooltipKey={'videoCall'}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(ChannelHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {\n    favoriteChannel,\n    unfavoriteChannel,\n    updateChannelNotifyProps,\n} from 'mattermost-redux/actions/channels';\nimport {getCustomEmojisInText} from 'mattermost-redux/actions/emojis';\nimport {General} from 'mattermost-redux/constants';\nimport {\n    getCurrentChannel,\n    getMyCurrentChannelMembership,\n    isCurrentChannelFavorite,\n    isCurrentChannelMuted,\n    isCurrentChannelReadOnly,\n    getCurrentChannelStats,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentUser,\n    getUser,\n    makeGetProfilesInChannel,\n} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\nimport {openModal, closeModal} from 'actions/views/modals';\nimport {\n    showFlaggedPosts,\n    showPinnedPosts,\n    showMentions,\n    openRHSSearch,\n    closeRightHandSide,\n} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {isModalOpen} from 'selectors/views/modals';\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport ChannelHeader from './channel_header';\n\nfunction makeMapStateToProps() {\n    const doGetProfilesInChannel = makeGetProfilesInChannel();\n\n    return function mapStateToProps(state) {\n        const channel = getCurrentChannel(state) || {};\n        const user = getCurrentUser(state);\n\n        let dmUser;\n        let gmMembers;\n        if (channel && channel.type === General.DM_CHANNEL) {\n            const dmUserId = getUserIdFromChannelName(user.id, channel.name);\n            dmUser = getUser(state, dmUserId);\n        } else if (channel && channel.type === General.GM_CHANNEL) {\n            gmMembers = doGetProfilesInChannel(state, channel.id, false);\n        }\n        const stats = getCurrentChannelStats(state) || {member_count: 0, guest_count: 0};\n\n        return {\n            teamId: getCurrentTeamId(state),\n            channel,\n            channelMember: getMyCurrentChannelMembership(state),\n            currentUser: user,\n            dmUser,\n            gmMembers,\n            rhsState: getRhsState(state),\n            rhsOpen: getIsRhsOpen(state),\n            isFavorite: isCurrentChannelFavorite(state),\n            isReadOnly: isCurrentChannelReadOnly(state),\n            isMuted: isCurrentChannelMuted(state),\n            isQuickSwitcherOpen: isModalOpen(state, ModalIdentifiers.QUICK_SWITCH),\n            hasGuests: stats.guest_count > 0,\n        };\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        favoriteChannel,\n        unfavoriteChannel,\n        showFlaggedPosts,\n        showPinnedPosts,\n        showMentions,\n        openRHSSearch,\n        closeRightHandSide,\n        getCustomEmojisInText,\n        updateChannelNotifyProps,\n        goToLastViewedChannel,\n        openModal,\n        closeModal,\n    }, dispatch),\n});\n\nexport default withRouter(connect(makeMapStateToProps, mapDispatchToProps)(ChannelHeader));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class CommentedOnFilesMessage extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The id of the post that was commented on\n         */\n        parentPostId: PropTypes.string.isRequired,\n\n        /*\n         * An array of file metadata for the parent post\n         */\n        fileInfos: PropTypes.arrayOf(PropTypes.object),\n    }\n\n    render() {\n        if (!this.props.fileInfos || this.props.fileInfos.length === 0) {\n            return null;\n        }\n\n        let plusMore = null;\n        if (this.props.fileInfos.length > 1) {\n            plusMore = (\n                <FormattedMessage\n                    id='post_body.plusMore'\n                    defaultMessage=' plus {count, number} other {count, plural, one {file} other {files}}'\n                    values={{\n                        count: this.props.fileInfos.length - 1,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <span>\n                {this.props.fileInfos[0].name}\n                {plusMore}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {makeGetFilesForPost} from 'mattermost-redux/selectors/entities/files';\n\nimport CommentedOnFilesMessage from './commented_on_files_message.jsx';\n\nfunction makeMapStateToProps() {\n    const selectFileInfosForPost = makeGetFilesForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        let fileInfos;\n        if (ownProps.parentPostId) {\n            fileInfos = selectFileInfosForPost(state, ownProps.parentPostId);\n        }\n\n        return {\n            fileInfos,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(CommentedOnFilesMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {stripMarkdown} from 'utils/markdown';\n\nimport CommentedOnFilesMessage from 'components/post_view/commented_on_files_message';\n\nexport default class CommentedOn extends PureComponent {\n    static propTypes = {\n        displayName: PropTypes.string,\n        enablePostUsernameOverride: PropTypes.bool,\n        onCommentClick: PropTypes.func.isRequired,\n        post: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            showSearchResults: PropTypes.func.isRequired,\n            updateSearchTerms: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleOnClick = () => {\n        const {actions} = this.props;\n        const displayName = this.makeUsername();\n        actions.updateSearchTerms(displayName);\n        actions.showSearchResults();\n    }\n\n    makeUsername = () => {\n        const postProps = this.props.post.props;\n        let username = this.props.displayName;\n        if (this.props.enablePostUsernameOverride && postProps && postProps.from_webhook === 'true' && postProps.override_username) {\n            username = postProps.override_username;\n        }\n        return username;\n    }\n\n    makeCommentedOnMessage = () => {\n        const {post} = this.props;\n        let message = '';\n        if (post.message) {\n            message = Utils.replaceHtmlEntities(post.message);\n        } else if (post.file_ids && post.file_ids.length > 0) {\n            message = (\n                <CommentedOnFilesMessage parentPostId={post.id}/>\n            );\n        } else if (post.props && post.props.attachments && post.props.attachments.length > 0) {\n            const attachment = post.props.attachments[0];\n            const webhookMessage = attachment.pretext || attachment.title || attachment.text || attachment.fallback || '';\n            message = Utils.replaceHtmlEntities(webhookMessage);\n        }\n\n        return message;\n    }\n\n    render() {\n        const username = this.makeUsername();\n        const message = this.makeCommentedOnMessage();\n\n        const name = (\n            <a\n                className='theme'\n                onClick={this.handleOnClick}\n            >\n                {username}\n            </a>\n        );\n\n        return (\n            <div\n                data-testid='post-link'\n                className='post__link'\n            >\n                <span>\n                    <FormattedMessage\n                        id='post_body.commentedOn'\n                        defaultMessage=\"Commented on {name}'s message: \"\n                        values={{\n                            name,\n                        }}\n                    />\n                    <a\n                        className='theme'\n                        onClick={this.props.onCommentClick}\n                    >\n                        {stripMarkdown(message)}\n                    </a>\n                </span>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {showSearchResults, updateSearchTerms} from 'actions/views/rhs';\n\nimport {getDisplayNameByUser} from 'utils/utils.jsx';\n\nimport CommentedOn from './commented_on.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    let displayName = '';\n    if (ownProps.post) {\n        const user = getUser(state, ownProps.post.user_id);\n        displayName = getDisplayNameByUser(user);\n    }\n\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    return {\n        displayName,\n        enablePostUsernameOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            showSearchResults,\n            updateSearchTerms,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentedOn);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport DelayedAction from 'utils/delayed_action';\n\nimport CommentedOn from 'components/post_view/commented_on';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport FailedPostOptions from 'components/post_view/failed_post_options';\nimport PostBodyAdditionalContent from 'components/post_view/post_body_additional_content';\nimport PostMessageView from 'components/post_view/post_message_view';\nimport ReactionList from 'components/post_view/reaction_list';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nconst SENDING_ANIMATION_DELAY = 3000;\n\nexport default class PostBody extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render the body of\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * The parent post of the thread this post is in\n         */\n        parentPost: PropTypes.object,\n\n        /**\n         * The poster of the parent post, if exists\n         */\n        parentPostUser: PropTypes.object,\n\n        /**\n         * The function called when the comment icon is clicked\n         */\n        handleCommentClick: PropTypes.func.isRequired,\n\n        /**\n         * Set to render post body compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Set to highlight comment as a mention\n         */\n        isCommentMention: PropTypes.bool,\n\n        /**\n         * Set to render a preview of the parent post above this reply\n         */\n        isFirstReply: PropTypes.bool,\n\n        /*\n         * Post type components from plugins\n         */\n        pluginPostTypes: PropTypes.object,\n\n        /**\n         * Flag passed down to PostBodyAdditionalContent for determining if post embed is visible\n         */\n        isEmbedVisible: PropTypes.bool,\n\n        /**\n         * Whether or not the post username can be overridden.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Set not to allow edits on post\n         */\n        isReadOnly: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        isReadOnly: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.sendingAction = new DelayedAction(\n            () => {\n                const post = this.props.post;\n                if (post && post.id === post.pending_post_id) {\n                    this.setState({sending: true});\n                }\n            }\n        );\n\n        this.state = {sending: false};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (state.sending && props.post && (props.post.id !== props.post.pending_post_id)) {\n            return {\n                sending: false,\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate() {\n        if (this.state.sending === false) {\n            this.sendingAction.cancel();\n        }\n    }\n\n    componentDidMount() {\n        const post = this.props.post;\n        if (post && post.id === post.pending_post_id) {\n            this.sendingAction.fireAfter(SENDING_ANIMATION_DELAY);\n        }\n    }\n\n    componentWillUnmount() {\n        this.sendingAction.cancel();\n    }\n\n    render() {\n        const post = this.props.post;\n        const parentPost = this.props.parentPost;\n\n        let comment;\n        let postClass = '';\n        const isEphemeral = Utils.isPostEphemeral(post);\n        if (this.props.isFirstReply && parentPost && !isEphemeral) {\n            comment = (\n                <CommentedOn\n                    post={parentPost}\n                    onCommentClick={this.props.handleCommentClick}\n                />\n            );\n        }\n\n        let failedOptions;\n        if (this.props.post.failed) {\n            postClass += ' post--fail';\n            failedOptions = <FailedPostOptions post={this.props.post}/>;\n        }\n\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let fileAttachmentHolder = null;\n        if (((post.file_ids && post.file_ids.length > 0) || (post.filenames && post.filenames.length > 0)) && this.props.post.state !== Posts.POST_DELETED) {\n            fileAttachmentHolder = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        if (this.state.sending) {\n            postClass += ' post-waiting';\n        }\n\n        const messageWrapper = (\n            <React.Fragment>\n                {failedOptions}\n                {this.state.sending && <LoadingSpinner/>}\n                <PostMessageView\n                    post={this.props.post}\n                    compactDisplay={this.props.compactDisplay}\n                    hasMention={true}\n                />\n            </React.Fragment>\n        );\n\n        const hasPlugin = (post.type && this.props.pluginPostTypes.hasOwnProperty(post.type)) ||\n            (post.props && post.props.type && this.props.pluginPostTypes.hasOwnProperty(post.props.type));\n\n        let messageWithAdditionalContent;\n        if (this.props.post.state === Posts.POST_DELETED || hasPlugin) {\n            messageWithAdditionalContent = messageWrapper;\n        } else {\n            messageWithAdditionalContent = (\n                <PostBodyAdditionalContent\n                    post={this.props.post}\n                    isEmbedVisible={this.props.isEmbedVisible}\n                >\n                    {messageWrapper}\n                </PostBodyAdditionalContent>\n            );\n        }\n\n        let mentionHighlightClass = '';\n        if (this.props.isCommentMention) {\n            mentionHighlightClass = 'mention-comment';\n        }\n\n        let ephemeralPostClass = '';\n        if (isEphemeral) {\n            ephemeralPostClass = 'post--ephemeral';\n        }\n\n        return (\n            <div>\n                {comment}\n                <div\n                    id={`${post.id}_message`}\n                    className={`post__body ${mentionHighlightClass} ${ephemeralPostClass} ${postClass}`}\n                >\n                    {messageWithAdditionalContent}\n                    {fileAttachmentHolder}\n                    <ReactionList\n                        post={post}\n                        isReadOnly={this.props.isReadOnly}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {isCurrentChannelReadOnly, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PostBody from './post_body.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    let parentPost;\n    let parentPostUser;\n    if (ownProps.post.root_id) {\n        parentPost = getPost(state, ownProps.post.root_id);\n        parentPostUser = parentPost ? getUser(state, parentPost.user_id) : null;\n    }\n\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    const currentChannel = getCurrentChannel(state);\n    const channelIsArchived = currentChannel.delete_at !== 0;\n\n    return {\n        parentPost,\n        parentPostUser,\n        pluginPostTypes: state.plugins.postTypes,\n        enablePostUsernameOverride,\n        isReadOnly: isCurrentChannelReadOnly(state) || channelIsArchived,\n    };\n}\n\nexport default connect(mapStateToProps)(PostBody);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport * as ReduxPostUtils from 'mattermost-redux/utils/post_utils';\n\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\nimport CommentIcon from 'components/common/comment_icon';\nimport DotMenu from 'components/dot_menu';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport PostReaction from 'components/post_view/post_reaction';\nimport PostTime from 'components/post_view/post_time';\nimport InfoSmallIcon from 'components/widgets/icons/info_small_icon';\n\nexport default class PostInfo extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the info for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The id of the team which belongs the post\n         */\n        teamId: PropTypes.string,\n\n        /*\n         * Function called when the comment icon is clicked\n         */\n        handleCommentClick: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the card icon is clicked\n         */\n        handleCardClick: PropTypes.func.isRequired,\n\n        /*\n         * Funciton called when the post options dropdown is opened\n         */\n        handleDropdownOpened: PropTypes.func.isRequired,\n\n        /*\n         * Set to mark the post as flagged\n         */\n        isFlagged: PropTypes.bool,\n\n        /*\n         * Set to mark the post as open the extra info in the rhs\n         */\n        isCardOpen: PropTypes.bool,\n\n        /*\n         * The number of replies in the same thread as this post\n         */\n        replyCount: PropTypes.number,\n\n        /**\n         * Set to indicate that this is previous post was not a reply to the same thread\n         */\n        isFirstReply: PropTypes.bool,\n\n        /**\n         * Set to render in mobile view\n         */\n        isMobile: PropTypes.bool,\n\n        /**\n         * Set to render in compact view\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Set to mark post as being hovered over\n         */\n        hover: PropTypes.bool.isRequired,\n\n        /**\n         * Set to render the post time when not hovering\n         */\n        showTimeWithoutHover: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to show the emoji picker.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Set not to allow edits on post\n         */\n        isReadOnly: PropTypes.bool,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to remove the post\n             */\n            removePost: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showEmojiPicker: false,\n        };\n    }\n\n    toggleEmojiPicker = () => {\n        const showEmojiPicker = !this.state.showEmojiPicker;\n\n        this.setState({showEmojiPicker});\n        this.props.handleDropdownOpened(showEmojiPicker || this.state.showDotMenu);\n    };\n\n    removePost = () => {\n        this.props.actions.removePost(this.props.post);\n    };\n\n    createRemovePostButton = () => {\n        return (\n            <button\n                className='post__remove theme color--link style--none'\n                type='button'\n                onClick={this.removePost}\n            >\n                {'×'}\n            </button>\n        );\n    };\n\n    handleDotMenuOpened = (open) => {\n        this.setState({showDotMenu: open});\n        this.props.handleDropdownOpened(open || this.state.showEmojiPicker);\n    };\n\n    getDotMenu = () => {\n        return this.refs.dotMenu;\n    };\n\n    buildOptions = (post, isSystemMessage, fromAutoResponder) => {\n        if (!PostUtils.shouldShowDotMenu(post)) {\n            return null;\n        }\n\n        const {isMobile, isReadOnly} = this.props;\n        const hover = this.props.hover || this.state.showEmojiPicker || this.state.showDotMenu;\n\n        const showCommentIcon = fromAutoResponder ||\n        (!isSystemMessage && (isMobile || hover || (!post.root_id && Boolean(this.props.replyCount)) || this.props.isFirstReply));\n        const commentIconExtraClass = isMobile ? '' : 'pull-right';\n        let commentIcon;\n        if (showCommentIcon) {\n            commentIcon = (\n                <CommentIcon\n                    handleCommentClick={this.props.handleCommentClick}\n                    commentCount={this.props.replyCount}\n                    postId={post.id}\n                    extraClass={commentIconExtraClass}\n                />\n            );\n        }\n\n        const showReactionIcon = !isSystemMessage && hover && !isReadOnly && this.props.enableEmojiPicker;\n        let postReaction;\n        if (showReactionIcon) {\n            postReaction = (\n                <PostReaction\n                    channelId={post.channel_id}\n                    postId={post.id}\n                    teamId={this.props.teamId}\n                    getDotMenuRef={this.getDotMenu}\n                    showEmojiPicker={this.state.showEmojiPicker}\n                    toggleEmojiPicker={this.toggleEmojiPicker}\n                />\n            );\n        }\n\n        const showDotMenuIcon = isMobile || hover;\n        let dotMenu;\n        if (showDotMenuIcon) {\n            dotMenu = (\n                <DotMenu\n                    post={post}\n                    commentCount={this.props.replyCount}\n                    isFlagged={this.props.isFlagged}\n                    handleCommentClick={this.props.handleCommentClick}\n                    handleDropdownOpened={this.handleDotMenuOpened}\n                    handleAddReactionClick={this.toggleEmojiPicker}\n                    isReadOnly={isReadOnly}\n                    enableEmojiPicker={this.props.enableEmojiPicker}\n                />\n            );\n        }\n\n        return (\n            <div\n                ref='dotMenu'\n                className={'col col__reply'}\n            >\n                {dotMenu}\n                {postReaction}\n                {commentIcon}\n            </div>\n        );\n    };\n\n    render() {\n        const post = this.props.post;\n\n        const isEphemeral = Utils.isPostEphemeral(post);\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n\n        const showFlagIcon = !isEphemeral && !post.failed && !isSystemMessage && (this.props.hover || this.props.isFlagged);\n        let postFlagIcon;\n        if (showFlagIcon) {\n            postFlagIcon = (\n                <PostFlagIcon\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                    isEphemeral={isEphemeral}\n                />\n            );\n        }\n\n        let postInfoIcon;\n        if (post.props && post.props.card) {\n            postInfoIcon = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip>\n                            <FormattedMessage\n                                id='post_info.info.view_additional_info'\n                                defaultMessage='View additional info'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <button\n                        className={'card-icon__container icon--show style--none ' + (this.props.isCardOpen ? 'active' : '')}\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.props.handleCardClick(this.props.post);\n                        }}\n                    >\n                        <InfoSmallIcon\n                            className='icon icon__info'\n                            aria-hidden='true'\n                        />\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        let options;\n        if (isEphemeral) {\n            options = (\n                <div className='col col__remove'>\n                    {this.createRemovePostButton()}\n                </div>\n            );\n        } else if (!post.failed) {\n            options = this.buildOptions(post, isSystemMessage, fromAutoResponder);\n        }\n\n        let visibleMessage;\n        if (isEphemeral && !this.props.compactDisplay && post.state !== Posts.POST_DELETED) {\n            visibleMessage = (\n                <span className='post__visibility'>\n                    <FormattedMessage\n                        id='post_info.message.visible'\n                        defaultMessage='(Only visible to you)'\n                    />\n                </span>\n            );\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        const showPostTime = this.props.hover || this.props.showTimeWithoutHover;\n        let postTime;\n        if (showPostTime) {\n            // timestamp should not be a permalink if the post has been deleted, is ephemeral message, is pending, or is combined activity\n            const isPermalink = !(isEphemeral || Posts.POST_DELETED === post.state || ReduxPostUtils.isPostPendingOrFailed(post) || post.type === Posts.POST_TYPES.COMBINED_USER_ACTIVITY);\n\n            postTime = (\n                <PostTime\n                    isPermalink={isPermalink}\n                    eventTime={post.create_at}\n                    postId={post.id}\n                />\n            );\n        }\n\n        return (\n            <div className='post__header--info'>\n                <div className='col'>\n                    {postTime}\n                    {pinnedBadge}\n                    {postInfoIcon}\n                    {postFlagIcon}\n                    {visibleMessage}\n                </div>\n                {options}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {removePost} from 'mattermost-redux/actions/posts';\nimport {isCurrentChannelReadOnly} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {Preferences} from 'utils/constants';\nimport {getSelectedPostCard} from 'selectors/rhs.jsx';\n\nimport PostInfo from './post_info.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const selectedCard = getSelectedPostCard(state);\n    const config = getConfig(state);\n    const channel = state.entities.channels.channels[ownProps.post.channel_id];\n    const channelIsArchived = channel ? channel.delete_at !== 0 : null;\n    const enableEmojiPicker = config.EnableEmojiPicker === 'true' && !channelIsArchived;\n    const teamId = getCurrentTeamId(state);\n\n    return {\n        teamId,\n        isFlagged: get(state, Preferences.CATEGORY_FLAGGED_POST, ownProps.post.id, null) != null,\n        isMobile: state.views.channel.mobileView,\n        isCardOpen: selectedCard && selectedCard.id === ownProps.post.id,\n        enableEmojiPicker,\n        isReadOnly: isCurrentChannelReadOnly(state) || channelIsArchived,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostInfo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport PostInfo from 'components/post_view/post_info';\nimport UserProfile from 'components/user_profile';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport Badge from 'components/widgets/badges/badge';\n\nexport default class PostHeader extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the header for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * Function called when the comment icon is clicked\n         */\n        handleCommentClick: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the card icon is clicked\n         */\n        handleCardClick: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the post options dropdown is opened\n         */\n        handleDropdownOpened: PropTypes.func.isRequired,\n\n        /*\n         * Set to render compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /*\n         * The number of replies in the same thread as this post\n         */\n        replyCount: PropTypes.number,\n\n        /**\n         * Set to indicate that this is previous post was not a reply to the same thread\n         */\n        isFirstReply: PropTypes.bool,\n\n        /**\n         * Set to mark post as being hovered over\n         */\n        hover: PropTypes.bool.isRequired,\n\n        /*\n         * Set to render the post time when not hovering\n         */\n        showTimeWithoutHover: PropTypes.bool,\n\n        /**\n         * Whether or not the post username can be overridden.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * If the user that made the post is a bot.\n         */\n        isBot: PropTypes.bool.isRequired,\n\n        /**\n         * If the user that made the post is a guest.\n         */\n        isGuest: PropTypes.bool.isRequired,\n    }\n\n    render() {\n        const {post} = this.props;\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n        const fromWebhook = post && post.props && post.props.from_webhook === 'true';\n\n        let userProfile = (\n            <UserProfile\n                userId={post.user_id}\n                hasMention={true}\n            />\n        );\n        let indicator;\n        let colon;\n\n        if (fromWebhook && !this.props.isBot) {\n            if (post.props.override_username && this.props.enablePostUsernameOverride) {\n                userProfile = (\n                    <UserProfile\n                        userId={post.user_id}\n                        hideStatus={true}\n                        overwriteName={post.props.override_username}\n                    />\n                );\n            } else {\n                userProfile = (\n                    <UserProfile\n                        userId={post.user_id}\n                        hideStatus={true}\n                    />\n                );\n            }\n\n            indicator = (<BotBadge/>);\n        } else if (fromAutoResponder) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    hideStatus={true}\n                    hasMention={true}\n                />\n            );\n\n            indicator = (\n                <Badge>\n                    <FormattedMessage\n                        id='post_info.auto_responder'\n                        defaultMessage='AUTOMATIC REPLY'\n                    />\n                </Badge>\n            );\n        } else if (isSystemMessage && this.props.isBot) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    hideStatus={true}\n                />\n            );\n        } else if (isSystemMessage) {\n            userProfile = (\n                <UserProfile\n                    overwriteName={\n                        <FormattedMessage\n                            id='post_info.system'\n                            defaultMessage='System'\n                        />\n                    }\n                    overwriteImage={Constants.SYSTEM_MESSAGE_PROFILE_IMAGE}\n                    disablePopover={true}\n                />\n            );\n        }\n\n        if (this.props.compactDisplay) {\n            colon = (<strong className='colon'>{':'}</strong>);\n        }\n\n        return (\n            <div className='post__header'>\n                <div className='col col__name'>\n                    {userProfile}\n                    {colon}\n                    {indicator}\n                </div>\n                <div className='col'>\n                    <PostInfo\n                        post={post}\n                        handleCommentClick={this.props.handleCommentClick}\n                        handleCardClick={this.props.handleCardClick}\n                        handleDropdownOpened={this.props.handleDropdownOpened}\n                        compactDisplay={this.props.compactDisplay}\n                        replyCount={this.props.replyCount}\n                        isFirstReply={this.props.isFirstReply}\n                        showTimeWithoutHover={this.props.showTimeWithoutHover}\n                        hover={this.props.hover}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {isGuest} from 'utils/utils.jsx';\n\nimport PostHeader from './post_header.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const user = getUser(state, ownProps.post.user_id);\n    const isBot = Boolean(user && user.is_bot);\n\n    return {\n        enablePostUsernameOverride,\n        isBot,\n        isGuest: Boolean(user && isGuest(user)),\n    };\n}\n\nexport default connect(mapStateToProps)(PostHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {isMeMessage as checkIsMeMessage} from 'mattermost-redux/utils/post_utils';\n\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport {A11yCustomEventTypes} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport PostBody from 'components/post_view/post_body';\nimport PostHeader from 'components/post_view/post_header';\nimport PostContext from 'components/post_view/post_context';\n\nclass Post extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * The function to create an aria-label\n         */\n        createAriaLabel: PropTypes.func.isRequired,\n\n        /**\n         * The logged in user ID\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Set to center the post\n         */\n        center: PropTypes.bool,\n\n        /**\n         * Set to render post compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Set to render a preview of the parent post above this reply\n         */\n        isFirstReply: PropTypes.bool,\n\n        /**\n         * Set to highlight the background of the post\n         */\n        shouldHighlight: PropTypes.bool,\n\n        /**\n         * Set to render this post as if it was attached to the previous post\n         */\n        consecutivePostByUser: PropTypes.bool,\n\n        /**\n         * Set if the previous post is a comment\n         */\n        previousPostIsComment: PropTypes.bool,\n\n        /*\n         * Function called when the post options dropdown is opened\n         */\n        togglePostMenu: PropTypes.func,\n\n        /**\n         * Set to render this comment as a mention\n         */\n        isCommentMention: PropTypes.bool,\n\n        /**\n         * The number of replies in the same thread as this post\n         */\n        replyCount: PropTypes.number,\n\n        /**\n         * Whether or not the channel that contains this post is archived\n         */\n        channelIsArchived: PropTypes.bool.isRequired,\n\n        intl: intlShape.isRequired,\n\n        actions: PropTypes.shape({\n            selectPost: PropTypes.func.isRequired,\n            selectPostCard: PropTypes.func.isRequired,\n            markPostAsUnread: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        post: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.postRef = React.createRef();\n\n        this.state = {\n            dropdownOpened: false,\n            hover: false,\n            alt: false,\n            a11yActive: false,\n            currentAriaLabel: '',\n            ariaHidden: true,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleAlt);\n        document.addEventListener('keyup', this.handleAlt);\n\n        // Refs can be null when this component is shallowly rendered for testing\n        if (this.postRef.current) {\n            this.postRef.current.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.postRef.current.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleAlt);\n        document.removeEventListener('keyup', this.handleAlt);\n\n        if (this.postRef.current) {\n            this.postRef.current.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.postRef.current.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.a11yActive) {\n            this.postRef.current.dispatchEvent(new Event(A11yCustomEventTypes.UPDATE));\n        }\n    }\n\n    handleCommentClick = (e) => {\n        e.preventDefault();\n\n        const post = this.props.post;\n        if (!post) {\n            return;\n        }\n        this.props.actions.selectPost(post);\n    }\n\n    handleCardClick = (post) => {\n        if (!post) {\n            return;\n        }\n        this.props.actions.selectPostCard(post);\n    }\n\n    handlePostClick = (e) => {\n        const post = this.props.post;\n        if (!post) {\n            return;\n        }\n\n        if (this.props.channelIsArchived) {\n            return;\n        }\n\n        if (e.altKey) {\n            this.props.actions.markPostAsUnread(post);\n        }\n    }\n\n    handleDropdownOpened = (opened) => {\n        if (this.props.togglePostMenu) {\n            this.props.togglePostMenu(opened);\n        }\n\n        this.setState({\n            dropdownOpened: opened,\n        });\n    }\n\n    hasSameRoot = (props) => {\n        const post = props.post;\n\n        if (props.isFirstReply) {\n            return false;\n        } else if (!post.root_id && !props.previousPostIsComment && props.consecutivePostByUser) {\n            return true;\n        } else if (post.root_id) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getClassName = (post, isSystemMessage, isMeMessage, fromWebhook, fromAutoResponder, fromBot) => {\n        let className = 'post';\n\n        if (post.failed || post.state === Posts.POST_DELETED) {\n            className += ' post--hide-controls';\n        }\n\n        if (this.props.shouldHighlight) {\n            className += ' post--highlight';\n        }\n\n        let rootUser = '';\n        if (this.hasSameRoot(this.props) && !fromBot) {\n            rootUser = 'same--root';\n        } else {\n            rootUser = 'other--root';\n        }\n\n        let currentUserCss = '';\n        if (this.props.currentUserId === post.user_id && !fromWebhook && !isSystemMessage) {\n            currentUserCss = 'current--user';\n        }\n\n        let sameUserClass = '';\n        if (this.props.consecutivePostByUser) {\n            sameUserClass = 'same--user';\n        }\n\n        let postType = '';\n        if (post.root_id && post.root_id.length > 0) {\n            postType = 'post--comment';\n        } else if (this.props.replyCount > 0) {\n            postType = 'post--root';\n            sameUserClass = '';\n            rootUser = '';\n        }\n\n        if (isSystemMessage || isMeMessage) {\n            className += ' post--system';\n            if (isSystemMessage) {\n                currentUserCss = '';\n                postType = '';\n                rootUser = '';\n            }\n        }\n\n        if (fromAutoResponder) {\n            postType = 'post--comment same--root';\n        }\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (this.state.dropdownOpened || this.state.a11yActive) {\n            className += ' post--hovered';\n        }\n\n        if (post.is_pinned) {\n            className += ' post--pinned';\n        }\n\n        if (this.state.alt && !this.props.channelIsArchived) {\n            className += ' cursor--pointer';\n        }\n\n        return className + ' ' + sameUserClass + ' ' + rootUser + ' ' + postType + ' ' + currentUserCss;\n    }\n\n    setHover = () => {\n        this.setState({hover: true});\n    }\n\n    unsetHover = () => {\n        this.setState({hover: false});\n    }\n\n    handleAlt = (e) => {\n        if (this.state.alt !== e.altKey) {\n            this.setState({alt: e.altKey});\n        }\n    }\n\n    handleA11yActivateEvent = () => {\n        this.setState({\n            a11yActive: true,\n            ariaHidden: false,\n        });\n    }\n\n    handleA11yDeactivateEvent = () => {\n        this.setState({\n            a11yActive: false,\n            ariaHidden: true,\n        });\n    }\n\n    handlePostFocus = () => {\n        this.setState({currentAriaLabel: this.props.createAriaLabel(this.props.intl)});\n    }\n\n    render() {\n        const {post} = this.props;\n        if (!post.id) {\n            return null;\n        }\n\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const isMeMessage = checkIsMeMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n        const fromWebhook = post && post.props && post.props.from_webhook === 'true';\n        const fromBot = post && post.props && post.props.from_bot === 'true';\n\n        let profilePic;\n        const hideProfilePicture = this.hasSameRoot(this.props) && this.props.consecutivePostByUser && (!post.root_id && this.props.replyCount === 0) && !fromBot;\n        if (!hideProfilePicture) {\n            profilePic = (\n                <PostProfilePicture\n                    compactDisplay={this.props.compactDisplay}\n                    post={post}\n                    userId={post.user_id}\n                />\n            );\n\n            if (fromAutoResponder) {\n                profilePic = (\n                    <span className='auto-responder'>\n                        {profilePic}\n                    </span>\n                );\n            }\n        }\n\n        let centerClass = '';\n        if (this.props.center) {\n            centerClass = 'center';\n        }\n\n        return (\n            <PostContext.Provider value={{handlePopupOpened: this.handleDropdownOpened}}>\n                <div\n                    ref={this.postRef}\n                    id={'post_' + post.id}\n                    data-testid='postView'\n                    role='listitem'\n                    className={`a11y__section ${this.getClassName(post, isSystemMessage, isMeMessage, fromWebhook, fromAutoResponder, fromBot)}`}\n                    tabIndex='0'\n                    onFocus={this.handlePostFocus}\n                    onBlur={this.removeFocus}\n                    onMouseOver={this.setHover}\n                    onMouseLeave={this.unsetHover}\n                    onTouchStart={this.setHover}\n                    onClick={this.handlePostClick}\n                    aria-label={this.state.currentAriaLabel}\n                    aria-atomic={true}\n                >\n                    <div\n                        role='application'\n                        data-testid='postContent'\n                        className={'post__content ' + centerClass}\n                        aria-hidden={this.state.ariaHidden}\n                    >\n                        <div className='post__img'>\n                            {profilePic}\n                        </div>\n                        <div>\n                            <PostHeader\n                                post={post}\n                                handleCommentClick={this.handleCommentClick}\n                                handleCardClick={this.handleCardClick}\n                                handleDropdownOpened={this.handleDropdownOpened}\n                                compactDisplay={this.props.compactDisplay}\n                                isFirstReply={this.props.isFirstReply}\n                                replyCount={this.props.replyCount}\n                                showTimeWithoutHover={!hideProfilePicture}\n                                hover={this.state.hover || this.state.a11yActive}\n                            />\n                            <PostBody\n                                post={post}\n                                handleCommentClick={this.handleCommentClick}\n                                compactDisplay={this.props.compactDisplay}\n                                isCommentMention={this.props.isCommentMention}\n                                isFirstReply={this.props.isFirstReply}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </PostContext.Provider>\n        );\n    }\n}\n\nexport default injectIntl(Post);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost, makeIsPostCommentMention} from 'mattermost-redux/selectors/entities/posts';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {isPostEphemeral, isSystemMessage} from 'mattermost-redux/utils/post_utils';\n\nimport {markPostAsUnread} from 'actions/post_actions';\nimport {selectPost, selectPostCard} from 'actions/views/rhs';\n\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport {Preferences} from 'utils/constants';\nimport {makeCreateAriaLabelForPost} from 'utils/post_utils.jsx';\n\nimport Post from './post.jsx';\n\n// isFirstReply returns true when the given post a comment that isn't part of the same thread as the previous post.\nexport function isFirstReply(post, previousPost) {\n    if (post.root_id) {\n        if (previousPost) {\n            // Returns true as long as the previous post is part of a different thread\n            return post.root_id !== previousPost.id && post.root_id !== previousPost.root_id;\n        }\n\n        // The previous post is not a real post\n        return true;\n    }\n\n    // This post is not a reply\n    return false;\n}\n\nexport function makeGetReplyCount() {\n    return createSelector(\n        (state) => state.entities.posts.posts,\n        (state, post) => state.entities.posts.postsInThread[post.root_id || post.id],\n        (allPosts, postIds) => {\n            if (!postIds) {\n                return 0;\n            }\n\n            // Count the number of non-ephemeral posts in the thread\n            return postIds.map((id) => allPosts[id]).filter((post) => post && !isPostEphemeral(post)).length;\n        }\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getReplyCount = makeGetReplyCount();\n    const isPostCommentMention = makeIsPostCommentMention();\n    const createAriaLabelForPost = makeCreateAriaLabelForPost();\n\n    return (state, ownProps) => {\n        const post = ownProps.post || getPost(state, ownProps.postId);\n        const channel = getChannel(state, post.channel_id);\n\n        let previousPost = null;\n        if (ownProps.previousPostId) {\n            previousPost = getPost(state, ownProps.previousPostId);\n        }\n\n        let consecutivePostByUser = false;\n        let previousPostIsComment = false;\n\n        if (previousPost) {\n            consecutivePostByUser = post.user_id === previousPost.user_id && // The post is by the same user\n                post.create_at - previousPost.create_at <= Posts.POST_COLLAPSE_TIMEOUT && // And was within a short time period\n                !(post.props && post.props.from_webhook) && !(previousPost.props && previousPost.props.from_webhook) && // And neither is from a webhook\n                !isSystemMessage(post) && !isSystemMessage(previousPost); // And neither is a system message\n\n            previousPostIsComment = Boolean(previousPost.root_id);\n        }\n\n        return {\n            post,\n            createAriaLabel: createAriaLabelForPost(state, post),\n            currentUserId: getCurrentUserId(state),\n            isFirstReply: isFirstReply(post, previousPost),\n            consecutivePostByUser,\n            previousPostIsComment,\n            replyCount: getReplyCount(state, post),\n            isCommentMention: isPostCommentMention(state, post.id),\n            center: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n            compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n            channelIsArchived: isArchivedChannel(channel),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            selectPost,\n            selectPostCard,\n            markPostAsUnread,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Post);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {makeGenerateCombinedPost} from 'mattermost-redux/utils/post_list';\n\nimport Post from 'components/post_view/post';\n\nexport function makeMapStateToProps() {\n    const generateCombinedPost = makeGenerateCombinedPost();\n\n    return (state, ownProps) => {\n        return {\n            post: generateCombinedPost(state, ownProps.combinedId),\n            postId: ownProps.combinedId,\n        };\n    };\n}\n\n// Note that this also passes through Post's mapStateToProps\nexport default connect(makeMapStateToProps)(Post);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport './separator.scss';\nimport './notification-separator.scss';\n\nexport default class NotificationSeparator extends React.PureComponent<React.PropsWithChildren<{}>> {\n    public render() {\n        const {children} = this.props;\n        return (\n            <div\n                className='Separator NotificationSeparator'\n                data-testid='NotificationSeparator'\n            >\n                <hr className='separator__hr'/>\n                {children && (\n                    <div className='separator__text'>\n                        {children}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport NotificationSeparator from 'components/widgets/separator/notification-separator';\n\nexport default class NewMessageSeparator extends React.PureComponent {\n    static propTypes = {\n        separatorId: PropTypes.string.isRequired,\n    }\n\n    render() {\n        return (\n            <NotificationSeparator id={this.props.separatorId}>\n                <FormattedMessage\n                    id='posts_view.newMsg'\n                    defaultMessage='New Messages'\n                />\n\n            </NotificationSeparator>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as TeamActions from 'mattermost-redux/actions/teams';\nimport {getTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getChannelMembersInChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {joinChannel} from 'mattermost-redux/actions/channels';\n\nimport {addUsersToTeam} from 'actions/team_actions';\n\nimport {t} from 'utils/i18n';\nimport {isGuest, localizeMessage} from 'utils/utils';\n\nexport function sendMembersInvites(teamId, users, emails) {\n    return async (dispatch, getState) => {\n        if (users.length > 0) {\n            await dispatch(TeamActions.getTeamMembersByIds(teamId, users.map((u) => u.id)));\n        }\n        const state = getState();\n        const sent = [];\n        const notSent = [];\n        const usersToAdd = [];\n        for (const user of users) {\n            const member = getTeamMember(state, teamId, user.id);\n            if (isGuest(user)) {\n                notSent.push({user, reason: localizeMessage('invite.members.user-is-guest', 'Contact your admin to make this guest a full member.')});\n            } else if (member) {\n                notSent.push({user, reason: localizeMessage('invite.members.already-member', 'This person is already a team member.')});\n            } else {\n                usersToAdd.push(user);\n            }\n        }\n        if (usersToAdd.length > 0) {\n            const response = await dispatch(addUsersToTeam(teamId, usersToAdd.map((u) => u.id)));\n            const members = response.data || [];\n            for (const userToAdd of usersToAdd) {\n                const memberWithError = members.find((m) => m.user_id === userToAdd.id && m.error);\n                if (memberWithError) {\n                    notSent.push({user: userToAdd, reason: memberWithError.error.message});\n                } else {\n                    sent.push({user: userToAdd, reason: localizeMessage('invite.members.added-to-team', 'This member has been added to the team.')});\n                }\n            }\n        }\n        if (emails.length > 0) {\n            let response;\n            try {\n                response = await dispatch(TeamActions.sendEmailInvitesToTeamGracefully(teamId, emails));\n            } catch (e) {\n                response = {data: emails.map((email) => ({email, error: {error: localizeMessage('invite.members.unable-to-add-the-user-to-the-team', 'Unable to add the user to the team.')}}))};\n            }\n            const invitesWithErrors = response.data || [];\n            for (const email of emails) {\n                const inviteWithError = invitesWithErrors.find((i) => email === i.email && i.error);\n                if (inviteWithError) {\n                    notSent.push({email, reason: inviteWithError.error.message});\n                } else {\n                    sent.push({email, reason: localizeMessage('invite.members.invite-sent', 'An invitation email has been sent.')});\n                }\n            }\n        }\n        return {sent, notSent};\n    };\n}\n\nexport async function sendGuestInviteForUser(dispatch, user, teamId, channels, members) {\n    if (!isGuest(user)) {\n        return {notSent: {user, reason: localizeMessage('invite.members.user-is-not-guest', 'This person is already a member.')}};\n    }\n    let memberOfAll = true;\n    let memberOfAny = false;\n\n    for (const channel of channels) {\n        const member = members && members[channel] && members[channel][user.id];\n        if (member) {\n            memberOfAny = true;\n        } else {\n            memberOfAll = false;\n        }\n    }\n\n    if (memberOfAll) {\n        return {notSent: {user, reason: localizeMessage('invite.guests.already-all-channels-member', 'This person is already a member of all the channels.')}};\n    }\n\n    try {\n        await dispatch(addUsersToTeam(teamId, [user.id]));\n        for (const channel of channels) {\n            const member = members && members[channel] && members[channel][user.id];\n            if (!member) {\n                await dispatch(joinChannel(user.id, teamId, channel)); // eslint-disable-line no-await-in-loop\n            }\n        }\n    } catch (e) {\n        return {notSent: {user, reason: localizeMessage('invite.guests.unable-to-add-the-user-to-the-channels', 'Unable to add the guest to the channels.')}};\n    }\n\n    if (memberOfAny) {\n        return {notSent: {user, reason: localizeMessage('invite.guests.already-some-channels-member', 'This person is already a member of some of the channels.')}};\n    }\n    return {sent: {user, reason: {id: t('invite.guests.new-member'), message: 'This guest has been added to the team and {count, plural, one {channel} other {channels}}.', values: {count: channels.length}}}};\n}\n\nexport function sendGuestsInvites(teamId, channels, users, emails, message) {\n    return async (dispatch, getState) => {\n        if (users.length > 0) {\n            await dispatch(TeamActions.getTeamMembersByIds(teamId, users.map((u) => u.id)));\n        }\n        const state = getState();\n        const sent = [];\n        const notSent = [];\n        const members = getChannelMembersInChannels(state);\n        const results = await Promise.all(users.map((user) => sendGuestInviteForUser(dispatch, user, teamId, channels, members)));\n\n        for (const result of results) {\n            if (result.sent) {\n                sent.push(result.sent);\n            }\n            if (result.notSent) {\n                notSent.push(result.notSent);\n            }\n        }\n\n        if (emails.length > 0) {\n            let response;\n            try {\n                response = await dispatch(TeamActions.sendEmailGuestInvitesToChannelsGracefully(teamId, channels, emails, message));\n            } catch (e) {\n                response = {data: emails.map((email) => ({email, error: {error: localizeMessage('invite.guests.unable-to-add-the-user-to-the-channels', 'Unable to add the guest to the channels.')}}))};\n            }\n\n            for (const res of (response.data || [])) {\n                if (res.error) {\n                    notSent.push({email: res.email, reason: res.error.message});\n                } else {\n                    sent.push({email: res.email, reason: localizeMessage('invite.guests.added-to-channel', 'An invitation email has been sent.')});\n                }\n            }\n        }\n        return {sent, notSent};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class InviteIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.invite'\n                    defaultMessage='Invite Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='126px'\n                            height='32px'\n                            viewBox='0 0 126 32'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M 106,18 86,5.52 V 4 c 0,-2.22 1.78,-4 4,-4 h 32 c 2.20914,0 4,1.790861 4,4 v 1.5 z m 20,10 c 0,2.209139 -1.79086,4 -4,4 H 90 c -2.22,0 -4,-1.8 -4,-4 V 10.22 l 4,2.5 V 28 h 32 V 12.72 l 4,-2.5 z M 1,15 h 62 c 0.552285,0 1,0.447715 1,1 0,0.552285 -0.447715,1 -1,1 H 1 C 0.44771525,17 0,16.552285 0,16 0,15.447715 0.44771525,15 1,15 Z M 21,5 h 48 c 0.552285,0 1,0.447715 1,1 0,0.552285 -0.447715,1 -1,1 H 21 C 20.447715,7 20,6.552285 20,6 20,5.447715 20.447715,5 21,5 Z m 0,20 h 48 c 0.552285,0 1,0.447715 1,1 0,0.552285 -0.447715,1 -1,1 H 21 c -0.552285,0 -1,-0.447715 -1,-1 0,-0.552285 0.447715,-1 1,-1 z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ArrowRightIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.channel.arrow-right'\n                    defaultMessage='Arrow right'\n                >\n                    {(title) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            title={title}\n                        >\n                            <path d='M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport InviteIcon from 'components/widgets/icons/invite_icon';\nimport ArrowRightIcon from 'components/widgets/icons/arrow_right_icon';\n\nimport './invitation_modal_initial_step.scss';\n\nexport default class InvitationModalInitialStep extends React.Component {\n    static propTypes = {\n        teamName: PropTypes.string.isRequired,\n        goToMembers: PropTypes.func.isRequired,\n        goToGuests: PropTypes.func.isRequired,\n    }\n\n    onMembersKeyDown = (e) => {\n        const code = e.which;\n        if ((code === 13) || (code === 32)) {\n            this.props.goToMembers();\n        }\n    }\n\n    onGuestsKeyDown = (e) => {\n        const code = e.which;\n        if ((code === 13) || (code === 32)) {\n            this.props.goToGuests();\n        }\n    }\n\n    render() {\n        const teamName = this.props.teamName;\n        return (\n            <div className='InvitationModalInitialStep'>\n                <div className='modal-icon'>\n                    <InviteIcon/>\n                </div>\n                <h1 id='invitation_modal_title'>\n                    <FormattedMarkdownMessage\n                        id='invitation_modal.title'\n                        defaultMessage='Invite people to **{teamName}**'\n                        values={{teamName}}\n                    />\n                </h1>\n                <div\n                    className='invitation-modal-option'\n                    onClick={this.props.goToMembers}\n                    data-testid='inviteMembersLink'\n                    tabIndex='0'\n                    onKeyDown={this.onMembersKeyDown}\n                    aria-labeledby='inviteMembersSectionHeader'\n                    aria-describedby='inviteMembersSectionDescription'\n                >\n                    <div data-testid='inviteMembersSection'>\n                        <h2 id='inviteMembersSectionHeader'>\n                            <FormattedMarkdownMessage\n                                id='invitation_modal.invite_members.title'\n                                defaultMessage='Invite **Members**'\n                            />\n                        </h2>\n                        <FormattedMessage\n                            id='invitation_modal.invite_members.description'\n                            defaultMessage='Invite new team members with a link or by email. Team members have access to messages and files in open teams and public channels.'\n                        >\n                            {(text) => (<span id='inviteMembersSectionDescription'>{text}</span>)}\n                        </FormattedMessage>\n                    </div>\n                    <ArrowRightIcon className='arrow'/>\n                </div>\n                <div\n                    className='invitation-modal-option'\n                    onClick={this.props.goToGuests}\n                    data-testid='inviteGuestLink'\n                    tabIndex='0'\n                    onKeyDown={this.onGuestsKeyDown}\n                    aria-labeledby='inviteGuestsSectionHeader'\n                    aria-describedby='inviteGuestsSectionDescription'\n                >\n                    <div>\n                        <h2 id='inviteGuestsSectionHeader'>\n                            <FormattedMarkdownMessage\n                                id='invitation_modal.invite_guests.title'\n                                defaultMessage='Invite **Guests**'\n                            />\n                        </h2>\n                        <FormattedMessage\n                            id='invitation_modal.invite_guests.description'\n                            defaultMessage='Invite guests to one or more channels. Guests only have access to messages, files, and people in the channels they are members of.'\n                        >\n                            {(text) => (<span id='inviteGuestsSectionDescription'>{text}</span>)}\n                        </FormattedMessage>\n                    </div>\n                    <ArrowRightIcon className='arrow'/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class InviteMembersIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.invite_members'\n                    defaultMessage='Invite Members Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='126px'\n                            height='38px'\n                            viewBox='0 0 126 38'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M 108.83398 0.03515625 C 108.64165 0.03515625 108.4496 0.04983111 108.25977 0.08203125 C 109.08339 0.57981559 109.86736 1.165576 110.60156 1.8359375 C 113.34699 4.3426243 115.07813 7.1515117 115.07812 10.777344 L 115.07812 15.908203 C 115.07812 17.577458 114.81586 19.392207 114.32812 21.453125 C 114.19039 22.035006 114.02467 22.601886 113.83008 23.152344 C 116.57398 24.811724 118.17106 25.88194 118.62109 26.361328 C 120.0119 27.842823 120.78516 29.798054 120.78516 31.830078 L 120.78516 32 C 122.99178 32 124.78125 32.008356 124.78125 30.001953 C 124.78125 26.755542 122.78085 23.90476 118.77734 21.453125 L 118.46875 21.267578 L 118.46094 21.285156 C 118.44384 21.330296 118.43871 21.318446 118.44531 21.253906 L 118.46875 21.267578 L 118.47266 21.251953 C 118.52056 21.104379 118.6246 20.690139 118.78516 20.011719 C 119.2074 18.22759 119.07227 17.224165 119.07227 15.908203 L 119.07227 10.777344 C 119.07227 8.5210935 117.78998 3.8565489 115.79297 2.0332031 C 113.81134 0.22387865 111.50192 0.03515625 108.83594 0.03515625 L 108.83398 0.03515625 z M 100.84375 2.0332031 C 98.23721 2.0332031 95.848767 2.9659792 93.835938 4.7363281 C 91.761167 6.5611731 90.535156 8.4793085 90.535156 10.777344 L 90.535156 15.908203 C 90.535156 17.293336 90.80759 18.870238 91.328125 20.703125 C 91.751681 22.194536 92.389981 23.518449 93.25 24.634766 L 87.810547 27.792969 C 87.734577 27.827779 87.659451 27.865141 87.585938 27.904297 C 87.562827 27.916627 87.538385 27.928746 87.515625 27.941406 C 87.254658 28.067724 87.009242 28.216755 86.775391 28.382812 L 86.509766 28.574219 C 85.454567 29.323561 84.826172 30.535879 84.826172 31.830078 L 84.826172 33.994141 C 84.826172 36.20075 86.615661 37.992188 88.822266 37.992188 L 112.79492 37.992188 C 115.00153 37.992188 116.79102 36.20075 116.79102 33.994141 L 116.79102 31.830078 C 116.79102 30.814065 116.40241 29.834497 115.70703 29.09375 C 115.33382 28.696209 114.89968 28.36777 114.42188 28.113281 L 114.13867 27.962891 C 114.10527 27.945041 114.06897 27.932866 114.03516 27.916016 C 113.99746 27.894746 113.96392 27.869949 113.92578 27.849609 L 108.53711 24.673828 C 109.43906 23.498248 110.06724 22.107856 110.43945 20.535156 C 110.86169 18.751027 111.08203 17.224166 111.08203 15.908203 L 111.08203 10.777344 C 111.08203 8.5210941 109.90325 6.6104541 107.90625 4.7871094 C 105.92461 2.977785 103.50974 2.0332043 100.84375 2.0332031 z M 100.84375 6.0273438 C 102.50853 6.0273438 103.96628 6.5982778 105.21484 7.7382812 C 106.46343 8.878286 107.08789 9.8906745 107.08789 10.777344 L 107.08789 15.908203 C 107.08789 16.870874 106.90948 18.105944 106.55273 19.613281 C 106.19601 21.12062 105.52977 22.279175 104.55469 23.089844 C 104.24552 23.343181 104.012 23.661015 103.85742 24.041016 C 103.70244 24.421017 103.65168 24.811463 103.69922 25.216797 C 103.72302 25.622132 103.84065 25.997842 104.05469 26.339844 C 104.26872 26.681846 104.54401 26.953582 104.87695 27.15625 L 112.04492 31.375 C 112.09262 31.40033 112.13432 31.425832 112.16992 31.451172 C 112.20552 31.476502 112.23401 31.488281 112.25781 31.488281 L 112.54297 31.640625 C 112.63817 31.691295 112.72361 31.754092 112.79492 31.830078 L 112.79492 33.994141 L 88.822266 33.994141 L 88.822266 31.830078 L 89.089844 31.640625 C 89.196862 31.564625 89.297447 31.513613 89.392578 31.488281 C 89.416398 31.462951 89.439071 31.442357 89.462891 31.429688 C 89.486711 31.416988 89.513289 31.412109 89.537109 31.412109 L 96.921875 27.117188 C 97.254845 26.939854 97.526184 26.681846 97.740234 26.339844 C 97.954274 25.997845 98.073886 25.622132 98.097656 25.216797 C 98.145256 24.811463 98.089577 24.421017 97.935547 24.041016 C 97.780967 23.661012 97.562734 23.343179 97.277344 23.089844 C 96.302254 22.279177 95.599958 21.120619 95.171875 19.613281 C 94.743792 18.105943 94.529297 16.870874 94.529297 15.908203 L 94.529297 10.777344 C 94.529297 9.8906751 95.178468 8.8782834 96.474609 7.7382812 C 97.770749 6.5982776 99.22654 6.0273453 100.84375 6.0273438 z M 21 7.9707031 C 20.447715 7.9707031 20 8.4184181 20 8.9707031 C 20 9.5229881 20.447715 9.9707031 21 9.9707031 L 69 9.9707031 C 69.552285 9.9707031 70 9.5229881 70 8.9707031 C 70 8.4184181 69.552285 7.9707031 69 7.9707031 L 21 7.9707031 z M 1 17.970703 C 0.4477153 17.970703 -2.220446e-16 18.418418 0 18.970703 C 0 19.522988 0.4477153 19.970703 1 19.970703 L 63 19.970703 C 63.552285 19.970703 64 19.522988 64 18.970703 C 64 18.418418 63.552285 17.970703 63 17.970703 L 1 17.970703 z M 21 27.970703 C 20.447715 27.970703 20 28.418418 20 28.970703 C 20 29.522988 20.447715 29.970703 21 29.970703 L 69 29.970703 C 69.552285 29.970703 70 29.522988 70 28.970703 C 70 28.418418 69.552285 27.970703 69 27.970703 L 21 27.970703 z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MailIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.mail'\n                    defaultMessage='Mail Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M4,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4C2.89,20 2,19.1 2,18V6C2,4.89 2.89,4 4,4M12,11L20,6H4L12,11M4,18H20V8.37L12,13.36L4,8.37V18Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MailPlusIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.add-mail'\n                    defaultMessage='Add Mail Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M3,4C1.89,4 1,4.89 1,6V18A2,2 0 0,0 3,20H14V18H3V8.37L11,13.36L19,8.37V13H21V6A2,2 0 0,0 19,4H3M3,6H19L11,11L3,6M19,15V18H16V20H19V23H21V20H24V18H21V15H19Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class CloseCircleSolidIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.close'\n                    defaultMessage='Close Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='16px'\n                            height='16px'\n                            viewBox='0 0 16 16'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                d='m 8,0 c 4.424,0 8,3.576 8,8 0,4.424 -3.576,8 -8,8 C 3.576,16 0,12.424 0,8 0,3.576 3.576,0 8,0 Z M 10.872,4 8,6.872 5.128,4 4,5.128 6.872,8 4,10.872 5.128,12 8,9.128 10.872,12 12,10.872 9.128,8 12,5.128 Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport AsyncSelect from 'react-select/lib/AsyncCreatable';\nimport {components} from 'react-select';\nimport classNames from 'classnames';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport MailIcon from 'components/widgets/icons/mail_icon';\nimport MailPlusIcon from 'components/widgets/icons/mail_plus_icon';\nimport CloseCircleSolidIcon from 'components/widgets/icons/close_circle_solid_icon';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport Avatar from 'components/widgets/users/avatar';\nimport {imageURLForUser, getDisplayName, getLongDisplayNameParts} from 'utils/utils.jsx';\n\nimport {t} from 'utils/i18n.jsx';\nimport {isGuest} from 'utils/utils';\n\nimport './users_emails_input.scss';\n\nexport default class UsersEmailsInput extends React.Component {\n    static propTypes = {\n        placeholder: PropTypes.string,\n        ariaLabel: PropTypes.string.isRequired,\n        usersLoader: PropTypes.func,\n        onChange: PropTypes.func,\n        value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.string])),\n        onInputChange: PropTypes.func,\n        inputValue: PropTypes.string,\n        noMatchMessageId: PropTypes.string,\n        noMatchMessageDefault: PropTypes.string,\n        validAddressMessageId: PropTypes.string,\n        validAddressMessageDefault: PropTypes.string,\n        loadingMessageId: PropTypes.string,\n        loadingMessageDefault: PropTypes.string,\n        emailInvitationsEnabled: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        noMatchMessageId: t('widgets.users_emails_input.no_user_found_matching'),\n        noMatchMessageDefault: 'No one found matching **{text}**, type email address',\n        validAddressMessageId: t('widgets.users_emails_input.valid_email'),\n        validAddressMessageDefault: 'Add **{email}**',\n        loadingMessageId: t('widgets.users_emails_input.loading'),\n        loadingMessageDefault: 'Loading',\n    };\n\n    constructor(props) {\n        super(props);\n        this.selectRef = React.createRef();\n        this.state = {\n            options: [],\n        };\n    }\n\n    renderUserName = (user) => {\n        const parts = getLongDisplayNameParts(user);\n        let fullName = null;\n        if (parts.fullName) {\n            fullName = (<span className='fullname'>{parts.fullName}</span>);\n        }\n        let nickname = null;\n        if (parts.nickname) {\n            nickname = (<span className='nickname'>{parts.nickname}</span>);\n        }\n\n        return (\n            <>\n                {parts.displayName}\n                {fullName}\n                {nickname}\n            </>\n        );\n    }\n\n    loadingMessage = () => {\n        const text = (\n            <FormattedMessage\n                id={this.props.loadingMessageId}\n                defaultMessage={this.props.loadingMessageDefault}\n            />\n        );\n\n        return (<LoadingSpinner text={text}/>);\n    }\n\n    getOptionValue = (user) => {\n        return user.id || user.value;\n    }\n\n    formatOptionLabel = (user, options) => {\n        const profileImg = imageURLForUser(user);\n        let guestBadge = null;\n        if (!isEmail(user.value) && isGuest(user)) {\n            guestBadge = <GuestBadge/>;\n        }\n\n        if (options.context === 'menu') {\n            if (user.value && isEmail(user.value)) {\n                return this.getCreateLabel(user.value);\n            }\n            return (\n                <React.Fragment>\n                    <Avatar\n                        size='lg'\n                        username={user.username}\n                        url={profileImg}\n                    />\n                    {this.renderUserName(user)}\n                    {guestBadge}\n                </React.Fragment>\n            );\n        }\n\n        if (user.value && isEmail(user.value)) {\n            return (\n                <React.Fragment>\n                    <MailIcon className='mail-icon'/>\n                    <span>{user.value}</span>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <Avatar\n                    size='sm'\n                    username={user.username}\n                    url={profileImg}\n                />\n                {getDisplayName(user)}\n                {guestBadge}\n            </React.Fragment>\n        );\n    }\n\n    onChange = (value) => {\n        if (this.props.onChange) {\n            this.props.onChange(value.map((v) => {\n                if (v.id) {\n                    return v;\n                }\n                return v.value;\n            }));\n        }\n    }\n\n    getCreateLabel = (value) => (\n        <React.Fragment>\n            <MailPlusIcon className='mail-plus-icon'/>\n            <FormattedMarkdownMessage\n                key='widgets.users_emails_input.valid_email'\n                id={this.props.validAddressMessageId}\n                defaultMessage={this.props.validAddressMessageDefault}\n                values={{email: value}}\n                disableLinks={true}\n            />\n        </React.Fragment>\n    );\n\n    NoOptionsMessage = (props) => {\n        const inputValue = props.selectProps.inputValue;\n        if (!inputValue) {\n            return null;\n        }\n        return (\n            <div className='users-emails-input__option users-emails-input__option--no-matches'>\n                <FormattedMarkdownMessage\n                    id={this.props.noMatchMessageId}\n                    defaultMessage={this.props.noMatchMessageDefault}\n                    values={{text: inputValue}}\n                    disableLinks={true}\n                >\n                    {(message) => (\n                        <components.NoOptionsMessage {...props}>\n                            {message}\n                        </components.NoOptionsMessage>\n                    )}\n                </FormattedMarkdownMessage>\n            </div>\n        );\n    };\n\n    MultiValueRemove = ({children, innerProps}) => (\n        <div {...innerProps}>\n            {children || <CloseCircleSolidIcon/>}\n        </div>\n    );\n\n    components = {\n        NoOptionsMessage: this.NoOptionsMessage,\n        MultiValueRemove: this.MultiValueRemove,\n        IndicatorsContainer: () => null,\n    };\n\n    handleInputChange = (inputValue, action) => {\n        if (action.action === 'input-blur' && inputValue !== '') {\n            const values = this.props.value.map((v) => {\n                if (v.id) {\n                    return v;\n                }\n                return {label: v, value: v};\n            });\n\n            for (const option of this.state.options) {\n                if (this.props.inputValue === option.username || this.props.inputValue === ('@' + option.username)) {\n                    this.onChange([...values, option]);\n                    this.props.onInputChange('');\n                    return;\n                } else if (this.props.inputValue === option.email) {\n                    this.onChange([...values, option]);\n                    this.props.onInputChange('');\n                    return;\n                }\n            }\n\n            if (this.props.emailInvitationsEnabled && isEmail(this.props.inputValue)) {\n                const email = this.props.inputValue;\n                this.onChange([...values, {value: email, label: email}]);\n                this.props.onInputChange('');\n            }\n        }\n        if (action.action !== 'input-blur' && action.action !== 'menu-close') {\n            this.props.onInputChange(inputValue);\n        }\n    }\n\n    optionsLoader = (input, callback) => {\n        const customCallback = (options) => {\n            this.setState({options});\n            callback(options);\n        };\n        const result = this.props.usersLoader(this.props.inputValue, customCallback);\n        if (result && result.then) {\n            result.then(customCallback);\n        }\n    }\n\n    showAddEmail = (input, values, options) => {\n        return this.props.emailInvitationsEnabled && options.length === 0 && isEmail(input);\n    }\n\n    onFocus = () => {\n        this.selectRef.current.handleInputChange(this.props.inputValue, {action: 'custom'});\n    }\n\n    render() {\n        const values = this.props.value.map((v) => {\n            if (v.id) {\n                return v;\n            }\n            return {label: v, value: v};\n        });\n        return (\n            <AsyncSelect\n                ref={this.selectRef}\n                styles={this.customStyles}\n                onChange={this.onChange}\n                loadOptions={this.optionsLoader}\n                isValidNewOption={this.showAddEmail}\n                isMulti={true}\n                isClearable={false}\n                className={classNames('UsersEmailsInput', {empty: this.props.inputValue === ''})}\n                classNamePrefix='users-emails-input'\n                placeholder={this.props.placeholder}\n                components={this.components}\n                getOptionValue={this.getOptionValue}\n                formatOptionLabel={this.formatOptionLabel}\n                defaultOptions={false}\n                defaultMenuIsOpen={false}\n                openMenuOnClick={false}\n                loadingMessage={this.loadingMessage}\n                onInputChange={this.handleInputChange}\n                inputValue={this.props.inputValue}\n                openMenuOnFocus={true}\n                onFocus={this.onFocus}\n                tabSelectsValue={true}\n                value={values}\n                aria-label={this.props.ariaLabel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LinkIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.link'\n                    defaultMessage='Link Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {injectIntl, FormattedMessage} from 'react-intl';\n\nimport {debounce} from 'mattermost-redux/actions/helpers';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport InviteMembersIcon from 'components/widgets/icons/invite_members_icon';\nimport UsersEmailsInput from 'components/widgets/inputs/users_emails_input.jsx';\n\nimport LinkIcon from 'components/widgets/icons/link_icon';\n\nimport {getSiteURL} from 'utils/url';\nimport {t} from 'utils/i18n.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport './invitation_modal_members_step.scss';\n\nclass InvitationModalMembersStep extends React.Component {\n    static propTypes = {\n        teamName: PropTypes.string.isRequired,\n        intl: PropTypes.any,\n        inviteId: PropTypes.string.isRequired,\n        searchProfiles: PropTypes.func.isRequired,\n        emailInvitationsEnabled: PropTypes.bool.isRequired,\n        onEdit: PropTypes.func.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.inviteLinkRef = React.createRef();\n        this.timeout = null;\n        this.state = {\n            usersAndEmails: [],\n            copiedLink: false,\n            termWithoutResults: null,\n            usersInputValue: '',\n        };\n    }\n\n    copyLink = () => {\n        const input = this.inviteLinkRef.current;\n\n        const textField = document.createElement('textarea');\n        textField.innerText = input.value;\n        textField.style.position = 'fixed';\n        textField.style.opacity = 0;\n\n        document.body.appendChild(textField);\n        textField.select();\n\n        try {\n            this.setState({copiedLink: document.execCommand('copy')});\n        } catch (err) {\n            this.setState({copiedLink: false});\n        }\n        textField.remove();\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(() => {\n            this.setState({copiedLink: false});\n        }, 3000);\n    }\n\n    debouncedSearchProfiles = debounce((term, callback) => {\n        this.props.searchProfiles(term).then(({data}) => {\n            callback(data);\n            if (data.length === 0) {\n                this.setState({termWithoutResults: term});\n            } else {\n                this.setState({termWithoutResults: null});\n            }\n        }).catch(() => {\n            callback([]);\n        });\n    }, 150);\n\n    usersLoader = (term, callback) => {\n        if (this.state.termWithoutResults && term.startsWith(this.state.termWithoutResults)) {\n            callback([]);\n            return;\n        }\n        try {\n            this.debouncedSearchProfiles(term, callback);\n        } catch (error) {\n            callback([]);\n        }\n    }\n\n    onChange = (usersAndEmails) => {\n        this.setState({usersAndEmails});\n        this.props.onEdit(usersAndEmails.length > 0 || this.state.usersInputValue);\n    }\n\n    onUsersInputChange = (usersInputValue) => {\n        this.setState({usersInputValue});\n        this.props.onEdit(this.state.usersAndEmails.length > 0 || usersInputValue);\n    }\n\n    submit = () => {\n        const users = [];\n        const emails = [];\n        for (const userOrEmail of this.state.usersAndEmails) {\n            if (isEmail(userOrEmail)) {\n                emails.push(userOrEmail);\n            } else {\n                users.push(userOrEmail);\n            }\n        }\n        this.props.onSubmit(users, emails, this.state.usersInputValue);\n    }\n\n    render() {\n        const inviteUrl = getSiteURL() + '/signup_user_complete/?id=' + this.props.inviteId;\n\n        let placeholder = localizeMessage('invitation_modal.members.search-and-add.placeholder', 'Add members or email addresses');\n        let noMatchMessageId = t('invitation_modal.members.users_emails_input.no_user_found_matching');\n        let noMatchMessageDefault = 'No one found matching **{text}**, type email to invite';\n\n        if (!this.props.emailInvitationsEnabled) {\n            placeholder = localizeMessage('invitation_modal.members.search-and-add.placeholder-email-disabled', 'Add members');\n            noMatchMessageId = t('invitation_modal.members.users_emails_input.no_user_found_matching-email-disabled');\n            noMatchMessageDefault = 'No one found matching **{text}**';\n        }\n\n        return (\n            <div className='InvitationModalMembersStep'>\n                <div className='modal-icon'>\n                    <InviteMembersIcon/>\n                </div>\n                <h1 id='invitation_modal_title'>\n                    <FormattedMarkdownMessage\n                        id='invitation_modal.members.title'\n                        defaultMessage='Invite **Members** to {teamName}'\n                        values={{teamName: this.props.teamName}}\n                    />\n                </h1>\n                <div\n                    className='share-link'\n                    data-testid='shareLink'\n                >\n                    <h2>\n                        <FormattedMessage\n                            id='invitation_modal.members.share_link.title'\n                            defaultMessage='Share This Link'\n                        />\n                    </h2>\n                    <div className='share-link-input-block'>\n                        <input\n                            ref={this.inviteLinkRef}\n                            className='share-link-input'\n                            type='text'\n                            readOnly={true}\n                            value={inviteUrl}\n                            aria-label={this.props.intl.formatMessage({id: 'invitation_modal.members.share_link.input', defaultMessage: 'team invite link'})}\n                            data-testid='shareLinkInput'\n                        />\n                        <button\n                            className='share-link-input-button'\n                            onClick={this.copyLink}\n                            data-testid='shareLinkInputButton'\n                        >\n                            <LinkIcon/>\n                            {!this.state.copiedLink &&\n                                <FormattedMessage\n                                    id='invitation_modal.members.share_link.copy_button'\n                                    defaultMessage='Copy Link'\n                                />\n                            }\n                            {this.state.copiedLink &&\n                                <FormattedMessage\n                                    id='invitation_modal.members.share_link.link_copied'\n                                    defaultMessage='Link Copied'\n                                />\n                            }\n                        </button>\n                    </div>\n                    <div className='help-text'>\n                        <FormattedMessage\n                            id='invitation_modal.members.share_link.description'\n                            defaultMessage='Share this link to invite people to this team.'\n                        />\n                    </div>\n                </div>\n                <div className='invitation-modal-or'>\n                    <hr/>\n                    <div>\n                        <FormattedMessage\n                            id='invitation_modal.members.or'\n                            defaultMessage='OR'\n                        />\n                    </div>\n\n                </div>\n                <div\n                    className='search-and-add'\n                    data-testid='searchAdd'\n                >\n                    <h2>\n                        <FormattedMessage\n                            id='invitation_modal.members.search_and_add.title'\n                            defaultMessage='Add or Invite People'\n                        />\n                    </h2>\n                    <div data-testid='inputPlaceholder'>\n                        <UsersEmailsInput\n                            usersLoader={this.usersLoader}\n                            placeholder={placeholder}\n                            ariaLabel={localizeMessage('invitation_modal.members.search_and_add.title', 'Invite People')}\n                            onChange={this.onChange}\n                            value={this.state.usersAndEmails}\n                            validAddressMessageId={t('invitation_modal.members.users_emails_input.valid_email')}\n                            validAddressMessageDefault='Invite **{email}** as a team member'\n                            noMatchMessageId={noMatchMessageId}\n                            noMatchMessageDefault={noMatchMessageDefault}\n                            onInputChange={this.onUsersInputChange}\n                            inputValue={this.state.usersInputValue}\n                            emailInvitationsEnabled={this.props.emailInvitationsEnabled}\n                        />\n                    </div>\n                    <div className='help-text'>\n                        {this.props.emailInvitationsEnabled &&\n                        <FormattedMessage\n                            id='invitation_modal.members.search-and-add.description'\n                            defaultMessage='Add existing members or send email invites to new members.'\n                        />\n                        }\n                        {!this.props.emailInvitationsEnabled &&\n                        <FormattedMessage\n                            id='invitation_modal.members.search-and-add.description-email-disabled'\n                            defaultMessage='Add existing members to this team.'\n                        />\n                        }\n                    </div>\n                </div>\n                <div className='invite-members'>\n                    <button\n                        className={'btn ' + (this.state.usersAndEmails.length === 0 ? 'btn-inactive' : 'btn-primary')}\n                        onClick={this.submit}\n                        disabled={this.state.usersAndEmails.length === 0}\n                        id='inviteMembersButton'\n                    >\n                        <FormattedMessage\n                            id='invitation_modal.members.invite_button'\n                            defaultMessage='Invite Members'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(InvitationModalMembersStep);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class CloseCircleIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.close'\n                    defaultMessage='Close Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                d='M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2C6.47,2 2,6.47 2,12C2,17.53 6.47,22 12,22C17.53,22 22,17.53 22,12C22,6.47 17.53,2 12,2M14.59,8L12,10.59L9.41,8L8,9.41L10.59,12L8,14.59L9.41,16L12,13.41L14.59,16L16,14.59L13.41,12L16,9.41L14.59,8Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport AsyncSelect from 'react-select/lib/Async';\nimport {components} from 'react-select';\nimport classNames from 'classnames';\n\nimport {Constants} from 'utils/constants';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport PublicChannelIcon from 'components/widgets/icons/globe_icon.jsx';\nimport PrivateChannelIcon from 'components/widgets/icons/lock_icon.jsx';\nimport CloseCircleSolidIcon from 'components/widgets/icons/close_circle_solid_icon';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport {t} from 'utils/i18n.jsx';\n\nimport './channels_input.scss';\n\nexport default class ChannelsInput extends React.Component {\n    static propTypes = {\n        placeholder: PropTypes.string,\n        ariaLabel: PropTypes.string.isRequired,\n        channelsLoader: PropTypes.func,\n        onChange: PropTypes.func,\n        value: PropTypes.arrayOf(PropTypes.object),\n        onInputChange: PropTypes.func,\n        inputValue: PropTypes.string,\n        loadingMessageId: PropTypes.string,\n        loadingMessageDefault: PropTypes.string,\n        noOptionsMessageId: PropTypes.string,\n        noOptionsMessageDefault: PropTypes.string,\n    }\n\n    static defaultProps = {\n        loadingMessageId: t('widgets.channels_input.loading'),\n        loadingMessageDefault: 'Loading',\n        noOptionsMessageId: t('widgets.channels_input.empty'),\n        noOptionsMessageDefault: 'No channels found',\n    };\n\n    constructor(props) {\n        super(props);\n        this.selectRef = React.createRef();\n        this.state = {\n            options: [],\n        };\n    }\n\n    getOptionValue = (channel) => channel.id\n\n    handleInputChange = (inputValue, action) => {\n        if (action.action === 'input-blur' && inputValue !== '') {\n            for (const option of this.state.options) {\n                if (this.props.inputValue === option.name) {\n                    this.onChange([...this.props.value, option]);\n                    this.props.onInputChange('');\n                    return;\n                }\n            }\n        }\n        if (action.action !== 'input-blur' && action.action !== 'menu-close') {\n            this.props.onInputChange(inputValue);\n        }\n    }\n\n    optionsLoader = (input, callback) => {\n        const customCallback = (options) => {\n            this.setState({options});\n            callback(options);\n        };\n        const result = this.props.channelsLoader(this.props.inputValue, customCallback);\n        if (result && result.then) {\n            result.then(customCallback);\n        }\n    }\n\n    loadingMessage = () => {\n        const text = (\n            <FormattedMessage\n                id={this.props.loadingMessageId}\n                defaultMessage={this.props.loadingMessageDefault}\n            />\n        );\n\n        return (<LoadingSpinner text={text}/>);\n    }\n\n    NoOptionsMessage = (props) => {\n        const inputValue = props.selectProps.inputValue;\n        if (!inputValue) {\n            return null;\n        }\n        return (\n            <div className='channels-input__option channels-input__option--no-matches'>\n                <FormattedMarkdownMessage\n                    id={this.props.noOptionsMessageId}\n                    defaultMessage={this.props.noOptionsMessageDefault}\n                    values={{text: inputValue}}\n                >\n                    {(message) => (\n                        <components.NoOptionsMessage {...props}>\n                            {message}\n                        </components.NoOptionsMessage>\n                    )}\n                </FormattedMarkdownMessage>\n            </div>\n        );\n    };\n\n    formatOptionLabel = (channel) => {\n        let icon = <PublicChannelIcon className='public-channel-icon'/>;\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            icon = <PrivateChannelIcon className='private-channel-icon'/>;\n        }\n        return (\n            <React.Fragment>\n                {icon}\n                {channel.display_name}\n                <span className='channel-name'>{channel.name}</span>\n            </React.Fragment>\n        );\n    }\n\n    onChange = (value) => {\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    MultiValueRemove = ({children, innerProps}) => (\n        <div {...innerProps}>\n            {children || <CloseCircleSolidIcon/>}\n        </div>\n    );\n\n    components = {\n        NoOptionsMessage: this.NoOptionsMessage,\n        MultiValueRemove: this.MultiValueRemove,\n        IndicatorsContainer: () => null,\n    };\n\n    onFocus = () => {\n        this.selectRef.current.handleInputChange(this.props.inputValue, {action: 'custom'});\n    }\n\n    render() {\n        return (\n            <AsyncSelect\n                ref={this.selectRef}\n                styles={this.customStyles}\n                onChange={this.onChange}\n                loadOptions={this.optionsLoader}\n                isMulti={true}\n                isClearable={false}\n                className={classNames('ChannelsInput', {empty: this.props.inputValue === ''})}\n                classNamePrefix='channels-input'\n                placeholder={this.props.placeholder}\n                components={this.components}\n                getOptionValue={this.getOptionValue}\n                formatOptionLabel={this.formatOptionLabel}\n                noOptionsMessage={this.noOptionsMessage}\n                loadingMessage={this.loadingMessage}\n                defaultOptions={false}\n                defaultMenuIsOpen={false}\n                openMenuOnClick={false}\n                onInputChange={this.handleInputChange}\n                inputValue={this.props.inputValue}\n                openMenuOnFocus={true}\n                onFocus={this.onFocus}\n                tabSelectsValue={true}\n                value={this.props.value}\n                aria-label={this.props.ariaLabel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\nimport {debounce} from 'mattermost-redux/actions/helpers';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport InviteIcon from 'components/widgets/icons/invite_icon';\nimport CloseCircleIcon from 'components/widgets/icons/close_circle_icon';\n\nimport ChannelsInput from 'components/widgets/inputs/channels_input.jsx';\nimport UsersEmailsInput from 'components/widgets/inputs/users_emails_input.jsx';\n\nimport './invitation_modal_guests_step.scss';\n\nimport {t} from 'utils/i18n.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class InvitationModalGuestsStep extends React.Component {\n    static propTypes = {\n        teamName: PropTypes.string.isRequired,\n        myInvitableChannels: PropTypes.array.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        searchProfiles: PropTypes.func.isRequired,\n        searchChannels: PropTypes.func.isRequired,\n        defaultChannels: PropTypes.array,\n        defaultMessage: PropTypes.string,\n        onEdit: PropTypes.func.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        emailInvitationsEnabled: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.textareaRef = React.createRef();\n        this.state = {\n            customMessageOpen: Boolean(props.defaultMessage),\n            customMessage: props.defaultMessage || '',\n            usersAndEmails: [],\n            channels: props.defaultChannels || [],\n            usersInputValue: '',\n            channelsInputValue: '',\n        };\n    }\n\n    onUsersEmailsChange = (usersAndEmails) => {\n        this.setState({usersAndEmails});\n        this.props.onEdit(usersAndEmails.length > 0 || this.state.channels.length > 0 || this.state.customMessage !== '' || this.state.usersInputValue || this.state.channelsInputValue);\n    }\n\n    onChannelsChange = (channels) => {\n        this.setState({channels});\n        this.props.onEdit(this.state.usersAndEmails.length > 0 || channels.length > 0 || this.state.customMessage !== '' || this.state.usersInputValue || this.state.channelsInputValue);\n    }\n\n    onMessageChange = (e) => {\n        this.setState({customMessage: e.target.value});\n        this.props.onEdit(this.state.usersAndEmails.length > 0 || this.state.channels.length > 0 || e.target.value !== '' || this.state.usersInputValue || this.state.channelsInputValue);\n    }\n\n    onUsersInputChange = (usersInputValue) => {\n        this.setState({usersInputValue});\n        this.props.onEdit(this.state.usersAndEmails.length > 0 || this.state.channels.length > 0 || this.state.customMessage !== '' || usersInputValue || this.state.channelsInputValue);\n    }\n\n    onChannelsInputChange = (channelsInputValue) => {\n        this.setState({channelsInputValue});\n        this.props.onEdit(this.state.usersAndEmails.length > 0 || this.state.channels.length > 0 || this.state.customMessage !== '' || this.state.usersInputValue || channelsInputValue);\n    }\n\n    debouncedSearchProfiles = debounce((term, callback) => {\n        this.props.searchProfiles(term).then(({data}) => {\n            callback(data);\n            if (data.length === 0) {\n                this.setState({termWithoutResults: term});\n            } else {\n                this.setState({termWithoutResults: null});\n            }\n        }).catch(() => {\n            callback([]);\n        });\n    }, 150);\n\n    usersLoader = (term, callback) => {\n        if (this.state.termWithoutResults && term.startsWith(this.state.termWithoutResults)) {\n            callback([]);\n            return;\n        }\n        try {\n            this.debouncedSearchProfiles(term, callback);\n        } catch (error) {\n            callback([]);\n        }\n    }\n\n    debouncedSearchChannels = debounce((term) => this.props.searchChannels(this.props.currentTeamId, term), 150);\n\n    channelsLoader = async (value) => {\n        if (!value) {\n            return this.props.myInvitableChannels;\n        }\n\n        this.debouncedSearchChannels(value);\n        return this.props.myInvitableChannels.filter((channel) => {\n            return channel.display_name.toLowerCase().startsWith(value.toLowerCase()) || channel.name.toLowerCase().startsWith(value.toLowerCase());\n        });\n    }\n\n    openCustomMessage = () => {\n        this.setState({customMessageOpen: true});\n        setTimeout(() => {\n            if (this.textareaRef.current) {\n                this.textareaRef.current.focus();\n            }\n        });\n    }\n\n    closeCustomMessage = () => {\n        this.setState({customMessageOpen: false});\n    }\n\n    sendInvites = () => {\n        const users = [];\n        const emails = [];\n        for (const userOrEmail of this.state.usersAndEmails) {\n            if (isEmail(userOrEmail)) {\n                emails.push(userOrEmail);\n            } else {\n                users.push(userOrEmail);\n            }\n        }\n        this.props.onSubmit(users, emails, this.state.channels, this.state.customMessageOpen ? this.state.customMessage : '', this.state.usersInputValue, this.state.channelsInputValue);\n    }\n\n    render() {\n        let inputPlaceholder = localizeMessage('invitation_modal.guests.search-and-add.placeholder', 'Add guests or email addresses');\n        let noMatchMessageId = t('invitation_modal.guests.users_emails_input.no_user_found_matching');\n        let noMatchMessageDefault = 'No one found matching **{text}**, type email to invite';\n\n        if (!this.props.emailInvitationsEnabled) {\n            inputPlaceholder = localizeMessage('invitation_modal.guests.search-and-add.placeholder-email-disabled', 'Add guests');\n            noMatchMessageId = t('invitation_modal.guests.users_emails_input.no_user_found_matching-email-disabled');\n            noMatchMessageDefault = 'No one found matching **{text}**';\n        }\n        return (\n            <div className='InvitationModalGuestsStep'>\n                <div className='modal-icon'>\n                    <InviteIcon/>\n                </div>\n                <h1 id='invitation_modal_title'>\n                    <FormattedMarkdownMessage\n                        id='invitation_modal.guests.title'\n                        defaultMessage='Invite **Guests** to {teamName}'\n                        values={{teamName: this.props.teamName}}\n                    />\n                </h1>\n                <div\n                    className='add-people'\n                    data-testid='addPeople'\n                >\n                    <h2>\n                        <FormattedMessage\n                            id='invitation_modal.guests.add_people.title'\n                            defaultMessage='Invite People'\n                        />\n                    </h2>\n                    <div data-testid='emailPlaceholder'>\n                        <UsersEmailsInput\n                            usersLoader={this.usersLoader}\n                            placeholder={inputPlaceholder}\n                            ariaLabel={localizeMessage('invitation_modal.guests.add_people.title', 'Invite People')}\n                            onChange={this.onUsersEmailsChange}\n                            value={this.state.usersAndEmails}\n                            onInputChange={this.onUsersInputChange}\n                            inputValue={this.state.usersInputValue}\n                            validAddressMessageId={t('invitation_modal.guests.users_emails_input.valid_email')}\n                            validAddressMessageDefault='Invite **{email}** as a guest'\n                            noMatchMessageId={noMatchMessageId}\n                            noMatchMessageDefault={noMatchMessageDefault}\n                            emailInvitationsEnabled={this.props.emailInvitationsEnabled}\n                        />\n                    </div>\n                    <div className='help-text'>\n\n                        {this.props.emailInvitationsEnabled &&\n                        <FormattedMessage\n                            id='invitation_modal.guests.add_people.description'\n                            defaultMessage='Add existing guests or send email invites to new guests.'\n                        />\n                        }\n                        {!this.props.emailInvitationsEnabled &&\n                        <FormattedMessage\n                            id='invitation_modal.guests.add_people.description-email-disabled'\n                            defaultMessage='Add existing guests.'\n                        />\n                        }\n                    </div>\n                </div>\n                <div\n                    className='add-channels'\n                    data-testid='channelPlaceholder'\n                >\n                    <h2>\n                        <FormattedMessage\n                            id='invitation_modal.guests.add_channels.title'\n                            defaultMessage='Search and Add Channels'\n                        />\n                    </h2>\n                    <div>\n                        <FormattedMessage\n                            id='invitation_modal.guests.add_channels.placeholder'\n                            defaultMessage='Search and add channels'\n                        >\n                            {(placeholder) => (\n                                <ChannelsInput\n                                    placeholder={placeholder}\n                                    ariaLabel={localizeMessage('invitation_modal.guests.add_channels.title', 'Search and Add Channels')}\n                                    channelsLoader={this.channelsLoader}\n                                    onChange={this.onChannelsChange}\n                                    onInputChange={this.onChannelsInputChange}\n                                    inputValue={this.state.channelsInputValue}\n                                    value={this.state.channels}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </div>\n                    <div className='help-text'>\n                        <FormattedMessage\n                            id='invitation_modal.guests.add-channels.description'\n                            defaultMessage='Specify the channels the guests have access to.'\n                        />\n                    </div>\n                </div>\n                <div\n                    className='custom-message'\n                    data-testid='customMessage'\n                >\n                    {!this.state.customMessageOpen &&\n                        <a\n                            onClick={this.openCustomMessage}\n                            href='#'\n                        >\n                            <FormattedMessage\n                                id='invitation_modal.guests.custom-message.link'\n                                defaultMessage='Set a custom message'\n                            />\n                        </a>\n                    }\n                    {this.state.customMessageOpen &&\n                        <React.Fragment>\n                            <div>\n                                <FormattedMessage\n                                    id='invitation_modal.guests.custom-message.title'\n                                    defaultMessage='Custom message'\n                                />\n                                <CloseCircleIcon onClick={this.closeCustomMessage}/>\n                            </div>\n                            <textarea\n                                ref={this.textareaRef}\n                                onChange={this.onMessageChange}\n                                value={this.state.customMessage}\n                            />\n                        </React.Fragment>\n                    }\n                    <div className='help-text'>\n                        <FormattedMessage\n                            id='invitation_modal.guests.custom-message.description'\n                            defaultMessage='Create a custom message to make your invite more personal.'\n                        />\n                    </div>\n                </div>\n                <div className='invite-guests'>\n                    <button\n                        className={'btn ' + (this.state.channels.length === 0 || this.state.usersAndEmails.length === 0 ? 'btn-inactive' : 'btn-primary')}\n                        disabled={this.state.channels.length === 0 || this.state.usersAndEmails.length === 0}\n                        onClick={this.sendInvites}\n                        id='inviteGuestButton'\n                    >\n                        <FormattedMessage\n                            id='invitation_modal.guests.invite_button'\n                            defaultMessage='Invite Guests'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class AlertIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.alert'\n                    defaultMessage='Alert Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport EmailIcon from 'components/widgets/icons/mail_icon';\nimport AlertIcon from 'components/widgets/icons/alert_icon';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport {imageURLForUser, isGuest, getLongDisplayName} from 'utils/utils.jsx';\n\nimport './invitation_modal_confirm_step_row.scss';\n\nexport default class InvitationModalConfirmStepRow extends React.Component {\n    static propTypes = {\n        invitation: PropTypes.object.isRequired,\n    }\n\n    render() {\n        const {invitation} = this.props;\n        let icon;\n        let username;\n        let className;\n        let guestBadge;\n        if (invitation.user) {\n            className = 'name';\n            const profileImg = imageURLForUser(invitation.user);\n            icon = (\n                <Avatar\n                    username={invitation.user.username}\n                    url={profileImg}\n                    size='lg'\n                />\n            );\n            username = getLongDisplayName(invitation.user);\n            if (isGuest(invitation.user)) {\n                guestBadge = <GuestBadge/>;\n            }\n        } else if (invitation.email) {\n            className = 'email';\n            icon = <EmailIcon className='mail-icon'/>;\n            username = invitation.email;\n        } else {\n            className = 'name';\n            icon = <AlertIcon className='alert-icon'/>;\n            username = invitation.text;\n        }\n\n        let reason = invitation.reason;\n        if (invitation.reason && invitation.reason.id) {\n            reason = (\n                <FormattedMessage\n                    id={invitation.reason.id}\n                    defaultMessage={invitation.reason.message}\n                    values={invitation.reason.values}\n                />\n            );\n        }\n\n        return (\n            <div className='InvitationModalConfirmStepRow'>\n                <div className='username-or-icon'>\n                    {icon}\n                    <span className={className}>\n                        {username}\n                        {guestBadge}\n                    </span>\n                </div>\n                <div className='reason'>\n                    {reason}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport InvitationModalConfirmStepRow from 'components/invitation_modal/invitation_modal_confirm_step_row';\n\nimport './invitation_modal_confirm_step_table.scss';\n\nexport default class InvitationModalConfirmStepTable extends React.Component {\n    static propTypes = {\n        invites: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }\n    render() {\n        return (\n            <div className='InvitationModalConfirmStepTable'>\n                <div className='table-header'>\n                    <div className='people-header'>\n                        <FormattedMessage\n                            id='invitation-modal.confirm.people-header'\n                            defaultMessage='People'\n                        />\n                    </div>\n                    <div className='details-header'>\n                        <FormattedMessage\n                            id='invitation-modal.confirm.details-header'\n                            defaultMessage='Details'\n                        />\n                    </div>\n                </div>\n                <div className='rows'>\n                    {this.props.invites.map((invitation) => (\n                        <InvitationModalConfirmStepRow\n                            key={invitation.text || invitation.email || invitation.user.id}\n                            invitation={invitation}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport InviteIcon from 'components/widgets/icons/invite_icon';\nimport InvitationModalConfirmStepTable from 'components/invitation_modal/invitation_modal_confirm_step_table';\n\nimport {InviteTypes} from 'utils/constants';\n\nimport './invitation_modal_confirm_step.scss';\n\nexport default class InvitationModalConfirmStep extends React.Component {\n    static propTypes = {\n        teamName: PropTypes.string.isRequired,\n        onDone: PropTypes.func.isRequired,\n        invitesType: PropTypes.oneOf([InviteTypes.INVITE_MEMBER, InviteTypes.INVITE_GUEST]).isRequired,\n        invitesSent: PropTypes.array.isRequired,\n        invitesNotSent: PropTypes.array.isRequired,\n    }\n\n    getInvitesCountsMessage = (invitesSentCount, invitesNotSentCount) => {\n        if (invitesSentCount > 0 && invitesNotSentCount > 0) {\n            return (\n                <FormattedMarkdownMessage\n                    id='invitation_modal.confirm.members_subtitle'\n                    defaultMessage='**{sentCount, number} {sentCount, plural, one {person} other {people}}** {sentCount, plural, one {has} other {have}} been invited, and **{notSentCount, number} {notSentCount, plural, one {invitation} other {invitations}}** {notSentCount, plural, one {was} other {were}} not sent'\n                    values={{sentCount: invitesSentCount, notSentCount: invitesNotSentCount}}\n                />\n            );\n        }\n\n        if (invitesSentCount > 0 && invitesNotSentCount === 0) {\n            return (\n                <FormattedMarkdownMessage\n                    id='invitation_modal.confirm.members_subtitle_without_not_sent'\n                    defaultMessage='**{sentCount, number} {sentCount, plural, one {person} other {people}}** {sentCount, plural, one {has} other {have}} been invited'\n                    values={{sentCount: invitesSentCount}}\n                />\n            );\n        }\n        if (invitesSentCount === 0 && invitesNotSentCount > 0) {\n            return (\n                <FormattedMarkdownMessage\n                    id='invitation_modal.confirm.members_subtitle_without_sent'\n                    defaultMessage='**{notSentCount, number} {notSentCount, plural, one {invitation} other {invitations}}** {notSentCount, plural, one {was} other {were}} not sent'\n                    values={{notSentCount: invitesNotSentCount}}\n                />\n            );\n        }\n        return (\n            <FormattedMarkdownMessage\n                id='invitation_modal.confirm.members_subtitle_without_sent_and_not_sent'\n                defaultMessage='No invitation sent'\n            />\n        );\n    }\n\n    render() {\n        const {teamName, invitesType, invitesSent, invitesNotSent, onDone} = this.props;\n        return (\n            <div className='InvitationModalConfirmStep'>\n                <div className='modal-icon'>\n                    <InviteIcon/>\n                </div>\n                {invitesType === InviteTypes.INVITE_MEMBER &&\n                    <h1 id='invitation_modal_title'>\n                        <FormattedMarkdownMessage\n                            id='invitation_modal.confirm.members_title'\n                            defaultMessage='**Members** Invited to **{teamName}**'\n                            values={{teamName}}\n                        />\n                    </h1>}\n                {invitesType === InviteTypes.INVITE_GUEST &&\n                    <h1 id='invitation_modal_title'>\n                        <FormattedMarkdownMessage\n                            id='invitation_modal.confirm.guests_title'\n                            defaultMessage='**Guests** Invited to **{teamName}**'\n                            values={{teamName}}\n                        />\n                    </h1>}\n                <h2 className='subtitle'>\n                    {this.getInvitesCountsMessage(invitesSent.length, invitesNotSent.length)}\n                </h2>\n                {invitesSent.length > 0 &&\n                    <div className='invitation-modal-confirm-sent'>\n                        <h2>\n                            <FormattedMessage\n                                id='invitation_modal.confirm.sent-header'\n                                defaultMessage='Successful Invites'\n                            />\n                        </h2>\n                        <InvitationModalConfirmStepTable invites={invitesSent}/>\n                    </div>}\n                {invitesNotSent.length > 0 &&\n                    <div className='invitation-modal-confirm-not-sent'>\n                        <h2>\n                            <FormattedMessage\n                                id='invitation_modal.confirm.not-sent-header'\n                                defaultMessage='Invitations Not Sent'\n                            />\n                        </h2>\n                        <InvitationModalConfirmStepTable invites={invitesNotSent}/>\n                    </div>}\n                <div className='confirm-done'>\n                    <button\n                        className='btn btn-primary'\n                        onClick={onDone}\n                    >\n                        <FormattedMessage\n                            id='invitation_modal.confirm.done'\n                            defaultMessage='Done'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FullScreenModal from 'components/widgets/modals/full_screen_modal';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport RootPortal from 'components/root_portal';\n\nimport {InviteTypes} from 'utils/constants';\n\nimport InvitationModalInitialStep from './invitation_modal_initial_step.jsx';\nimport InvitationModalMembersStep from './invitation_modal_members_step.jsx';\nimport InvitationModalGuestsStep from './invitation_modal_guests_step.jsx';\nimport InvitationModalConfirmStep from './invitation_modal_confirm_step.jsx';\n\nimport './invitation_modal.scss';\n\nconst STEPS_INITIAL = 'initial';\nconst STEPS_INVITE_MEMBERS = 'members';\nconst STEPS_INVITE_GUESTS = 'guests';\nconst STEPS_INVITE_CONFIRM = 'confirm';\n\nexport default class InvitationModal extends React.Component {\n    static propTypes = {\n        show: PropTypes.bool,\n        currentTeam: PropTypes.object.isRequired,\n        invitableChannels: PropTypes.array.isRequired,\n        canInviteGuests: PropTypes.bool.isRequired,\n        canAddUsers: PropTypes.bool.isRequired,\n        emailInvitationsEnabled: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            closeModal: PropTypes.func.isRequired,\n            sendGuestsInvites: PropTypes.func.isRequired,\n            sendMembersInvites: PropTypes.func.isRequired,\n            searchProfiles: PropTypes.func.isRequired,\n            searchChannels: PropTypes.func.isRequired,\n            getTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    modal = React.createRef();\n\n    constructor(props) {\n        super(props);\n        let step = STEPS_INITIAL;\n        if (!props.canInviteGuests) {\n            step = STEPS_INVITE_MEMBERS;\n        }\n\n        if (!props.canAddUsers) {\n            step = STEPS_INVITE_GUESTS;\n        }\n\n        this.state = {\n            step,\n            prevStep: null,\n            lastInviteChannels: [],\n            lastInviteMessage: '',\n            confirmModal: false,\n            confirmBack: false,\n            hasChanges: false,\n            invitesType: InviteTypes.INVITE_MEMBER,\n            invitesSent: [],\n            invitesNotSent: [],\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.step === STEPS_INVITE_MEMBERS && prevState.step !== STEPS_INVITE_MEMBERS && !this.props.currentTeam.invite_id) {\n            this.props.actions.getTeam(this.props.currentTeam.id);\n        }\n    }\n\n    goToInitialStep = () => {\n        if (this.state.hasChanges) {\n            this.setState({confirmBack: true});\n        } else {\n            this.setState({step: STEPS_INITIAL, hasChanges: false, lastInviteChannels: [], lastInviteMesssage: '', prevStep: this.state.step});\n        }\n        if (this.modal && this.modal.current) {\n            this.modal.current.resetFocus();\n        }\n    }\n\n    goToMembers = () => {\n        this.setState({step: STEPS_INVITE_MEMBERS, prevStep: this.state.step, hasChanges: false, invitesSent: [], invitesNotSent: [], invitesType: InviteTypes.INVITE_MEMBER});\n        if (this.modal && this.modal.current) {\n            this.modal.current.resetFocus();\n        }\n    }\n\n    goToGuests = () => {\n        this.setState({step: STEPS_INVITE_GUESTS, prevStep: this.state.step, hasChanges: false, invitesSent: [], invitesNotSent: [], invitesType: InviteTypes.INVITE_GUEST});\n        if (this.modal && this.modal.current) {\n            this.modal.current.resetFocus();\n        }\n    }\n\n    goToPrevStep = () => {\n        if (this.state.prevStep === STEPS_INVITE_GUESTS) {\n            this.setState({step: STEPS_INVITE_GUESTS, prevStep: this.state.step, hasChanges: false, invitesSent: [], invitesNotSent: [], invitesType: InviteTypes.INVITE_GUEST});\n        } else if (this.state.prevStep === STEPS_INVITE_MEMBERS) {\n            this.setState({step: STEPS_INVITE_MEMBERS, prevStep: this.state.step, hasChanges: false, invitesSent: [], invitesNotSent: [], invitesType: InviteTypes.INVITE_MEMBER});\n        }\n        if (this.modal && this.modal.current) {\n            this.modal.current.resetFocus();\n        }\n    }\n\n    getBackFunction = () => {\n        if (this.state.step === STEPS_INVITE_CONFIRM && this.state.invitesNotSent.length > 0) {\n            return this.goToPrevStep;\n        }\n        if ((this.state.step === STEPS_INVITE_MEMBERS || this.state.step === STEPS_INVITE_GUESTS) && this.props.canInviteGuests && this.props.canAddUsers) {\n            return this.goToInitialStep;\n        }\n        return null;\n    }\n\n    onEdit = (hasChanges) => {\n        this.setState({hasChanges});\n    }\n\n    close = () => {\n        if (this.state.hasChanges) {\n            this.setState({confirmModal: true});\n        } else {\n            this.props.actions.closeModal();\n        }\n    }\n\n    confirmBack = () => {\n        this.setState({step: STEPS_INITIAL, hasChanges: false, confirmBack: false});\n    }\n\n    cancelBack= () => {\n        this.setState({confirmBack: false});\n    }\n\n    confirmClose = () => {\n        this.props.actions.closeModal();\n        this.setState({confirmModal: false});\n    }\n\n    cancelClose = () => {\n        this.setState({confirmModal: false});\n    }\n\n    onMembersSubmit = async (users, emails, extraText) => {\n        const invites = await this.props.actions.sendMembersInvites(this.props.currentTeam.id, users, emails);\n\n        if (extraText !== '') {\n            invites.notSent.push({\n                text: extraText,\n                reason: (\n                    <FormattedMessage\n                        id='invitation-modal.confirm.not-valid-user-or-email'\n                        defaultMessage='Does not match a valid user or email.'\n                    />\n                ),\n            });\n        }\n\n        this.setState({step: STEPS_INVITE_CONFIRM, prevStep: this.state.step, invitesSent: invites.sent, invitesNotSent: invites.notSent, invitesType: InviteTypes.INVITE_MEMBER, hasChanges: false});\n    }\n\n    onGuestsSubmit = async (users, emails, channels, message, extraUserText, extraChannelText) => {\n        const invites = await this.props.actions.sendGuestsInvites(\n            this.props.currentTeam.id,\n            channels.map((c) => c.id),\n            users,\n            emails,\n            message,\n        );\n        if (extraUserText !== '') {\n            invites.notSent.push({\n                text: extraUserText,\n                reason: (\n                    <FormattedMessage\n                        id='invitation-modal.confirm.not-valid-user-or-email'\n                        defaultMessage='Does not match a valid user or email.'\n                    />\n                ),\n            });\n        }\n        if (extraChannelText !== '') {\n            invites.notSent.push({\n                text: extraChannelText,\n                reason: (\n                    <FormattedMessage\n                        id='invitation-modal.confirm.not-valid-channel'\n                        defaultMessage='Does not match a valid channel name.'\n                    />\n                ),\n            });\n        }\n        this.setState({step: STEPS_INVITE_CONFIRM, prevStep: this.state.step, lastInviteChannels: channels, lastInviteMessage: message, invitesSent: invites.sent, invitesNotSent: invites.notSent, invitesType: InviteTypes.INVITE_GUEST, hasChanges: false});\n    }\n\n    render() {\n        return (\n            <RootPortal>\n                <FullScreenModal\n                    show={Boolean(this.props.show)}\n                    onClose={this.close}\n                    onGoBack={this.getBackFunction()}\n                    ref={this.modal}\n                    ariaLabelledBy='invitation_modal_title'\n                >\n                    <div\n                        data-testid='invitationModal'\n                        className='InvitationModal'\n                    >\n                        <ConfirmModal\n                            show={this.state.confirmModal || this.state.confirmBack}\n                            title={\n                                <FormattedMessage\n                                    id='invitation-modal.discard-changes.title'\n                                    defaultMessage='Discard Changes'\n                                />\n                            }\n                            message={\n                                <FormattedMessage\n                                    id='invitation-modal.discard-changes.message'\n                                    defaultMessage='You have unsent invitations, are you sure you want to discard them?'\n                                />\n                            }\n                            confirmButtonText={\n                                <FormattedMessage\n                                    id='invitation-modal.discard-changes.button'\n                                    defaultMessage='Yes, Discard'\n                                />\n                            }\n                            modalClass='invitation-modal-confirm'\n                            onConfirm={this.state.confirmModal ? this.confirmClose : this.confirmBack}\n                            onCancel={this.state.confirmModal ? this.cancelClose : this.cancelBack}\n                        />\n                        {this.state.step === STEPS_INITIAL &&\n                            <InvitationModalInitialStep\n                                teamName={this.props.currentTeam.display_name}\n                                goToMembers={this.goToMembers}\n                                goToGuests={this.goToGuests}\n                            />\n                        }\n                        {this.state.step === STEPS_INVITE_MEMBERS &&\n                            <InvitationModalMembersStep\n                                teamName={this.props.currentTeam.display_name}\n                                inviteId={this.props.currentTeam.invite_id}\n                                searchProfiles={this.props.actions.searchProfiles}\n                                emailInvitationsEnabled={this.props.emailInvitationsEnabled}\n                                onSubmit={this.onMembersSubmit}\n                                onEdit={this.onEdit}\n                            />\n                        }\n                        {this.state.step === STEPS_INVITE_GUESTS &&\n                            <InvitationModalGuestsStep\n                                teamName={this.props.currentTeam.display_name}\n                                currentTeamId={this.props.currentTeam.id}\n                                myInvitableChannels={this.props.invitableChannels}\n                                searchProfiles={this.props.actions.searchProfiles}\n                                searchChannels={this.props.actions.searchChannels}\n                                defaultChannels={this.state.lastInviteChannels}\n                                defaultMessage={this.state.lastInviteMessage}\n                                emailInvitationsEnabled={this.props.emailInvitationsEnabled}\n                                onSubmit={this.onGuestsSubmit}\n                                onEdit={this.onEdit}\n                            />\n                        }\n                        {this.state.step === STEPS_INVITE_CONFIRM &&\n                            <InvitationModalConfirmStep\n                                teamName={this.props.currentTeam.display_name}\n                                currentTeamId={this.props.currentTeam.id}\n                                onDone={this.close}\n                                invitesType={this.state.invitesType}\n                                invitesSent={this.state.invitesSent}\n                                invitesNotSent={this.state.invitesNotSent}\n                            />\n                        }\n                    </div>\n                </FullScreenModal>\n            </RootPortal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getChannelsInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {haveIChannelPermission, haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getProfiles, searchProfiles as reduxSearchProfiles} from 'mattermost-redux/actions/users';\nimport {searchChannels as reduxSearchChannels} from 'mattermost-redux/actions/channels';\nimport {getTeam} from 'mattermost-redux/actions/teams';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {closeModal} from 'actions/views/modals';\nimport {isModalOpen} from 'selectors/views/modals';\nimport {ModalIdentifiers, Constants} from 'utils/constants';\nimport {sendMembersInvites, sendGuestsInvites} from 'actions/invite_actions';\n\nimport InvitationModal from './invitation_modal.jsx';\n\nconst searchProfiles = (term, options = {}) => {\n    if (!term) {\n        return getProfiles(0, 20, options);\n    }\n    return reduxSearchProfiles(term, options);\n};\n\nconst searchChannels = (teamId, term) => {\n    return reduxSearchChannels(teamId, term);\n};\n\nexport function mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n    const channels = getChannelsInCurrentTeam(state);\n    const currentTeam = getCurrentTeam(state);\n    const invitableChannels = channels.filter((channel) => {\n        if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n            return false;\n        }\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            return haveIChannelPermission(state, {channel: channel.id, team: currentTeam.id, permission: Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS});\n        }\n        return haveIChannelPermission(state, {channel: channel.id, team: currentTeam.id, permission: Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS});\n    });\n    const guestAccountsEnabled = config.EnableGuestAccounts === 'true';\n    const emailInvitationsEnabled = config.EnableEmailInvitations === 'true';\n    const isLicensed = license && license.IsLicensed === 'true';\n    const isGroupConstrained = Boolean(currentTeam.group_constrained);\n    const canInviteGuests = !isGroupConstrained && isLicensed && guestAccountsEnabled && haveITeamPermission(state, {team: currentTeam.id, permission: Permissions.INVITE_GUEST});\n\n    const canAddUsers = haveITeamPermission(state, {team: currentTeam.id, permission: Permissions.ADD_USER_TO_TEAM});\n    return {\n        invitableChannels,\n        currentTeam,\n        canInviteGuests,\n        canAddUsers,\n        emailInvitationsEnabled,\n        show: isModalOpen(state, ModalIdentifiers.INVITATION),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeModal: () => closeModal(ModalIdentifiers.INVITATION),\n            sendGuestsInvites,\n            sendMembersInvites,\n            searchProfiles,\n            searchChannels,\n            getTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InvitationModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport ProfilePicture from 'components/profile_picture';\nimport ToggleModalButtonRedux from 'components/toggle_modal_button_redux';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\nimport UserProfile from 'components/user_profile';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport EditIcon from 'components/widgets/icons/fa_edit_icon';\nimport InvitationModal from 'components/invitation_modal';\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\n\nimport {getMonthLong} from 'utils/i18n.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ChannelIntroMessage extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        channel: PropTypes.object.isRequired,\n        fullWidth: PropTypes.bool.isRequired,\n        locale: PropTypes.string.isRequired,\n        channelProfiles: PropTypes.array.isRequired,\n        enableUserCreation: PropTypes.bool,\n        isReadOnly: PropTypes.bool,\n        teamIsGroupConstrained: PropTypes.bool,\n    };\n\n    render() {\n        const {\n            currentUserId,\n            channel,\n            fullWidth,\n            locale,\n            enableUserCreation,\n            isReadOnly,\n            channelProfiles,\n            teamIsGroupConstrained,\n        } = this.props;\n\n        let centeredIntro = '';\n        if (!fullWidth) {\n            centeredIntro = 'channel-intro--centered';\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            return createDMIntroMessage(channel, centeredIntro);\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            return createGMIntroMessage(channel, centeredIntro, channelProfiles, currentUserId);\n        } else if (channel.name === Constants.DEFAULT_CHANNEL) {\n            return createDefaultIntroMessage(channel, centeredIntro, enableUserCreation, isReadOnly, teamIsGroupConstrained);\n        } else if (channel.name === Constants.OFFTOPIC_CHANNEL) {\n            return createOffTopicIntroMessage(channel, centeredIntro);\n        } else if (channel.type === Constants.OPEN_CHANNEL || channel.type === Constants.PRIVATE_CHANNEL) {\n            return createStandardIntroMessage(channel, centeredIntro, locale);\n        }\n        return null;\n    }\n}\n\nfunction createGMIntroMessage(channel, centeredIntro, profiles, currentUserId) {\n    const channelIntroId = 'channelIntro';\n\n    if (profiles.length > 0) {\n        const pictures = profiles.\n            filter((profile) => profile.id !== currentUserId).\n            map((profile) => (\n                <ProfilePicture\n                    key={'introprofilepicture' + profile.id}\n                    src={Utils.imageURLForUser(profile)}\n                    size='xl'\n                    userId={profile.id}\n                    username={profile.username}\n                />\n            ));\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img'>\n                    {pictures}\n                </div>\n                <p className='channel-intro-text'>\n                    <FormattedMarkdownMessage\n                        id='intro_messages.GM'\n                        defaultMessage='This is the start of your group message history with {names}.\\nMessages and files shared here are not shown to people outside this area.'\n                        values={{\n                            names: channel.display_name,\n                        }}\n                    />\n                </p>\n                {createSetHeaderButton(channel)}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro-text'>\n                <FormattedMessage\n                    id='intro_messages.group_message'\n                    defaultMessage='This is the start of your group message history with these teammates. Messages and files shared here are not shown to people outside this area.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createDMIntroMessage(channel, centeredIntro) {\n    var teammate = Utils.getDirectTeammate(channel.id);\n    const channelIntroId = 'channelIntro';\n\n    if (teammate) {\n        var teammateName = teammate.username;\n        if (teammate.nickname.length > 0) {\n            teammateName = teammate.nickname;\n        }\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img'>\n                    <ProfilePicture\n                        src={Utils.imageURLForUser(teammate)}\n                        size='xl'\n                        userId={teammate.id}\n                        username={teammate.username}\n                        hasMention={true}\n                    />\n                </div>\n                <div className='channel-intro-profile d-flex'>\n                    <UserProfile\n                        userId={teammate.id}\n                        disablePopover={false}\n                        hasMention={true}\n                    />\n                </div>\n                <p className='channel-intro-text'>\n                    <FormattedMarkdownMessage\n                        id='intro_messages.DM'\n                        defaultMessage='This is the start of your direct message history with {teammate}.\\nDirect messages and files shared here are not shown to people outside this area.'\n                        values={{\n                            teammate: teammateName,\n                        }}\n                    />\n                </p>\n                {teammate.is_bot ? null : createSetHeaderButton(channel)}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro-text'>\n                <FormattedMessage\n                    id='intro_messages.teammate'\n                    defaultMessage='This is the start of your direct message history with this teammate. Direct messages and files shared here are not shown to people outside this area.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createOffTopicIntroMessage(channel, centeredIntro) {\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const children = createSetHeaderButton(channel);\n    let setHeaderButton = null;\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    const channelInviteButton = createInviteChannelButton(channel);\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <h2 className='channel-intro__title'>\n                <FormattedMessage\n                    id='intro_messages.beginning'\n                    defaultMessage='Beginning of {name}'\n                    values={{\n                        name: channel.display_name,\n                    }}\n                />\n            </h2>\n            <p className='channel-intro__content'>\n                <FormattedMessage\n                    id='intro_messages.offTopic'\n                    defaultMessage='This is the start of {display_name}, a channel for non-work-related conversations.'\n                    values={{\n                        display_name: channel.display_name,\n                    }}\n                />\n            </p>\n            {channelInviteButton}\n            {setHeaderButton}\n        </div>\n    );\n}\n\nexport function createDefaultIntroMessage(channel, centeredIntro, enableUserCreation, isReadOnly, teamIsGroupConstrained) {\n    let teamInviteLink = null;\n\n    if (!isReadOnly && enableUserCreation) {\n        teamInviteLink = (\n            <TeamPermissionGate\n                teamId={channel.team_id}\n                permissions={[Permissions.INVITE_USER]}\n            >\n                <TeamPermissionGate\n                    teamId={channel.team_id}\n                    permissions={[Permissions.ADD_USER_TO_TEAM]}\n                >\n                    {!teamIsGroupConstrained &&\n                    <FormattedMessage\n                        id='intro_messages.inviteOthers'\n                        defaultMessage='Invite others to this team'\n                    >\n                        {(message) => (\n                            <ToggleModalButtonRedux\n                                accessibilityLabel={message}\n                                id='introTextInvite'\n                                className='intro-links color--link cursor--pointer'\n                                modalId={ModalIdentifiers.INVITATION}\n                                dialogType={InvitationModal}\n                            >\n                                <FormattedMessage\n                                    id='generic_icons.add'\n                                    defaultMessage='Add Icon'\n                                >\n                                    {(title) => (\n                                        <i\n                                            className='fas fa-user-plus'\n                                            title={title}\n                                        />\n                                    )}\n                                </FormattedMessage>\n                                {message}\n                            </ToggleModalButtonRedux>\n                        )}\n                    </FormattedMessage>\n                    }\n                    {teamIsGroupConstrained &&\n                    <ToggleModalButton\n                        className='intro-links color--link'\n                        dialogType={AddGroupsToTeamModal}\n                        dialogProps={{channel}}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.add'\n                            defaultMessage='Add Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fas fa-user-plus'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='intro_messages.addGroupsToTeam'\n                            defaultMessage='Add other groups to this team'\n                        />\n                    </ToggleModalButton>\n                    }\n                </TeamPermissionGate>\n            </TeamPermissionGate>\n        );\n    }\n\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n\n    let setHeaderButton = null;\n    if (!isReadOnly) {\n        const children = createSetHeaderButton(channel);\n        if (children) {\n            setHeaderButton = (\n                <ChannelPermissionGate\n                    teamId={channel.team_id}\n                    channelId={channel.id}\n                    permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n                >\n                    {children}\n                </ChannelPermissionGate>\n            );\n        }\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <h2 className='channel-intro__title'>\n                <FormattedMessage\n                    id='intro_messages.beginning'\n                    defaultMessage='Beginning of {name}'\n                    values={{\n                        name: channel.display_name,\n                    }}\n                />\n            </h2>\n            <p className='channel-intro__content'>\n                {!isReadOnly &&\n                    <FormattedMarkdownMessage\n                        id='intro_messages.default'\n                        defaultMessage='**Welcome to {display_name}!**\\n \\nPost messages here that you want everyone to see. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                }\n                {isReadOnly &&\n                    <FormattedMarkdownMessage\n                        id='intro_messages.readonly.default'\n                        defaultMessage='**Welcome to {display_name}!**\\n \\nMessages can only be posted by system admins. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                }\n            </p>\n            {teamInviteLink}\n            {setHeaderButton}\n            <br/>\n        </div>\n    );\n}\n\nfunction createStandardIntroMessage(channel, centeredIntro, locale) {\n    var uiName = channel.display_name;\n    var creatorName = Utils.getDisplayNameByUserId(channel.creator_id);\n    var memberMessage;\n    const channelIsArchived = channel.delete_at !== 0;\n\n    if (channelIsArchived) {\n        memberMessage = '';\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.onlyInvited'\n                defaultMessage=' Only invited members can see this private channel.'\n            />\n        );\n    } else {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.anyMember'\n                defaultMessage=' Any member can join and read this channel.'\n            />\n        );\n    }\n\n    const date = (\n        <FormattedDate\n            value={channel.create_at}\n            month={getMonthLong(locale)}\n            day='2-digit'\n            year='numeric'\n        />\n    );\n\n    var createMessage;\n    if (creatorName === '') {\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreatorPrivate'\n                    defaultMessage='This is the start of the {name} private channel, created on {date}.'\n                    values={{name: (uiName), date}}\n                />\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreator'\n                    defaultMessage='This is the start of the {name} channel, created on {date}.'\n                    values={{name: (uiName), date}}\n                />\n            );\n        }\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creatorPrivate'\n                    defaultMessage='This is the start of the {name} private channel, created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    } else if (channel.type === Constants.OPEN_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creator'\n                    defaultMessage='This is the start of the {name} channel, created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    }\n\n    var purposeMessage = '';\n    if (channel.purpose && channel.purpose !== '') {\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            purposeMessage = (\n                <span>\n                    <FormattedMessage\n                        id='intro_messages.purposePrivate'\n                        defaultMessage=\" This private channel's purpose is: {purpose}\"\n                        values={{purpose: channel.purpose}}\n                    />\n                </span>\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            purposeMessage = (\n                <span>\n                    <FormattedMessage\n                        id='intro_messages.purpose'\n                        defaultMessage=\" This channel's purpose is: {purpose}\"\n                        values={{purpose: channel.purpose}}\n                    />\n                </span>\n            );\n        }\n    }\n\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    let setHeaderButton = null;\n    const children = createSetHeaderButton(channel);\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    const channelInviteButton = createInviteChannelButton(channel);\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <h2 className='channel-intro__title'>\n                <FormattedMessage\n                    id='intro_messages.beginning'\n                    defaultMessage='Beginning of {name}'\n                    values={{\n                        name: (uiName),\n                    }}\n                />\n            </h2>\n            <p className='channel-intro__content'>\n                {createMessage}\n                {memberMessage}\n                {purposeMessage}\n                <br/>\n            </p>\n            {channelInviteButton}\n            {setHeaderButton}\n        </div>\n    );\n}\n\nfunction createInviteChannelButton(channel) {\n    const modal = channel.group_constrained ? AddGroupsToChannelModal : ChannelInviteModal;\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    return (\n        <ChannelPermissionGate\n            channelId={channel.id}\n            teamId={channel.team_id}\n            permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS]}\n        >\n            <ToggleModalButton\n                className='intro-links color--link'\n                dialogType={modal}\n                dialogProps={{channel}}\n            >\n                <FormattedMessage\n                    id='generic_icons.add'\n                    defaultMessage='Add Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-user-plus'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n                {isPrivate && channel.group_constrained &&\n                    <FormattedMessage\n                        id='intro_messages.addGroups'\n                        defaultMessage='Add groups to this private channel'\n                    />}\n                {isPrivate && !channel.group_constrained &&\n                    <FormattedMessage\n                        id='intro_messages.invitePrivate'\n                        defaultMessage='Invite others to this private channel'\n                    />}\n                {!isPrivate &&\n                    <FormattedMessage\n                        id='intro_messages.invite'\n                        defaultMessage='Invite others to this channel'\n                    />}\n            </ToggleModalButton>\n        </ChannelPermissionGate>\n    );\n}\n\nfunction createSetHeaderButton(channel) {\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n\n    return (\n        <FormattedMessage\n            id='intro_messages.setHeader'\n            defaultMessage='Set a Header'\n        >\n            {(message) => (\n                <ToggleModalButtonRedux\n                    modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n                    accessibilityLabel={message}\n                    className={'intro-links color--link'}\n                    dialogType={EditChannelHeaderModal}\n                    dialogProps={{channel}}\n                >\n                    <EditIcon/>\n                    {message}\n                </ToggleModalButtonRedux>\n            )}\n        </FormattedMessage>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isCurrentChannelReadOnly, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getProfilesInCurrentChannel, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {Preferences} from 'utils/constants';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ChannelIntroMessage from './channel_intro_message.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const enableUserCreation = config.EnableUserCreation === 'true';\n    const isReadOnly = isCurrentChannelReadOnly(state);\n    const team = getCurrentTeam(state);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        channel: getCurrentChannel(state),\n        locale: getCurrentLocale(state),\n        channelProfiles: getProfilesInCurrentChannel(state),\n        enableUserCreation,\n        isReadOnly,\n        fullWidth: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n        teamIsGroupConstrained: Boolean(team.group_constrained),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelIntroMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as PostListUtils from 'mattermost-redux/utils/post_list';\n\nimport CombinedUserActivityPost from 'components/post_view/combined_user_activity_post';\nimport Post from 'components/post_view/post';\nimport DateSeparator from 'components/post_view/date_separator';\nimport NewMessageSeparator from 'components/post_view/new_message_separator/new_message_separator';\nimport ChannelIntroMessage from 'components/post_view/channel_intro_message/';\nimport {PostListRowListIds} from 'utils/constants';\n\nexport default class PostListRow extends React.PureComponent {\n    static propTypes = {\n        listId: PropTypes.string.isRequired,\n        previousListId: PropTypes.string,\n        fullWidth: PropTypes.bool,\n        shouldHighlight: PropTypes.bool,\n        loadOlderPosts: PropTypes.func,\n        loadNewerPosts: PropTypes.func,\n        togglePostMenu: PropTypes.func,\n    }\n\n    render() {\n        const {listId, previousListId} = this.props;\n\n        if (PostListUtils.isDateLine(listId)) {\n            const date = PostListUtils.getDateForDateLine(listId);\n\n            return (\n                <DateSeparator\n                    key={date}\n                    date={date}\n                />\n            );\n        }\n\n        if (PostListUtils.isStartOfNewMessages(listId)) {\n            return (\n                <NewMessageSeparator separatorId={listId}/>\n            );\n        }\n\n        if (listId === PostListRowListIds.CHANNEL_INTRO_MESSAGE) {\n            return (\n                <ChannelIntroMessage/>\n            );\n        }\n\n        if (listId === PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER || listId === PostListRowListIds.LOAD_NEWER_MESSAGES_TRIGGER) {\n            return (\n                <button\n                    className='more-messages-text theme style--none color--link'\n                    onClick={listId === PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER ? this.props.loadOlderPosts : this.props.loadNewerPosts}\n                >\n                    <FormattedMessage\n                        id='posts_view.loadMore'\n                        defaultMessage='Load More Messages'\n                    />\n                </button>\n            );\n        }\n\n        if (listId === PostListRowListIds.OLDER_MESSAGES_LOADER || listId === PostListRowListIds.NEWER_MESSAGES_LOADER) {\n            return (\n                <div\n                    className='loading-screen'\n                >\n                    <div className='loading__content'>\n                        <div className='round round-1'/>\n                        <div className='round round-2'/>\n                        <div className='round round-3'/>\n                    </div>\n                </div>\n            );\n        }\n\n        const postProps = {\n            previousPostId: previousListId,\n            shouldHighlight: this.props.shouldHighlight,\n            togglePostMenu: this.props.togglePostMenu,\n        };\n\n        if (PostListUtils.isCombinedUserActivityPost(listId)) {\n            return (\n                <CombinedUserActivityPost\n                    combinedId={listId}\n                    {...postProps}\n                />\n            );\n        }\n\n        return (\n            <Post\n                postId={listId}\n                {...postProps}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport PostListRow from './post_list_row.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        post: ownProps.post,\n        channel: ownProps.channel,\n    };\n}\n\nexport default connect(mapStateToProps)(PostListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ScrollToBottomIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.arrow.down'\n                    defaultMessage='Down Arrow Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            x='0px'\n                            y='0px'\n                            viewBox='-239 239 21 23'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M-239,241.4l2.4-2.4l8.1,8.2l8.1-8.2l2.4,2.4l-10.5,10.6L-239,241.4z M-228.5,257.2l8.1-8.2l2.4,2.4l-10.5,10.6l-10.5-10.6 l2.4-2.4L-228.5,257.2z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    enableBackground: 'new -239 239 21 23',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ScrollToBottomIcon from 'components/widgets/icons/scroll_to_bottom_icon';\n\nexport default class ScrollToBottomArrows extends React.PureComponent {\n    static propTypes = {\n        isScrolling: PropTypes.bool.isRequired,\n        atBottom: PropTypes.bool,\n        onClick: PropTypes.func.isRequired,\n    };\n\n    render() {\n        // only show on mobile\n        if ($(window).width() > 768) {\n            return null;\n        }\n\n        let className = 'post-list__arrows';\n        if (this.props.isScrolling && this.props.atBottom === false) {\n            className += ' scrolling';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.props.onClick}\n            >\n                <ScrollToBottomIcon/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport UnreadBelowIcon from 'components/widgets/icons/unread_below_icon';\nimport CloseIcon from 'components/widgets/icons/close_icon';\nimport Constants from 'utils/constants';\n\nimport './toast.scss';\n\nexport default class Toast extends React.PureComponent {\n    static propTypes = {\n        onClick: PropTypes.func,\n        onClickMessage: PropTypes.string,\n        onDismiss: PropTypes.func,\n        children: PropTypes.element,\n        show: PropTypes.bool.isRequired,\n        showActions: PropTypes.bool, //used for showing jump actions\n        width: PropTypes.number,\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    handleDismiss = () => {\n        if (typeof this.props.onDismiss == 'function') {\n            this.props.onDismiss();\n        }\n    }\n\n    render() {\n        let toastClass = 'toast';\n        const {show} = this.props;\n        if (show) {\n            toastClass += ' toast__visible';\n        }\n\n        let toastActionClass = 'toast__message';\n        if (this.props.showActions) {\n            toastActionClass += ' toast__pointer';\n        }\n\n        const jumpSection = () => {\n            return (\n                <div\n                    className='toast__jump'\n                >\n                    <UnreadBelowIcon/>\n                    {this.props.width > Constants.MOBILE_SCREEN_WIDTH && this.props.onClickMessage}\n                </div>\n            );\n        };\n\n        let closeTooltip = (<div/>);\n        if (this.props.showActions && show) {\n            closeTooltip = (\n                <Tooltip id='toast-close__tooltip'>\n                    <FormattedMessage\n                        id='general_button.close'\n                        defaultMessage='Close'\n                    />\n                    <div className='tooltip__shortcut--txt'>\n                        <FormattedMessage\n                            id='general_button.esc'\n                            defaultMessage='esc'\n                        />\n                    </div>\n                </Tooltip>\n            );\n        }\n\n        return (\n            <div className={toastClass}>\n                <div\n                    className={toastActionClass}\n                    onClick={this.props.showActions ? this.props.onClick : null}\n                >\n                    {this.props.showActions && jumpSection()}\n                    {this.props.children}\n                </div>\n                <div\n                    className='toast__dismiss'\n                    onClick={this.handleDismiss}\n                >\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='bottom'\n                        overlay={closeTooltip}\n                    >\n                        <CloseIcon\n                            className='close-btn'\n                            id='dismissToast'\n                        />\n                    </OverlayTrigger>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedDate, injectIntl} from 'react-intl';\n\nimport UnreadToast from 'components/toast/toast';\nimport {isIdNotPost, getNewMessageIndex} from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\nimport LocalDateTime from 'components/local_date_time';\n\nconst TOAST_TEXT_COLLAPSE_WIDTH = 500;\n\nclass ToastWrapper extends React.PureComponent {\n    static propTypes = {\n        unreadCountInChannel: PropTypes.number,\n        newRecentMessagesCount: PropTypes.number,\n        channelMarkedAsUnread: PropTypes.bool,\n        atLatestPost: PropTypes.bool,\n        postListIds: PropTypes.array,\n        latestPostTimeStamp: PropTypes.number,\n        atBottom: PropTypes.bool,\n        lastViewedBottom: PropTypes.number,\n        width: PropTypes.number,\n        lastViewedAt: PropTypes.number,\n        updateNewMessagesAtInChannel: PropTypes.func,\n        scrollToNewMessage: PropTypes.func,\n        scrollToLatestMessages: PropTypes.func,\n        updateLastViewedBottomAt: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unreadCountInChannel: props.unreadCountInChannel,\n        };\n    }\n\n    static countNewMessages = (postListIds) => {\n        const mark = getNewMessageIndex(postListIds);\n        if (mark <= 0) {\n            return 0;\n        }\n        const newMessages = postListIds.slice(0, mark);\n        return newMessages.filter((id) => !isIdNotPost(id)).length;\n    }\n\n    static getDerivedStateFromProps(props, prevState) {\n        let {showUnreadToast, showNewMessagesToast} = prevState;\n        let unreadCount;\n\n        if (props.atLatestPost) {\n            unreadCount = ToastWrapper.countNewMessages(props.postListIds);\n        } else if (props.channelMarkedAsUnread) {\n            unreadCount = prevState.unreadCountInChannel;\n        } else {\n            unreadCount = prevState.unreadCountInChannel + props.newRecentMessagesCount;\n        }\n\n        // show unread toast on mount when channel is not at bottom and unread count greater than 0\n        if (typeof showUnreadToast === 'undefined' && props.atBottom !== null) {\n            showUnreadToast = unreadCount > 0 && !props.atBottom;\n        }\n\n        // show unread toast when a channel is marked as unread\n        if (props.channelMarkedAsUnread && !props.atBottom && !prevState.channelMarkedAsUnread && !prevState.showUnreadToast) {\n            showUnreadToast = true;\n        }\n\n        // show unread toast when a channel is remarked as unread using the change in lastViewedAt\n        // lastViewedAt changes only if a channel is remarked as unread in channelMarkedAsUnread state\n        if (props.channelMarkedAsUnread && props.lastViewedAt !== prevState.lastViewedAt && !props.atBottom) {\n            showUnreadToast = true;\n        }\n\n        if (!showUnreadToast && unreadCount > 0 && !props.atBottom && (props.lastViewedBottom < props.latestPostTimeStamp)) {\n            showNewMessagesToast = true;\n        }\n\n        if (!unreadCount) {\n            showNewMessagesToast = false;\n            showUnreadToast = false;\n        }\n\n        return {\n            unreadCount,\n            showUnreadToast,\n            showNewMessagesToast,\n            lastViewedAt: props.lastViewedAt,\n            channelMarkedAsUnread: props.channelMarkedAsUnread,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        document.addEventListener('keydown', this.handleShortcut);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.atBottom && this.props.atBottom && this.props.atLatestPost) {\n            if (this.state.showNewMessagesToast) {\n                this.hideNewMessagesToast(false);\n            }\n\n            if (this.state.showUnreadToast) {\n                this.hideUnreadToast();\n            }\n        }\n\n        const prevPostsCount = prevProps.postListIds.length;\n        const presentPostsCount = this.props.postListIds.length;\n        const postsAddedAtBottom = presentPostsCount !== prevPostsCount && this.props.postListIds[0] !== prevProps.postListIds[0];\n        const notBottomWithLatestPosts = !this.props.atBottom && this.props.atLatestPost && presentPostsCount > 0;\n\n        //Marking existing messages as read based on last time user reached to the bottom\n        //This moves the new message indicator to the latest posts and keeping in sync with the toast count\n        if (postsAddedAtBottom && notBottomWithLatestPosts && !this.state.showUnreadToast) {\n            this.props.updateNewMessagesAtInChannel(this.props.lastViewedBottom);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n    }\n\n    handleShortcut = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ESCAPE)) {\n            if (this.state.showUnreadToast) {\n                this.hideUnreadToast();\n            } else if (this.state.showNewMessagesToast) {\n                this.hideNewMessagesToast();\n            }\n        }\n    };\n\n    hideUnreadToast = () => {\n        if (this.state.showUnreadToast) {\n            this.setState({\n                showUnreadToast: false,\n            });\n        }\n    }\n\n    hideNewMessagesToast = (updateLastViewedBottomAt = true) => {\n        if (this.state.showNewMessagesToast) {\n            this.setState({\n                showNewMessagesToast: false,\n            });\n            if (updateLastViewedBottomAt) {\n                this.props.updateLastViewedBottomAt();\n            }\n        }\n    }\n\n    newMessagesToastText = (count, since) => {\n        if (this.props.width > TOAST_TEXT_COLLAPSE_WIDTH && typeof since !== 'undefined') {\n            return (\n                <FormattedMessage\n                    id='postlist.toast.newMessagesSince'\n                    defaultMessage={'{count, number} new {count, plural, one {message} other {messages}} since {date} at {time}'}\n                    values={{\n                        count,\n                        date: (\n                            <FormattedDate\n                                value={since}\n                                weekday='short'\n                                day='2-digit'\n                                month='short'\n                            />\n                        ),\n                        time: (\n                            <LocalDateTime\n                                eventTime={since}\n                            />\n                        )\n                    }}\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='postlist.toast.newMessages'\n                defaultMessage={'{count, number} new {count, plural, one {message} other {messages}}'}\n                values={{count}}\n            />\n        );\n    }\n\n    scrollToNewMessage = () => {\n        this.props.scrollToNewMessage();\n        this.props.updateLastViewedBottomAt();\n        this.hideNewMessagesToast();\n    }\n\n    scrollToLatestMessages = () => {\n        this.props.scrollToLatestMessages();\n        this.hideUnreadToast();\n    }\n\n    render() {\n        let toastProps = {\n            countUnread: this.state.unreadCount,\n            show: false,\n            width: this.props.width,\n        };\n\n        if (this.state.showUnreadToast) {\n            toastProps = {\n                ...toastProps,\n                onDismiss: this.hideUnreadToast,\n                onClick: this.props.scrollToLatestMessages,\n                onClickMessage: Utils.localizeMessage('postlist.toast.scrollToBottom', 'Jump to recents'),\n                show: true,\n                showActions: !this.props.atLatestPost || (this.props.atLatestPost && !this.props.atBottom),\n            };\n        } else if (this.state.showNewMessagesToast) {\n            toastProps = {\n                ...toastProps,\n                onDismiss: this.hideNewMessagesToast,\n                onClick: this.scrollToNewMessage,\n                onClickMessage: Utils.localizeMessage('postlist.toast.scrollToLatest', 'Jump to new messages'),\n                show: true,\n                showActions: !this.props.atLatestPost || (this.props.atLatestPost && !this.props.atBottom),\n            };\n        }\n\n        return (\n            <UnreadToast {...toastProps}>\n                {this.newMessagesToastText(this.state.unreadCount, this.props.lastViewedAt)}\n            </UnreadToast>\n        );\n    }\n}\n\nexport default injectIntl(ToastWrapper);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {Posts} from 'mattermost-redux/constants';\nimport {getAllPosts, getPostIdsInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\nimport {countCurrentChannelUnreadMessages, isManuallyUnread} from 'mattermost-redux/selectors/entities/channels';\n\nimport ToastWrapper from './toast_wrapper.jsx';\n\nexport function makeCountUnreadsBelow() {\n    return createSelector(\n        getAllPosts,\n        getCurrentUserId,\n        (state, postIds) => postIds,\n        (state, postIds, lastViewedBottom) => lastViewedBottom,\n        (allPosts, currentUserId, postIds, lastViewedBottom) => {\n            if (!postIds) {\n                return 0;\n            }\n\n            // Count the number of new posts made by other users that haven't been deleted\n            return postIds.map((id) => allPosts[id]).filter((post) => {\n                return post &&\n                    post.user_id !== currentUserId &&\n                    post.state !== Posts.POST_DELETED &&\n                    post.create_at > lastViewedBottom;\n            }).length;\n        }\n    );\n}\n\n/* This connected component is written mainly for maintaining the unread count to be passed to the toast\n   Unread count logic:\n   * If channel is at the latest set of posts:\n      Unread count is the Number of posts below new message line\n   * if channel is not at the latest set of posts:\n      1. UnreadCount + any recent messages in the latest chunk.\n      2. If channel was marked as unread.\n        * Unread count of channel alone.\n*/\n\nfunction makeMapStateToProps() {\n    const countUnreadsBelow = makeCountUnreadsBelow();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n    return function mapStateToProps(state, ownProps) {\n        let newRecentMessagesCount = 0;\n        const channelMarkedAsUnread = isManuallyUnread(state, ownProps.channelId);\n        const lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n        if (!ownProps.atLatestPost) {\n            let postIds = getPostIdsInChannel(state, ownProps.channelId);\n            if (postIds) {\n                postIds = preparePostIdsForPostList(state, {postIds, lastViewedAt, channelId: ownProps.channelId});\n            }\n            newRecentMessagesCount = countUnreadsBelow(state, postIds, lastViewedAt);\n        }\n\n        return {\n            lastViewedAt,\n            newRecentMessagesCount,\n            unreadCountInChannel: countCurrentChannelUnreadMessages(state),\n            channelMarkedAsUnread,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(ToastWrapper);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {DynamicSizeList} from 'react-window';\nimport {injectIntl} from 'react-intl';\n\nimport {isDateLine, isStartOfNewMessages} from 'mattermost-redux/utils/post_list';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport Constants, {PostListRowListIds, EventTypes, PostRequestTypes} from 'utils/constants';\nimport DelayedAction from 'utils/delayed_action';\nimport {getPreviousPostId, getLatestPostId, getNewMessageIndex} from 'utils/post_utils.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FloatingTimestamp from 'components/post_view/floating_timestamp';\nimport PostListRow from 'components/post_view/post_list_row';\nimport ScrollToBottomArrows from 'components/post_view/scroll_to_bottom_arrows';\nimport ToastWrapper from 'components/toast_wrapper';\n\nconst OVERSCAN_COUNT_BACKWARD = window.OVERSCAN_COUNT_BACKWARD || 80; // Exposing the value for PM to test will be removed soon\nconst OVERSCAN_COUNT_FORWARD = window.OVERSCAN_COUNT_FORWARD || 80; // Exposing the value for PM to test will be removed soon\nconst HEIGHT_TRIGGER_FOR_MORE_POSTS = window.HEIGHT_TRIGGER_FOR_MORE_POSTS || 1000; // Exposing the value for PM to test will be removed soon\nconst BUFFER_TO_BE_CONSIDERED_BOTTOM = 10;\n\nconst MAXIMUM_POSTS_FOR_SLICING = {\n    channel: 50,\n    permalink: 100,\n};\n\nconst postListStyle = {\n    padding: '14px 0px 7px',\n};\n\nconst virtListStyles = {\n    position: 'absolute',\n    bottom: '0',\n    maxHeight: '100%',\n};\n\nconst OFFSET_TO_SHOW_TOAST = -50;\n\nclass PostList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Array of Ids in the channel including date separators, new message indicator, more messages loader,\n         * manual load messages trigger and postId in the order of newest to oldest for populating virtual list rows\n         */\n        postListIds: PropTypes.array.isRequired,\n\n        /**\n         * Set to focus this post\n         */\n        focusedPostId: PropTypes.string,\n\n        /**\n         * The current channel id\n         */\n        channelId: PropTypes.string.isRequired,\n\n        /**\n         * Used for disabling auto retry of posts and enabling manual link for loading posts\n         */\n        autoRetryEnable: PropTypes.bool,\n\n        /**\n         * used for populating header, scroll correction and disabling triggering loadOlderPosts\n         */\n        atOldestPost: PropTypes.bool,\n\n        /**\n         * used for disabling triggering loadNewerPosts\n         */\n        atLatestPost: PropTypes.bool,\n\n        intl: intlShape.isRequired,\n\n        latestPostTimeStamp: PropTypes.number,\n\n        latestAriaLabelFunc: PropTypes.func,\n\n        lastViewedAt: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to get older posts in the channel\n             */\n            loadOlderPosts: PropTypes.func.isRequired,\n\n            /**\n             * Function to get newer posts in the channel\n             */\n            loadNewerPosts: PropTypes.func.isRequired,\n\n            /**\n             * Function used for autoLoad of posts incase screen is not filled with posts\n             */\n            canLoadMorePosts: PropTypes.func.isRequired,\n\n            /**\n             * Function to check and set if app is in mobile view\n             */\n            checkAndSetMobileView: PropTypes.func.isRequired,\n\n            /**\n             * Function to change the post selected for postList\n             */\n            changeUnreadChunkTimeStamp: PropTypes.func.isRequired,\n\n            updateNewMessagesAtInChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const channelIntroMessage = PostListRowListIds.CHANNEL_INTRO_MESSAGE;\n        const isMobile = Utils.isMobile();\n        this.state = {\n            isScrolling: false,\n            isMobile,\n\n            /* Intentionally setting null so that toast can determine when the first time this state is defined */\n            atBottom: null,\n            lastViewedBottom: Date.now(),\n            postListIds: [channelIntroMessage],\n            topPostId: '',\n            postMenuOpened: false,\n            dynamicListStyle: {\n                willChange: 'transform',\n            },\n        };\n\n        this.listRef = React.createRef();\n        this.postListRef = React.createRef();\n        if (isMobile) {\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n\n        this.initRangeToRender = this.props.focusedPostId ? [0, MAXIMUM_POSTS_FOR_SLICING.permalink] : [0, MAXIMUM_POSTS_FOR_SLICING.channel];\n\n        let postIndex = 0;\n        if (props.focusedPostId) {\n            postIndex = this.props.postListIds.findIndex((postId) => postId === this.props.focusedPostId);\n        } else {\n            postIndex = this.getNewMessagesSeparatorIndex(props.postListIds);\n        }\n\n        const maxPostsForSlicing = props.focusedPostId ? MAXIMUM_POSTS_FOR_SLICING.permalink : MAXIMUM_POSTS_FOR_SLICING.channel;\n        this.initRangeToRender = [\n            Math.max(postIndex - 30, 0),\n            Math.max(postIndex + 30, Math.min(props.postListIds.length - 1, maxPostsForSlicing)),\n        ];\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.props.actions.checkAndSetMobileView();\n\n        window.addEventListener('resize', this.handleWindowResize);\n        EventEmitter.addListener(EventTypes.POST_LIST_SCROLL_TO_BOTTOM, this.scrollToLatestMessages);\n    }\n\n    getSnapshotBeforeUpdate(prevProps) {\n        if (this.postListRef && this.postListRef.current) {\n            const postsAddedAtTop = this.props.postListIds && this.props.postListIds.length !== prevProps.postListIds.length && this.props.postListIds[0] === prevProps.postListIds[0];\n            const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n            if ((postsAddedAtTop || channelHeaderAdded) && this.state.atBottom === false) {\n                const postListNode = this.postListRef.current;\n                const previousScrollTop = postListNode.parentElement.scrollTop;\n                const previousScrollHeight = postListNode.scrollHeight;\n\n                return {\n                    previousScrollTop,\n                    previousScrollHeight,\n                };\n            }\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.postListRef.current) {\n            return;\n        }\n        const prevPostsCount = prevProps.postListIds.length;\n        const presentPostsCount = this.props.postListIds.length;\n\n        if (snapshot) {\n            const postlistScrollHeight = this.postListRef.current.scrollHeight;\n            const postsAddedAtTop = presentPostsCount !== prevPostsCount && this.props.postListIds[0] === prevProps.postListIds[0];\n            const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n            if ((postsAddedAtTop || channelHeaderAdded) && !this.state.atBottom && snapshot) {\n                const scrollValue = snapshot.previousScrollTop + (postlistScrollHeight - snapshot.previousScrollHeight);\n                if (scrollValue !== 0 && (scrollValue - snapshot.previousScrollTop) !== 0) {\n                    //true as third param so chrome can use animationFrame when correcting scroll\n                    this.listRef.current.scrollTo(scrollValue, scrollValue - snapshot.previousScrollTop, true);\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        window.removeEventListener('resize', this.handleWindowResize);\n        EventEmitter.removeListener(EventTypes.POST_LIST_SCROLL_TO_BOTTOM, this.scrollToLatestMessages);\n    }\n\n    static getDerivedStateFromProps(props) {\n        const postListIds = props.postListIds;\n        let newPostListIds;\n\n        if (props.atOldestPost) {\n            newPostListIds = [...postListIds, PostListRowListIds.CHANNEL_INTRO_MESSAGE];\n        } else if (props.autoRetryEnable) {\n            newPostListIds = [...postListIds, PostListRowListIds.OLDER_MESSAGES_LOADER];\n        } else {\n            newPostListIds = [...postListIds, PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER];\n        }\n\n        if (!props.atLatestPost) {\n            if (props.autoRetryEnable) {\n                newPostListIds = [PostListRowListIds.NEWER_MESSAGES_LOADER, ...newPostListIds];\n            } else {\n                newPostListIds = [PostListRowListIds.LOAD_NEWER_MESSAGES_TRIGGER, ...newPostListIds];\n            }\n        }\n\n        return {\n            postListIds: newPostListIds,\n        };\n    }\n\n    getNewMessagesSeparatorIndex = (postListIds) => {\n        return postListIds.findIndex(\n            (item) => item.indexOf(PostListRowListIds.START_OF_NEW_MESSAGES) === 0\n        );\n    }\n\n    handleWindowResize = () => {\n        this.props.actions.checkAndSetMobileView();\n        const isMobile = Utils.isMobile();\n        if (isMobile !== this.state.isMobile) {\n            const dynamicListStyle = this.state.dynamicListStyle;\n            if (this.state.postMenuOpened) {\n                if (!isMobile && dynamicListStyle.willChange === 'unset') {\n                    dynamicListStyle.willChange = 'transform';\n                } else if (isMobile && dynamicListStyle.willChange === 'transform') {\n                    dynamicListStyle.willChange = 'unset';\n                }\n            }\n\n            this.setState({\n                isMobile,\n                dynamicListStyle,\n            });\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n    }\n\n    togglePostMenu = (opened) => {\n        const dynamicListStyle = this.state.dynamicListStyle;\n        if (this.state.isMobile) {\n            dynamicListStyle.willChange = opened ? 'unset' : 'transform';\n        }\n\n        this.setState({\n            postMenuOpened: opened,\n            dynamicListStyle,\n        });\n    };\n\n    renderRow = ({data, itemId, style}) => {\n        const index = data.indexOf(itemId);\n        let className = '';\n        const basePaddingClass = 'post-row__padding';\n        const previousItemId = (index !== -1 && index < data.length - 1) ? data[index + 1] : '';\n        const nextItemId = (index > 0 && index < data.length) ? data[index - 1] : '';\n\n        if (isDateLine(nextItemId) || isStartOfNewMessages(nextItemId)) {\n            className += basePaddingClass + ' bottom';\n        }\n\n        if (isDateLine(previousItemId) || isStartOfNewMessages(previousItemId)) {\n            if (className.includes(basePaddingClass)) {\n                className += ' top';\n            } else {\n                className += basePaddingClass + ' top';\n            }\n        }\n\n        return (\n            <div\n                style={style}\n                className={className}\n            >\n                <PostListRow\n                    listId={itemId}\n                    previousListId={getPreviousPostId(data, index)}\n                    shouldHighlight={itemId === this.props.focusedPostId}\n                    loadOlderPosts={this.props.actions.loadOlderPosts}\n                    loadNewerPosts={this.props.actions.loadNewerPosts}\n                    togglePostMenu={this.togglePostMenu}\n                />\n            </div>\n        );\n    };\n\n    itemKey = (index) => {\n        const {postListIds} = this.state;\n        return postListIds[index] ? postListIds[index] : index;\n    }\n\n    scrollToFailed = (index) => {\n        if (index === 0) {\n            this.props.actions.changeUnreadChunkTimeStamp('');\n        } else {\n            this.props.actions.changeUnreadChunkTimeStamp(this.props.lastViewedAt);\n        }\n    }\n\n    onScroll = ({scrollDirection, scrollOffset, scrollUpdateWasRequested, clientHeight, scrollHeight}) => {\n        if (scrollHeight <= 0) {\n            return;\n        }\n\n        const didUserScrollBackwards = scrollDirection === 'backward' && !scrollUpdateWasRequested;\n        const didUserScrollForwards = scrollDirection === 'forward' && !scrollUpdateWasRequested;\n        const isOffsetWithInRange = scrollOffset < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n        const offsetFromBottom = (scrollHeight - clientHeight) - scrollOffset < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n\n        if (didUserScrollBackwards && isOffsetWithInRange && !this.props.atOldestPost) {\n            this.props.actions.loadOlderPosts();\n        } else if (didUserScrollForwards && offsetFromBottom && !this.props.atLatestPost) {\n            this.props.actions.loadNewerPosts();\n        }\n\n        if (this.state.isMobile) {\n            if (!this.state.isScrolling) {\n                this.setState({\n                    isScrolling: true,\n                });\n            }\n\n            if (this.scrollStopAction) {\n                this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n            }\n        }\n\n        this.checkBottom(scrollOffset, scrollHeight, clientHeight);\n\n        if (scrollUpdateWasRequested) { //if scroll change is programatically requested i.e by calling scrollTo\n            //This is a private method on virtlist\n            const postsRenderedRange = this.listRef.current._getRangeToRender(); //eslint-disable-line no-underscore-dangle\n\n            // postsRenderedRange[3] is the visibleStopIndex which is post at the bottom of the screen\n            if (postsRenderedRange[3] <= 1 && !this.props.atLatestPost) {\n                this.props.actions.canLoadMorePosts(PostRequestTypes.AFTER_ID);\n            }\n        }\n    }\n\n    checkBottom = (scrollOffset, scrollHeight, clientHeight) => {\n        this.updateAtBottom(this.isAtBottom(scrollOffset, scrollHeight, clientHeight));\n    }\n\n    isAtBottom = (scrollOffset, scrollHeight, clientHeight) => {\n        // Calculate how far the post list is from being scrolled to the bottom\n        const offsetFromBottom = scrollHeight - clientHeight - scrollOffset;\n\n        return offsetFromBottom <= BUFFER_TO_BE_CONSIDERED_BOTTOM && scrollHeight > 0;\n    }\n\n    updateAtBottom = (atBottom) => {\n        if (atBottom !== this.state.atBottom) {\n            // Update lastViewedBottom when the list reaches or leaves the bottom\n            let lastViewedBottom = Date.now();\n            if (this.props.latestPostTimeStamp > lastViewedBottom) {\n                lastViewedBottom = this.props.latestPostTimeStamp;\n            }\n\n            // if we hit the bottom, we haven't just landed on the unread channel\n            this.setState({\n                atBottom,\n                lastViewedBottom,\n            });\n        }\n    }\n\n    updateLastViewedBottomAt = (lastViewedBottom = Date.now()) => {\n        this.setState({\n            lastViewedBottom,\n        });\n    }\n\n    handleScrollStop = () => {\n        if (this.mounted) {\n            this.setState({\n                isScrolling: false,\n            });\n        }\n    }\n\n    updateFloatingTimestamp = (visibleTopItem) => {\n        if (!this.state.isMobile) {\n            return;\n        }\n\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        this.setState({\n            topPostId: getLatestPostId(this.props.postListIds.slice(visibleTopItem)),\n        });\n    }\n\n    onItemsRendered = ({visibleStartIndex}) => {\n        this.updateFloatingTimestamp(visibleStartIndex);\n    }\n\n    initScrollToIndex = () => {\n        if (this.props.focusedPostId) {\n            const index = this.state.postListIds.findIndex(\n                (item) => item === this.props.focusedPostId\n            );\n            return {\n                index,\n                position: 'center',\n            };\n        }\n\n        const newMessagesSeparatorIndex = getNewMessageIndex(this.state.postListIds);\n\n        if (newMessagesSeparatorIndex > 0) {\n            // if there is a dateLine above START_OF_NEW_MESSAGES then scroll to date line\n            if (isDateLine(this.state.postListIds[newMessagesSeparatorIndex + 1])) {\n                return {\n                    index: newMessagesSeparatorIndex + 1,\n                    position: 'start',\n                    offset: OFFSET_TO_SHOW_TOAST,\n                };\n            }\n            return {\n                index: newMessagesSeparatorIndex,\n                position: 'start',\n                offset: OFFSET_TO_SHOW_TOAST,\n            };\n        }\n\n        return {\n            index: 0,\n            position: 'end',\n        };\n    }\n\n    scrollToLatestMessages = () => {\n        if (this.props.atLatestPost) {\n            this.scrollToBottom();\n        } else {\n            this.updateNewMessagesAtInChannel();\n            this.props.actions.changeUnreadChunkTimeStamp('');\n        }\n    }\n\n    scrollToBottom = () => {\n        this.listRef.current.scrollToItem(0, 'end');\n    }\n\n    scrollToNewMessage = () => {\n        this.listRef.current.scrollToItem(getNewMessageIndex(this.state.postListIds), 'start', OFFSET_TO_SHOW_TOAST);\n    }\n\n    updateNewMessagesAtInChannel = (lastViewedAt = Date.now()) => {\n        this.props.actions.updateNewMessagesAtInChannel(this.props.channelId, lastViewedAt);\n    }\n\n    renderToasts = (width) => {\n        return (\n            <ToastWrapper\n                atLatestPost={this.props.atLatestPost}\n                postListIds={this.state.postListIds}\n                atBottom={this.state.atBottom}\n                width={width}\n                lastViewedBottom={this.state.lastViewedBottom}\n                latestPostTimeStamp={this.props.latestPostTimeStamp}\n                scrollToNewMessage={this.scrollToNewMessage}\n                scrollToLatestMessages={this.scrollToLatestMessages}\n                updateNewMessagesAtInChannel={this.updateNewMessagesAtInChannel}\n                updateLastViewedBottomAt={this.updateLastViewedBottomAt}\n                channelId={this.props.channelId}\n            />\n        );\n    }\n\n    render() {\n        const channelId = this.props.channelId;\n        let ariaLabel;\n        if (this.props.latestAriaLabelFunc && this.props.postListIds.indexOf(PostListRowListIds.START_OF_NEW_MESSAGES) >= 0) {\n            ariaLabel = this.props.latestAriaLabelFunc(this.props.intl);\n        }\n        const {dynamicListStyle} = this.state;\n\n        return (\n            <div\n                role='list'\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n                data-a11y-loop-navigation={false}\n                aria-label={Utils.localizeMessage('accessibility.sections.centerContent', 'message list main region')}\n            >\n                {this.state.isMobile && (\n                    <React.Fragment>\n                        <FloatingTimestamp\n                            isScrolling={this.state.isScrolling}\n                            isMobile={true}\n                            postId={this.state.topPostId}\n                        />\n                        <ScrollToBottomArrows\n                            isScrolling={this.state.isScrolling}\n                            atBottom={this.state.atBottom}\n                            onClick={this.scrollToBottom}\n                        />\n                    </React.Fragment>\n                )}\n                <div\n                    role='presentation'\n                    className='post-list-holder-by-time'\n                    key={'postlist-' + channelId}\n                >\n                    <div\n                        role='presentation'\n                        className='post-list__table'\n                    >\n                        <div\n                            id='postListContent'\n                            className='post-list__content'\n                        >\n                            <span\n                                className='sr-only'\n                                aria-live='polite'\n                            >\n                                {ariaLabel}\n                            </span>\n                            <AutoSizer>\n                                {({height, width}) => (\n                                    <React.Fragment>\n                                        <div>{this.renderToasts(width)}</div>\n                                        <DynamicSizeList\n                                            ref={this.listRef}\n                                            height={height}\n                                            width={width}\n                                            className='post-list__dynamic'\n                                            itemCount={this.state.postListIds.length}\n                                            itemData={this.state.postListIds}\n                                            itemKey={this.itemKey}\n                                            overscanCountForward={OVERSCAN_COUNT_FORWARD}\n                                            overscanCountBackward={OVERSCAN_COUNT_BACKWARD}\n                                            onScroll={this.onScroll}\n                                            initScrollToIndex={this.initScrollToIndex}\n                                            canLoadMorePosts={this.props.actions.canLoadMorePosts}\n                                            skipResizeClass='col__reply'\n                                            innerRef={this.postListRef}\n                                            style={{...virtListStyles, ...dynamicListStyle}}\n                                            innerListStyle={postListStyle}\n                                            initRangeToRender={this.initRangeToRender}\n                                            loaderId={PostListRowListIds.OLDER_MESSAGES_LOADER}\n                                            correctScrollToBottom={this.props.atLatestPost}\n                                            onItemsRendered={this.onItemsRendered}\n                                            scrollToFailed={this.scrollToFailed}\n                                        >\n                                            {this.renderRow}\n                                        </DynamicSizeList>\n                                    </React.Fragment>\n                                )}\n                            </AutoSizer>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(PostList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport LoadingScreen from 'components/loading_screen';\nimport {PostRequestTypes} from 'utils/constants';\n\nimport {getOldestPostId, getLatestPostId} from 'utils/post_utils.jsx';\n\nimport VirtPostList from 'components/post_view/post_list_virtualized/post_list_virtualized';\n\nconst MAX_NUMBER_OF_AUTO_RETRIES = 3;\nexport const MAX_EXTRA_PAGES_LOADED = 10;\n\nexport default class PostList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         *  Array of formatted post ids in the channel\n         *  This will be different from postListIds because of grouping and filtering of posts\n         *  This array should be used for making Before and After API calls\n         */\n        formattedPostIds: PropTypes.array,\n\n        /**\n         *  Array of post ids in the channel, ordered from newest to oldest\n         */\n        postListIds: PropTypes.array,\n\n        /**\n         * The channel the posts are in\n         */\n        channelId: PropTypes.string,\n\n        /*\n         * To get posts for perma view\n         */\n        focusedPostId: PropTypes.string,\n\n        /*\n         * Used for determining if we are not at the recent most chunk in channel\n         */\n        atLatestPost: PropTypes.bool,\n\n        /*\n         * Used for determining if we are at the channels oldest post\n         */\n        atOldestPost: PropTypes.bool,\n\n        /*\n         * Used for loading posts using unread API\n         */\n        isFirstLoad: PropTypes.bool,\n\n        /*\n         * Used for syncing posts and is also passed down to virt list for newMessages indicator\n         */\n        latestPostTimeStamp: PropTypes.number,\n\n        latestAriaLabelFunc: PropTypes.func,\n\n        /*\n         * Used for passing down to virt list so it can change the chunk of posts selected\n         */\n        changeUnreadChunkTimeStamp: PropTypes.func.isRequired,\n\n        prevChannelId: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n\n            /*\n             * Used for getting permalink view posts\n             */\n            loadPostsAround: PropTypes.func.isRequired,\n\n            /*\n             * Used for geting unreads posts\n             */\n            loadUnreads: PropTypes.func.isRequired,\n\n            /*\n             * Used for getting posts using BEFORE_ID and AFTER_ID\n             */\n            loadPosts: PropTypes.func.isRequired,\n\n            /*\n             * Used to set mobile view on resize\n             */\n            checkAndSetMobileView: PropTypes.func.isRequired,\n\n            /*\n             * Used to loading posts since a timestamp to sync the posts\n             */\n            syncPostsInChannel: PropTypes.func.isRequired,\n\n            /*\n             * Used to loading posts if it not first visit, permalink or there exists any postListIds\n             * This happens when previous channel visit has a chunk which is not the latest set of posts\n             */\n            loadLatestPosts: PropTypes.func.isRequired,\n\n            markChannelAsViewed: PropTypes.func.isRequired,\n\n            markChannelAsRead: PropTypes.func.isRequired,\n            updateNewMessagesAtInChannel: PropTypes.func.isRequired,\n\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingNewerPosts: false,\n            loadingOlderPosts: false,\n            autoRetryEnable: true,\n        };\n\n        this.autoRetriesCount = 0;\n        this.loadingMorePosts = null;\n        this.actionsForPostList = {\n            loadOlderPosts: this.getPostsBefore,\n            loadNewerPosts: this.getPostsAfter,\n            checkAndSetMobileView: props.actions.checkAndSetMobileView,\n            canLoadMorePosts: this.canLoadMorePosts,\n            changeUnreadChunkTimeStamp: props.changeUnreadChunkTimeStamp,\n            updateNewMessagesAtInChannel: this.props.actions.updateNewMessagesAtInChannel,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        if (this.props.channelId) {\n            this.postsOnLoad(this.props.channelId);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.channelId !== prevProps.channelId) {\n            this.postsOnLoad(this.props.channelId);\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    postsOnLoad = async (channelId) => {\n        if (this.props.focusedPostId) {\n            await this.props.actions.loadPostsAround(channelId, this.props.focusedPostId);\n        } else if (this.props.isFirstLoad) {\n            await this.props.actions.loadUnreads(channelId);\n        } else if (this.props.latestPostTimeStamp) {\n            await this.props.actions.syncPostsInChannel(channelId, this.props.latestPostTimeStamp, false);\n        } else {\n            await this.props.actions.loadLatestPosts(channelId);\n        }\n\n        if (!this.props.focusedPostId) {\n            this.markChannelAsReadAndViewed();\n        }\n\n        this.setState({\n            loadingOlderPosts: false,\n            loadingNewerPosts: false,\n        });\n    }\n\n    callLoadPosts = async (channelId, postId, type) => {\n        const {error} = await this.props.actions.loadPosts({\n            channelId,\n            postId,\n            type,\n        });\n\n        if (type === PostRequestTypes.BEFORE_ID) {\n            this.setState({loadingOlderPosts: false});\n        } else {\n            this.setState({loadingNewerPosts: false});\n        }\n\n        if (error) {\n            if (this.autoRetriesCount < MAX_NUMBER_OF_AUTO_RETRIES) {\n                this.autoRetriesCount++;\n                await this.callLoadPosts(channelId, postId, type);\n            } else if (this.mounted) {\n                this.setState({autoRetryEnable: false});\n            }\n        } else {\n            if (this.mounted) {\n                this.setState({autoRetryEnable: true});\n            }\n\n            if (!this.state.autoRetryEnable) {\n                this.autoRetriesCount = 0;\n            }\n        }\n\n        return {error};\n    }\n\n    markChannelAsReadAndViewed = () => {\n        const currentChannelId = this.props.channelId;\n        const prevChannelId = this.props.prevChannelId;\n\n        // Mark previous and next channel as read\n        // Posts are marked as read from here to not cause a race when loading posts\n        // marking channel as read and viewed after calling for posts in channel\n        this.props.actions.markChannelAsViewed(currentChannelId, prevChannelId);\n        this.props.actions.markChannelAsRead(currentChannelId, prevChannelId);\n    }\n\n    getOldestVisiblePostId = () => {\n        return getOldestPostId(this.props.postListIds);\n    }\n\n    getLatestVisiblePostId = () => {\n        return getLatestPostId(this.props.postListIds);\n    }\n\n    canLoadMorePosts = async (type = PostRequestTypes.BEFORE_ID) => {\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        if (this.state.loadingOlderPosts || this.state.loadingNewerPosts) {\n            return;\n        }\n\n        if (this.extraPagesLoaded > MAX_EXTRA_PAGES_LOADED) {\n            // Prevent this from loading a lot of pages in a channel with only hidden messages\n            // Enable load more messages manual link\n            if (this.state.autoRetryEnable) {\n                this.setState({autoRetryEnable: false});\n            }\n            return;\n        }\n\n        if (!this.props.atOldestPost && type === PostRequestTypes.BEFORE_ID) {\n            const oldestPostId = this.getOldestVisiblePostId();\n            await this.getPostsBefore(oldestPostId);\n        } else if (!this.props.atLatestPost) {\n            // if all olderPosts are loaded load new ones\n            const latestPostId = this.getLatestVisiblePostId();\n            await this.getPostsAfter(latestPostId);\n        }\n\n        this.extraPagesLoaded += 1;\n    }\n\n    getPostsBefore = async () => {\n        if (this.state.loadingOlderPosts) {\n            return;\n        }\n        const oldestPostId = this.getOldestVisiblePostId();\n        this.setState({loadingOlderPosts: true});\n        await this.callLoadPosts(this.props.channelId, oldestPostId, PostRequestTypes.BEFORE_ID);\n    }\n\n    getPostsAfter = async () => {\n        if (this.state.loadingNewerPosts) {\n            return;\n        }\n        const latestPostId = this.getLatestVisiblePostId();\n        this.setState({loadingNewerPosts: true});\n        await this.callLoadPosts(this.props.channelId, latestPostId, PostRequestTypes.AFTER_ID);\n    }\n\n    render() {\n        if (!this.props.postListIds) {\n            return (\n                <LoadingScreen\n                    position='absolute'\n                    key='loading'\n                />\n            );\n        }\n\n        return (\n            <div\n                ref='postlist'\n                className='post-list-holder-by-time'\n                key={'postlist-' + this.props.channelId}\n            >\n                <div className='post-list__table'>\n                    <div\n                        id='virtualizedPostListContent'\n                        ref='postListContent'\n                        className='post-list__content'\n                    >\n                        <VirtPostList\n                            loadingNewerPosts={this.state.loadingNewerPosts}\n                            loadingOlderPosts={this.state.loadingOlderPosts}\n                            atOldestPost={this.props.atOldestPost}\n                            atLatestPost={this.props.atLatestPost}\n                            focusedPostId={this.props.focusedPostId}\n                            channelId={this.props.channelId}\n                            autoRetryEnable={this.state.autoRetryEnable}\n                            actions={this.actionsForPostList}\n                            postListIds={this.props.formattedPostIds}\n                            latestPostTimeStamp={this.props.latestPostTimeStamp}\n                            latestAriaLabelFunc={this.props.latestAriaLabelFunc}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\nimport {getRecentPostsChunkInChannel, makeGetPostsChunkAroundPost, getUnreadPostsChunk, getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\nimport {markChannelAsRead, markChannelAsViewed} from 'mattermost-redux/actions/channels';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\n\nimport {updateNewMessagesAtInChannel} from 'actions/global_actions.jsx';\nimport {getLatestPostId, makeCreateAriaLabelForPost} from 'utils/post_utils.jsx';\nimport {\n    checkAndSetMobileView,\n    loadPosts,\n    loadUnreads,\n    loadPostsAround,\n    syncPostsInChannel,\n    loadLatestPosts,\n} from 'actions/views/channel';\n\nimport PostList from './post_list.jsx';\n\nconst isFirstLoad = (state, channelId) => !state.entities.posts.postsInChannel[channelId];\nconst memoizedGetLatestPostId = memoizeResult((postIds) => getLatestPostId(postIds));\n\n// This function is added as a fail safe for the channel sync issue we have.\n// When the user switches to a team for the first time we show the channel of previous team and then settle for the right channel after that\n// This causes the scroll correction etc an issue because post_list is not mounted for new channel instead it is updated\n\nfunction makeMapStateToProps() {\n    const getPostsChunkAroundPost = makeGetPostsChunkAroundPost();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n    const createAriaLabelForPost = makeCreateAriaLabelForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        let latestPostTimeStamp = 0;\n        let postIds;\n        let chunk;\n        let atLatestPost = false;\n        let atOldestPost = false;\n        let formattedPostIds;\n        let latestAriaLabelFunc;\n        const lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n\n        if (ownProps.match.params.postid) {\n            chunk = getPostsChunkAroundPost(state, ownProps.match.params.postid, ownProps.channelId);\n        } else if (ownProps.unreadChunkTimeStamp) {\n            chunk = getUnreadPostsChunk(state, ownProps.channelId, ownProps.unreadChunkTimeStamp);\n        } else {\n            chunk = getRecentPostsChunkInChannel(state, ownProps.channelId);\n        }\n\n        if (chunk) {\n            postIds = chunk.order;\n            atLatestPost = chunk.recent;\n            atOldestPost = chunk.oldest;\n        }\n\n        if (postIds) {\n            formattedPostIds = preparePostIdsForPostList(state, {postIds, lastViewedAt, indicateNewMessages: true, channelId: ownProps.channelId});\n            if (postIds.length) {\n                const latestPostId = memoizedGetLatestPostId(postIds);\n                const latestPost = getPost(state, latestPostId);\n                latestPostTimeStamp = latestPost.create_at;\n                latestAriaLabelFunc = createAriaLabelForPost(state, latestPost);\n            }\n        }\n\n        return {\n            lastViewedAt,\n            isFirstLoad: isFirstLoad(state, ownProps.channelId),\n            formattedPostIds,\n            atLatestPost,\n            atOldestPost,\n            focusedPostId: ownProps.match.params.postid,\n            latestPostTimeStamp,\n            postListIds: postIds,\n            latestAriaLabelFunc,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadUnreads,\n            loadPosts,\n            loadLatestPosts,\n            loadPostsAround,\n            checkAndSetMobileView,\n            syncPostsInChannel,\n            markChannelAsViewed,\n            markChannelAsRead,\n            updateNewMessagesAtInChannel,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps, mapDispatchToProps)(PostList));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport PostList from './post_list';\n\nexport default class PostView extends React.PureComponent {\n    static propTypes = {\n        lastViewedAt: PropTypes.number,\n        channelLoading: PropTypes.bool,\n        channelId: PropTypes.string,\n        focusedPostId: PropTypes.string,\n        prevChannelId: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unreadChunkTimeStamp: props.lastViewedAt,\n            loaderForChangeOfPostsChunk: false,\n            channelLoading: props.channelLoading,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (state.unreadChunkTimeStamp === null && props.lastViewedAt) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n            };\n        }\n        if (props.channelLoading !== state.channelLoading) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n                channelLoading: props.channelLoading,\n            };\n        }\n        return null;\n    }\n\n    changeUnreadChunkTimeStamp = (unreadChunkTimeStamp) => {\n        this.setState({\n            unreadChunkTimeStamp,\n            loaderForChangeOfPostsChunk: true,\n        }, () => {\n            window.requestAnimationFrame(() => {\n                this.setState({\n                    loaderForChangeOfPostsChunk: false,\n                });\n            });\n        });\n    }\n\n    render() {\n        if (this.props.channelLoading || this.state.loaderForChangeOfPostsChunk) {\n            return (\n                <div id='post-list'>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div id='post-list'>\n                <PostList\n                    unreadChunkTimeStamp={this.state.unreadChunkTimeStamp}\n                    channelId={this.props.channelId}\n                    changeUnreadChunkTimeStamp={this.changeUnreadChunkTimeStamp}\n                    focusedPostId={this.props.focusedPostId}\n                    prevChannelId={this.props.prevChannelId}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getTeamByName, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\n\nimport {Constants} from 'utils/constants';\n\nimport PostView from './post_view.jsx';\n\nexport const isChannelLoading = (params, channel, team, teammate, teamMemberships) => {\n    if (params.postid) {\n        return false;\n    }\n\n    if (channel && team) {\n        if (channel.type !== Constants.DM_CHANNEL && channel.name !== params.identifier) {\n            return true;\n        } else if (channel.type === Constants.DM_CHANNEL && teammate && params.identifier !== `@${teammate.username}`) {\n            return true;\n        }\n\n        const teamId = team.id;\n        if ((channel.team_id && channel.team_id !== teamId) || (teamMemberships && !teamMemberships[teamId])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n\nfunction makeMapStateToProps() {\n    return function mapStateToProps(state, ownProps) {\n        const team = getTeamByName(state, ownProps.match.params.team);\n        let teammate;\n\n        const channel = getChannel(state, ownProps.channelId);\n        let lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n        if (channel) {\n            if (channel.type === Constants.DM_CHANNEL && channel.teammate_id) {\n                teammate = getUser(state, channel.teammate_id);\n            }\n            lastViewedAt = channel.last_post_at ? lastViewedAt : channel.last_post_at;\n        }\n\n        const teamMemberships = getTeamMemberships(state);\n        const channelLoading = isChannelLoading(ownProps.match.params, channel, team, teammate, teamMemberships);\n\n        return {\n            lastViewedAt,\n            channelLoading,\n            channel,\n        };\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps)(PostView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport ChannelHeader from 'components/channel_header';\nimport LocalizedIcon from 'components/localized_icon';\nimport PostView from 'components/post_view';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport Constants from 'utils/constants.jsx';\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PermalinkView extends React.PureComponent {\n    static propTypes = {\n        channelId: PropTypes.string,\n        channelName: PropTypes.string,\n        channelIsArchived: PropTypes.bool,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                postid: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        returnTo: PropTypes.string.isRequired,\n        teamName: PropTypes.string,\n        actions: PropTypes.shape({\n            focusPost: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        let updatedState = {postid: props.match.params.postid};\n        if (state.postid !== props.match.params.postid) {\n            updatedState = {...updatedState, valid: false};\n        }\n\n        return updatedState;\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {valid: false};\n\n        this.permalink = React.createRef();\n    }\n\n    componentDidMount() {\n        this.doPermalinkEvent(this.props);\n        document.body.classList.add('app__body');\n\n        window.addEventListener('keydown', this.onShortcutKeyDown);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.onShortcutKeyDown);\n    }\n\n    componentDidUpdate() {\n        if (!this.state.valid) {\n            this.doPermalinkEvent(this.props);\n        }\n    }\n\n    doPermalinkEvent = async (props) => {\n        const postId = props.match.params.postid;\n        await this.props.actions.focusPost(postId, this.props.returnTo);\n        this.setState({valid: true});\n    }\n\n    isStateValid = () => {\n        return this.state.valid && this.props.channelId && this.props.teamName;\n    }\n\n    onShortcutKeyDown = (e) => {\n        if (e.shiftKey && Utils.cmdOrCtrlPressed(e) && Utils.isKeyPressed(e, Constants.KeyCodes.L) && this.permalink.current) {\n            this.permalink.current.focus();\n        }\n    }\n\n    render() {\n        const {\n            channelId,\n            channelName,\n            channelIsArchived,\n            match,\n            teamName,\n        } = this.props;\n\n        if (!this.isStateValid()) {\n            return (\n                <div\n                    id='app-content'\n                    className='app__content'\n                />\n            );\n        }\n\n        return (\n            <div\n                id='app-content'\n                className='app__content'\n            >\n                <ChannelHeader\n                    channelId={channelId}\n                />\n                <PostView\n                    channelId={channelId}\n                    focusedPostId={match.params.postid}\n                />\n                <div\n                    id='archive-link-home'\n                >\n                    <Link\n                        to={'/' + teamName + '/channels/' + channelName}\n                        className='a11y__region'\n                        data-a11y-sort-order='2'\n                        innerRef={this.permalink}\n                    >\n                        {channelIsArchived &&\n                            <FormattedMarkdownMessage\n                                id='center_panel.permalink.archivedChannel'\n                                defaultMessage='You are viewing an **archived channel**. '\n                            />\n                        }\n                        <FormattedMessage\n                            id='center_panel.recent'\n                            defaultMessage='Click here to jump to recent messages. '\n                        />\n                        <LocalizedIcon\n                            className='fa fa-arrow-down'\n                            title={{id: t('center_panel.recent.icon'), defaultMessage: 'Jump to recent messages Icon'}}\n                        />\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {focusPost} from './actions';\nimport PermalinkView from './permalink_view.jsx';\n\nfunction mapStateToProps(state) {\n    const team = getCurrentTeam(state);\n    const channel = getCurrentChannel(state);\n    let channelId = '';\n    let channelName = '';\n    let channelIsArchived;\n    if (channel) {\n        channelId = channel.id;\n        channelName = channel.name;\n        channelIsArchived = channel.delete_at !== 0;\n    }\n\n    let teamName = '';\n    if (team) {\n        teamName = team.name;\n    }\n\n    return {\n        channelId,\n        channelName,\n        teamName,\n        channelIsArchived,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            focusPost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermalinkView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class NotifyCounts extends React.PureComponent {\n    static propTypes = {\n        mentionCount: PropTypes.number.isRequired,\n        messageCount: PropTypes.number.isRequired,\n    }\n    render() {\n        if (this.props.mentionCount) {\n            return <span className='badge badge-notify'>{this.props.mentionCount}</span>;\n        } else if (this.props.messageCount) {\n            return <span className='badge badge-notify'>{'•'}</span>;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUnreadsInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\n\nimport NotifyCounts from './notify_counts.jsx';\n\nfunction mapStateToProps(state) {\n    const {mentionCount, messageCount} = getUnreadsInCurrentTeam(state);\n    return {\n        mentionCount,\n        messageCount,\n    };\n}\n\nexport default connect(mapStateToProps)(NotifyCounts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport NotifyCounts from 'components/notify_counts';\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\nconst CollapseLhsButton = ({\n    actions: {\n        toggleLhs,\n    },\n}) => (\n    <button\n        key='navbar-toggle-sidebar'\n        type='button'\n        className='navbar-toggle'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={toggleLhs}\n    >\n        <span className='sr-only'>\n            <FormattedMessage\n                id='navbar.toggle2'\n                defaultMessage='Toggle sidebar'\n            />\n        </span>\n        <MenuIcon className='style--none icon icon__menu icon--sidebarHeaderTextColor'/>\n        <NotifyCounts/>\n    </button>\n);\n\nCollapseLhsButton.propTypes = {\n    actions: PropTypes.shape({\n        toggleLhs: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default CollapseLhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {toggle as toggleLhs} from 'actions/views/lhs';\n\nimport CollapseLhsButton from './collapse_lhs_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        toggleLhs,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseLhsButton);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MoreIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.more'\n                    defaultMessage='More Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-ellipsis-h'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MoreIcon from 'components/widgets/icons/more_icon';\n\nconst CollapseRhsButton = ({\n    actions: {\n        toggleRhsMenu,\n    },\n}) => (\n    <button\n        key='navbar-toggle-menu'\n        type='button'\n        className='navbar-toggle navbar-right__icon menu-toggle pull-right'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={toggleRhsMenu}\n    >\n        <MoreIcon/>\n    </button>\n);\n\nCollapseRhsButton.propTypes = {\n    actions: PropTypes.shape({\n        toggleRhsMenu: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default CollapseRhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {toggleMenu as toggleRhsMenu} from 'actions/views/rhs';\n\nimport CollapseRhsButton from './collapse_rhs_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        toggleRhsMenu,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseRhsButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class InfoIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.info'\n                    defaultMessage='Info Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fas fa-info-circle'\n                            title={title}\n                        />\n                    )}\n                    {/* {(ariaLabel) => (\n                        <svg\n                            width='18px'\n                            height='18px'\n                            viewBox='0 0 22 22'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-388.000000, -18.000000)'\n                                    fill='inherit'\n                                >\n                                    <g>\n                                        <g transform='translate(381.000000, 11.000000)'>\n                                            <g transform='translate(7.000000, 7.000000)'>\n                                                <path d='M11,22 C4.92486775,22 0,17.0751322 0,11 C0,4.92486775 4.92486775,0 11,0 C17.0751322,0 22,4.92486775 22,11 C22,17.0751322 17.0751322,22 11,22 Z M11,20.7924685 C16.408231,20.7924685 20.7924685,16.408231 20.7924685,11 C20.7924685,5.59176898 16.408231,1.20753149 11,1.20753149 C5.59176898,1.20753149 1.20753149,5.59176898 1.20753149,11 C1.20753149,16.408231 5.59176898,20.7924685 11,20.7924685 Z M10.1572266,16.0625 L10.1572266,8.69335938 L11.3466797,8.69335938 L11.3466797,16.0625 L10.1572266,16.0625 Z M10.7519531,7.50390625 C10.3417969,7.50390625 10,7.16210938 10,6.75195312 C10,6.33496094 10.3417969,6 10.7519531,6 C11.1689453,6 11.5039062,6.33496094 11.5039062,6.75195312 C11.5039062,7.16210938 11.1689453,7.50390625 10.7519531,7.50390625 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )} */}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport Markdown from 'components/markdown';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport InfoIcon from 'components/widgets/icons/info_icon';\nimport Popover from 'components/widgets/popover';\nconst headerMarkdownOptions = {mentionHighlight: false};\n\nexport default class NavbarInfoButton extends React.PureComponent {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        isReadOnly: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    showEditChannelHeaderModal = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n\n        const {actions, channel} = this.props;\n        const modalData = {\n            modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n            dialogType: EditChannelHeaderModal,\n            dialogProps: {channel},\n        };\n\n        actions.openModal(modalData);\n    }\n\n    hide = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n    }\n\n    render() {\n        const {channel, isReadOnly} = this.props;\n\n        let popoverContent = null;\n        if (channel.header) {\n            popoverContent = (\n                <Markdown\n                    message={channel.header}\n                    options={headerMarkdownOptions}\n                />\n            );\n        } else {\n            let addOne;\n            if (!isReadOnly) {\n                const link = (\n                    <a\n                        href='#'\n                        onClick={this.showEditChannelHeaderModal}\n                    >\n                        <FormattedMessage\n                            id='navbar.click'\n                            defaultMessage='Click here'\n                        />\n                    </a>\n                );\n                addOne = (\n                    <React.Fragment>\n                        <br/>\n                        <FormattedMessage\n                            id='navbar.clickToAddHeader'\n                            defaultMessage='{clickHere} to add one.'\n                            values={{clickHere: link}}\n                        />\n                    </React.Fragment>\n                );\n            }\n\n            popoverContent = (\n                <div>\n                    <FormattedMessage\n                        id='navbar.noHeader'\n                        defaultMessage='No channel header yet.'\n                    />\n                    {addOne}\n                </div>\n            );\n        }\n\n        const popover = (\n            <Popover\n                popoverStyle='info'\n                placement='bottom'\n                className='navbar__popover'\n                id='header-popover'\n            >\n                {popoverContent}\n                <div\n                    className='close visible-xs-block'\n                    onClick={this.hide}\n                >\n                    {'×'}\n                </div>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger\n                ref='headerOverlay'\n                trigger='click'\n                placement='bottom'\n                overlay={popover}\n                className='description'\n                rootClose={true}\n            >\n                <button\n                    className='navbar-toggle navbar-right__icon navbar-info-button pull-right'\n                    aria-label={localizeMessage('accessibility.button.Info', 'Info')}\n                >\n                    <InfoIcon\n                        className='icon icon__info'\n                        aria-hidden='true'\n                    />\n                </button>\n            </OverlayTrigger>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ChannelInfoButton from './channel_info_button';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ChannelInfoButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SearchIcon from 'components/widgets/icons/search_icon';\n\nexport default class ShowSearchButton extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            openRHSSearch: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleClick = () => {\n        this.props.actions.openRHSSearch();\n    }\n\n    render() {\n        return (\n            <button\n                type='button'\n                className='navbar-toggle navbar-right__icon navbar-search pull-right'\n                onClick={this.handleClick}\n                aria-label={localizeMessage('accessibility.button.Search', 'Search')}\n            >\n                <SearchIcon\n                    className='icon icon__search'\n                    aria-hidden='true'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {openRHSSearch} from 'actions/views/rhs';\n\nimport ShowSearchButton from './show_search_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        openRHSSearch,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ShowSearchButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {NotificationLevels} from 'utils/constants';\n\nexport default class UnmuteChannelButton extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n\n        channel: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = () => {\n        const {\n            user,\n            channel,\n            actions: {\n                updateChannelNotifyProps,\n            },\n        } = this.props;\n\n        updateChannelNotifyProps(user.id, channel.id, {mark_unread: NotificationLevels.ALL});\n    }\n\n    render() {\n        return (\n            <button\n                type='button'\n                className='navbar-toggle icon icon__mute'\n                onClick={this.handleClick}\n            >\n                <span className='fa fa-bell-slash-o icon'/>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport UnmuteChannelButton from './unmute_channel_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(UnmuteChannelButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {MobileChannelHeaderDropdown} from 'components/channel_header_dropdown';\nimport MobileChannelHeaderPlug from 'plugins/mobile_channel_header_plug';\n\nimport * as Utils from 'utils/utils';\n\nimport CollapseLhsButton from './collapse_lhs_button';\nimport CollapseRhsButton from './collapse_rhs_button';\nimport ChannelInfoButton from './channel_info_button';\nimport ShowSearchButton from './show_search_button';\nimport UnmuteChannelButton from './unmute_channel_button';\n\nexport default class ChannelHeaderMobile extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         *\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object,\n\n        /**\n         * Bool whether the current channel is read only\n         */\n        isReadOnly: PropTypes.bool,\n\n        /**\n         * Bool whether the current channel is muted\n         */\n        isMuted: PropTypes.bool,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n            closeLhs: PropTypes.func.isRequired,\n            closeRhs: PropTypes.func.isRequired,\n            closeRhsMenu: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    componentDidMount() {\n        document.querySelector('.inner-wrap').addEventListener('click', this.hideSidebars);\n    }\n\n    componentWillUnmount() {\n        document.querySelector('.inner-wrap').removeEventListener('click', this.hideSidebars);\n    }\n\n    hideSidebars = (e) => {\n        if (Utils.isMobile()) {\n            this.props.actions.closeRhs();\n\n            if (e.target.className !== 'navbar-toggle' && e.target.className !== 'icon-bar') {\n                this.props.actions.closeLhs();\n                this.props.actions.closeRhsMenu();\n            }\n        }\n    }\n\n    render() {\n        const {user, channel, isMuted} = this.props;\n\n        return (\n            <nav\n                id='navbar'\n                className='navbar navbar-default navbar-fixed-top'\n                role='navigation'\n            >\n                <div className='container-fluid theme'>\n                    <div className='navbar-header'>\n                        <CollapseLhsButton/>\n                        {channel && (\n                            <React.Fragment>\n                                <div className='navbar-brand'>\n                                    <MobileChannelHeaderDropdown/>\n                                    {isMuted && (\n                                        <UnmuteChannelButton\n                                            user={user}\n                                            channel={channel}\n                                        />\n                                    )}\n                                </div>\n                                <ChannelInfoButton\n                                    ref='headerOverlay'\n                                    channel={channel}\n                                    isReadOnly={this.props.isReadOnly}\n                                />\n                                <ShowSearchButton/>\n                                <MobileChannelHeaderPlug\n                                    channel={channel}\n                                    isDropdown={false}\n                                />\n                            </React.Fragment>\n                        )}\n                        <CollapseRhsButton/>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {\n    getCurrentChannel,\n    getMyCurrentChannelMembership,\n    isCurrentChannelReadOnly,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {\n    closeRightHandSide as closeRhs,\n    closeMenu as closeRhsMenu,\n} from 'actions/views/rhs';\nimport {close as closeLhs} from 'actions/views/lhs';\n\nimport ChannelHeaderMobile from './channel_header_mobile';\n\nconst isCurrentChannelMuted = createSelector(\n    getMyCurrentChannelMembership,\n    (membership) => isChannelMuted(membership),\n);\n\nconst mapStateToProps = (state) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isMuted: isCurrentChannelMuted(state),\n    isReadOnly: isCurrentChannelReadOnly(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        closeLhs,\n        closeRhs,\n        closeRhsMenu,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelHeaderMobile);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {joinChannel, getChannelByNameAndTeamName, markGroupChannelOpen, fetchMyChannelsAndMembers} from 'mattermost-redux/actions/channels';\nimport {getUser, getUserByUsername, getUserByEmail} from 'mattermost-redux/actions/users';\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, getUserByUsername as selectUserByUsername, getUser as selectUser, getUserByEmail as selectUserByEmail} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName, getOtherChannels, getChannel, getChannelsNameMapInTeam, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\n\nimport {Constants} from 'utils/constants';\nimport {openDirectChannelToUserId} from 'actions/channel_actions';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst LENGTH_OF_ID = 26;\nconst LENGTH_OF_GROUP_ID = 40;\nconst LENGTH_OF_USER_ID_PAIR = 54;\nconst USER_ID_PAIR_REGEXP = new RegExp(`^[a-zA-Z0-9]{${LENGTH_OF_ID}}__[a-zA-Z0-9]{${LENGTH_OF_ID}}$`);\n\nexport function onChannelByIdentifierEnter({match, history}) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {path, identifier, team} = match.params;\n\n        if (!identifier) {\n            return;\n        }\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return;\n        }\n\n        const channelPath = getPathFromIdentifier(state, path, identifier);\n\n        switch (channelPath) {\n        case 'channel_name':\n            dispatch(goToChannelByChannelName(match, history));\n            break;\n        case 'channel_id':\n            dispatch(goToChannelByChannelId(match, history));\n            break;\n        case 'group_channel_group_id':\n            dispatch(goToGroupChannelByGroupId(match, history));\n            break;\n        case 'direct_channel_username':\n            dispatch(goToDirectChannelByUsername(match, history));\n            break;\n        case 'direct_channel_email':\n            dispatch(goToDirectChannelByEmail(match, history));\n            break;\n        case 'direct_channel_user_ids':\n            dispatch(goToDirectChannelByUserIds(match, history));\n            break;\n        case 'direct_channel_user_id':\n            dispatch(goToDirectChannelByUserId(match, history, identifier));\n            break;\n        case 'error':\n            await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n            handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n            break;\n        }\n    };\n}\n\nexport function getPathFromIdentifier(state, path, identifier) {\n    if (path === 'channels') {\n        if (identifier.length === LENGTH_OF_ID) {\n            // It's hard to tell an ID apart from a channel name of the same length, so check first if\n            // the identifier matches a channel that we have\n            const channelsByName = getChannelByName(state, identifier);\n            const moreChannelsByName = getOtherChannels(state).find((chan) => chan.name === identifier);\n            return channelsByName || moreChannelsByName ? 'channel_name' : 'channel_id';\n        } else if (identifier.length === LENGTH_OF_GROUP_ID) {\n            return 'group_channel_group_id';\n        } else if (isDirectChannelIdentifier(identifier)) {\n            return 'direct_channel_user_ids';\n        }\n        return 'channel_name';\n    } else if (path === 'messages') {\n        if (identifier.indexOf('@') === 0) {\n            return 'direct_channel_username';\n        } else if (identifier.indexOf('@') > 0) {\n            return 'direct_channel_email';\n        } else if (identifier.length === LENGTH_OF_ID) {\n            return 'direct_channel_user_id';\n        } else if (identifier.length === LENGTH_OF_GROUP_ID) {\n            return 'group_channel_group_id';\n        }\n        return 'error';\n    }\n\n    return 'error';\n}\n\nexport function goToChannelByChannelId(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelId = identifier.toLowerCase();\n\n        let channel = getChannel(state, channelId);\n        const member = state.entities.channels.myMembers[channelId];\n        const teamObj = getTeamByName(state, team);\n        if (!channel || !member) {\n            const {data, error} = await dispatch(joinChannel(getCurrentUserId(state), teamObj.id, channelId, null));\n            if (error) {\n                await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n                handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            channel = data.channel;\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserId(match, history, Utils.getUserIdFromChannelId(channel.name)));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            history.replace(`/${team}/channels/${channel.name}`);\n        }\n    };\n}\n\nexport function goToChannelByChannelName(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelName = identifier.toLowerCase();\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return;\n        }\n\n        let channel = getChannelsNameMapInTeam(state, teamObj.id)[channelName];\n        let member;\n        if (channel) {\n            member = state.entities.channels.myMembers[channel.id];\n        }\n\n        if (!channel || !member) {\n            const {data, error: joinError} = await dispatch(joinChannel(getCurrentUserId(state), teamObj.id, null, channelName));\n            if (joinError) {\n                const {data: data2, error: getChannelError} = await dispatch(getChannelByNameAndTeamName(team, channelName, true));\n                if (getChannelError || data2.delete_at === 0) {\n                    await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n                    handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                    return;\n                }\n                channel = data2;\n            } else {\n                channel = data.channel;\n            }\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserIds(match, history));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            doChannelChange(channel);\n        }\n    };\n}\n\nfunction goToDirectChannelByUsername(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const username = identifier.slice(1, identifier.length).toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByUsername(state, username);\n        if (!user) {\n            const {data, error} = await dispatch(getUserByUsername(username));\n            if (error) {\n                await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        const {error, data} = await dispatch(openDirectChannelToUserId(user.id));\n        if (error) {\n            await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n            handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n            return;\n        }\n\n        doChannelChange(data);\n    };\n}\n\nexport function goToDirectChannelByUserId(match, history, userId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team} = match.params;\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const {data, error} = await dispatch(getUser(userId));\n            if (error) {\n                await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n    };\n}\n\nexport function goToDirectChannelByUserIds(match, history) {\n    console.log('goToDirectChannelByUserIds'); // eslint-disable-line no-console\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const userId = Utils.getUserIdFromChannelId(identifier.toLowerCase(), getCurrentUserId(getState()));\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const {data, error} = await dispatch(getUser(userId));\n            if (error) {\n                await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n    };\n}\n\nexport function goToDirectChannelByEmail(match, history) {\n    console.log('goToDirectChannelByEmail'); // eslint-disable-line no-console\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const email = identifier.toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByEmail(state, email);\n        if (!user) {\n            const {data, error} = await dispatch(getUserByEmail(email));\n            if (error) {\n                await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n    };\n}\n\nfunction goToGroupChannelByGroupId(match, history) {\n    console.log('goToGroupChannelByGroupId'); // eslint-disable-line no-console\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {identifier, team} = match.params;\n        const groupId = identifier.toLowerCase();\n\n        history.replace(match.url.replace('/channels/', '/messages/'));\n\n        let channel = getChannelByName(state, groupId);\n        const teamObj = getTeamByName(state, team);\n        if (!channel) {\n            const {data, error} = await dispatch(joinChannel(getCurrentUserId(state), teamObj.id, null, groupId));\n            if (error) {\n                await dispatch(fetchMyChannelsAndMembers(teamObj.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            channel = data.channel;\n        }\n\n        dispatch(markGroupChannelOpen(channel.id));\n\n        doChannelChange(channel);\n    };\n}\n\nfunction doChannelChange(channel) {\n    GlobalActions.emitChannelClickEvent(channel);\n}\n\nfunction handleError(match, history, defaultChannel) {\n    const {team} = match.params;\n    history.push(team ? `/${team}/channels/${defaultChannel}` : '/');\n}\n\nfunction isDirectChannelIdentifier(identifier) {\n    return identifier.length === LENGTH_OF_USER_ID_PAIR && USER_ID_PAIR_REGEXP.test(identifier);\n}\n\nasync function handleChannelJoinError(match, history, defaultChannel) {\n    const {team} = match.params;\n    history.push(team ? `/error?type=channel_not_found&returnTo=/${team}/channels/${defaultChannel}` : '/');\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class EditChannelPurposeModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * callback to call when modal will hide\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /*\n         * Channel info object\n         */\n        channel: PropTypes.object,\n\n        /*\n         * Check should we send purpose on CTRL + ENTER\n         */\n        ctrlSend: PropTypes.bool.isRequired,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to patch current channel\n             */\n            patchChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            purpose: props.channel.purpose || '',\n            serverError: '',\n            show: true,\n            submitted: false,\n            requestStarted: false,\n        };\n    }\n\n    setError = (err) => {\n        if (err.id === 'api.context.invalid_param.app_error') {\n            this.setState({\n                serverError: Utils.localizeMessage(\n                    'edit_channel_purpose_modal.error',\n                    'This channel purpose is too long, please enter a shorter one'\n                ),\n            });\n        } else {\n            this.setState({serverError: err.message});\n        }\n    }\n\n    unsetError = () => {\n        this.setState({serverError: ''});\n    }\n\n    handleEntering = () => {\n        Utils.placeCaretAtEnd(this.purpose);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    handleKeyDown = (e) => {\n        const {ctrlSend} = this.props;\n\n        if (ctrlSend && Utils.isKeyPressed(e, Constants.KeyCodes.ENTER) && e.ctrlKey) {\n            e.preventDefault();\n            this.handleSave(e);\n        } else if (!ctrlSend && Utils.isKeyPressed(e, Constants.KeyCodes.ENTER) && !e.shiftKey && !e.altKey) {\n            e.preventDefault();\n            this.handleSave(e);\n        }\n    }\n\n    handleSave = async () => {\n        const {channel, actions: {patchChannel}} = this.props;\n        const {purpose} = this.state;\n        if (!channel) {\n            return;\n        }\n\n        this.setState({requestStarted: true});\n        const {data, error} = await patchChannel(channel.id, {purpose});\n        this.setState({requestStarted: false});\n\n        if (data) {\n            this.unsetError();\n            this.onHide();\n        } else if (error) {\n            this.setError(error);\n        }\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({purpose: e.target.value});\n    }\n\n    getPurpose = (node) => {\n        this.purpose = node;\n    };\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='form-group has-error'>\n                    <br/>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let title = (\n            <span>\n                <FormattedMessage\n                    id='edit_channel_purpose_modal.title1'\n                    defaultMessage='Edit Purpose'\n                />\n            </span>\n        );\n        if (this.props.channel.display_name) {\n            title = (\n                <span>\n                    <FormattedMessage\n                        id='edit_channel_purpose_modal.title2'\n                        defaultMessage='Edit Purpose for '\n                    />\n                    <span className='name'>{this.props.channel.display_name}</span>\n                </span>\n            );\n        }\n\n        let channelPurposeModal = (\n            <FormattedMessage\n                id='edit_channel_purpose_modal.body'\n                defaultMessage='Describe how this channel should be used. This text appears in the channel list in the \"More...\" menu and helps others decide whether to join.'\n            />\n        );\n        if (this.props.channel.type === 'P') {\n            channelPurposeModal = (\n                <FormattedMessage\n                    id='edit_channel_private_purpose_modal.body'\n                    defaultMessage='This text appears in the \\\"View Info\\\" modal of the private channel.'\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onEntering={this.handleEntering}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='editChannelPurposeModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editChannelPurposeModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        {channelPurposeModal}\n                    </p>\n                    <textarea\n                        ref={this.getPurpose}\n                        className='form-control no-resize'\n                        rows='6'\n                        maxLength='250'\n                        value={this.state.purpose}\n                        onKeyDown={this.handleKeyDown}\n                        onChange={this.handleChange}\n                    />\n                    {serverError}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link cancel-button'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_purpose_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary save-button'\n                        disabled={this.state.requestStarted}\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_purpose_modal.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {patchChannel} from 'mattermost-redux/actions/channels';\n\nimport Constants from 'utils/constants';\n\nimport EditChannelPurposeModal from './edit_channel_purpose_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        ctrlSend: getBool(state, Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            patchChannel: bindActionCreators(patchChannel, dispatch),\n        },\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(EditChannelPurposeModal);\n\n","// Copyright (c) 2015-present ACheckin, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nexport default class LockIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.send'\n                    defaultMessage='Send Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg aria-label={ariaLabel} fill={\"rgb(15, 164, 74)\"} height=\"20px\" width=\"20px\" viewBox=\"0 0 24 24\"><path d=\"M16.6915026,12.4744748 L3.50612381,13.2599618 C3.19218622,13.2599618 3.03521743,13.4170592 3.03521743,13.5741566 L1.15159189,20.0151496 C0.8376543,20.8006365 0.99,21.89 1.77946707,22.52 C2.41,22.99 3.50612381,23.1 4.13399899,22.8429026 L21.714504,14.0454487 C22.6563168,13.5741566 23.1272231,12.6315722 22.9702544,11.6889879 C22.8132856,11.0605983 22.3423792,10.4322088 21.714504,10.118014 L4.13399899,1.16346272 C3.34915502,0.9 2.40734225,1.00636533 1.77946707,1.4776575 C0.994623095,2.10604706 0.8376543,3.0486314 1.15159189,3.99121575 L3.03521743,10.4322088 C3.03521743,10.5893061 3.34915502,10.7464035 3.50612381,10.7464035 L16.6915026,11.5318905 C16.6915026,11.5318905 17.1624089,11.5318905 17.1624089,12.0031827 C17.1624089,12.4744748 16.6915026,12.4744748 16.6915026,12.4744748 Z\" fill-rule=\"evenodd\" stroke=\"none\"></path></svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {sortFileInfos} from 'mattermost-redux/utils/file_utils';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport Constants, {StoragePrefixes, ModalIdentifiers} from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport {\n    containsAtChannel,\n    postMessageOnKeyPress,\n    shouldFocusMainTextbox,\n    isErrorInvalidSlashCommand,\n    splitMessageBasedOnCaretPosition,\n} from 'utils/post_utils.jsx';\nimport {getTable, getPlainText, formatMarkdownTableMessage, isGitHubCodeBlock} from 'utils/paste';\nimport {intlShape} from 'utils/react_intl';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport EditChannelPurposeModal from 'components/edit_channel_purpose_modal';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport FilePreview from 'components/file_preview';\nimport FileUpload from 'components/file_upload';\nimport LocalizedIcon from 'components/localized_icon';\nimport MsgTyping from 'components/msg_typing';\nimport PostDeletedModal from 'components/post_deleted_modal';\nimport ResetStatusModal from 'components/reset_status_modal';\nimport EmojiIcon from 'components/widgets/icons/emoji_icon';\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\nimport TutorialTip from 'components/tutorial/tutorial_tip';\nimport SendIcon from 'components/widgets/icons/send_icon.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport MessageSubmitError from 'components/message_submit_error';\n\nconst KeyCodes = Constants.KeyCodes;\n\n// Temporary fix for IE-11, see MM-13423\nfunction trimRight(str) {\n    if (String.prototype.trimRight) {\n        return str.trimRight();\n    }\n\n    return str.replace(/\\s*$/, '');\n}\n\nclass CreatePost extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         *  ref passed from channelView for EmojiPickerOverlay\n         */\n        getChannelView: PropTypes.func,\n\n        /**\n         *  Data used in notifying user for @all and @channel\n         */\n        currentChannelMembersCount: PropTypes.number,\n\n        /**\n         *  Data used in multiple places of the component\n         */\n        currentChannel: PropTypes.object,\n\n        /**\n         *  Data used in executing commands for channel actions passed down to client4 function\n         */\n        currentTeamId: PropTypes.string,\n\n        /**\n         *  Data used for posting message\n         */\n        currentUserId: PropTypes.string,\n\n        /**\n         * Force message submission on CTRL/CMD + ENTER\n         */\n        codeBlockOnCtrlEnter: PropTypes.bool,\n\n        /**\n         *  Flag used for handling submit\n         */\n        ctrlSend: PropTypes.bool,\n\n        /**\n         *  Flag used for adding a class center to Postbox based on user pref\n         */\n        fullWidthTextBox: PropTypes.bool,\n\n        /**\n         *  Data used for deciding if tutorial tip is to be shown\n         */\n        showTutorialTip: PropTypes.bool.isRequired,\n\n        /**\n         *  Data used populating message state when triggered by shortcuts\n         */\n        messageInHistoryItem: PropTypes.string,\n\n        /**\n         *  Data used for populating message state from previous draft\n         */\n        draft: PropTypes.shape({\n            message: PropTypes.string.isRequired,\n            uploadsInProgress: PropTypes.array.isRequired,\n            fileInfos: PropTypes.array.isRequired,\n        }).isRequired,\n\n        /**\n         *  Data used dispatching handleViewAction\n         */\n        commentCountForPost: PropTypes.number,\n\n        /**\n         *  Data used dispatching handleViewAction ex: edit post\n         */\n        latestReplyablePostId: PropTypes.string,\n        locale: PropTypes.string.isRequired,\n\n        /**\n         *  Data used for calling edit of post\n         */\n        currentUsersLatestPost: PropTypes.object,\n\n        /**\n         *  Set if the channel is read only.\n         */\n        readOnlyChannel: PropTypes.bool,\n\n        /**\n         * Whether or not file upload is allowed.\n         */\n        canUploadFiles: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to show the emoji picker.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to show the gif picker.\n         */\n        enableGifPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to check with the user before notifying the whole channel.\n         */\n        enableConfirmNotificationsToChannel: PropTypes.bool.isRequired,\n\n        /**\n         * The maximum length of a post\n         */\n        maxPostSize: PropTypes.number.isRequired,\n        emojiMap: PropTypes.object.isRequired,\n\n        /**\n         * If our connection is bad\n         */\n        badConnection: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to display a confirmation modal to reset status.\n         */\n        userIsOutOfOffice: PropTypes.bool.isRequired,\n        rhsExpanded: PropTypes.bool.isRequired,\n\n        /**\n         * To check if the timezones are enable on the server.\n         */\n        isTimezoneEnabled: PropTypes.bool.isRequired,\n\n        intl: intlShape.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             *  func called after message submit.\n             */\n            addMessageIntoHistory: PropTypes.func.isRequired,\n\n            /**\n             *  func called for navigation through messages by Up arrow\n             */\n            moveHistoryIndexBack: PropTypes.func.isRequired,\n\n            /**\n             *  func called for navigation through messages by Down arrow\n             */\n            moveHistoryIndexForward: PropTypes.func.isRequired,\n\n            /**\n             *  func called for adding a reaction\n             */\n            addReaction: PropTypes.func.isRequired,\n\n            /**\n             *  func called for posting message\n             */\n            onSubmitPost: PropTypes.func.isRequired,\n\n            /**\n             *  func called for removing a reaction\n             */\n            removeReaction: PropTypes.func.isRequired,\n\n            /**\n             *  func called on load of component to clear drafts\n             */\n            clearDraftUploads: PropTypes.func.isRequired,\n\n            /**\n             * hooks called before a message is sent to the server\n             */\n            runMessageWillBePostedHooks: PropTypes.func.isRequired,\n\n            /**\n             * hooks called before a slash command is sent to the server\n             */\n            runSlashCommandWillBePostedHooks: PropTypes.func.isRequired,\n\n            /**\n             *  func called for setting drafts\n             */\n            setDraft: PropTypes.func.isRequired,\n\n            /**\n             *  func called for editing posts\n             */\n            setEditingPost: PropTypes.func.isRequired,\n\n            /**\n             *  func called for opening the last replayable post in the RHS\n             */\n            selectPostFromRightHandSideSearchByPostId: PropTypes.func.isRequired,\n\n            /**\n             * Function to open a modal\n             */\n            openModal: PropTypes.func.isRequired,\n\n            executeCommand: PropTypes.func.isRequired,\n\n            /**\n             * Function to get the users timezones in the channel\n             */\n            getChannelTimezones: PropTypes.func.isRequired,\n\n            scrollPostListToBottom: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        latestReplyablePostId: '',\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let updatedState = {currentChannel: props.currentChannel};\n        if (props.currentChannel.id !== state.currentChannel.id) {\n            updatedState = {\n                ...updatedState,\n                message: props.draft.message,\n                submitting: false,\n                serverError: null,\n                showPreview: false,\n            };\n        }\n        return updatedState;\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: this.props.draft.message,\n            caretPosition: this.props.draft.message.length,\n            submitting: false,\n            showPostDeletedModal: false,\n            showEmojiPicker: false,\n            showConfirmModal: false,\n            channelTimezoneCount: 0,\n            showPreview: false,\n            uploadsProgressPercent: {},\n            renderScrollbar: false,\n            currentChannel: props.currentChannel,\n        };\n\n        this.lastBlurAt = 0;\n        this.lastChannelSwitchAt = 0;\n        this.draftsForChannel = {};\n        this.lastOrientation = null;\n    }\n\n    componentDidMount() {\n        this.onOrientationChange();\n        this.props.actions.clearDraftUploads(StoragePrefixes.DRAFT, (key, value) => {\n            if (value) {\n                return {...value, uploadsInProgress: []};\n            }\n            return value;\n        });\n\n        this.focusTextbox();\n        document.addEventListener('paste', this.pasteHandler);\n        document.addEventListener('keydown', this.documentKeyHandler);\n        this.setOrientationListeners();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.currentChannel.id !== this.props.currentChannel.id) {\n            this.lastChannelSwitchAt = Date.now();\n            this.focusTextbox();\n        }\n\n        // Focus on textbox when emoji picker is closed\n        if (prevState.showEmojiPicker && !this.state.showEmojiPicker) {\n            this.focusTextbox();\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('paste', this.pasteHandler);\n        document.removeEventListener('keydown', this.documentKeyHandler);\n        this.removeOrientationListeners();\n        if (this.saveDraftFrame) {\n            const channelId = this.props.currentChannel.id;\n            this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, this.draftsForChannel[channelId]);\n            cancelAnimationFrame(this.saveDraftFrame);\n        }\n    }\n\n    updatePreview = (newState) => {\n        this.setState({showPreview: newState});\n    }\n\n    setOrientationListeners = () => {\n        if ((window.screen.orientation) && ('onchange' in window.screen.orientation)) {\n            window.screen.orientation.addEventListener('change', this.onOrientationChange);\n        } else if ('onorientationchange' in window) {\n            window.addEventListener('orientationchange', this.onOrientationChange);\n        }\n    };\n\n    removeOrientationListeners = () => {\n        if ((window.screen.orientation) && ('onchange' in window.screen.orientation)) {\n            window.screen.orientation.removeEventListener('change', this.onOrientationChange);\n        } else if ('onorientationchange' in window) {\n            window.removeEventListener('orientationchange', this.onOrientationChange);\n        }\n    };\n\n    onOrientationChange = () => {\n        if (!UserAgent.isIosWeb()) {\n            return;\n        }\n\n        const LANDSCAPE_ANGLE = 90;\n        let orientation = 'portrait';\n        if (window.orientation) {\n            orientation = Math.abs(window.orientation) === LANDSCAPE_ANGLE ? 'landscape' : 'portrait';\n        }\n\n        if (window.screen.orientation) {\n            orientation = window.screen.orientation.type.split('-')[0];\n        }\n\n        if (this.lastOrientation && orientation !== this.lastOrientation && (document.activeElement || {}).id === 'post_textbox') {\n            this.refs.textbox.getWrappedInstance().blur();\n        }\n\n        this.lastOrientation = orientation;\n    }\n\n    handlePostError = (postError) => {\n        this.setState({postError});\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n    }\n\n    hideEmojiPicker = () => {\n        this.handleEmojiClose();\n    }\n\n    doSubmit = async (e) => {\n        const channelId = this.props.currentChannel.id;\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.props.draft.uploadsInProgress.length > 0 || this.state.submitting) {\n            return;\n        }\n\n        let message = this.state.message;\n        let ignoreSlash = false;\n        const serverError = this.state.serverError;\n\n        if (serverError && isErrorInvalidSlashCommand(serverError) && serverError.submittedMessage === message) {\n            message = serverError.submittedMessage;\n            ignoreSlash = true;\n        }\n\n        const post = {};\n        post.file_ids = [];\n        post.message = message;\n\n        if (post.message.trim().length === 0 && this.props.draft.fileInfos.length === 0) {\n            return;\n        }\n\n        if (this.state.postError) {\n            this.setState({errorClass: 'animation--highlight'});\n            setTimeout(() => {\n                this.setState({errorClass: null});\n            }, Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        this.props.actions.addMessageIntoHistory(this.state.message);\n\n        this.setState({submitting: true, serverError: null});\n\n        const isReaction = Utils.REACTION_PATTERN.exec(post.message);\n        if (post.message.indexOf('/') === 0 && !ignoreSlash) {\n            this.setState({message: '', postError: null});\n            let args = {};\n            args.channel_id = channelId;\n            args.team_id = this.props.currentTeamId;\n\n            const hookResult = await this.props.actions.runSlashCommandWillBePostedHooks(post.message, args);\n\n            if (hookResult.error) {\n                this.setState({\n                    serverError: {\n                        ...hookResult.error,\n                        submittedMessage: post.message,\n                    },\n                    message: post.message,\n                });\n            } else if (!hookResult.data.message && !hookResult.data.args) {\n                // do nothing with an empty return from a hook\n            } else {\n                post.message = hookResult.data.message;\n                args = hookResult.data.args;\n\n                const {error} = await this.props.actions.executeCommand(post.message, args);\n\n                if (error) {\n                    if (error.sendMessage) {\n                        await this.sendMessage(post);\n                    } else {\n                        this.setState({\n                            serverError: {\n                                ...error,\n                                submittedMessage: post.message,\n                            },\n                            message: post.message,\n                        });\n                    }\n                }\n            }\n        } else if (isReaction && this.props.emojiMap.has(isReaction[2])) {\n            this.sendReaction(isReaction);\n\n            this.setState({message: ''});\n        } else {\n            const {error} = await this.sendMessage(post);\n\n            if (!error) {\n                this.setState({message: ''});\n            }\n        }\n\n        this.setState({\n            submitting: false,\n            postError: null,\n        });\n\n        cancelAnimationFrame(this.saveDraftFrame);\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, null);\n        this.draftsForChannel[channelId] = null;\n\n        const fasterThanHumanWillClick = 150;\n        const forceFocus = (Date.now() - this.lastBlurAt < fasterThanHumanWillClick);\n\n        this.focusTextbox(forceFocus);\n    }\n\n    handleNotifyAllConfirmation = (e) => {\n        this.hideNotifyAllModal();\n        this.doSubmit(e);\n    }\n\n    hideNotifyAllModal = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    showNotifyAllModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    getStatusFromSlashCommand = () => {\n        const {message} = this.state;\n        const tokens = message.split(' ');\n\n        if (tokens.length > 0) {\n            return tokens[0].substring(1);\n        }\n        return '';\n    };\n\n    isStatusSlashCommand = (command) => {\n        return command === 'online' || command === 'away' ||\n            command === 'dnd' || command === 'offline';\n    };\n\n    handleSubmit = async (e) => {\n        const {\n            currentChannel: updateChannel,\n            userIsOutOfOffice,\n        } = this.props;\n\n        const currentMembersCount = this.props.currentChannelMembersCount;\n        const notificationsToChannel = this.props.enableConfirmNotificationsToChannel;\n        if (notificationsToChannel &&\n            currentMembersCount > Constants.NOTIFY_ALL_MEMBERS &&\n            containsAtChannel(this.state.message)) {\n            if (this.props.isTimezoneEnabled) {\n                const {data} = await this.props.actions.getChannelTimezones(this.props.currentChannel.id);\n                if (data) {\n                    this.setState({channelTimezoneCount: data.length});\n                } else {\n                    this.setState({channelTimezoneCount: 0});\n                }\n            }\n            this.showNotifyAllModal();\n            return;\n        }\n\n        const status = this.getStatusFromSlashCommand();\n        if (userIsOutOfOffice && this.isStatusSlashCommand(status)) {\n            const resetStatusModalData = {\n                ModalId: ModalIdentifiers.RESET_STATUS,\n                dialogType: ResetStatusModal,\n                dialogProps: {newStatus: status},\n            };\n\n            this.props.actions.openModal(resetStatusModalData);\n\n            this.setState({message: ''});\n            return;\n        }\n\n        if (trimRight(this.state.message) === '/header') {\n            const editChannelHeaderModalData = {\n                modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n                dialogType: EditChannelHeaderModal,\n                dialogProps: {channel: updateChannel},\n            };\n\n            this.props.actions.openModal(editChannelHeaderModalData);\n\n            this.setState({message: ''});\n            return;\n        }\n\n        const isDirectOrGroup = ((updateChannel.type === Constants.DM_CHANNEL) || (updateChannel.type === Constants.GM_CHANNEL));\n        if (!isDirectOrGroup && trimRight(this.state.message) === '/purpose') {\n            const editChannelPurposeModalData = {\n                modalId: ModalIdentifiers.EDIT_CHANNEL_PURPOSE,\n                dialogType: EditChannelPurposeModal,\n                dialogProps: {channel: updateChannel},\n            };\n\n            this.props.actions.openModal(editChannelPurposeModalData);\n\n            this.setState({message: ''});\n            return;\n        }\n\n        if (!isDirectOrGroup && trimRight(this.state.message) === '/rename') {\n            GlobalActions.showChannelNameUpdateModal(updateChannel);\n            this.setState({message: ''});\n            return;\n        }\n\n        await this.doSubmit(e);\n    }\n\n    sendMessage = async (originalPost) => {\n        const {\n            actions,\n            currentChannel,\n            currentUserId,\n            draft,\n        } = this.props;\n\n        let post = originalPost;\n\n        post.channel_id = currentChannel.id;\n\n        const time = Utils.getTimestamp();\n        const userId = currentUserId;\n        post.pending_post_id = `${userId}:${time}`;\n        post.user_id = userId;\n        post.create_at = time;\n        post.parent_id = this.state.parentId;\n        post.metadata = {};\n        post.props = {};\n        const hookResult = await actions.runMessageWillBePostedHooks(post);\n\n        if (hookResult.error) {\n            this.setState({\n                serverError: hookResult.error,\n                submitting: false,\n            });\n\n            return hookResult;\n        }\n\n        post = hookResult.data;\n\n        actions.onSubmitPost(post, draft.fileInfos);\n        actions.scrollPostListToBottom();\n\n        this.setState({\n            submitting: false,\n        });\n\n        return {data: true};\n    }\n\n    sendReaction(isReaction) {\n        const channelId = this.props.currentChannel.id;\n        const action = isReaction[1];\n        const emojiName = isReaction[2];\n        const postId = this.props.latestReplyablePostId;\n\n        if (postId && action === '+') {\n            this.props.actions.addReaction(postId, emojiName);\n        } else if (postId && action === '-') {\n            this.props.actions.removeReaction(postId, emojiName);\n        }\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, null);\n        this.draftsForChannel[channelId] = null;\n    }\n\n    focusTextbox = (keepFocus = false) => {\n        if (this.refs.textbox && (keepFocus || !UserAgent.isMobile())) {\n            this.refs.textbox.getWrappedInstance().focus();\n        }\n    }\n\n    postMsgKeyPress = (e) => {\n        const {ctrlSend, codeBlockOnCtrlEnter} = this.props;\n\n        const {allowSending, withClosedCodeBlock, ignoreKeyPress, message} = postMessageOnKeyPress(e, this.state.message, ctrlSend, codeBlockOnCtrlEnter, Date.now(), this.lastChannelSwitchAt, this.state.caretPosition);\n\n        if (ignoreKeyPress) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        if (allowSending) {\n            e.persist();\n            if (this.refs.textbox) {\n                this.refs.textbox.getWrappedInstance().blur();\n            }\n\n            if (withClosedCodeBlock && message) {\n                this.setState({message}, () => this.handleSubmit(e));\n            } else {\n                this.handleSubmit(e);\n            }\n\n            this.updatePreview(false);\n        }\n\n        this.emitTypingEvent();\n    }\n\n    emitTypingEvent = () => {\n        const channelId = this.props.currentChannel.id;\n        GlobalActions.emitLocalUserTypingEvent(channelId, '');\n    }\n\n    handleChange = (e) => {\n        const message = e.target.value;\n        const channelId = this.props.currentChannel.id;\n\n        let serverError = this.state.serverError;\n        if (isErrorInvalidSlashCommand(serverError)) {\n            serverError = null;\n        }\n\n        this.setState({\n            message,\n            serverError,\n        });\n\n        const draft = {\n            ...this.props.draft,\n            message,\n        };\n        cancelAnimationFrame(this.saveDraftFrame);\n        this.saveDraftFrame = requestAnimationFrame(() => {\n            this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, draft);\n        });\n        this.draftsForChannel[channelId] = draft;\n    }\n\n    pasteHandler = (e) => {\n        if (!e.clipboardData || !e.clipboardData.items || e.target.id !== 'post_textbox') {\n            return;\n        }\n        const table = getTable(e.clipboardData);\n        if (!table) {\n            return;\n        }\n\n        e.preventDefault();\n\n        let message = '';\n        if (isGitHubCodeBlock(table.className)) {\n            message = '```\\n' + getPlainText(e.clipboardData) + '\\n```';\n        } else {\n            message = formatMarkdownTableMessage(table, this.state.message.trim());\n        }\n        this.setState({message});\n    }\n\n    handleFileUploadChange = () => {\n        this.focusTextbox();\n    }\n\n    handleUploadStart = (clientIds, channelId) => {\n        const uploadsInProgress = [\n            ...this.props.draft.uploadsInProgress,\n            ...clientIds,\n        ];\n\n        const draft = {\n            ...this.props.draft,\n            uploadsInProgress,\n        };\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, draft);\n        this.draftsForChannel[channelId] = draft;\n\n        // this is a bit redundant with the code that sets focus when the file input is clicked,\n        // but this also resets the focus after a drag and drop\n        this.focusTextbox();\n    }\n\n    handleUploadProgress = ({clientId, name, percent, type}) => {\n        const uploadsProgressPercent = {...this.state.uploadsProgressPercent, [clientId]: {percent, name, type}};\n        this.setState({uploadsProgressPercent});\n    }\n\n    handleFileUploadComplete = (fileInfos, clientIds, channelId) => {\n        const draft = {...this.draftsForChannel[channelId]};\n\n        // remove each finished file from uploads\n        for (let i = 0; i < clientIds.length; i++) {\n            if (draft.uploadsInProgress) {\n                const index = draft.uploadsInProgress.indexOf(clientIds[i]);\n\n                if (index !== -1) {\n                    draft.uploadsInProgress = draft.uploadsInProgress.filter((item, itemIndex) => index !== itemIndex);\n                }\n            }\n        }\n\n        if (draft.fileInfos) {\n            draft.fileInfos = sortFileInfos(draft.fileInfos.concat(fileInfos), this.props.locale);\n        }\n\n        this.draftsForChannel[channelId] = draft;\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, draft);\n    }\n\n    handleUploadError = (err, clientId, channelId) => {\n        const draft = {...this.draftsForChannel[channelId]};\n\n        let serverError = err;\n        if (typeof err === 'string') {\n            serverError = new Error(err);\n        }\n\n        if (clientId !== -1 && draft.uploadsInProgress) {\n            const index = draft.uploadsInProgress.indexOf(clientId);\n\n            if (index !== -1) {\n                const uploadsInProgress = draft.uploadsInProgress.filter((item, itemIndex) => index !== itemIndex);\n                const modifiedDraft = {\n                    ...draft,\n                    uploadsInProgress,\n                };\n                this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, modifiedDraft);\n                this.draftsForChannel[channelId] = modifiedDraft;\n            }\n        }\n\n        this.setState({serverError});\n    }\n\n    removePreview = (id) => {\n        let modifiedDraft = {};\n        const draft = {...this.props.draft};\n        const channelId = this.props.currentChannel.id;\n\n        // Clear previous errors\n        this.setState({serverError: null});\n\n        // id can either be the id of an uploaded file or the client id of an in progress upload\n        let index = draft.fileInfos.findIndex((info) => info.id === id);\n        if (index === -1) {\n            index = draft.uploadsInProgress.indexOf(id);\n\n            if (index !== -1) {\n                const uploadsInProgress = draft.uploadsInProgress.filter((item, itemIndex) => index !== itemIndex);\n\n                modifiedDraft = {\n                    ...draft,\n                    uploadsInProgress,\n                };\n\n                if (this.refs.fileUpload && this.refs.fileUpload.getWrappedInstance()) {\n                    this.refs.fileUpload.getWrappedInstance().cancelUpload(id);\n                }\n            }\n        } else {\n            const fileInfos = draft.fileInfos.filter((item, itemIndex) => index !== itemIndex);\n\n            modifiedDraft = {\n                ...draft,\n                fileInfos,\n            };\n        }\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, modifiedDraft);\n        this.draftsForChannel[channelId] = modifiedDraft;\n\n        this.handleFileUploadChange();\n    }\n\n    focusTextboxIfNecessary = (e) => {\n        // Focus should go to the RHS when it is expanded\n        if (this.props.rhsExpanded) {\n            return;\n        }\n\n        // Bit of a hack to not steal focus from the channel switch modal if it's open\n        // This is a special case as the channel switch modal does not enforce focus like\n        // most modals do\n        if (document.getElementsByClassName('channel-switch-modal').length) {\n            return;\n        }\n\n        if (shouldFocusMainTextbox(e, document.activeElement)) {\n            this.focusTextbox();\n        }\n    }\n\n    documentKeyHandler = (e) => {\n        if ((e.ctrlKey || e.metaKey) && Utils.isKeyPressed(e, KeyCodes.FORWARD_SLASH)) {\n            e.preventDefault();\n\n            GlobalActions.toggleShortcutsModal();\n            return;\n        }\n\n        this.focusTextboxIfNecessary(e);\n    }\n\n    getFileCount = () => {\n        const draft = this.props.draft;\n        return draft.fileInfos.length + draft.uploadsInProgress.length;\n    }\n\n    getFileUploadTarget = () => {\n        if (this.refs.textbox) {\n            return this.refs.textbox.getWrappedInstance();\n        }\n\n        return null;\n    }\n\n    getCreatePostControls = () => {\n        return this.refs.createPostControls;\n    }\n\n    fillMessageFromHistory() {\n        const lastMessage = this.props.messageInHistoryItem;\n        if (lastMessage) {\n            this.setState({\n                message: lastMessage,\n            });\n        }\n    }\n\n    handleMouseUpKeyUp = (e) => {\n        const caretPosition = Utils.getCaretPosition(e.target);\n        this.setState({\n            caretPosition,\n        });\n    }\n\n    handleKeyDown = (e) => {\n        const ctrlOrMetaKeyPressed = e.ctrlKey || e.metaKey;\n        const messageIsEmpty = this.state.message.length === 0;\n        const draftMessageIsEmpty = this.props.draft.message.length === 0;\n        const ctrlEnterKeyCombo = (this.props.ctrlSend || this.props.codeBlockOnCtrlEnter) && Utils.isKeyPressed(e, KeyCodes.ENTER) && ctrlOrMetaKeyPressed;\n        const upKeyOnly = !ctrlOrMetaKeyPressed && !e.altKey && !e.shiftKey && Utils.isKeyPressed(e, KeyCodes.UP);\n        const shiftUpKeyCombo = !ctrlOrMetaKeyPressed && !e.altKey && e.shiftKey && Utils.isKeyPressed(e, KeyCodes.UP);\n        const ctrlKeyCombo = ctrlOrMetaKeyPressed && !e.altKey && !e.shiftKey;\n\n        if (ctrlEnterKeyCombo) {\n            this.postMsgKeyPress(e);\n        } else if (upKeyOnly && messageIsEmpty) {\n            this.editLastPost(e);\n        } else if (shiftUpKeyCombo && messageIsEmpty) {\n            this.replyToLastPost(e);\n        } else if (ctrlKeyCombo && draftMessageIsEmpty && Utils.isKeyPressed(e, KeyCodes.UP)) {\n            this.loadPrevMessage(e);\n        } else if (ctrlKeyCombo && draftMessageIsEmpty && Utils.isKeyPressed(e, KeyCodes.DOWN)) {\n            this.loadNextMessage(e);\n        }\n    }\n\n    editLastPost = (e) => {\n        e.preventDefault();\n\n        const lastPost = this.props.currentUsersLatestPost;\n        if (!lastPost) {\n            return;\n        }\n\n        let type;\n        if (lastPost.root_id && lastPost.root_id.length > 0) {\n            type = Utils.localizeMessage('create_post.comment', Posts.MESSAGE_TYPES.COMMENT);\n        } else {\n            type = Utils.localizeMessage('create_post.post', Posts.MESSAGE_TYPES.POST);\n        }\n        if (this.refs.textbox) {\n            this.refs.textbox.getWrappedInstance().blur();\n        }\n        this.props.actions.setEditingPost(lastPost.id, this.props.commentCountForPost, 'post_textbox', type);\n    }\n\n    replyToLastPost = (e) => {\n        e.preventDefault();\n        const latestReplyablePostId = this.props.latestReplyablePostId;\n        const replyBox = document.getElementById('reply_textbox');\n        if (replyBox) {\n            replyBox.focus();\n        }\n        if (latestReplyablePostId) {\n            this.props.actions.selectPostFromRightHandSideSearchByPostId(latestReplyablePostId);\n        }\n    }\n\n    loadPrevMessage = (e) => {\n        e.preventDefault();\n        this.props.actions.moveHistoryIndexBack(Posts.MESSAGE_TYPES.POST).then(() => this.fillMessageFromHistory());\n    }\n\n    loadNextMessage = (e) => {\n        e.preventDefault();\n        this.props.actions.moveHistoryIndexForward(Posts.MESSAGE_TYPES.POST).then(() => this.fillMessageFromHistory());\n    }\n\n    handleBlur = () => {\n        this.lastBlurAt = Date.now();\n    }\n\n    showPostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: true,\n        });\n    }\n\n    hidePostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: false,\n        });\n    }\n\n    handleEmojiClose = () => {\n        this.setState({showEmojiPicker: false});\n    }\n\n    handleEmojiClick = (emoji) => {\n        const emojiAlias = emoji.name || emoji.aliases[0];\n\n        if (!emojiAlias) {\n            //Oops.. There went something wrong\n            return;\n        }\n\n        if (this.state.message === '') {\n            this.setState({message: ':' + emojiAlias + ': '});\n        } else {\n            const {message} = this.state;\n            const {firstPiece, lastPiece} = splitMessageBasedOnCaretPosition(this.state.caretPosition, message);\n\n            // check whether the first piece of the message is empty when cursor is placed at beginning of message and avoid adding an empty string at the beginning of the message\n            const newMessage = firstPiece === '' ? `:${emojiAlias}: ${lastPiece}` : `${firstPiece} :${emojiAlias}: ${lastPiece}`;\n\n            const newCaretPosition = firstPiece === '' ? `:${emojiAlias}: `.length : `${firstPiece} :${emojiAlias}: `.length;\n\n            const textbox = this.refs.textbox.getWrappedInstance().getInputBox();\n\n            this.setState({\n                message: newMessage,\n                caretPosition: newCaretPosition,\n            }, () => {\n                Utils.setCaretPosition(textbox, newCaretPosition);\n            });\n        }\n\n        this.handleEmojiClose();\n    }\n\n    handleGifClick = (gif) => {\n        if (this.state.message === '') {\n            this.setState({message: gif});\n        } else {\n            const newMessage = ((/\\s+$/).test(this.state.message)) ? this.state.message + gif : this.state.message + ' ' + gif;\n            this.setState({message: newMessage});\n        }\n        this.handleEmojiClose();\n    }\n\n    createTutorialTip() {\n        const screens = [];\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='create_post.tutorialTip.title'\n                        defaultMessage='Sending Messages'\n                    />\n                </h4>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='create_post.tutorialTip1'\n                        defaultMessage='Type here to write a message and press **Enter** to post it.'\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='create_post.tutorialTip2'\n                        defaultMessage='Click the **Attachment** button to upload an image or a file.'\n                    />\n                </p>\n            </div>,\n        );\n\n        return (\n            <TutorialTip\n                id='postTextboxTipMessage'\n                placement='top'\n                screens={screens}\n                overlayClass='tip-overlay--chat'\n                diagnosticsTag='tutorial_tip_1_sending_messages'\n            />\n        );\n    }\n\n    shouldEnableSendButton() {\n        return this.state.message.trim().length !== 0 || this.props.draft.fileInfos.length !== 0;\n    }\n\n    handleHeightChange = (height, maxHeight) => {\n        this.setState({renderScrollbar: height > maxHeight});\n    }\n\n    render() {\n        const {\n            currentChannel,\n            currentChannelMembersCount,\n            draft,\n            fullWidthTextBox,\n            showTutorialTip,\n            readOnlyChannel,\n        } = this.props;\n        const {formatMessage} = this.props.intl;\n        const members = currentChannelMembersCount - 1;\n        const {renderScrollbar} = this.state;\n        const ariaLabelMessageInput = Utils.localizeMessage('accessibility.sections.centerFooter', 'message input complimentary region');\n\n        const notifyAllTitle = (\n            <FormattedMessage\n                id='notify_all.title.confirm'\n                defaultMessage='Confirm sending notifications to entire channel'\n            />\n        );\n\n        const notifyAllConfirm = (\n            <FormattedMessage\n                id='notify_all.confirm'\n                defaultMessage='Confirm'\n            />\n        );\n\n        let notifyAllMessage = '';\n        if (this.state.channelTimezoneCount && this.props.isTimezoneEnabled) {\n            notifyAllMessage = (\n                <FormattedMarkdownMessage\n                    id='notify_all.question_timezone'\n                    defaultMessage='By using @all or @channel you are about to send notifications to **{totalMembers} people** in **{timezones, number} {timezones, plural, one {timezone} other {timezones}}**. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: members,\n                        timezones: this.state.channelTimezoneCount,\n                    }}\n                />\n            );\n        } else {\n            notifyAllMessage = (\n                <FormattedMessage\n                    id='notify_all.question'\n                    defaultMessage='By using @all or @channel you are about to send notifications to {totalMembers} people. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: members,\n                    }}\n                />\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <MessageSubmitError\n                    id='postServerError'\n                    error={this.state.serverError}\n                    submittedMessage={this.state.serverError.submittedMessage}\n                    handleSubmit={this.handleSubmit}\n                />\n            );\n        }\n\n        let postError = null;\n        if (this.state.postError) {\n            const postErrorClass = 'post-error' + (this.state.errorClass ? (' ' + this.state.errorClass) : '');\n            postError = <label className={postErrorClass}>{this.state.postError}</label>;\n        }\n\n        let preview = null;\n        if (!readOnlyChannel && (draft.fileInfos.length > 0 || draft.uploadsInProgress.length > 0)) {\n            preview = (\n                <FilePreview\n                    fileInfos={draft.fileInfos}\n                    onRemove={this.removePreview}\n                    uploadsInProgress={draft.uploadsInProgress}\n                    uploadsProgressPercent={this.state.uploadsProgressPercent}\n                />\n            );\n        }\n\n        let postFooterClassName = 'post-create-footer';\n        if (postError) {\n            postFooterClassName += ' has-error';\n        }\n\n        let tutorialTip = null;\n        if (showTutorialTip) {\n            tutorialTip = this.createTutorialTip();\n        }\n\n        let centerClass = '';\n        if (!fullWidthTextBox) {\n            centerClass = 'center';\n        }\n\n        let sendButtonClass = 'send-button theme';\n        if (!this.shouldEnableSendButton()) {\n            sendButtonClass += ' disabled';\n        }\n\n        let attachmentsDisabled = '';\n        if (!this.props.canUploadFiles) {\n            attachmentsDisabled = ' post-create--attachment-disabled';\n        }\n\n        let fileUpload;\n        if (!readOnlyChannel && !this.state.showPreview) {\n            fileUpload = (\n                <FileUpload\n                    ref='fileUpload'\n                    fileCount={this.getFileCount()}\n                    getTarget={this.getFileUploadTarget}\n                    onFileUploadChange={this.handleFileUploadChange}\n                    onUploadStart={this.handleUploadStart}\n                    onFileUpload={this.handleFileUploadComplete}\n                    onUploadError={this.handleUploadError}\n                    onUploadProgress={this.handleUploadProgress}\n                    postType='post'\n                />\n            );\n        }\n\n        let emojiPicker = null;\n        const emojiButtonAriaLabel = formatMessage({id: 'emoji_picker.emojiPicker', defaultMessage: 'Emoji Picker'}).toLowerCase();\n\n        if (this.props.enableEmojiPicker && !readOnlyChannel && !this.state.showPreview) {\n            emojiPicker = (\n                <div>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        target={this.getCreatePostControls}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClose={this.handleEmojiClose}\n                        onEmojiClick={this.handleEmojiClick}\n                        onGifClick={this.handleGifClick}\n                        enableGifPicker={this.props.enableGifPicker}\n                        topOffset={-7}\n                    />\n                    <button\n                        type='button'\n                        aria-label={emojiButtonAriaLabel}\n                        onClick={this.toggleEmojiPicker}\n                        className='style--none emoji-picker__container post-action'\n                    >\n                        <EmojiIcon\n                            id='emojiPickerButton'\n                            className={'icon icon--emoji ' + (this.state.showEmojiPicker ? 'active' : '')}\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        let createMessage;\n        if (readOnlyChannel) {\n            createMessage = Utils.localizeMessage('create_post.read_only', 'This channel is read-only. Only members with permission can post here.');\n        } else {\n            createMessage = formatMessage(\n                {id: 'create_post.write', defaultMessage: 'Write to {channelDisplayName}'},\n                {channelDisplayName: currentChannel.display_name},\n            );\n        }\n\n        let scrollbarClass = '';\n        if (renderScrollbar) {\n            scrollbarClass = ' scroll';\n        }\n\n        return (\n            <form\n                id='create_post'\n                ref='topDiv'\n                className={centerClass}\n                onSubmit={this.handleSubmit}\n            >\n                <div className={'post-create' + attachmentsDisabled + scrollbarClass}>\n                    <div className='post-create-body'>\n                        <div\n                            role='application'\n                            id='centerChannelFooter'\n                            aria-label={ariaLabelMessageInput}\n                            tabIndex='-1'\n                            className='post-body__cell a11y__region'\n                            data-a11y-sort-order='2'\n                        >\n                            <Textbox\n                                onChange={this.handleChange}\n                                onKeyPress={this.postMsgKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                onMouseUp={this.handleMouseUpKeyUp}\n                                onKeyUp={this.handleMouseUpKeyUp}\n                                onComposition={this.emitTypingEvent}\n                                onHeightChange={this.handleHeightChange}\n                                handlePostError={this.handlePostError}\n                                value={readOnlyChannel ? '' : this.state.message}\n                                onBlur={this.handleBlur}\n                                emojiEnabled={this.props.enableEmojiPicker}\n                                createMessage={createMessage}\n                                channelId={currentChannel.id}\n                                id='post_textbox'\n                                ref='textbox'\n                                disabled={readOnlyChannel}\n                                characterLimit={this.props.maxPostSize}\n                                preview={this.state.showPreview}\n                                badConnection={this.props.badConnection}\n                                listenForMentionKeyClick={true}\n                            />\n                            <span\n                                ref='createPostControls'\n                                className='post-body__actions actions__left'\n                            >\n                                {fileUpload}\n                            </span>\n                            <span\n                                ref='createPostControls'\n                                className='post-body__actions'\n                            >\n                                {emojiPicker}\n                                <a\n                                    role='button'\n                                    tabIndex='0'\n                                    aria-label={formatMessage({\n                                        id: 'create_post.send_message',\n                                        defaultMessage: 'Send a message',\n                                    })}\n                                    className={sendButtonClass}\n                                    onClick={this.handleSubmit}\n                                >\n                                    {/* <LocalizedIcon\n                                        className='fa fa-paper-plane'\n                                        title={{\n                                            id: t('create_post.icon'),\n                                            defaultMessage: 'Send Post Icon',\n                                        }}\n                                    /> */}\n                                    <SendIcon\n                                        className='send__icon'\n                                        title={{\n                                            id: t('create_post.icon'),\n                                            defaultMessage: 'Send Post Icon',\n                                        }}\n                                    />\n                                </a>\n                            </span>\n                        </div>\n                        {tutorialTip}\n                    </div>\n                    <div\n                        id='postCreateFooter'\n                        className={postFooterClassName}\n                    >\n                        <div className='d-flex justify-content-between'>\n                            <MsgTyping\n                                channelId={currentChannel.id}\n                                postId=''\n                            />\n                            <TextboxLinks\n                                characterLimit={this.props.maxPostSize}\n                                showPreview={this.state.showPreview}\n                                updatePreview={this.updatePreview}\n                                message={readOnlyChannel ? '' : this.state.message}\n                            />\n                        </div>\n                        <div>\n                            {postError}\n                            {preview}\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n                <PostDeletedModal\n                    show={this.state.showPostDeletedModal}\n                    onHide={this.hidePostDeletedModal}\n                />\n                <ConfirmModal\n                    title={notifyAllTitle}\n                    message={notifyAllMessage}\n                    confirmButtonText={notifyAllConfirm}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleNotifyAllConfirmation}\n                    onCancel={this.hideNotifyAllModal}\n                />\n            </form>\n        );\n    }\n}\n\nexport default injectIntl(CreatePost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getCurrentChannel, getCurrentChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId, isCurrentUserSystemAdmin, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelTimezones} from 'mattermost-redux/actions/channels';\nimport {get, getInt, getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    getCurrentUsersLatestPost,\n    getLatestReplyablePostId,\n    getMostRecentPostIdInChannel,\n    getPost,\n    makeGetCommentCountForPost,\n    makeGetMessageInHistoryItem,\n} from 'mattermost-redux/selectors/entities/posts';\nimport {\n    addMessageIntoHistory,\n    moveHistoryIndexBack,\n    moveHistoryIndexForward,\n    removeReaction,\n} from 'mattermost-redux/actions/posts';\nimport {Posts, Preferences as PreferencesRedux} from 'mattermost-redux/constants';\n\nimport {connectionErrorCount} from 'selectors/views/system';\n\nimport {addReaction, createPost, setEditingPost} from 'actions/post_actions.jsx';\nimport {scrollPostListToBottom} from 'actions/views/channel';\nimport {selectPostFromRightHandSideSearchByPostId} from 'actions/views/rhs';\nimport {executeCommand} from 'actions/command';\nimport {runMessageWillBePostedHooks, runSlashCommandWillBePostedHooks} from 'actions/hooks';\nimport {getPostDraft, getIsRhsExpanded} from 'selectors/rhs';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getEmojiMap} from 'selectors/emojis';\nimport {setGlobalItem, actionOnGlobalItemsWithPrefix} from 'actions/storage';\nimport {openModal} from 'actions/views/modals';\nimport {Constants, Preferences, StoragePrefixes, TutorialSteps, UserStatuses} from 'utils/constants';\nimport {canUploadFiles} from 'utils/file_utils';\n\nimport CreatePost from './create_post.jsx';\n\nfunction makeMapStateToProps() {\n    const getCommentCountForPost = makeGetCommentCountForPost();\n    const getMessageInHistoryItem = makeGetMessageInHistoryItem(Posts.MESSAGE_TYPES.POST);\n\n    return (state, ownProps) => {\n        const config = getConfig(state);\n        const currentChannel = getCurrentChannel(state) || {};\n        const draft = getPostDraft(state, StoragePrefixes.DRAFT, currentChannel.id);\n        const recentPostIdInChannel = getMostRecentPostIdInChannel(state, currentChannel.id);\n        const post = getPost(state, recentPostIdInChannel);\n        const latestReplyablePostId = getLatestReplyablePostId(state);\n        const currentChannelMembersCount = getCurrentChannelStats(state) ? getCurrentChannelStats(state).member_count : 1;\n        const enableTutorial = config.EnableTutorial === 'true';\n        const tutorialStep = getInt(state, Preferences.TUTORIAL_STEP, getCurrentUserId(state), TutorialSteps.FINISHED);\n        const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n        const enableGifPicker = config.EnableGifPicker === 'true';\n        const enableConfirmNotificationsToChannel = config.EnableConfirmNotificationsToChannel === 'true';\n        const currentUserId = getCurrentUserId(state);\n        const userIsOutOfOffice = getStatusForUserId(state, currentUserId) === UserStatuses.OUT_OF_OFFICE;\n        const badConnection = connectionErrorCount(state) > 1;\n        const isTimezoneEnabled = config.ExperimentalTimezone === 'true';\n\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            currentChannel,\n            currentChannelMembersCount,\n            currentUserId,\n            codeBlockOnCtrlEnter: getBool(state, PreferencesRedux.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', true),\n            ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n            fullWidthTextBox: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            showTutorialTip: enableTutorial && tutorialStep === TutorialSteps.POST_POPOVER,\n            messageInHistoryItem: getMessageInHistoryItem(state),\n            draft,\n            commentCountForPost: getCommentCountForPost(state, {post}),\n            latestReplyablePostId,\n            locale: getCurrentLocale(state),\n            currentUsersLatestPost: getCurrentUsersLatestPost(state),\n            readOnlyChannel: ownProps.readOnlyChannel || (!isCurrentUserSystemAdmin(state) && config.ExperimentalTownSquareIsReadOnly === 'true' && currentChannel.name === Constants.DEFAULT_CHANNEL),\n            canUploadFiles: canUploadFiles(config),\n            enableEmojiPicker,\n            enableGifPicker,\n            enableConfirmNotificationsToChannel,\n            maxPostSize: parseInt(config.MaxPostSize, 10) || Constants.DEFAULT_CHARACTER_LIMIT,\n            userIsOutOfOffice,\n            rhsExpanded: getIsRhsExpanded(state),\n            emojiMap: getEmojiMap(state),\n            badConnection,\n            isTimezoneEnabled,\n        };\n    };\n}\n\nfunction onSubmitPost(post, fileInfos) {\n    return (dispatch) => {\n        dispatch(createPost(post, fileInfos));\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addMessageIntoHistory,\n            onSubmitPost,\n            moveHistoryIndexBack,\n            moveHistoryIndexForward,\n            addReaction,\n            removeReaction,\n            setDraft: setGlobalItem,\n            clearDraftUploads: actionOnGlobalItemsWithPrefix,\n            selectPostFromRightHandSideSearchByPostId,\n            setEditingPost,\n            openModal,\n            executeCommand,\n            getChannelTimezones,\n            runMessageWillBePostedHooks,\n            runSlashCommandWillBePostedHooks,\n            scrollPostListToBottom,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(CreatePost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {Constants, Preferences, ModalIdentifiers} from 'utils/constants.jsx';\nimport {useSafeUrl} from 'utils/url';\nimport AppIcons from 'images/appIcons.png';\nimport ModalToggleButtonRedux from 'components/toggle_modal_button_redux';\nimport InvitationModal from 'components/invitation_modal';\n\nconst NUM_SCREENS = 3;\n\nexport default class TutorialIntroScreens extends React.Component {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        step: PropTypes.number,\n        townSquareDisplayName: PropTypes.string.isRequired,\n        appDownloadLink: PropTypes.string,\n        isLicensed: PropTypes.bool.isRequired,\n        restrictTeamInvite: PropTypes.bool.isRequired,\n        supportEmail: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {currentScreen: 0};\n    }\n\n    handleNext = () => {\n        switch (this.state.currentScreen) {\n        case 0:\n            trackEvent('tutorial', 'tutorial_screen_1_welcome_to_mattermost_next');\n            break;\n        case 1:\n            trackEvent('tutorial', 'tutorial_screen_2_how_mattermost_works_next');\n            break;\n        case 2:\n            trackEvent('tutorial', 'tutorial_screen_3_youre_all_set_next');\n            break;\n        }\n\n        if (this.state.currentScreen < 2) {\n            this.setState({currentScreen: this.state.currentScreen + 1});\n            return;\n        }\n\n        const {currentUserId} = this.props;\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: (this.props.step + 1).toString(),\n        }];\n\n        this.props.actions.savePreferences(currentUserId, preferences);\n    }\n\n    skipTutorial = (e) => {\n        e.preventDefault();\n\n        switch (this.state.currentScreen) {\n        case 0:\n            trackEvent('tutorial', 'tutorial_screen_1_welcome_to_mattermost_skip');\n            break;\n        case 1:\n            trackEvent('tutorial', 'tutorial_screen_2_how_mattermost_works_skip');\n            break;\n        case 2:\n            trackEvent('tutorial', 'tutorial_screen_3_youre_all_set_skip');\n            break;\n        }\n\n        const {currentUserId} = this.props;\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: Constants.TutorialSteps.FINISHED.toString(),\n        }];\n\n        this.props.actions.savePreferences(currentUserId, preferences);\n    }\n    createScreen = () => {\n        switch (this.state.currentScreen) {\n        case 0:\n            return this.createScreenOne();\n        case 1:\n            return this.createScreenTwo();\n        case 2:\n            return this.createScreenThree();\n        }\n        return null;\n    }\n\n    createScreenOne() {\n        const circles = this.createCircles();\n\n        return (\n            <div id='tutorialIntroOne'>\n                <h3>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.title1'\n                        defaultMessage='Welcome to:'\n                    />\n                </h3>\n                <h1>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.title2'\n                        defaultMessage='Mattermost'\n                    />\n                </h1>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.body1'\n                        defaultMessage='Your team communication all in one place, instantly searchable and available anywhere.'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.body2'\n                        defaultMessage='Keep your team connected to help them achieve what matters most.'\n                    />\n                </p>\n                {circles}\n            </div>\n        );\n    }\n\n    createScreenTwo() {\n        const circles = this.createCircles();\n\n        let appDownloadLink = null;\n        let appDownloadImage = null;\n        if (this.props.appDownloadLink) {\n            const link = useSafeUrl(this.props.appDownloadLink);\n\n            // not using a FormattedHTMLMessage here since appDownloadLink is configurable and could be used\n            // to inject HTML if we're not careful\n            appDownloadLink = (\n                <FormattedMessage\n                    id='tutorial_intro.mobileApps'\n                    defaultMessage='Install the apps for {link} for easy access and notifications on the go.'\n                    values={{\n                        link: (\n                            <a\n                                id='appDownloadLink'\n                                href={link}\n                                target='_blank'\n                                rel='noopener noreferrer'\n                            >\n                                <FormattedMessage\n                                    id='tutorial_intro.mobileAppsLinkText'\n                                    defaultMessage='PC, Mac, iOS and Android'\n                                />\n                            </a>\n                        ),\n                    }}\n                />\n            );\n\n            appDownloadImage = (\n                <a\n                    id='appDownloadImage'\n                    href={link}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    <img\n                        alt={'tutorial icons'}\n                        className='tutorial__app-icons'\n                        src={AppIcons}\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div id='tutorialIntroTwo'>\n                <h3>\n                    <FormattedMessage\n                        id='tutorial_intro.screenTwo.title'\n                        defaultMessage='How Mattermost works:'\n                    />\n                </h3>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenTwo.body1'\n                        defaultMessage='Communication happens in public discussion channels, private channels and direct messages.'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenTwo.body2'\n                        defaultMessage='Everything is archived and searchable from any web-enabled desktop, laptop or phone.'\n                    />\n                </p>\n                {appDownloadLink}\n                {appDownloadImage}\n                {circles}\n            </div>\n        );\n    }\n\n    createScreenThree() {\n        let inviteModalLink;\n        let inviteText;\n\n        if (!this.props.isLicensed || !this.props.restrictTeamInvite) {\n            inviteModalLink = (\n                <ModalToggleButtonRedux\n                    id='tutorialIntroInvite'\n                    className='intro-links color--link style--none'\n                    modalId={ModalIdentifiers.INVITATION}\n                    dialogType={InvitationModal}\n                >\n                    <FormattedMessage\n                        id='tutorial_intro.invite'\n                        defaultMessage='Invite Teammates'\n                    />\n                </ModalToggleButtonRedux>\n            );\n\n            inviteText = (\n                <p>\n                    {inviteModalLink}\n                    <FormattedMessage\n                        id='tutorial_intro.whenReady'\n                        defaultMessage={' when you\\'re ready.'}\n                    />\n                </p>\n            );\n        }\n\n        const circles = this.createCircles();\n\n        let supportInfo = null;\n        if (this.props.supportEmail) {\n            supportInfo = (\n                <p id='supportInfo'>\n                    <FormattedMessage\n                        id='tutorial_intro.support'\n                        defaultMessage='Need anything, just email us at '\n                    />\n                    <a\n                        href={'mailto:' + this.props.supportEmail}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        {this.props.supportEmail}\n                    </a>\n                    {'.'}\n                </p>\n            );\n        }\n\n        return (\n            <div id='tutorialIntroThree'>\n                <h3>\n                    <FormattedMessage\n                        id='tutorial_intro.allSet'\n                        defaultMessage={'You\\'re all set'}\n                    />\n                </h3>\n                {inviteText}\n                {supportInfo}\n                <FormattedMessage\n                    id='tutorial_intro.end'\n                    defaultMessage='Click \"Next\" to enter {channel}. This is the first channel teammates see when they sign up. Use it for posting updates everyone needs to know.'\n                    values={{\n                        channel: this.props.townSquareDisplayName,\n                    }}\n                />\n                {circles}\n            </div>\n        );\n    }\n\n    handleCircleClick = (e, screen) => {\n        e.preventDefault();\n        this.setState({currentScreen: screen});\n    }\n\n    createCircles = () => {\n        const circles = [];\n        for (let i = 0; i < NUM_SCREENS; i++) {\n            let className = 'circle';\n            if (i === this.state.currentScreen) {\n                className += ' active';\n            }\n\n            circles.push(\n                <a\n                    id={'tutorialIntroCircle' + i}\n                    href='#'\n                    key={'circle' + i}\n                    className={className}\n                    data-screen={i}\n                    onClick={(e) => this.handleCircleClick(e, i)}\n                />\n            );\n        }\n\n        return (\n            <div className='tutorial__circles'>\n                {circles}\n            </div>\n        );\n    }\n\n    render() {\n        const screen = this.createScreen();\n\n        return (\n            <div className='tutorial-steps__container'>\n                <div\n                    id='tutorialIntroContent'\n                    className='tutorial__content'\n                >\n                    <div className='tutorial__steps'>\n                        {screen}\n                        <div className='tutorial__footer'>\n                            <button\n                                id='tutorialNextButton'\n                                className='btn btn-primary'\n                                onClick={this.handleNext}\n                            >\n                                <FormattedMessage\n                                    id='tutorial_intro.next'\n                                    defaultMessage='Next'\n                                />\n                            </button>\n                            <a\n                                id='tutorialSkipLink'\n                                className='tutorial-skip'\n                                href='#'\n                                onClick={this.skipTutorial}\n                            >\n                                <FormattedMessage\n                                    id='tutorial_intro.skip'\n                                    defaultMessage='Skip Tutorial'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport TutorialIntroScreens from './tutorial_intro_screens.jsx';\n\nfunction mapStateToProps(state) {\n    const currentUserId = getCurrentUserId(state);\n    return {\n        currentUserId,\n        step: getInt(state, Preferences.TUTORIAL_STEP, currentUserId, 0),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({\n        savePreferences,\n    }, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TutorialIntroScreens);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport TutorialIntroScreens from './tutorial_intro_screens';\n\nexport default class TutorialView extends React.Component {\n    componentDidMount() {\n        if (this.props.isRoot) {\n            $('body').addClass('app__body');\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.isRoot) {\n            $('body').removeClass('app__body');\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id='app-content'\n                className='app__content'\n            >\n                <TutorialIntroScreens\n                    townSquareDisplayName={this.props.townSquareDisplayName}\n                    appDownloadLink={this.props.appDownloadLink}\n                    isLicensed={this.props.isLicensed}\n                    restrictTeamInvite={this.props.restrictTeamInvite}\n                    supportEmail={this.props.supportEmail}\n                />\n            </div>\n        );\n    }\n}\n\nTutorialView.propTypes = {\n    isRoot: PropTypes.bool,\n    townSquareDisplayName: PropTypes.string.isRequired,\n    appDownloadLink: PropTypes.string,\n    isLicensed: PropTypes.bool.isRequired,\n    restrictTeamInvite: PropTypes.bool.isRequired,\n    supportEmail: PropTypes.string.isRequired,\n};\n\nTutorialView.defaultProps = {\n    isRoot: true,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getChannelsNameMapInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport Constants from 'utils/constants';\n\nimport TutorialView from './tutorial_view.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const team = getCurrentTeam(state);\n\n    const teamChannels = getChannelsNameMapInCurrentTeam(state);\n    const townSquare = teamChannels[Constants.DEFAULT_CHANNEL];\n    const townSquareDisplayName = townSquare ? townSquare.display_name : Constants.DEFAULT_CHANNEL_UI_NAME;\n\n    const appDownloadLink = config.AppDownloadLink;\n    const isLicensed = license.IsLicensed === 'true';\n    const restrictTeamInvite = !haveITeamPermission(state, {team: team.id, permission: Permissions.INVITE_USER});\n    const supportEmail = config.SupportEmail;\n\n    return {\n        townSquareDisplayName,\n        appDownloadLink,\n        isLicensed,\n        restrictTeamInvite,\n        supportEmail,\n    };\n}\n\nexport default connect(mapStateToProps)(TutorialView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport deferComponentRender from 'components/deferComponentRender';\nimport ChannelHeader from 'components/channel_header';\nimport CreatePost from 'components/create_post';\nimport FileUploadOverlay from 'components/file_upload_overlay';\nimport PostView from 'components/post_view';\nimport TutorialView from 'components/tutorial';\nimport {clearMarks, mark, measure, trackEvent} from 'actions/diagnostics_actions.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class ChannelView extends React.PureComponent {\n    static propTypes = {\n        channelId: PropTypes.string.isRequired,\n        deactivatedChannel: PropTypes.bool.isRequired,\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n        showTutorial: PropTypes.bool.isRequired,\n        channelIsArchived: PropTypes.bool.isRequired,\n        viewArchivedChannels: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            goToLastViewedChannel: PropTypes.func.isRequired,\n        }),\n    };\n\n    static createDeferredPostView = () => {\n        return deferComponentRender(\n            PostView,\n            <div\n                id='post-list'\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n            />\n        );\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let updatedState = {};\n        if (props.match.url !== state.url) {\n            updatedState = {deferredPostView: ChannelView.createDeferredPostView(), url: props.match.url};\n        }\n\n        if (props.channelId !== state.channelId) {\n            updatedState = {...updatedState, channelId: props.channelId, prevChannelId: state.channelId};\n        }\n\n        if (Object.keys(updatedState).length) {\n            return updatedState;\n        }\n\n        return null;\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            url: props.match.url,\n            channelId: props.channelId,\n            prevChannelId: '',\n            deferredPostView: ChannelView.createDeferredPostView(),\n        };\n    }\n\n    getChannelView = () => {\n        return this.refs.channelView;\n    }\n\n    onClickCloseChannel = () => {\n        this.props.actions.goToLastViewedChannel();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.channelId !== this.props.channelId || prevProps.channelIsArchived !== this.props.channelIsArchived) {\n            mark('ChannelView#componentDidUpdate');\n\n            const [dur1] = measure('SidebarChannelLink#click', 'ChannelView#componentDidUpdate');\n            const [dur2] = measure('TeamLink#click', 'ChannelView#componentDidUpdate');\n\n            clearMarks([\n                'SidebarChannelLink#click',\n                'ChannelView#componentDidUpdate',\n                'TeamLink#click',\n            ]);\n\n            if (dur1 !== -1) {\n                trackEvent('performance', 'channel_switch', {duration: Math.round(dur1)});\n            }\n            if (dur2 !== -1) {\n                trackEvent('performance', 'team_switch', {duration: Math.round(dur2)});\n            }\n            if (this.props.channelIsArchived && !this.props.viewArchivedChannels) {\n                this.props.actions.goToLastViewedChannel();\n            }\n        }\n    }\n\n    render() {\n        const {channelIsArchived} = this.props;\n        if (this.props.showTutorial) {\n            return (\n                <TutorialView\n                    isRoot={false}\n                />\n            );\n        }\n\n        let createPost;\n        if (this.props.deactivatedChannel) {\n            createPost = (\n                <div\n                    className='post-create-message'\n                >\n                    <FormattedMessage\n                        id='create_post.deactivated'\n                        defaultMessage='You are viewing an archived channel with a deactivated user.'\n                    />\n                </div>\n            );\n        } else {\n            createPost = (\n                <div\n                    className='post-create__container'\n                    id='post-create'\n                >\n                    {!channelIsArchived &&\n                        <CreatePost\n                            getChannelView={this.getChannelView}\n                        />\n                    }\n                    {channelIsArchived &&\n                        <div\n                            id='channelArchivedMessage'\n                            className='channel-archived__message'\n                        >\n                            <FormattedMarkdownMessage\n                                id='archivedChannelMessage'\n                                defaultMessage='You are viewing an **archived channel**. New messages cannot be posted.'\n                            />\n                            <button\n                                className='btn btn-primary channel-archived__close-btn'\n                                onClick={this.onClickCloseChannel}\n                            >\n                                <FormattedMessage\n                                    id='center_panel.archived.closeChannel'\n                                    defaultMessage='Close Channel'\n                                />\n                            </button>\n                        </div>\n                    }\n                </div>\n            );\n        }\n\n        const DeferredPostView = this.state.deferredPostView;\n\n        return (\n            <div\n                ref='channelView'\n                id='app-content'\n                className='app__content'\n            >\n                <FileUploadOverlay overlayType='center'/>\n                <ChannelHeader\n                    channelId={this.props.channelId}\n                />\n                <DeferredPostView\n                    channelId={this.props.channelId}\n                    prevChannelId={this.state.prevChannelId}\n                />\n                {createPost}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport hoistStatics from 'hoist-non-react-statics';\nimport React from 'react';\n\n/**\n * Allows two animation frames to complete to allow other components to update\n * and re-render before mounting and rendering an expensive `WrappedComponent`.\n * If provided, `PreRenderComponent` will be rendered instead of null when not\n * rendering the `Wrapped Component`.\n *\n * Based on this Twitter built component\n * https://gist.github.com/paularmstrong/cc2ead7e2a0dec37d8b2096fc8d85759#file-defercomponentrender-js\n */\nexport default function deferComponentRender(WrappedComponent, PreRenderComponent = null) {\n    class DeferredRenderWrapper extends React.Component {\n        constructor(props, context) {\n            super(props, context);\n\n            this.state = {\n                shouldRender: false,\n            };\n        }\n\n        componentDidMount() {\n            window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => this.setState({shouldRender: true}));\n            });\n        }\n\n        render() {\n            return this.state.shouldRender ? <WrappedComponent {...this.props}/> : PreRenderComponent;\n        }\n    }\n\n    return hoistStatics(DeferredRenderWrapper, WrappedComponent);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {withRouter} from 'react-router-dom';\n\nimport {getDirectTeammate} from 'utils/utils.jsx';\nimport {TutorialSteps, Preferences} from 'utils/constants';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport ChannelView from './channel_view.jsx';\n\n// Temporary selector until getDirectTeammate is converted to be redux-friendly\nconst getDeactivatedChannel = createSelector(\n    (state) => state.entities.users.profiles,\n    (state, channelId) => channelId,\n    (users, channelId) => {\n        const teammate = getDirectTeammate(channelId);\n        return Boolean(teammate && teammate.delete_at);\n    }\n);\n\nfunction mapStateToProps(state) {\n    const channel = getCurrentChannel(state);\n\n    const config = getConfig(state);\n    const enableTutorial = config.EnableTutorial === 'true';\n    const tutorialStep = getInt(state, Preferences.TUTORIAL_STEP, getCurrentUserId(state), TutorialSteps.FINISHED);\n    const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n    return {\n        channelId: channel ? channel.id : '',\n        deactivatedChannel: channel ? getDeactivatedChannel(state, channel.id) : false,\n        showTutorial: enableTutorial && tutorialStep <= TutorialSteps.INTRO_SCREENS,\n        channelIsArchived: channel ? channel.delete_at !== 0 : false,\n        viewArchivedChannels,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            goToLastViewedChannel,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ChannelView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChannelView from 'components/channel_view/index';\n\nexport default class ChannelIdentifierRouter extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                identifier: PropTypes.string.isRequired,\n                team: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            onChannelByIdentifierEnter: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            prevProps: props,\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.team !== prevProps.match.params.team ||\n            this.props.match.params.identifier !== prevProps.match.params.identifier) {\n            this.props.actions.onChannelByIdentifierEnter(this.props);\n        }\n    }\n    componentDidMount() {\n        this.props.actions.onChannelByIdentifierEnter(this.props);\n    }\n    render() {\n        return <ChannelView/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {onChannelByIdentifierEnter} from './actions';\n\nimport ChannelIdentifierRouter from './channel_identifier_router.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            onChannelByIdentifierEnter\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(ChannelIdentifierRouter));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport PermalinkView from 'components/permalink_view';\nimport ChannelHeaderMobile from 'components/channel_header_mobile';\nimport ChannelIdentifierRouter from 'components/channel_layout/channel_identifier_router';\n\nexport default class CenterChannel extends React.PureComponent {\n    static propTypes = {\n        match: PropTypes.object.isRequired,\n        location: PropTypes.object.isRequired,\n        lastChannelPath: PropTypes.string.isRequired,\n        lhsOpen: PropTypes.bool.isRequired,\n        rhsOpen: PropTypes.bool.isRequired,\n        rhsMenuOpen: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            returnTo: '',\n            lastReturnTo: '',\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (prevState.lastReturnTo !== nextProps.location.pathname && nextProps.location.pathname.includes('/pl/')) {\n            return {\n                lastReturnTo: nextProps.location.pathname,\n                returnTo: prevState.lastReturnTo\n            };\n        }\n        return {lastReturnTo: nextProps.location.pathname\n        };\n    }\n\n    render() {\n        const {lastChannelPath} = this.props;\n        const url = this.props.match.url;\n        return (\n            <div\n                key='inner-wrap'\n                className={classNames('inner-wrap', 'channel__wrap', {\n                    'move--right': this.props.lhsOpen,\n                    'move--left': this.props.rhsOpen,\n                    'move--left-small': this.props.rhsMenuOpen,\n                })}\n            >\n                <div className='row header'>\n                    <div id='navbar_wrapper'>\n                        <ChannelHeaderMobile/>\n                    </div>\n                </div>\n                <div className='row main'>\n                    <Switch>\n                        <Route\n                            path={`${url}/pl/:postid`}\n                            render={(props) => (\n                                <PermalinkView\n                                    {...props}\n                                    returnTo={this.state.returnTo}\n                                />\n                            )}\n                        />\n                        <Route\n                            path={'/:team/:path(channels|messages)/:identifier'}\n                            component={ChannelIdentifierRouter}\n                        />\n                        <Redirect to={lastChannelPath}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getIsRhsOpen, getIsRhsMenuOpen} from 'selectors/rhs';\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {getLastViewedChannelNameByTeamName} from 'selectors/local_storage';\n\nimport CenterChannel from './center_channel';\n\nconst mapStateToProps = (state, ownProps) => {\n    let channelName = getLastViewedChannelNameByTeamName(state, ownProps.match.params.team);\n    if (!channelName) {\n        const team = getTeamByName(state, ownProps.match.params.team);\n        channelName = getRedirectChannelNameForTeam(state, team.id);\n    }\n    const lastChannelPath = `${ownProps.match.url}/channels/${channelName}`;\n    return {\n        lastChannelPath,\n        lhsOpen: getIsLhsOpen(state),\n        rhsOpen: getIsRhsOpen(state),\n        rhsMenuOpen: getIsRhsMenuOpen(state),\n    };\n};\n\nexport default connect(mapStateToProps)(CenterChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Route} from 'react-router-dom';\n\nimport AnnouncementBarController from 'components/announcement_bar';\n\nimport Pluggable from 'plugins/pluggable';\nimport SystemNotice from 'components/system_notice';\nimport EditPostModal from 'components/edit_post_modal';\nimport GetPostLinkModal from 'components/get_post_link_modal';\nimport GetPublicLinkModal from 'components/get_public_link_modal';\nimport LeavePrivateChannelModal from 'components/leave_private_channel_modal';\nimport ResetStatusModal from 'components/reset_status_modal';\nimport ShortcutsModal from 'components/shortcuts_modal.jsx';\nimport SidebarRight from 'components/sidebar_right';\nimport SidebarRightMenu from 'components/sidebar_right_menu';\nimport ImportThemeModal from 'components/user_settings/import_theme_modal.jsx';\nimport ModalController from 'components/modal_controller';\nimport TeamSidebar from 'components/team_sidebar';\nimport Sidebar from 'components/sidebar';\nimport * as Utils from 'utils/utils';\nimport * as UserAgent from 'utils/user_agent';\nimport CenterChannel from 'components/channel_layout/center_channel';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ChannelController extends React.Component {\n    static propTypes = {\n        pathName: PropTypes.string.isRequired,\n        teamType: PropTypes.string.isRequired,\n        fetchingChannels: PropTypes.bool.isRequired,\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return this.props.teamType !== nextProps.teamType || this.props.pathName !== nextProps.pathName || this.props.fetchingChannels !== nextProps.fetchingChannels;\n    }\n\n    componentDidMount() {\n        const platform = window.navigator.platform;\n\n        document.body.classList.add('app__body', 'channel-view');\n\n        // IE Detection\n        if (UserAgent.isInternetExplorer() || UserAgent.isEdge()) {\n            document.body.classList.add('browser--ie');\n        }\n\n        // OS Detection\n        if (platform === 'Win32' || platform === 'Win64') {\n            document.body.classList.add('os--windows');\n        } else if (platform === 'MacIntel' || platform === 'MacPPC') {\n            document.body.classList.add('os--mac');\n        }\n    }\n\n    componentWillUnmount() {\n        document.body.classList.remove('app__body', 'channel-view');\n    }\n\n    render() {\n        return (\n            <div\n                id='channel_view'\n                className='channel-view'\n            >\n                <AnnouncementBarController/>\n                <SystemNotice/>\n\n                <div className='container-fluid'>\n                    <SidebarRight/>\n                    <SidebarRightMenu teamType={this.props.teamType}/>\n                    <Route component={TeamSidebar}/>\n                    <Route component={Sidebar}/>\n                    {!this.props.fetchingChannels && <Route component={CenterChannel}/>}\n                    {this.props.fetchingChannels && <LoadingScreen/>}\n                    <Pluggable pluggableName='Root'/>\n                    <GetPostLinkModal/>\n                    <GetPublicLinkModal/>\n                    <ImportThemeModal/>\n                    <EditPostModal/>\n                    <ResetStatusModal/>\n                    <LeavePrivateChannelModal/>\n                    <ShortcutsModal isMac={Utils.isMac()}/>\n                    <ModalController/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport iNoBounce from 'inobounce';\n\nimport {startPeriodicStatusUpdates, stopPeriodicStatusUpdates} from 'actions/status_actions.jsx';\nimport {startPeriodicSync, stopPeriodicSync, reconnect} from 'actions/websocket_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport {makeAsyncComponent} from 'components/async_load';\nconst LazyBackstageController = React.lazy(() => import('components/backstage'));\nimport ChannelController from 'components/channel_layout/channel_controller';\n\nconst BackstageController = makeAsyncComponent(LazyBackstageController);\n\nlet wakeUpInterval;\nlet lastTime = Date.now();\nconst WAKEUP_CHECK_INTERVAL = 30000; // 30 seconds\nconst WAKEUP_THRESHOLD = 60000; // 60 seconds\nconst UNREAD_CHECK_TIME_MILLISECONDS = 10000;\n\nexport default class NeedsTeam extends React.Component {\n    static propTypes = {\n        params: PropTypes.object,\n        currentUser: PropTypes.object,\n        currentChannelId: PropTypes.string,\n        currentTeamId: PropTypes.string,\n        actions: PropTypes.shape({\n            fetchMyChannelsAndMembers: PropTypes.func.isRequired,\n            getMyTeamUnreads: PropTypes.func.isRequired,\n            viewChannel: PropTypes.func.isRequired,\n            markChannelAsReadOnFocus: PropTypes.func.isRequired,\n            getTeamByName: PropTypes.func.isRequired,\n            addUserToTeam: PropTypes.func.isRequired,\n            selectTeam: PropTypes.func.isRequired,\n            setPreviousTeamId: PropTypes.func.isRequired,\n            loadStatusesForChannelAndSidebar: PropTypes.func.isRequired,\n            loadProfilesForDirect: PropTypes.func.isRequired,\n        }).isRequired,\n        theme: PropTypes.object.isRequired,\n        mfaRequired: PropTypes.bool.isRequired,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                team: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        history: PropTypes.object.isRequired,\n        teamsList: PropTypes.arrayOf(PropTypes.object),\n    };\n\n    constructor(params) {\n        super(params);\n        this.blurTime = new Date().getTime();\n\n        if (this.props.mfaRequired) {\n            this.props.history.push('/mfa/setup');\n            return;\n        }\n\n        clearInterval(wakeUpInterval);\n\n        wakeUpInterval = setInterval(() => {\n            const currentTime = (new Date()).getTime();\n            if (currentTime > (lastTime + WAKEUP_THRESHOLD)) { // ignore small delays\n                console.log('computer woke up - fetching latest'); //eslint-disable-line no-console\n                reconnect(false);\n            }\n            lastTime = currentTime;\n        }, WAKEUP_CHECK_INTERVAL);\n\n        const team = this.updateCurrentTeam(this.props);\n\n        this.state = {\n            team,\n            finishedFetchingChannels: false,\n            prevTeam: this.props.match.params.team,\n        };\n\n        if (!team) {\n            this.joinTeam(this.props);\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, state) {\n        if (state.prevTeam !== nextProps.match.params.team) {\n            const team = nextProps.teamsList ?\n                nextProps.teamsList.find((teamObj) =>\n                    teamObj.name === nextProps.match.params.team) : null;\n            return {\n                prevTeam: nextProps.match.params.team,\n                team: (team || null)\n            };\n        }\n        return {prevTeam: nextProps.match.params.team};\n    }\n\n    componentDidMount() {\n        startPeriodicStatusUpdates();\n        startPeriodicSync();\n\n        // Set up tracking for whether the window is active\n        window.isActive = true;\n        Utils.applyTheme(this.props.theme);\n\n        if (UserAgent.isIosSafari()) {\n            // Use iNoBounce to prevent scrolling past the boundaries of the page\n            iNoBounce.enable();\n        }\n\n        window.addEventListener('focus', this.handleFocus);\n        window.addEventListener('blur', this.handleBlur);\n        window.addEventListener('keydown', this.onShortcutKeyDown);\n    }\n\n    shouldComponentUpdate() {\n        return true;\n    }\n\n    componentDidUpdate(prevProps) {\n        const {theme} = this.props;\n        if (!Utils.areObjectsEqual(prevProps.theme, theme)) {\n            Utils.applyTheme(theme);\n        }\n        if (this.props.match.params.team !== prevProps.match.params.team) {\n            if (this.state.team) {\n                this.initTeam(this.state.team);\n            }\n            if (!this.state.team) {\n                this.joinTeam(this.props);\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        window.isActive = false;\n        stopPeriodicStatusUpdates();\n        stopPeriodicSync();\n        if (UserAgent.isIosSafari()) {\n            iNoBounce.disable();\n        }\n\n        clearInterval(wakeUpInterval);\n        window.removeEventListener('focus', this.handleFocus);\n        window.removeEventListener('blur', this.handleBlur);\n        window.removeEventListener('keydown', this.onShortcutKeyDown);\n    }\n\n    handleBlur = () => {\n        window.isActive = false;\n        this.blurTime = new Date().getTime();\n        if (this.props.currentUser) {\n            this.props.actions.viewChannel('');\n        }\n    }\n\n    handleFocus = () => {\n        this.props.actions.markChannelAsReadOnFocus(this.props.currentChannelId);\n        window.isActive = true;\n\n        if (Date.now() - this.blurTime > UNREAD_CHECK_TIME_MILLISECONDS) {\n            this.props.actions.fetchMyChannelsAndMembers(this.props.currentTeamId);\n            this.props.actions.loadProfilesForDirect();\n        }\n    }\n\n    joinTeam = async (props) => {\n        const {data: team} = await this.props.actions.getTeamByName(props.match.params.team);\n        if (team) {\n            const {error} = await props.actions.addUserToTeam(team.id, props.currentUser && props.currentUser.id);\n            if (error) {\n                props.history.push('/error?type=team_not_found');\n            } else {\n                this.setState({team});\n                this.initTeam(team);\n            }\n        } else {\n            props.history.push('/error?type=team_not_found');\n        }\n    }\n\n    initTeam = (team) => {\n        // If current team is set, then this is not first load\n        // The first load action pulls team unreads\n        this.props.actions.getMyTeamUnreads(this.props.currentUser.id, team.id);\n        this.props.actions.selectTeam(team);\n        this.props.actions.setPreviousTeamId(team.id);\n        GlobalActions.emitCloseRightHandSide();\n\n        if (Utils.isGuest(this.props.currentUser)) {\n            this.setState({finishedFetchingChannels: false});\n        }\n        this.props.actions.fetchMyChannelsAndMembers(team.id).then(\n            () => {\n                this.setState({\n                    finishedFetchingChannels: true,\n                });\n            }\n        );\n\n        this.props.actions.loadStatusesForChannelAndSidebar();\n        this.props.actions.loadProfilesForDirect();\n\n        return team;\n    }\n\n    updateCurrentTeam = (props) => {\n        // First check to make sure you're in the current team\n        // for the current url.\n        const team = props.teamsList ? props.teamsList.find((teamObj) => teamObj.name === props.match.params.team) : null;\n        if (team) {\n            this.initTeam(team);\n            return team;\n        }\n        return null;\n    }\n\n    onShortcutKeyDown = (e) => {\n        if (e.shiftKey && Utils.cmdOrCtrlPressed(e) && Utils.isKeyPressed(e, Constants.KeyCodes.L)) {\n            const sidebar = document.getElementById('sidebar-right');\n            if (sidebar) {\n                if (sidebar.className.match('sidebar--right sidebar--right--expanded move--left')) {\n                    const replyTextbox = document.getElementById('reply_textbox');\n                    if (replyTextbox) {\n                        replyTextbox.focus();\n                    }\n                } else {\n                    const postTextbox = document.getElementById('post_textbox');\n                    if (postTextbox) {\n                        postTextbox.focus();\n                    }\n                }\n            }\n        }\n    }\n\n    render() {\n        if (this.state.team === null) {\n            return <div/>;\n        }\n        const teamType = this.state.team ? this.state.team.type : '';\n\n        return (\n            <Switch>\n                <Route\n                    path={'/:team/integrations'}\n                    component={BackstageController}\n                />\n                <Route\n                    path={'/:team/emoji'}\n                    component={BackstageController}\n                />\n                <Route\n                    render={(renderProps) => (\n                        <ChannelController\n                            pathName={renderProps.location.pathname}\n                            teamType={teamType}\n                            fetchingChannels={!this.state.finishedFetchingChannels}\n                        />\n                    )}\n                />\n            </Switch>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {loadProfilesForDirect} from 'mattermost-redux/actions/users';\nimport {fetchMyChannelsAndMembers, viewChannel} from 'mattermost-redux/actions/channels';\nimport {getMyTeamUnreads, getTeamByName, selectTeam} from 'mattermost-redux/actions/teams';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeamId, getMyTeams} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\n\nimport {setPreviousTeamId} from 'actions/local_storage';\nimport {loadStatusesForChannelAndSidebar} from 'actions/status_actions';\nimport {addUserToTeam} from 'actions/team_actions';\nimport {markChannelAsReadOnFocus} from 'actions/views/channel';\nimport {checkIfMFARequired} from 'utils/route';\n\nimport NeedsTeam from './needs_team.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n\n    return {\n        theme: getTheme(state),\n        mfaRequired: checkIfMFARequired(currentUser, license, config, ownProps.match.url),\n        currentUser,\n        currentTeamId: getCurrentTeamId(state),\n        teamsList: getMyTeams(state),\n        currentChannelId: getCurrentChannelId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            fetchMyChannelsAndMembers,\n            getMyTeamUnreads,\n            viewChannel,\n            markChannelAsReadOnFocus,\n            getTeamByName,\n            addUserToTeam,\n            setPreviousTeamId,\n            selectTeam,\n            loadStatusesForChannelAndSidebar,\n            loadProfilesForDirect,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NeedsTeam));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport {browserHistory} from 'utils/browser_history';\n\nimport LocalStorageStore from 'stores/local_storage_store';\n\nexport const redirect = (url) => {\n    return (dispatch, getState) => {\n        const sanitizedUrl = url.replace('/_redirect/', '');\n\n        const state = getState();\n        const teamId = LocalStorageStore.getPreviousTeamId(getCurrentUserId(state));\n        const team = getTeam(state, teamId);\n\n        if (!team) {\n            browserHistory.replace(`/error?type=${ErrorPageTypes.TEAM_NOT_FOUND}`);\n            return;\n        }\n\n        browserHistory.push(`/${team.name}/${sanitizedUrl}`);\n    };\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class PermalinkRedirector extends React.PureComponent {\n    static propTypes = {\n        params: PropTypes.object,\n        url: PropTypes.string,\n        actions: PropTypes.shape({\n            redirect: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    componentDidMount() {\n        this.props.actions.redirect(this.props.url, this.props.params);\n    }\n\n    render() {\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {redirect} from './actions';\nimport PermalinkRedirector from './permalink_redirector';\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        params: ownProps.match.params,\n        url: ownProps.match.url,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        actions: bindActionCreators({\n            redirect,\n        }, dispatch),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermalinkRedirector);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class RemovedFromChannelModal extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        onHide: PropTypes.func.isRequired,\n        channelName: PropTypes.string,\n        remover: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        let channelName = (\n            <FormattedMessage\n                id='removed_channel.channelName'\n                defaultMessage='the channel'\n            />\n        );\n        if (this.props.channelName) {\n            channelName = this.props.channelName;\n        }\n\n        let remover = (\n            <FormattedMessage\n                id='removed_channel.someone'\n                defaultMessage='Someone'\n            />\n        );\n        if (this.props.remover) {\n            remover = this.props.remover;\n        }\n\n        if (this.props.currentUserId === '') {\n            return null;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='removeFromChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='removeFromChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='removed_channel.from'\n                            defaultMessage='Removed from '\n                        />\n                        <span className='name'>\n                            {channelName}\n                        </span>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        <FormattedMessage\n                            id='removed_channel.remover'\n                            defaultMessage='{remover} removed you from {channel}'\n                            values={{\n                                remover,\n                                channel: (channelName),\n                            }}\n                        />\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.onHide}\n                        id='removedChannelBtn'\n                    >\n                        <FormattedMessage\n                            id='removed_channel.okay'\n                            defaultMessage='Okay'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUserId, getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport RemovedFromChannelModal from './removed_from_channel_modal';\n\nfunction mapStateToProps(state, ownProps) {\n    const remover = getUser(state, ownProps.removerId);\n    return {\n        currentUserId: getCurrentUserId(state),\n        remover: remover && remover.username,\n    };\n}\n\nexport default connect(mapStateToProps)(RemovedFromChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {IntlProvider as BaseIntlProvider} from 'react-intl';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {setLocalizeFunction} from 'mattermost-redux/utils/i18n_utils';\n\nimport * as I18n from 'i18n/i18n';\n\nimport {localizeMessage} from 'utils/utils';\n\nexport default class IntlProvider extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.element.isRequired,\n        locale: PropTypes.string.isRequired,\n        translations: PropTypes.object,\n        actions: PropTypes.shape({\n            loadTranslations: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    componentDidMount() {\n        // Initialize browser's i18n data\n        I18n.doAddLocaleData();\n\n        // Pass localization function back to mattermost-redux\n        setLocalizeFunction(localizeMessage);\n\n        this.handleLocaleChange(this.props.locale);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.locale !== this.props.locale) {\n            this.handleLocaleChange(this.props.locale);\n        }\n    }\n\n    handleLocaleChange = (locale) => {\n        Client4.setAcceptLanguage(locale);\n\n        this.loadTranslationsIfNecessary(locale);\n    }\n\n    loadTranslationsIfNecessary = (locale) => {\n        if (this.props.translations) {\n            // Already loaded\n            return;\n        }\n        const localeInfo = I18n.getLanguageInfo(locale);\n\n        if (!localeInfo) {\n            return;\n        }\n\n        this.props.actions.loadTranslations(locale, localeInfo.url);\n    }\n\n    render() {\n        if (!this.props.translations) {\n            return null;\n        }\n\n        return (\n            <BaseIntlProvider\n                key={this.props.locale}\n                locale={this.props.locale}\n                messages={this.props.translations}\n                textComponent='span'\n            >\n                {this.props.children}\n            </BaseIntlProvider>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadTranslations} from 'actions/views/root';\n\nimport {getCurrentLocale, getTranslations} from 'selectors/i18n';\n\nimport IntlProvider from './intl_provider';\n\nfunction mapStateToProps(state) {\n    const locale = getCurrentLocale(state);\n\n    return {\n        locale,\n        translations: getTranslations(state, locale),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTranslations,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IntlProvider);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {\n    IntegrationTypes,\n} from 'mattermost-redux/action_types';\n\nimport {openModal} from 'actions/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport InteractiveDialog from 'components/interactive_dialog';\nimport store from '../stores/redux_store';\n\nexport function openInteractiveDialog(dialog) {\n    store.dispatch({type: IntegrationTypes.RECEIVED_DIALOG, data: dialog});\n\n    store.dispatch(openModal({modalId: ModalIdentifiers.INTERACTIVE_DIALOG, dialogType: InteractiveDialog}));\n}\n\n// This code is problematic for a couple of different reasons:\n// * it monitors the store to modify the store: this is perhaps better handled by a saga\n// * it makes importing this file impure by triggering a side-effect which may not be obvious\n// * it's not really located in the \"right place\": dialogs are applicable to non-plugins too\n// * it's nigh impossible to test as written\n//\n// It's worth fixing all of this, but I think this requires some refactoring.\nlet previousTriggerId = '';\nstore.subscribe(() => {\n    const state = store.getState();\n    const currentTriggerId = state.entities.integrations.dialogTriggerId;\n\n    if (currentTriggerId === previousTriggerId) {\n        return;\n    }\n\n    previousTriggerId = currentTriggerId;\n\n    const dialog = state.entities.integrations.dialog || {};\n    if (dialog.trigger_id !== currentTriggerId) {\n        return;\n    }\n\n    store.dispatch(openModal({modalId: ModalIdentifiers.INTERACTIVE_DIALOG, dialogType: InteractiveDialog}));\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {formatText} from 'utils/text_formatting';\n\n// The following import has intentional side effects. Do not remove without research.\nimport {openInteractiveDialog} from './interactive_dialog';\n\n// Common libraries exposed on window for plugins to use as Webpack externals.\nwindow.React = require('react');\nwindow.ReactDOM = require('react-dom');\nwindow.Redux = require('redux');\nwindow.ReactRedux = require('react-redux');\nwindow.ReactBootstrap = require('react-bootstrap');\nwindow.PostUtils = {formatText, messageHtmlToComponent};\nwindow.PropTypes = require('prop-types');\nwindow.PDFJS = require('pdfjs-dist');\nwindow.openInteractiveDialog = openInteractiveDialog;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {shouldShowTermsOfService} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadMeAndConfig} from 'actions/views/root';\n\nimport Root from './root.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const showTermsOfService = shouldShowTermsOfService(state);\n\n    return {\n        diagnosticsEnabled: config.DiagnosticsEnabled === 'true',\n        noAccounts: config.NoAccounts === 'true',\n        diagnosticId: config.DiagnosticId,\n        showTermsOfService,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadMeAndConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Root);\n"],"sourceRoot":""}