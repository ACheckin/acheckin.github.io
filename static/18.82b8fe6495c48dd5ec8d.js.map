{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/login/login_mfa.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","OAuthToEmail","constructor","super","e","preventDefault","state","password","passwordInput","current","value","error","Utils","setState","valid","passwordConfig","confirmPassword","passwordConfirmInput","oauthToEmail","currentType","email","data","follow_link","window","location","href","err","message","createRef","formClass","uiType","Constants","SAML_SERVICE","toUpperCase","values","type","onSubmit","submit","site","siteName","name","ref","placeholder","t","spellCheck","PropTypes","string","object","LoginMfa","token","target","trim","replace","loginId","saving","serverError","errorClass","handleSubmit","autoComplete","autoFocus","onChange","handleChange","disabled","localizeMessage","savingMessage","isRequired","func","EmailToOAuth","emailToOAuth","newType","showMfa","server_error_id","content","preSubmit","LDAPToEmail","Component","passwordError","confirmError","ldapPasswordError","ldapPassword","ldapPasswordInput","switchLdapToEmail","then","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","ldapError","emailPasswordInput","ldapId","ldapIdInput","emailToLdap","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","display","ClaimController","URLSearchParams","search","get","alt","src","logoImage","path","match","actions","shape","connect","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","dispatch","bindActionCreators"],"mappings":"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","file":"18.82b8fe6495c48dd5ec8d.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/67504a826caf7430e472b4240bb534d7.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to Email and Password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showMfa: false, password: ''};\n\n        this.passwordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n        var state = {};\n\n        var password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            }\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch Account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.Component {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        this.ldapPasswordInput = React.createRef();\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapPassword) => {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToLDAP extends React.Component {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n\n        this.emailPasswordInput = React.createRef();\n        this.ldapIdInput = React.createRef();\n        this.ldapPasswordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.emailPasswordInput.current && this.emailPasswordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.ldapIdInput.current && this.ldapIdInput.current.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.ldapPasswordInput.current && this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapId, ldapPassword) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref={this.emailPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref={this.ldapIdInput}\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch Account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            switchLdapToEmail: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n"],"sourceRoot":""}